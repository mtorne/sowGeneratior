/**
 * Object Storage Service API
 * Use Object Storage and Archive Storage APIs to manage buckets, objects, and related resources.
For more information, see [Overview of Object Storage](https://docs.oracle.com/iaas/Content/Object/Concepts/objectstorageoverview.htm) and
[Overview of Archive Storage](https://docs.oracle.com/iaas/Content/Archive/Concepts/archivestorageoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: opc_casper_users_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { ObjectStorageWaiter } from "./objectstorage-waiter";
declare const Breaker: any;
export declare enum ObjectStorageApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class ObjectStorageClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected static serviceEndpointTemplatePerRealm: {
        oc1: string;
    };
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": ObjectStorageWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new ObjectStorageWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): ObjectStorageWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): ObjectStorageWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Aborts an in-progress multipart upload and deletes all parts that have been uploaded.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AbortMultipartUploadRequest
     * @return AbortMultipartUploadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/AbortMultipartUpload.ts.html |here} to see how to use AbortMultipartUpload API.
     */
    abortMultipartUpload(abortMultipartUploadRequest: requests.AbortMultipartUploadRequest): Promise<responses.AbortMultipartUploadResponse>;
    /**
     * Cancels a work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest: requests.CancelWorkRequestRequest): Promise<responses.CancelWorkRequestResponse>;
    /**
     * Commits a multipart upload, which involves checking part numbers and entity tags (ETags) of the parts, to create an aggregate object.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CommitMultipartUploadRequest
     * @return CommitMultipartUploadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CommitMultipartUpload.ts.html |here} to see how to use CommitMultipartUpload API.
     */
    commitMultipartUpload(commitMultipartUploadRequest: requests.CommitMultipartUploadRequest): Promise<responses.CommitMultipartUploadResponse>;
    /**
       * Creates a request to copy an object within a region or to another region.
  * <p>
  See [Object Names](https://docs.oracle.com/iaas/Content/Object/Tasks/managingobjects.htm#namerequirements)
  * for object naming requirements.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CopyObjectRequest
       * @return CopyObjectResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CopyObject.ts.html |here} to see how to use CopyObject API.
       */
    copyObject(copyObjectRequest: requests.CopyObjectRequest): Promise<responses.CopyObjectResponse>;
    /**
     * Creates a bucket in the given namespace with a bucket name and optional user-defined metadata. Avoid entering
     * confidential information in bucket names.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateBucketRequest
     * @return CreateBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreateBucket.ts.html |here} to see how to use CreateBucket API.
     */
    createBucket(createBucketRequest: requests.CreateBucketRequest): Promise<responses.CreateBucketResponse>;
    /**
       * Starts a new multipart upload to a specific object in the given bucket in the given namespace.
  * <p>
  See [Object Names](https://docs.oracle.com/iaas/Content/Object/Tasks/managingobjects.htm#namerequirements)
  * for object naming requirements.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateMultipartUploadRequest
       * @return CreateMultipartUploadResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreateMultipartUpload.ts.html |here} to see how to use CreateMultipartUpload API.
       */
    createMultipartUpload(createMultipartUploadRequest: requests.CreateMultipartUploadRequest): Promise<responses.CreateMultipartUploadResponse>;
    /**
     * Creates a pre-authenticated request specific to the bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreatePreauthenticatedRequestRequest
     * @return CreatePreauthenticatedRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreatePreauthenticatedRequest.ts.html |here} to see how to use CreatePreauthenticatedRequest API.
     */
    createPreauthenticatedRequest(createPreauthenticatedRequestRequest: requests.CreatePreauthenticatedRequestRequest): Promise<responses.CreatePreauthenticatedRequestResponse>;
    /**
     * Create a PrivateEndpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreatePrivateEndpointRequest
     * @return CreatePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreatePrivateEndpoint.ts.html |here} to see how to use CreatePrivateEndpoint API.
     */
    createPrivateEndpoint(createPrivateEndpointRequest: requests.CreatePrivateEndpointRequest): Promise<responses.CreatePrivateEndpointResponse>;
    /**
     * Creates a replication policy for the specified bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateReplicationPolicyRequest
     * @return CreateReplicationPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreateReplicationPolicy.ts.html |here} to see how to use CreateReplicationPolicy API.
     */
    createReplicationPolicy(createReplicationPolicyRequest: requests.CreateReplicationPolicyRequest): Promise<responses.CreateReplicationPolicyResponse>;
    /**
     * Creates a new retention rule in the specified bucket. The new rule will take effect typically within 30 seconds.
     * Note that a maximum of 100 rules are supported on a bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateRetentionRuleRequest
     * @return CreateRetentionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/CreateRetentionRule.ts.html |here} to see how to use CreateRetentionRule API.
     */
    createRetentionRule(createRetentionRuleRequest: requests.CreateRetentionRuleRequest): Promise<responses.CreateRetentionRuleResponse>;
    /**
     * Deletes a bucket if the bucket is already empty. If the bucket is not empty, use
     * {@link #deleteObject(DeleteObjectRequest) deleteObject} first. In addition,
     * you cannot delete a bucket that has a multipart upload in progress or a pre-authenticated
     * request associated with that bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteBucketRequest
     * @return DeleteBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeleteBucket.ts.html |here} to see how to use DeleteBucket API.
     */
    deleteBucket(deleteBucketRequest: requests.DeleteBucketRequest): Promise<responses.DeleteBucketResponse>;
    /**
     * Deletes an object.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteObjectRequest
     * @return DeleteObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeleteObject.ts.html |here} to see how to use DeleteObject API.
     */
    deleteObject(deleteObjectRequest: requests.DeleteObjectRequest): Promise<responses.DeleteObjectResponse>;
    /**
     * Deletes the object lifecycle policy for the bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteObjectLifecyclePolicyRequest
     * @return DeleteObjectLifecyclePolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeleteObjectLifecyclePolicy.ts.html |here} to see how to use DeleteObjectLifecyclePolicy API.
     */
    deleteObjectLifecyclePolicy(deleteObjectLifecyclePolicyRequest: requests.DeleteObjectLifecyclePolicyRequest): Promise<responses.DeleteObjectLifecyclePolicyResponse>;
    /**
     * Deletes the pre-authenticated request for the bucket.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeletePreauthenticatedRequestRequest
     * @return DeletePreauthenticatedRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeletePreauthenticatedRequest.ts.html |here} to see how to use DeletePreauthenticatedRequest API.
     */
    deletePreauthenticatedRequest(deletePreauthenticatedRequestRequest: requests.DeletePreauthenticatedRequestRequest): Promise<responses.DeletePreauthenticatedRequestResponse>;
    /**
     * Deletes a Private Endpoint if it exists in the given namespace.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeletePrivateEndpointRequest
     * @return DeletePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeletePrivateEndpoint.ts.html |here} to see how to use DeletePrivateEndpoint API.
     */
    deletePrivateEndpoint(deletePrivateEndpointRequest: requests.DeletePrivateEndpointRequest): Promise<responses.DeletePrivateEndpointResponse>;
    /**
     * Deletes the replication policy associated with the source bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteReplicationPolicyRequest
     * @return DeleteReplicationPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeleteReplicationPolicy.ts.html |here} to see how to use DeleteReplicationPolicy API.
     */
    deleteReplicationPolicy(deleteReplicationPolicyRequest: requests.DeleteReplicationPolicyRequest): Promise<responses.DeleteReplicationPolicyResponse>;
    /**
     * Deletes the specified rule. The deletion takes effect typically within 30 seconds.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteRetentionRuleRequest
     * @return DeleteRetentionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/DeleteRetentionRule.ts.html |here} to see how to use DeleteRetentionRule API.
     */
    deleteRetentionRule(deleteRetentionRuleRequest: requests.DeleteRetentionRuleRequest): Promise<responses.DeleteRetentionRuleResponse>;
    /**
     * Gets the current representation of the given bucket in the given Object Storage namespace.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetBucketRequest
     * @return GetBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetBucket.ts.html |here} to see how to use GetBucket API.
     */
    getBucket(getBucketRequest: requests.GetBucketRequest): Promise<responses.GetBucketResponse>;
    /**
       * Each Oracle Cloud Infrastructure tenant is assigned one unique and uneditable Object Storage namespace. The namespace
  * is a system-generated string assigned during account creation. For some older tenancies, the namespace string may be
  * the tenancy name in all lower-case letters. You cannot edit a namespace.
  * <p>
  GetNamespace returns the name of the Object Storage namespace for the user making the request.
  * If an optional compartmentId query parameter is provided, GetNamespace returns the namespace name of the corresponding
  * tenancy, provided the user has access to it.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetNamespaceRequest
       * @return GetNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetNamespace.ts.html |here} to see how to use GetNamespace API.
       */
    getNamespace(getNamespaceRequest: requests.GetNamespaceRequest): Promise<responses.GetNamespaceResponse>;
    /**
       * Gets the metadata for the Object Storage namespace, which contains defaultS3CompartmentId and
  * defaultSwiftCompartmentId.
  * <p>
  Any user with the OBJECTSTORAGE_NAMESPACE_READ permission will be able to see the current metadata. If you are
  * not authorized, talk to an administrator. If you are an administrator who needs to write policies
  * to give users access, see
  * [Getting Started with Policies](https://docs.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetNamespaceMetadataRequest
       * @return GetNamespaceMetadataResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetNamespaceMetadata.ts.html |here} to see how to use GetNamespaceMetadata API.
       */
    getNamespaceMetadata(getNamespaceMetadataRequest: requests.GetNamespaceMetadataRequest): Promise<responses.GetNamespaceMetadataResponse>;
    /**
     * Gets the metadata and body of an object.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetObjectRequest
     * @return GetObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetObject.ts.html |here} to see how to use GetObject API.
     */
    getObject(getObjectRequest: requests.GetObjectRequest): Promise<responses.GetObjectResponse>;
    /**
     * Gets the object lifecycle policy for the bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetObjectLifecyclePolicyRequest
     * @return GetObjectLifecyclePolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetObjectLifecyclePolicy.ts.html |here} to see how to use GetObjectLifecyclePolicy API.
     */
    getObjectLifecyclePolicy(getObjectLifecyclePolicyRequest: requests.GetObjectLifecyclePolicyRequest): Promise<responses.GetObjectLifecyclePolicyResponse>;
    /**
     * Gets the pre-authenticated request for the bucket.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPreauthenticatedRequestRequest
     * @return GetPreauthenticatedRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetPreauthenticatedRequest.ts.html |here} to see how to use GetPreauthenticatedRequest API.
     */
    getPreauthenticatedRequest(getPreauthenticatedRequestRequest: requests.GetPreauthenticatedRequestRequest): Promise<responses.GetPreauthenticatedRequestResponse>;
    /**
     * Gets the current representation of the given Private Endpoint in the given Object Storage namespace.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPrivateEndpointRequest
     * @return GetPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetPrivateEndpoint.ts.html |here} to see how to use GetPrivateEndpoint API.
     */
    getPrivateEndpoint(getPrivateEndpointRequest: requests.GetPrivateEndpointRequest): Promise<responses.GetPrivateEndpointResponse>;
    /**
     * Get the replication policy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetReplicationPolicyRequest
     * @return GetReplicationPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetReplicationPolicy.ts.html |here} to see how to use GetReplicationPolicy API.
     */
    getReplicationPolicy(getReplicationPolicyRequest: requests.GetReplicationPolicyRequest): Promise<responses.GetReplicationPolicyResponse>;
    /**
     * Get the specified retention rule.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRetentionRuleRequest
     * @return GetRetentionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetRetentionRule.ts.html |here} to see how to use GetRetentionRule API.
     */
    getRetentionRule(getRetentionRuleRequest: requests.GetRetentionRuleRequest): Promise<responses.GetRetentionRuleResponse>;
    /**
     * Gets the status of the work request for the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Efficiently checks to see if a bucket exists and gets the current entity tag (ETag) for the bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param HeadBucketRequest
     * @return HeadBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/HeadBucket.ts.html |here} to see how to use HeadBucket API.
     */
    headBucket(headBucketRequest: requests.HeadBucketRequest): Promise<responses.HeadBucketResponse>;
    /**
     * Gets the user-defined metadata and entity tag (ETag) for an object.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param HeadObjectRequest
     * @return HeadObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/HeadObject.ts.html |here} to see how to use HeadObject API.
     */
    headObject(headObjectRequest: requests.HeadObjectRequest): Promise<responses.HeadObjectResponse>;
    /**
       * Gets a list of all BucketSummary items in a compartment. A BucketSummary contains only summary fields for the bucket
  * and does not contain fields like the user-defined metadata.
  * <p>
  ListBuckets returns a BucketSummary containing at most 1000 buckets. To paginate through more buckets, use the returned
  * `opc-next-page` value with the `page` request parameter.
  * <p>
  To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
  * talk to an administrator. If you are an administrator who needs to write policies to give users access, see
  * [Getting Started with Policies](https://docs.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListBucketsRequest
       * @return ListBucketsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListBuckets.ts.html |here} to see how to use ListBuckets API.
       */
    listBuckets(listBucketsRequest: requests.ListBucketsRequest): Promise<responses.ListBucketsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listBucketsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.BucketSummary objects
     * contained in responses from the listBuckets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBuckets(request: requests.ListBucketsRequest): AsyncIterableIterator<model.BucketSummary>;
    /**
     * NOTE: This function is deprecated in favor of listBucketsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listBuckets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBucketsResponses(request: requests.ListBucketsRequest): AsyncIterableIterator<responses.ListBucketsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.BucketSummary objects
     * contained in responses from the listBuckets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listBucketsRecordIterator(request: requests.ListBucketsRequest): AsyncIterableIterator<model.BucketSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listBuckets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listBucketsResponseIterator(request: requests.ListBucketsRequest): AsyncIterableIterator<responses.ListBucketsResponse>;
    /**
     * Lists the parts of an in-progress multipart upload.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMultipartUploadPartsRequest
     * @return ListMultipartUploadPartsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListMultipartUploadParts.ts.html |here} to see how to use ListMultipartUploadParts API.
     */
    listMultipartUploadParts(listMultipartUploadPartsRequest: requests.ListMultipartUploadPartsRequest): Promise<responses.ListMultipartUploadPartsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listMultipartUploadPartsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.MultipartUploadPartSummary objects
     * contained in responses from the listMultipartUploadParts operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMultipartUploadParts(request: requests.ListMultipartUploadPartsRequest): AsyncIterableIterator<model.MultipartUploadPartSummary>;
    /**
     * NOTE: This function is deprecated in favor of listMultipartUploadPartsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listMultipartUploadParts operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMultipartUploadPartsResponses(request: requests.ListMultipartUploadPartsRequest): AsyncIterableIterator<responses.ListMultipartUploadPartsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.MultipartUploadPartSummary objects
     * contained in responses from the listMultipartUploadParts operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMultipartUploadPartsRecordIterator(request: requests.ListMultipartUploadPartsRequest): AsyncIterableIterator<model.MultipartUploadPartSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMultipartUploadParts operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMultipartUploadPartsResponseIterator(request: requests.ListMultipartUploadPartsRequest): AsyncIterableIterator<responses.ListMultipartUploadPartsResponse>;
    /**
     * Lists all of the in-progress multipart uploads for the given bucket in the given Object Storage namespace.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMultipartUploadsRequest
     * @return ListMultipartUploadsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListMultipartUploads.ts.html |here} to see how to use ListMultipartUploads API.
     */
    listMultipartUploads(listMultipartUploadsRequest: requests.ListMultipartUploadsRequest): Promise<responses.ListMultipartUploadsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listMultipartUploadsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.MultipartUpload objects
     * contained in responses from the listMultipartUploads operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMultipartUploads(request: requests.ListMultipartUploadsRequest): AsyncIterableIterator<model.MultipartUpload>;
    /**
     * NOTE: This function is deprecated in favor of listMultipartUploadsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listMultipartUploads operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMultipartUploadsResponses(request: requests.ListMultipartUploadsRequest): AsyncIterableIterator<responses.ListMultipartUploadsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.MultipartUpload objects
     * contained in responses from the listMultipartUploads operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMultipartUploadsRecordIterator(request: requests.ListMultipartUploadsRequest): AsyncIterableIterator<model.MultipartUpload>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMultipartUploads operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMultipartUploadsResponseIterator(request: requests.ListMultipartUploadsRequest): AsyncIterableIterator<responses.ListMultipartUploadsResponse>;
    /**
       * Lists the object versions in a bucket.
  * <p>
  ListObjectVersions returns an ObjectVersionCollection containing at most 1000 object versions. To paginate through
  * more object versions, use the returned `opc-next-page` value with the `page` request parameter.
  * <p>
  To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
  * talk to an administrator. If you are an administrator who needs to write policies to give users access, see
  * [Getting Started with Policies](https://docs.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListObjectVersionsRequest
       * @return ListObjectVersionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListObjectVersions.ts.html |here} to see how to use ListObjectVersions API.
       */
    listObjectVersions(listObjectVersionsRequest: requests.ListObjectVersionsRequest): Promise<responses.ListObjectVersionsResponse>;
    /**
       * Lists the objects in a bucket. By default, ListObjects returns object names only. See the `fields`
  * parameter for other fields that you can optionally include in ListObjects response.
  * <p>
  ListObjects returns at most 1000 objects. To paginate through more objects, use the returned 'nextStartWith'
  * value with the 'start' parameter. To filter which objects ListObjects returns, use the 'start' and 'end'
  * parameters.
  * <p>
  To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
  * talk to an administrator. If you are an administrator who needs to write policies to give users access, see
  * [Getting Started with Policies](https://docs.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListObjectsRequest
       * @return ListObjectsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListObjects.ts.html |here} to see how to use ListObjects API.
       */
    listObjects(listObjectsRequest: requests.ListObjectsRequest): Promise<responses.ListObjectsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listObjectsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ObjectSummary objects
     * contained in responses from the listObjects operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllObjects(request: requests.ListObjectsRequest): AsyncIterableIterator<model.ObjectSummary>;
    /**
     * NOTE: This function is deprecated in favor of listObjectsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listObjects operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllObjectsResponses(request: requests.ListObjectsRequest): AsyncIterableIterator<responses.ListObjectsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ObjectSummary objects
     * contained in responses from the listObjects operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listObjectsRecordIterator(request: requests.ListObjectsRequest): AsyncIterableIterator<model.ObjectSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listObjects operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listObjectsResponseIterator(request: requests.ListObjectsRequest): AsyncIterableIterator<responses.ListObjectsResponse>;
    /**
     * Lists pre-authenticated requests for the bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPreauthenticatedRequestsRequest
     * @return ListPreauthenticatedRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListPreauthenticatedRequests.ts.html |here} to see how to use ListPreauthenticatedRequests API.
     */
    listPreauthenticatedRequests(listPreauthenticatedRequestsRequest: requests.ListPreauthenticatedRequestsRequest): Promise<responses.ListPreauthenticatedRequestsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listPreauthenticatedRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.PreauthenticatedRequestSummary objects
     * contained in responses from the listPreauthenticatedRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPreauthenticatedRequests(request: requests.ListPreauthenticatedRequestsRequest): AsyncIterableIterator<model.PreauthenticatedRequestSummary>;
    /**
     * NOTE: This function is deprecated in favor of listPreauthenticatedRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listPreauthenticatedRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPreauthenticatedRequestsResponses(request: requests.ListPreauthenticatedRequestsRequest): AsyncIterableIterator<responses.ListPreauthenticatedRequestsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.PreauthenticatedRequestSummary objects
     * contained in responses from the listPreauthenticatedRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPreauthenticatedRequestsRecordIterator(request: requests.ListPreauthenticatedRequestsRequest): AsyncIterableIterator<model.PreauthenticatedRequestSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPreauthenticatedRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPreauthenticatedRequestsResponseIterator(request: requests.ListPreauthenticatedRequestsRequest): AsyncIterableIterator<responses.ListPreauthenticatedRequestsResponse>;
    /**
     * Gets a list of all PrivateEndpointSummary in a compartment associated with a namespace.
     * To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
     * talk to an administrator. If you are an administrator who needs to write policies to give users access, see
     * [Getting Started with Policies](https://docs.oracle.com/iaas/Content/Identity/Concepts/policygetstarted.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPrivateEndpointsRequest
     * @return ListPrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListPrivateEndpoints.ts.html |here} to see how to use ListPrivateEndpoints API.
     */
    listPrivateEndpoints(listPrivateEndpointsRequest: requests.ListPrivateEndpointsRequest): Promise<responses.ListPrivateEndpointsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listPrivateEndpointsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.PrivateEndpointSummary objects
     * contained in responses from the listPrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPrivateEndpoints(request: requests.ListPrivateEndpointsRequest): AsyncIterableIterator<model.PrivateEndpointSummary>;
    /**
     * NOTE: This function is deprecated in favor of listPrivateEndpointsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listPrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPrivateEndpointsResponses(request: requests.ListPrivateEndpointsRequest): AsyncIterableIterator<responses.ListPrivateEndpointsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.PrivateEndpointSummary objects
     * contained in responses from the listPrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPrivateEndpointsRecordIterator(request: requests.ListPrivateEndpointsRequest): AsyncIterableIterator<model.PrivateEndpointSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPrivateEndpointsResponseIterator(request: requests.ListPrivateEndpointsRequest): AsyncIterableIterator<responses.ListPrivateEndpointsResponse>;
    /**
     * List the replication policies associated with a bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListReplicationPoliciesRequest
     * @return ListReplicationPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListReplicationPolicies.ts.html |here} to see how to use ListReplicationPolicies API.
     */
    listReplicationPolicies(listReplicationPoliciesRequest: requests.ListReplicationPoliciesRequest): Promise<responses.ListReplicationPoliciesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listReplicationPoliciesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ReplicationPolicySummary objects
     * contained in responses from the listReplicationPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplicationPolicies(request: requests.ListReplicationPoliciesRequest): AsyncIterableIterator<model.ReplicationPolicySummary>;
    /**
     * NOTE: This function is deprecated in favor of listReplicationPoliciesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listReplicationPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplicationPoliciesResponses(request: requests.ListReplicationPoliciesRequest): AsyncIterableIterator<responses.ListReplicationPoliciesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ReplicationPolicySummary objects
     * contained in responses from the listReplicationPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listReplicationPoliciesRecordIterator(request: requests.ListReplicationPoliciesRequest): AsyncIterableIterator<model.ReplicationPolicySummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listReplicationPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listReplicationPoliciesResponseIterator(request: requests.ListReplicationPoliciesRequest): AsyncIterableIterator<responses.ListReplicationPoliciesResponse>;
    /**
     * List the replication sources of a destination bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListReplicationSourcesRequest
     * @return ListReplicationSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListReplicationSources.ts.html |here} to see how to use ListReplicationSources API.
     */
    listReplicationSources(listReplicationSourcesRequest: requests.ListReplicationSourcesRequest): Promise<responses.ListReplicationSourcesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listReplicationSourcesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ReplicationSource objects
     * contained in responses from the listReplicationSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplicationSources(request: requests.ListReplicationSourcesRequest): AsyncIterableIterator<model.ReplicationSource>;
    /**
     * NOTE: This function is deprecated in favor of listReplicationSourcesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listReplicationSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplicationSourcesResponses(request: requests.ListReplicationSourcesRequest): AsyncIterableIterator<responses.ListReplicationSourcesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ReplicationSource objects
     * contained in responses from the listReplicationSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listReplicationSourcesRecordIterator(request: requests.ListReplicationSourcesRequest): AsyncIterableIterator<model.ReplicationSource>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listReplicationSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listReplicationSourcesResponseIterator(request: requests.ListReplicationSourcesRequest): AsyncIterableIterator<responses.ListReplicationSourcesResponse>;
    /**
     * List the retention rules for a bucket. The retention rules are sorted based on creation time,
     * with the most recently created retention rule returned first.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRetentionRulesRequest
     * @return ListRetentionRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListRetentionRules.ts.html |here} to see how to use ListRetentionRules API.
     */
    listRetentionRules(listRetentionRulesRequest: requests.ListRetentionRulesRequest): Promise<responses.ListRetentionRulesResponse>;
    /**
     * Lists the errors of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<model.WorkRequestError>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsRecordIterator(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<model.WorkRequestError>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsResponseIterator(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse>;
    /**
     * Lists the logs of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<model.WorkRequestLogEntry>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<responses.ListWorkRequestLogsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsRecordIterator(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<model.WorkRequestLogEntry>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsResponseIterator(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<model.WorkRequestSummary>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsRecordIterator(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<model.WorkRequestSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsResponseIterator(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
    /**
     * Stops replication to the destination bucket and removes the replication policy. When the replication
     * policy was created, this destination bucket became read-only except for new and changed objects replicated
     * automatically from the source bucket. MakeBucketWritable removes the replication policy. This bucket is no
     * longer the target for replication and is now writable, allowing users to make changes to bucket contents.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param MakeBucketWritableRequest
     * @return MakeBucketWritableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/MakeBucketWritable.ts.html |here} to see how to use MakeBucketWritable API.
     */
    makeBucketWritable(makeBucketWritableRequest: requests.MakeBucketWritableRequest): Promise<responses.MakeBucketWritableResponse>;
    /**
       * Creates a new object or overwrites an existing object with the same name. The maximum object size allowed by
  * PutObject is 50 GiB.
  * <p>
  See [Object Names](https://docs.oracle.com/iaas/Content/Object/Tasks/managingobjects.htm#namerequirements)
  * for object naming requirements.
  * <p>
  See [Special Instructions for Object Storage PUT](https://docs.oracle.com/iaas/Content/API/Concepts/signingrequests.htm#ObjectStoragePut)
  * for request signature requirements.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param PutObjectRequest
       * @return PutObjectResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/PutObject.ts.html |here} to see how to use PutObject API.
       */
    putObject(putObjectRequest: requests.PutObjectRequest): Promise<responses.PutObjectResponse>;
    /**
     * Creates or replaces the object lifecycle policy for the bucket.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PutObjectLifecyclePolicyRequest
     * @return PutObjectLifecyclePolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/PutObjectLifecyclePolicy.ts.html |here} to see how to use PutObjectLifecyclePolicy API.
     */
    putObjectLifecyclePolicy(putObjectLifecyclePolicyRequest: requests.PutObjectLifecyclePolicyRequest): Promise<responses.PutObjectLifecyclePolicyResponse>;
    /**
       * Re-encrypts the unique data encryption key that encrypts each object written to the bucket by using the most recent
  * version of the master encryption key assigned to the bucket. (All data encryption keys are encrypted by a master
  * encryption key. Master encryption keys are assigned to buckets and managed by Oracle by default, but you can assign
  * a key that you created and control through the Oracle Cloud Infrastructure Key Management service.) The kmsKeyId property
  * of the bucket determines which master encryption key is assigned to the bucket. If you assigned a different Key Management
  * master encryption key to the bucket, you can call this API to re-encrypt all data encryption keys with the newly
  * assigned key. Similarly, you might want to re-encrypt all data encryption keys if the assigned key has been rotated to
  * a new key version since objects were last added to the bucket. If you call this API and there is no kmsKeyId associated
  * with the bucket, the call will fail.
  * <p>
  Calling this API starts a work request task to re-encrypt the data encryption key of all objects in the bucket. Only
  * objects created before the time of the API call will be re-encrypted. The call can take a long time, depending on how many
  * objects are in the bucket and how big they are. This API returns a work request ID that you can use to retrieve the status
  * of the work request task.
  * All the versions of objects will be re-encrypted whether versioning is enabled or suspended at the bucket.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ReencryptBucketRequest
       * @return ReencryptBucketResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ReencryptBucket.ts.html |here} to see how to use ReencryptBucket API.
       */
    reencryptBucket(reencryptBucketRequest: requests.ReencryptBucketRequest): Promise<responses.ReencryptBucketResponse>;
    /**
       * Re-encrypts the data encryption keys that encrypt the object and its chunks. By default, when you create a bucket, the Object Storage
  * service manages the master encryption key used to encrypt each object's data encryption keys. The encryption mechanism that you specify for
  * the bucket applies to the objects it contains.
  * <p>
  You can alternatively employ one of these encryption strategies for an object:
  * <p>
  - You can assign a key that you created and control through the Oracle Cloud Infrastructure Vault service.
  * <p>
  - You can encrypt an object using your own encryption key. The key you supply is known as a customer-provided encryption key (SSE-C).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ReencryptObjectRequest
       * @return ReencryptObjectResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/ReencryptObject.ts.html |here} to see how to use ReencryptObject API.
       */
    reencryptObject(reencryptObjectRequest: requests.ReencryptObjectRequest): Promise<responses.ReencryptObjectResponse>;
    /**
       * Rename an object in the given Object Storage namespace.
  * <p>
  See [Object Names](https://docs.oracle.com/iaas/Content/Object/Tasks/managingobjects.htm#namerequirements)
  * for object naming requirements.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param RenameObjectRequest
       * @return RenameObjectResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/RenameObject.ts.html |here} to see how to use RenameObject API.
       */
    renameObject(renameObjectRequest: requests.RenameObjectRequest): Promise<responses.RenameObjectResponse>;
    /**
     * Restores the object specified by the objectName parameter.
     * By default object will be restored for 24 hours. Duration can be configured using the hours parameter.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RestoreObjectsRequest
     * @return RestoreObjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/RestoreObjects.ts.html |here} to see how to use RestoreObjects API.
     */
    restoreObjects(restoreObjectsRequest: requests.RestoreObjectsRequest): Promise<responses.RestoreObjectsResponse>;
    /**
       * Performs a partial or full update of a bucket's user-defined metadata.
  * <p>
  Use UpdateBucket to move a bucket from one compartment to another within the same tenancy. Supply the compartmentID
  * of the compartment that you want to move the bucket to. For more information about moving resources between compartments,
  * see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateBucketRequest
       * @return UpdateBucketResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UpdateBucket.ts.html |here} to see how to use UpdateBucket API.
       */
    updateBucket(updateBucketRequest: requests.UpdateBucketRequest): Promise<responses.UpdateBucketResponse>;
    /**
       * By default, buckets created using the Amazon S3 Compatibility API or the Swift API are created in the root
  * compartment of the Oracle Cloud Infrastructure tenancy.
  * <p>
  You can change the default Swift/Amazon S3 compartmentId designation to a different compartmentId. All
  * subsequent bucket creations will use the new default compartment, but no previously created
  * buckets will be modified. A user must have OBJECTSTORAGE_NAMESPACE_UPDATE permission to make changes to the default
  * compartments for Amazon S3 and Swift.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateNamespaceMetadataRequest
       * @return UpdateNamespaceMetadataResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UpdateNamespaceMetadata.ts.html |here} to see how to use UpdateNamespaceMetadata API.
       */
    updateNamespaceMetadata(updateNamespaceMetadataRequest: requests.UpdateNamespaceMetadataRequest): Promise<responses.UpdateNamespaceMetadataResponse>;
    /**
     * Changes the storage tier of the object specified by the objectName parameter.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateObjectStorageTierRequest
     * @return UpdateObjectStorageTierResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UpdateObjectStorageTier.ts.html |here} to see how to use UpdateObjectStorageTier API.
     */
    updateObjectStorageTier(updateObjectStorageTierRequest: requests.UpdateObjectStorageTierRequest): Promise<responses.UpdateObjectStorageTierResponse>;
    /**
       * Performs a partial or full update of a user-defined data associated with the Private Endpoint.
  * <p>
  Use UpdatePrivateEndpoint to move a Private Endpoint from one compartment to another within the same tenancy. Supply the compartmentID
  * of the compartment that you want to move the Private Endpoint to. Or use it to update the name, subnetId, endpointFqdn or privateEndpointIp or accessTargets of the Private Endpoint.
  * For more information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  This API follows replace semantics (rather than merge semantics). That means if the body provides values for
  * parameters and the resource has exisiting ones, this operation will replace those existing values.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdatePrivateEndpointRequest
       * @return UpdatePrivateEndpointResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UpdatePrivateEndpoint.ts.html |here} to see how to use UpdatePrivateEndpoint API.
       */
    updatePrivateEndpoint(updatePrivateEndpointRequest: requests.UpdatePrivateEndpointRequest): Promise<responses.UpdatePrivateEndpointResponse>;
    /**
     * Updates the specified retention rule. Rule changes take effect typically within 30 seconds.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateRetentionRuleRequest
     * @return UpdateRetentionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UpdateRetentionRule.ts.html |here} to see how to use UpdateRetentionRule API.
     */
    updateRetentionRule(updateRetentionRuleRequest: requests.UpdateRetentionRuleRequest): Promise<responses.UpdateRetentionRuleResponse>;
    /**
     * Uploads a single part of a multipart upload.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UploadPartRequest
     * @return UploadPartResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/objectstorage/UploadPart.ts.html |here} to see how to use UploadPart API.
     */
    uploadPart(uploadPartRequest: requests.UploadPartRequest): Promise<responses.UploadPartResponse>;
}
export {};
