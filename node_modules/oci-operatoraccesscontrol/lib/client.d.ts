/**
 * OperatorAccessControl API
 * Operator Access Control enables you to control the time duration and the actions an Oracle operator can perform on your Exadata Cloud@Customer infrastructure.
Using logging service, you can view a near real-time audit report of all actions performed by an Oracle operator.

Use the table of contents and search tool to explore the OperatorAccessControl API.

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { AccessRequestsWaiter } from "./accessrequests-waiter";
import { OperatorControlWaiter } from "./operatorcontrol-waiter";
import { OperatorControlAssignmentWaiter } from "./operatorcontrolassignment-waiter";
declare const Breaker: any;
export declare enum AccessRequestsApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class AccessRequestsClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": AccessRequestsWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new AccessRequestsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): AccessRequestsWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): AccessRequestsWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Approves an access request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ApproveAccessRequestRequest
     * @return ApproveAccessRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/ApproveAccessRequest.ts.html |here} to see how to use ApproveAccessRequest API.
     */
    approveAccessRequest(approveAccessRequestRequest: requests.ApproveAccessRequestRequest): Promise<responses.ApproveAccessRequestResponse>;
    /**
     * Gets details of an access request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAccessRequestRequest
     * @return GetAccessRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/GetAccessRequest.ts.html |here} to see how to use GetAccessRequest API.
     */
    getAccessRequest(getAccessRequestRequest: requests.GetAccessRequestRequest): Promise<responses.GetAccessRequestResponse>;
    /**
     * Gets the Audit Log Report for the given access requestId.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAuditLogReportRequest
     * @return GetAuditLogReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/GetAuditLogReport.ts.html |here} to see how to use GetAuditLogReport API.
     */
    getAuditLogReport(getAuditLogReportRequest: requests.GetAuditLogReportRequest): Promise<responses.GetAuditLogReportResponse>;
    /**
     * Posts query for additional information for the given access request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param InteractionRequestRequest
     * @return InteractionRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/InteractionRequest.ts.html |here} to see how to use InteractionRequest API.
     */
    interactionRequest(interactionRequestRequest: requests.InteractionRequestRequest): Promise<responses.InteractionRequestResponse>;
    /**
     * Returns a history of all status associated with the accessRequestId.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAccessRequestHistoriesRequest
     * @return ListAccessRequestHistoriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/ListAccessRequestHistories.ts.html |here} to see how to use ListAccessRequestHistories API.
     */
    listAccessRequestHistories(listAccessRequestHistoriesRequest: requests.ListAccessRequestHistoriesRequest): Promise<responses.ListAccessRequestHistoriesResponse>;
    /**
     * Lists all access requests in the compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAccessRequestsRequest
     * @return ListAccessRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/ListAccessRequests.ts.html |here} to see how to use ListAccessRequests API.
     */
    listAccessRequests(listAccessRequestsRequest: requests.ListAccessRequestsRequest): Promise<responses.ListAccessRequestsResponse>;
    /**
     * Lists the MoreInformation interaction between customer and operators.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListInteractionsRequest
     * @return ListInteractionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/ListInteractions.ts.html |here} to see how to use ListInteractions API.
     */
    listInteractions(listInteractionsRequest: requests.ListInteractionsRequest): Promise<responses.ListInteractionsResponse>;
    /**
     * Rejects an access request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RejectAccessRequestRequest
     * @return RejectAccessRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/RejectAccessRequest.ts.html |here} to see how to use RejectAccessRequest API.
     */
    rejectAccessRequest(rejectAccessRequestRequest: requests.RejectAccessRequestRequest): Promise<responses.RejectAccessRequestResponse>;
    /**
     * Reviews the access request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ReviewAccessRequestRequest
     * @return ReviewAccessRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/ReviewAccessRequest.ts.html |here} to see how to use ReviewAccessRequest API.
     */
    reviewAccessRequest(reviewAccessRequestRequest: requests.ReviewAccessRequestRequest): Promise<responses.ReviewAccessRequestResponse>;
    /**
     * Revokes an already approved access request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RevokeAccessRequestRequest
     * @return RevokeAccessRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/RevokeAccessRequest.ts.html |here} to see how to use RevokeAccessRequest API.
     */
    revokeAccessRequest(revokeAccessRequestRequest: requests.RevokeAccessRequestRequest): Promise<responses.RevokeAccessRequestResponse>;
}
export declare enum OperatorActionsApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class OperatorActionsClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Gets the operator action associated with the specified operator action ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOperatorActionRequest
     * @return GetOperatorActionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/GetOperatorAction.ts.html |here} to see how to use GetOperatorAction API.
     */
    getOperatorAction(getOperatorActionRequest: requests.GetOperatorActionRequest): Promise<responses.GetOperatorActionResponse>;
    /**
     * Lists all the OperatorActions available in the system.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOperatorActionsRequest
     * @return ListOperatorActionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/ListOperatorActions.ts.html |here} to see how to use ListOperatorActions API.
     */
    listOperatorActions(listOperatorActionsRequest: requests.ListOperatorActionsRequest): Promise<responses.ListOperatorActionsResponse>;
}
export declare enum OperatorControlApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class OperatorControlClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": OperatorControlWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new OperatorControlWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): OperatorControlWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): OperatorControlWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Moves the Operator Control resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeOperatorControlCompartmentRequest
     * @return ChangeOperatorControlCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/ChangeOperatorControlCompartment.ts.html |here} to see how to use ChangeOperatorControlCompartment API.
     */
    changeOperatorControlCompartment(changeOperatorControlCompartmentRequest: requests.ChangeOperatorControlCompartmentRequest): Promise<responses.ChangeOperatorControlCompartmentResponse>;
    /**
     * Creates an Operator Control.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOperatorControlRequest
     * @return CreateOperatorControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/CreateOperatorControl.ts.html |here} to see how to use CreateOperatorControl API.
     */
    createOperatorControl(createOperatorControlRequest: requests.CreateOperatorControlRequest): Promise<responses.CreateOperatorControlResponse>;
    /**
     * Deletes an Operator Control. You cannot delete an Operator Control if it is assigned to govern any target resource currently or in the future.
     * In that case, first, delete all of the current and future assignments before deleting the Operator Control. An Operator Control that was previously assigned to a target
     * resource is marked as DELETED following a successful deletion. However, it is not completely deleted from the system. This is to ensure auditing information for the accesses
     * done under the Operator Control is preserved for future needs. The system purges the deleted Operator Control only when all of the audit data associated with the
     * Operator Control are also deleted. Therefore, you cannot reuse the name of the deleted Operator Control until the system purges the Operator Control.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOperatorControlRequest
     * @return DeleteOperatorControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/DeleteOperatorControl.ts.html |here} to see how to use DeleteOperatorControl API.
     */
    deleteOperatorControl(deleteOperatorControlRequest: requests.DeleteOperatorControlRequest): Promise<responses.DeleteOperatorControlResponse>;
    /**
     * Gets the Operator Control associated with the specified Operator Control ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOperatorControlRequest
     * @return GetOperatorControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/GetOperatorControl.ts.html |here} to see how to use GetOperatorControl API.
     */
    getOperatorControl(getOperatorControlRequest: requests.GetOperatorControlRequest): Promise<responses.GetOperatorControlResponse>;
    /**
     * Lists the operator controls in the compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOperatorControlsRequest
     * @return ListOperatorControlsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/ListOperatorControls.ts.html |here} to see how to use ListOperatorControls API.
     */
    listOperatorControls(listOperatorControlsRequest: requests.ListOperatorControlsRequest): Promise<responses.ListOperatorControlsResponse>;
    /**
     * Modifies the existing OperatorControl for a given operator control id except the operator control id.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOperatorControlRequest
     * @return UpdateOperatorControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/UpdateOperatorControl.ts.html |here} to see how to use UpdateOperatorControl API.
     */
    updateOperatorControl(updateOperatorControlRequest: requests.UpdateOperatorControlRequest): Promise<responses.UpdateOperatorControlResponse>;
}
export declare enum OperatorControlAssignmentApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class OperatorControlAssignmentClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": OperatorControlAssignmentWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new OperatorControlAssignmentWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): OperatorControlAssignmentWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): OperatorControlAssignmentWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Changes the compartment of the specified Operator Control assignment ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeOperatorControlAssignmentCompartmentRequest
     * @return ChangeOperatorControlAssignmentCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/ChangeOperatorControlAssignmentCompartment.ts.html |here} to see how to use ChangeOperatorControlAssignmentCompartment API.
     */
    changeOperatorControlAssignmentCompartment(changeOperatorControlAssignmentCompartmentRequest: requests.ChangeOperatorControlAssignmentCompartmentRequest): Promise<responses.ChangeOperatorControlAssignmentCompartmentResponse>;
    /**
     * Creates an Operator Control Assignment resource. In effect, this brings the target resource under the governance of the Operator Control for specified time duration.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOperatorControlAssignmentRequest
     * @return CreateOperatorControlAssignmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/CreateOperatorControlAssignment.ts.html |here} to see how to use CreateOperatorControlAssignment API.
     */
    createOperatorControlAssignment(createOperatorControlAssignmentRequest: requests.CreateOperatorControlAssignmentRequest): Promise<responses.CreateOperatorControlAssignmentResponse>;
    /**
     * Deletes the specified Operator Control Assignment. This has the effect of unassigning the specific Operator Control from the target resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOperatorControlAssignmentRequest
     * @return DeleteOperatorControlAssignmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/DeleteOperatorControlAssignment.ts.html |here} to see how to use DeleteOperatorControlAssignment API.
     */
    deleteOperatorControlAssignment(deleteOperatorControlAssignmentRequest: requests.DeleteOperatorControlAssignmentRequest): Promise<responses.DeleteOperatorControlAssignmentResponse>;
    /**
     * Returns the status of assignment validation associated with the assignmentId and the executionId.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAssignmentValidationStatusRequest
     * @return GetAssignmentValidationStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/GetAssignmentValidationStatus.ts.html |here} to see how to use GetAssignmentValidationStatus API.
     */
    getAssignmentValidationStatus(getAssignmentValidationStatusRequest: requests.GetAssignmentValidationStatusRequest): Promise<responses.GetAssignmentValidationStatusResponse>;
    /**
     * Gets the details of an Operator Control Assignment of the specified ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOperatorControlAssignmentRequest
     * @return GetOperatorControlAssignmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/GetOperatorControlAssignment.ts.html |here} to see how to use GetOperatorControlAssignment API.
     */
    getOperatorControlAssignment(getOperatorControlAssignmentRequest: requests.GetOperatorControlAssignmentRequest): Promise<responses.GetOperatorControlAssignmentResponse>;
    /**
     * Lists all Operator Control Assignments.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOperatorControlAssignmentsRequest
     * @return ListOperatorControlAssignmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/ListOperatorControlAssignments.ts.html |here} to see how to use ListOperatorControlAssignments API.
     */
    listOperatorControlAssignments(listOperatorControlAssignmentsRequest: requests.ListOperatorControlAssignmentsRequest): Promise<responses.ListOperatorControlAssignmentsResponse>;
    /**
     * Modifies the existing Operator Control assignment of the specified Operator Control assignment ID. Modifying the assignment does not change the Operator Control assignment ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOperatorControlAssignmentRequest
     * @return UpdateOperatorControlAssignmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/UpdateOperatorControlAssignment.ts.html |here} to see how to use UpdateOperatorControlAssignment API.
     */
    updateOperatorControlAssignment(updateOperatorControlAssignmentRequest: requests.UpdateOperatorControlAssignmentRequest): Promise<responses.UpdateOperatorControlAssignmentResponse>;
    /**
     * Validates the assignment for the specified Operator Control Assignment ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ValidateOperatorAssignmentRequest
     * @return ValidateOperatorAssignmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/operatoraccesscontrol/ValidateOperatorAssignment.ts.html |here} to see how to use ValidateOperatorAssignment API.
     */
    validateOperatorAssignment(validateOperatorAssignmentRequest: requests.ValidateOperatorAssignmentRequest): Promise<responses.ValidateOperatorAssignmentResponse>;
}
export {};
