"use strict";
/**
 * OperatorAccessControl API
 * Operator Access Control enables you to control the time duration and the actions an Oracle operator can perform on your Exadata Cloud@Customer infrastructure.
Using logging service, you can view a near real-time audit report of all actions performed by an Oracle operator.

Use the table of contents and search tool to explore the OperatorAccessControl API.

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperatorActionCategories = void 0;
/**
 * Operator action categories
 * - \"Service Diagnostics: Allows non-privileged read-only access to the layer of the system.  No privileged commands are available under this operator action.\"
 * - \"Service Management: Allows non-root services to be restarted and maintained.\"
 * - \"System Management: Allows root services pertinent to the layer to be restarted, all processes to be restarted.\"
 * - \"Full Administration: Allows full root access without any constraints.\"
 * - \"Cell Management: Only applicable to cell server layer of Exadata. Allows cell management actions.\"
 *
 **/
var OperatorActionCategories;
(function (OperatorActionCategories) {
    OperatorActionCategories["Servicediagnostics"] = "SERVICEDIAGNOSTICS";
    OperatorActionCategories["Servicemanagement"] = "SERVICEMANAGEMENT";
    OperatorActionCategories["Systemmanagement"] = "SYSTEMMANAGEMENT";
    OperatorActionCategories["Fulladministration"] = "FULLADMINISTRATION";
    OperatorActionCategories["Cellmanagement"] = "CELLMANAGEMENT";
})(OperatorActionCategories = exports.OperatorActionCategories || (exports.OperatorActionCategories = {}));
(function (OperatorActionCategories) {
    function getJsonObj(obj) {
        return obj;
    }
    OperatorActionCategories.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        return obj;
    }
    OperatorActionCategories.getDeserializedJsonObj = getDeserializedJsonObj;
})(OperatorActionCategories = exports.OperatorActionCategories || (exports.OperatorActionCategories = {}));
//# sourceMappingURL=operator-action-categories.js.map