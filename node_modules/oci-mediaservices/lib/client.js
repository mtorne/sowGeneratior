"use strict";
/**
 * Media Services API
 * Media Services (includes Media Flow and Media Streams) is a fully managed service for processing media (video) source content. Use Media Flow and Media Streams to transcode and package digital video using configurable workflows and stream video outputs.

Use the Media Services API to configure media workflows and run Media Flow jobs, create distribution channels, ingest assets, create Preview URLs and play assets. For more information, see [Media Flow](https://docs.oracle.com/iaas/Content/dms-mediaflow/home.htm) and [Media Streams](https://docs.oracle.com/iaas/Content/dms-mediastream/home.htm).

 * OpenAPI spec version: 20211101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaStreamClient = exports.MediaStreamApiKeys = exports.MediaServicesClient = exports.MediaServicesApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const mediaservices_waiter_1 = require("./mediaservices-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var MediaServicesApiKeys;
(function (MediaServicesApiKeys) {
})(MediaServicesApiKeys = exports.MediaServicesApiKeys || (exports.MediaServicesApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class MediaServicesClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "MediaServices";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("mediaservices")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("mediaservices");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20211101";
        if (this.logger)
            this.logger.info(`MediaServicesClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(MediaServicesClient.serviceEndpointTemplate, this._region, MediaServicesClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(MediaServicesClient.serviceEndpointTemplate, this._regionId, MediaServicesClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(MediaServicesClient.serviceEndpointTemplate, region, MediaServicesClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(MediaServicesClient.serviceEndpointTemplate, regionId, MediaServicesClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new MediaServicesWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new mediaservices_waiter_1.MediaServicesWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Add a lock to an MediaAsset.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddMediaAssetLockRequest
     * @return AddMediaAssetLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/AddMediaAssetLock.ts.html |here} to see how to use AddMediaAssetLock API.
     */
    addMediaAssetLock(addMediaAssetLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#addMediaAssetLock.");
            const operationName = "addMediaAssetLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaAssetId}": addMediaAssetLockRequest.mediaAssetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": addMediaAssetLockRequest.opcRetryToken,
                "opc-request-id": addMediaAssetLockRequest.opcRequestId,
                "if-match": addMediaAssetLockRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addMediaAssetLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaAssets/{mediaAssetId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addMediaAssetLockRequest.addLockDetails, "AddLockDetails", model.AddLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaAsset",
                    bodyModel: model.MediaAsset,
                    type: "model.MediaAsset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a lock to a MediaWorkflowConfiguration.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddMediaWorkflowConfigurationLockRequest
     * @return AddMediaWorkflowConfigurationLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/AddMediaWorkflowConfigurationLock.ts.html |here} to see how to use AddMediaWorkflowConfigurationLock API.
     */
    addMediaWorkflowConfigurationLock(addMediaWorkflowConfigurationLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#addMediaWorkflowConfigurationLock.");
            const operationName = "addMediaWorkflowConfigurationLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowConfigurationId}": addMediaWorkflowConfigurationLockRequest.mediaWorkflowConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": addMediaWorkflowConfigurationLockRequest.ifMatch,
                "opc-request-id": addMediaWorkflowConfigurationLockRequest.opcRequestId,
                "opc-retry-token": addMediaWorkflowConfigurationLockRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addMediaWorkflowConfigurationLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addMediaWorkflowConfigurationLockRequest.addResourceLockDetails, "AddLockDetails", model.AddLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowConfiguration",
                    bodyModel: model.MediaWorkflowConfiguration,
                    type: "model.MediaWorkflowConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a lock to a MediaWorkflowJob.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddMediaWorkflowJobLockRequest
     * @return AddMediaWorkflowJobLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/AddMediaWorkflowJobLock.ts.html |here} to see how to use AddMediaWorkflowJobLock API.
     */
    addMediaWorkflowJobLock(addMediaWorkflowJobLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#addMediaWorkflowJobLock.");
            const operationName = "addMediaWorkflowJobLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowJobId}": addMediaWorkflowJobLockRequest.mediaWorkflowJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": addMediaWorkflowJobLockRequest.opcRetryToken,
                "opc-request-id": addMediaWorkflowJobLockRequest.opcRequestId,
                "if-match": addMediaWorkflowJobLockRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addMediaWorkflowJobLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowJobs/{mediaWorkflowJobId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addMediaWorkflowJobLockRequest.addLockDetails, "AddLockDetails", model.AddLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowJob",
                    bodyModel: model.MediaWorkflowJob,
                    type: "model.MediaWorkflowJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a lock to a MediaWorkflow.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddMediaWorkflowLockRequest
     * @return AddMediaWorkflowLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/AddMediaWorkflowLock.ts.html |here} to see how to use AddMediaWorkflowLock API.
     */
    addMediaWorkflowLock(addMediaWorkflowLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#addMediaWorkflowLock.");
            const operationName = "addMediaWorkflowLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowId}": addMediaWorkflowLockRequest.mediaWorkflowId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": addMediaWorkflowLockRequest.opcRetryToken,
                "opc-request-id": addMediaWorkflowLockRequest.opcRequestId,
                "if-match": addMediaWorkflowLockRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addMediaWorkflowLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflows/{mediaWorkflowId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addMediaWorkflowLockRequest.addResourceLockDetails, "AddLockDetails", model.AddLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflow",
                    bodyModel: model.MediaWorkflow,
                    type: "model.MediaWorkflow",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a lock to a StreamCdnConfig.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddStreamCdnConfigLockRequest
     * @return AddStreamCdnConfigLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/AddStreamCdnConfigLock.ts.html |here} to see how to use AddStreamCdnConfigLock API.
     */
    addStreamCdnConfigLock(addStreamCdnConfigLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#addStreamCdnConfigLock.");
            const operationName = "addStreamCdnConfigLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamCdnConfigId}": addStreamCdnConfigLockRequest.streamCdnConfigId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": addStreamCdnConfigLockRequest.ifMatch,
                "opc-request-id": addStreamCdnConfigLockRequest.opcRequestId,
                "opc-retry-token": addStreamCdnConfigLockRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addStreamCdnConfigLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamCdnConfigs/{streamCdnConfigId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addStreamCdnConfigLockRequest.addResourceLockDetails, "AddLockDetails", model.AddLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamCdnConfig",
                    bodyModel: model.StreamCdnConfig,
                    type: "model.StreamCdnConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a lock to a StreamDistributionChannel.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddStreamDistributionChannelLockRequest
     * @return AddStreamDistributionChannelLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/AddStreamDistributionChannelLock.ts.html |here} to see how to use AddStreamDistributionChannelLock API.
     */
    addStreamDistributionChannelLock(addStreamDistributionChannelLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#addStreamDistributionChannelLock.");
            const operationName = "addStreamDistributionChannelLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamDistributionChannelId}": addStreamDistributionChannelLockRequest.streamDistributionChannelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": addStreamDistributionChannelLockRequest.ifMatch,
                "opc-request-id": addStreamDistributionChannelLockRequest.opcRequestId,
                "opc-retry-token": addStreamDistributionChannelLockRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addStreamDistributionChannelLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamDistributionChannels/{streamDistributionChannelId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addStreamDistributionChannelLockRequest.addResourceLockDetails, "AddLockDetails", model.AddLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamDistributionChannel",
                    bodyModel: model.StreamDistributionChannel,
                    type: "model.StreamDistributionChannel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add a lock to a StreamPackagingConfig.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddStreamPackagingConfigLockRequest
     * @return AddStreamPackagingConfigLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/AddStreamPackagingConfigLock.ts.html |here} to see how to use AddStreamPackagingConfigLock API.
     */
    addStreamPackagingConfigLock(addStreamPackagingConfigLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#addStreamPackagingConfigLock.");
            const operationName = "addStreamPackagingConfigLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamPackagingConfigId}": addStreamPackagingConfigLockRequest.streamPackagingConfigId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": addStreamPackagingConfigLockRequest.ifMatch,
                "opc-request-id": addStreamPackagingConfigLockRequest.opcRequestId,
                "opc-retry-token": addStreamPackagingConfigLockRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addStreamPackagingConfigLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamPackagingConfigs/{streamPackagingConfigId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addStreamPackagingConfigLockRequest.addResourceLockDetails, "AddLockDetails", model.AddLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamPackagingConfig",
                    bodyModel: model.StreamPackagingConfig,
                    type: "model.StreamPackagingConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a MediaAsset resource from one compartment identifier to another.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMediaAssetCompartmentRequest
     * @return ChangeMediaAssetCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ChangeMediaAssetCompartment.ts.html |here} to see how to use ChangeMediaAssetCompartment API.
     */
    changeMediaAssetCompartment(changeMediaAssetCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#changeMediaAssetCompartment.");
            const operationName = "changeMediaAssetCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaAssetId}": changeMediaAssetCompartmentRequest.mediaAssetId
            };
            const queryParams = {
                "isLockOverride": changeMediaAssetCompartmentRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": changeMediaAssetCompartmentRequest.opcRetryToken,
                "if-match": changeMediaAssetCompartmentRequest.ifMatch,
                "opc-request-id": changeMediaAssetCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMediaAssetCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaAssets/{mediaAssetId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMediaAssetCompartmentRequest.changeMediaAssetCompartmentDetails, "ChangeMediaAssetCompartmentDetails", model.ChangeMediaAssetCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a MediaWorkflow resource from one compartment identifier to another.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMediaWorkflowCompartmentRequest
     * @return ChangeMediaWorkflowCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ChangeMediaWorkflowCompartment.ts.html |here} to see how to use ChangeMediaWorkflowCompartment API.
     */
    changeMediaWorkflowCompartment(changeMediaWorkflowCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#changeMediaWorkflowCompartment.");
            const operationName = "changeMediaWorkflowCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowId}": changeMediaWorkflowCompartmentRequest.mediaWorkflowId
            };
            const queryParams = {
                "isLockOverride": changeMediaWorkflowCompartmentRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": changeMediaWorkflowCompartmentRequest.opcRetryToken,
                "if-match": changeMediaWorkflowCompartmentRequest.ifMatch,
                "opc-request-id": changeMediaWorkflowCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMediaWorkflowCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflows/{mediaWorkflowId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMediaWorkflowCompartmentRequest.changeMediaWorkflowCompartmentDetails, "ChangeMediaWorkflowCompartmentDetails", model.ChangeMediaWorkflowCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a MediaWorkflowConfiguration resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMediaWorkflowConfigurationCompartmentRequest
     * @return ChangeMediaWorkflowConfigurationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ChangeMediaWorkflowConfigurationCompartment.ts.html |here} to see how to use ChangeMediaWorkflowConfigurationCompartment API.
     */
    changeMediaWorkflowConfigurationCompartment(changeMediaWorkflowConfigurationCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#changeMediaWorkflowConfigurationCompartment.");
            const operationName = "changeMediaWorkflowConfigurationCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowConfigurationId}": changeMediaWorkflowConfigurationCompartmentRequest.mediaWorkflowConfigurationId
            };
            const queryParams = {
                "isLockOverride": changeMediaWorkflowConfigurationCompartmentRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": changeMediaWorkflowConfigurationCompartmentRequest.opcRetryToken,
                "if-match": changeMediaWorkflowConfigurationCompartmentRequest.ifMatch,
                "opc-request-id": changeMediaWorkflowConfigurationCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMediaWorkflowConfigurationCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMediaWorkflowConfigurationCompartmentRequest.changeMediaWorkflowConfigurationCompartmentDetails, "ChangeMediaWorkflowConfigurationCompartmentDetails", model.ChangeMediaWorkflowConfigurationCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a MediaWorkflowJob resource from one compartment identifier to another.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMediaWorkflowJobCompartmentRequest
     * @return ChangeMediaWorkflowJobCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ChangeMediaWorkflowJobCompartment.ts.html |here} to see how to use ChangeMediaWorkflowJobCompartment API.
     */
    changeMediaWorkflowJobCompartment(changeMediaWorkflowJobCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#changeMediaWorkflowJobCompartment.");
            const operationName = "changeMediaWorkflowJobCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowJobId}": changeMediaWorkflowJobCompartmentRequest.mediaWorkflowJobId
            };
            const queryParams = {
                "isLockOverride": changeMediaWorkflowJobCompartmentRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": changeMediaWorkflowJobCompartmentRequest.opcRetryToken,
                "if-match": changeMediaWorkflowJobCompartmentRequest.ifMatch,
                "opc-request-id": changeMediaWorkflowJobCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMediaWorkflowJobCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowJobs/{mediaWorkflowJobId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMediaWorkflowJobCompartmentRequest.changeMediaWorkflowJobCompartmentDetails, "ChangeMediaWorkflowJobCompartmentDetails", model.ChangeMediaWorkflowJobCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a Stream Distribution Channel resource from one compartment identifier to another.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeStreamDistributionChannelCompartmentRequest
     * @return ChangeStreamDistributionChannelCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ChangeStreamDistributionChannelCompartment.ts.html |here} to see how to use ChangeStreamDistributionChannelCompartment API.
     */
    changeStreamDistributionChannelCompartment(changeStreamDistributionChannelCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#changeStreamDistributionChannelCompartment.");
            const operationName = "changeStreamDistributionChannelCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamDistributionChannelId}": changeStreamDistributionChannelCompartmentRequest.streamDistributionChannelId
            };
            const queryParams = {
                "isLockOverride": changeStreamDistributionChannelCompartmentRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": changeStreamDistributionChannelCompartmentRequest.opcRetryToken,
                "if-match": changeStreamDistributionChannelCompartmentRequest.ifMatch,
                "opc-request-id": changeStreamDistributionChannelCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeStreamDistributionChannelCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamDistributionChannels/{streamDistributionChannelId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeStreamDistributionChannelCompartmentRequest.changeStreamDistributionChannelCompartmentDetails, "ChangeStreamDistributionChannelCompartmentDetails", model.ChangeStreamDistributionChannelCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new MediaAsset.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMediaAssetRequest
     * @return CreateMediaAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/CreateMediaAsset.ts.html |here} to see how to use CreateMediaAsset API.
     */
    createMediaAsset(createMediaAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#createMediaAsset.");
            const operationName = "createMediaAsset";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMediaAssetRequest.opcRetryToken,
                "opc-request-id": createMediaAssetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMediaAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaAssets",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMediaAssetRequest.createMediaAssetDetails, "CreateMediaAssetDetails", model.CreateMediaAssetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaAsset",
                    bodyModel: model.MediaAsset,
                    type: "model.MediaAsset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new MediaWorkflow.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMediaWorkflowRequest
     * @return CreateMediaWorkflowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/CreateMediaWorkflow.ts.html |here} to see how to use CreateMediaWorkflow API.
     */
    createMediaWorkflow(createMediaWorkflowRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#createMediaWorkflow.");
            const operationName = "createMediaWorkflow";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMediaWorkflowRequest.opcRetryToken,
                "opc-request-id": createMediaWorkflowRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMediaWorkflowRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflows",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMediaWorkflowRequest.createMediaWorkflowDetails, "CreateMediaWorkflowDetails", model.CreateMediaWorkflowDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflow",
                    bodyModel: model.MediaWorkflow,
                    type: "model.MediaWorkflow",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new MediaWorkflowConfiguration.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMediaWorkflowConfigurationRequest
     * @return CreateMediaWorkflowConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/CreateMediaWorkflowConfiguration.ts.html |here} to see how to use CreateMediaWorkflowConfiguration API.
     */
    createMediaWorkflowConfiguration(createMediaWorkflowConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#createMediaWorkflowConfiguration.");
            const operationName = "createMediaWorkflowConfiguration";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMediaWorkflowConfigurationRequest.opcRetryToken,
                "opc-request-id": createMediaWorkflowConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMediaWorkflowConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowConfigurations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMediaWorkflowConfigurationRequest.createMediaWorkflowConfigurationDetails, "CreateMediaWorkflowConfigurationDetails", model.CreateMediaWorkflowConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowConfiguration",
                    bodyModel: model.MediaWorkflowConfiguration,
                    type: "model.MediaWorkflowConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Run the MediaWorkflow according to the given mediaWorkflow definition and configuration.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMediaWorkflowJobRequest
     * @return CreateMediaWorkflowJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/CreateMediaWorkflowJob.ts.html |here} to see how to use CreateMediaWorkflowJob API.
     */
    createMediaWorkflowJob(createMediaWorkflowJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#createMediaWorkflowJob.");
            const operationName = "createMediaWorkflowJob";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createMediaWorkflowJobRequest.opcRequestId,
                "opc-retry-token": createMediaWorkflowJobRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMediaWorkflowJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowJobs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMediaWorkflowJobRequest.createMediaWorkflowJobDetails, "CreateMediaWorkflowJobDetails", model.CreateMediaWorkflowJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowJob",
                    bodyModel: model.MediaWorkflowJob,
                    type: "model.MediaWorkflowJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new CDN Configuration.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateStreamCdnConfigRequest
     * @return CreateStreamCdnConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/CreateStreamCdnConfig.ts.html |here} to see how to use CreateStreamCdnConfig API.
     */
    createStreamCdnConfig(createStreamCdnConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#createStreamCdnConfig.");
            const operationName = "createStreamCdnConfig";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createStreamCdnConfigRequest.opcRetryToken,
                "opc-request-id": createStreamCdnConfigRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createStreamCdnConfigRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamCdnConfigs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createStreamCdnConfigRequest.createStreamCdnConfigDetails, "CreateStreamCdnConfigDetails", model.CreateStreamCdnConfigDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamCdnConfig",
                    bodyModel: model.StreamCdnConfig,
                    type: "model.StreamCdnConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Stream Distribution Channel.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateStreamDistributionChannelRequest
     * @return CreateStreamDistributionChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/CreateStreamDistributionChannel.ts.html |here} to see how to use CreateStreamDistributionChannel API.
     */
    createStreamDistributionChannel(createStreamDistributionChannelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#createStreamDistributionChannel.");
            const operationName = "createStreamDistributionChannel";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createStreamDistributionChannelRequest.opcRetryToken,
                "opc-request-id": createStreamDistributionChannelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createStreamDistributionChannelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamDistributionChannels",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createStreamDistributionChannelRequest.createStreamDistributionChannelDetails, "CreateStreamDistributionChannelDetails", model.CreateStreamDistributionChannelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamDistributionChannel",
                    bodyModel: model.StreamDistributionChannel,
                    type: "model.StreamDistributionChannel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Packaging Configuration.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateStreamPackagingConfigRequest
     * @return CreateStreamPackagingConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/CreateStreamPackagingConfig.ts.html |here} to see how to use CreateStreamPackagingConfig API.
     */
    createStreamPackagingConfig(createStreamPackagingConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#createStreamPackagingConfig.");
            const operationName = "createStreamPackagingConfig";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createStreamPackagingConfigRequest.opcRetryToken,
                "opc-request-id": createStreamPackagingConfigRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createStreamPackagingConfigRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamPackagingConfigs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createStreamPackagingConfigRequest.createStreamPackagingConfigDetails, "CreateStreamPackagingConfigDetails", model.CreateStreamPackagingConfigDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamPackagingConfig",
                    bodyModel: model.StreamPackagingConfig,
                    type: "model.StreamPackagingConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a MediaAsset resource by identifier. If DeleteChildren is passed in as the mode, all the assets with the parentMediaAssetId matching the ID will be deleted. If DeleteDerivatives is set as the mode, all the assets with the masterMediaAssetId matching the ID will be deleted.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMediaAssetRequest
     * @return DeleteMediaAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/DeleteMediaAsset.ts.html |here} to see how to use DeleteMediaAsset API.
     */
    deleteMediaAsset(deleteMediaAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#deleteMediaAsset.");
            const operationName = "deleteMediaAsset";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaAssetId}": deleteMediaAssetRequest.mediaAssetId
            };
            const queryParams = {
                "isLockOverride": deleteMediaAssetRequest.isLockOverride,
                "deleteMode": deleteMediaAssetRequest.deleteMode
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMediaAssetRequest.ifMatch,
                "opc-request-id": deleteMediaAssetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMediaAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaAssets/{mediaAssetId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a MediaAsset from the DistributionChannel by identifiers.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMediaAssetDistributionChannelAttachmentRequest
     * @return DeleteMediaAssetDistributionChannelAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/DeleteMediaAssetDistributionChannelAttachment.ts.html |here} to see how to use DeleteMediaAssetDistributionChannelAttachment API.
     */
    deleteMediaAssetDistributionChannelAttachment(deleteMediaAssetDistributionChannelAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#deleteMediaAssetDistributionChannelAttachment.");
            const operationName = "deleteMediaAssetDistributionChannelAttachment";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaAssetId}": deleteMediaAssetDistributionChannelAttachmentRequest.mediaAssetId,
                "{distributionChannelId}": deleteMediaAssetDistributionChannelAttachmentRequest.distributionChannelId
            };
            const queryParams = {
                "isLockOverride": deleteMediaAssetDistributionChannelAttachmentRequest.isLockOverride,
                "version": deleteMediaAssetDistributionChannelAttachmentRequest.version
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMediaAssetDistributionChannelAttachmentRequest.ifMatch,
                "opc-request-id": deleteMediaAssetDistributionChannelAttachmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMediaAssetDistributionChannelAttachmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaAssets/{mediaAssetId}/distributionChannelAttachments/{distributionChannelId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The MediaWorkflow lifecycleState will change to DELETED.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMediaWorkflowRequest
     * @return DeleteMediaWorkflowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/DeleteMediaWorkflow.ts.html |here} to see how to use DeleteMediaWorkflow API.
     */
    deleteMediaWorkflow(deleteMediaWorkflowRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#deleteMediaWorkflow.");
            const operationName = "deleteMediaWorkflow";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowId}": deleteMediaWorkflowRequest.mediaWorkflowId
            };
            const queryParams = {
                "isLockOverride": deleteMediaWorkflowRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteMediaWorkflowRequest.opcRequestId,
                "if-match": deleteMediaWorkflowRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMediaWorkflowRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflows/{mediaWorkflowId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a MediaWorkflowConfiguration resource by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMediaWorkflowConfigurationRequest
     * @return DeleteMediaWorkflowConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/DeleteMediaWorkflowConfiguration.ts.html |here} to see how to use DeleteMediaWorkflowConfiguration API.
     */
    deleteMediaWorkflowConfiguration(deleteMediaWorkflowConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#deleteMediaWorkflowConfiguration.");
            const operationName = "deleteMediaWorkflowConfiguration";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowConfigurationId}": deleteMediaWorkflowConfigurationRequest.mediaWorkflowConfigurationId
            };
            const queryParams = {
                "isLockOverride": deleteMediaWorkflowConfigurationRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMediaWorkflowConfigurationRequest.ifMatch,
                "opc-request-id": deleteMediaWorkflowConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMediaWorkflowConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is an asynchronous operation. The MediaWorkflowJob lifecycleState will change to CANCELING temporarily until the job is completely CANCELED.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMediaWorkflowJobRequest
     * @return DeleteMediaWorkflowJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/DeleteMediaWorkflowJob.ts.html |here} to see how to use DeleteMediaWorkflowJob API.
     */
    deleteMediaWorkflowJob(deleteMediaWorkflowJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#deleteMediaWorkflowJob.");
            const operationName = "deleteMediaWorkflowJob";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowJobId}": deleteMediaWorkflowJobRequest.mediaWorkflowJobId
            };
            const queryParams = {
                "isLockOverride": deleteMediaWorkflowJobRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteMediaWorkflowJobRequest.opcRequestId,
                "if-match": deleteMediaWorkflowJobRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMediaWorkflowJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowJobs/{mediaWorkflowJobId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The StreamCdnConfig lifecycleState will change to DELETED.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteStreamCdnConfigRequest
     * @return DeleteStreamCdnConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/DeleteStreamCdnConfig.ts.html |here} to see how to use DeleteStreamCdnConfig API.
     */
    deleteStreamCdnConfig(deleteStreamCdnConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#deleteStreamCdnConfig.");
            const operationName = "deleteStreamCdnConfig";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamCdnConfigId}": deleteStreamCdnConfigRequest.streamCdnConfigId
            };
            const queryParams = {
                "isLockOverride": deleteStreamCdnConfigRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteStreamCdnConfigRequest.opcRequestId,
                "if-match": deleteStreamCdnConfigRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteStreamCdnConfigRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamCdnConfigs/{streamCdnConfigId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The Stream Distribution Channel lifecycleState will change to DELETED.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteStreamDistributionChannelRequest
     * @return DeleteStreamDistributionChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/DeleteStreamDistributionChannel.ts.html |here} to see how to use DeleteStreamDistributionChannel API.
     */
    deleteStreamDistributionChannel(deleteStreamDistributionChannelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#deleteStreamDistributionChannel.");
            const operationName = "deleteStreamDistributionChannel";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamDistributionChannelId}": deleteStreamDistributionChannelRequest.streamDistributionChannelId
            };
            const queryParams = {
                "isLockOverride": deleteStreamDistributionChannelRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteStreamDistributionChannelRequest.opcRequestId,
                "if-match": deleteStreamDistributionChannelRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteStreamDistributionChannelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamDistributionChannels/{streamDistributionChannelId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The Stream Packaging Configuration lifecycleState will change to DELETED.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteStreamPackagingConfigRequest
     * @return DeleteStreamPackagingConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/DeleteStreamPackagingConfig.ts.html |here} to see how to use DeleteStreamPackagingConfig API.
     */
    deleteStreamPackagingConfig(deleteStreamPackagingConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#deleteStreamPackagingConfig.");
            const operationName = "deleteStreamPackagingConfig";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamPackagingConfigId}": deleteStreamPackagingConfigRequest.streamPackagingConfigId
            };
            const queryParams = {
                "isLockOverride": deleteStreamPackagingConfigRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteStreamPackagingConfigRequest.opcRequestId,
                "if-match": deleteStreamPackagingConfigRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteStreamPackagingConfigRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamPackagingConfigs/{streamPackagingConfigId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a MediaAsset by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMediaAssetRequest
     * @return GetMediaAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/GetMediaAsset.ts.html |here} to see how to use GetMediaAsset API.
     */
    getMediaAsset(getMediaAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#getMediaAsset.");
            const operationName = "getMediaAsset";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaAssetId}": getMediaAssetRequest.mediaAssetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMediaAssetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMediaAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaAssets/{mediaAssetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaAsset",
                    bodyModel: model.MediaAsset,
                    type: "model.MediaAsset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a MediaAssetDistributionChannelAttachment for a MediaAsset by identifiers.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMediaAssetDistributionChannelAttachmentRequest
     * @return GetMediaAssetDistributionChannelAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/GetMediaAssetDistributionChannelAttachment.ts.html |here} to see how to use GetMediaAssetDistributionChannelAttachment API.
     */
    getMediaAssetDistributionChannelAttachment(getMediaAssetDistributionChannelAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#getMediaAssetDistributionChannelAttachment.");
            const operationName = "getMediaAssetDistributionChannelAttachment";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaAssetId}": getMediaAssetDistributionChannelAttachmentRequest.mediaAssetId,
                "{distributionChannelId}": getMediaAssetDistributionChannelAttachmentRequest.distributionChannelId
            };
            const queryParams = {
                "version": getMediaAssetDistributionChannelAttachmentRequest.version
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMediaAssetDistributionChannelAttachmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMediaAssetDistributionChannelAttachmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaAssets/{mediaAssetId}/distributionChannelAttachments/{distributionChannelId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaAssetDistributionChannelAttachment",
                    bodyModel: model.MediaAssetDistributionChannelAttachment,
                    type: "model.MediaAssetDistributionChannelAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a MediaWorkflow by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMediaWorkflowRequest
     * @return GetMediaWorkflowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/GetMediaWorkflow.ts.html |here} to see how to use GetMediaWorkflow API.
     */
    getMediaWorkflow(getMediaWorkflowRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#getMediaWorkflow.");
            const operationName = "getMediaWorkflow";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowId}": getMediaWorkflowRequest.mediaWorkflowId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMediaWorkflowRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMediaWorkflowRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflows/{mediaWorkflowId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflow",
                    bodyModel: model.MediaWorkflow,
                    type: "model.MediaWorkflow",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a MediaWorkflowConfiguration by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMediaWorkflowConfigurationRequest
     * @return GetMediaWorkflowConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/GetMediaWorkflowConfiguration.ts.html |here} to see how to use GetMediaWorkflowConfiguration API.
     */
    getMediaWorkflowConfiguration(getMediaWorkflowConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#getMediaWorkflowConfiguration.");
            const operationName = "getMediaWorkflowConfiguration";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowConfigurationId}": getMediaWorkflowConfigurationRequest.mediaWorkflowConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMediaWorkflowConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMediaWorkflowConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowConfiguration",
                    bodyModel: model.MediaWorkflowConfiguration,
                    type: "model.MediaWorkflowConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the MediaWorkflowJob.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMediaWorkflowJobRequest
     * @return GetMediaWorkflowJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/GetMediaWorkflowJob.ts.html |here} to see how to use GetMediaWorkflowJob API.
     */
    getMediaWorkflowJob(getMediaWorkflowJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#getMediaWorkflowJob.");
            const operationName = "getMediaWorkflowJob";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowJobId}": getMediaWorkflowJobRequest.mediaWorkflowJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMediaWorkflowJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMediaWorkflowJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowJobs/{mediaWorkflowJobId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowJob",
                    bodyModel: model.MediaWorkflowJob,
                    type: "model.MediaWorkflowJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a StreamCdnConfig by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetStreamCdnConfigRequest
     * @return GetStreamCdnConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/GetStreamCdnConfig.ts.html |here} to see how to use GetStreamCdnConfig API.
     */
    getStreamCdnConfig(getStreamCdnConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#getStreamCdnConfig.");
            const operationName = "getStreamCdnConfig";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamCdnConfigId}": getStreamCdnConfigRequest.streamCdnConfigId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getStreamCdnConfigRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getStreamCdnConfigRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamCdnConfigs/{streamCdnConfigId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamCdnConfig",
                    bodyModel: model.StreamCdnConfig,
                    type: "model.StreamCdnConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a Stream Distribution Channel by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetStreamDistributionChannelRequest
     * @return GetStreamDistributionChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/GetStreamDistributionChannel.ts.html |here} to see how to use GetStreamDistributionChannel API.
     */
    getStreamDistributionChannel(getStreamDistributionChannelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#getStreamDistributionChannel.");
            const operationName = "getStreamDistributionChannel";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamDistributionChannelId}": getStreamDistributionChannelRequest.streamDistributionChannelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getStreamDistributionChannelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getStreamDistributionChannelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamDistributionChannels/{streamDistributionChannelId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamDistributionChannel",
                    bodyModel: model.StreamDistributionChannel,
                    type: "model.StreamDistributionChannel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a Stream Packaging Configuration by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetStreamPackagingConfigRequest
     * @return GetStreamPackagingConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/GetStreamPackagingConfig.ts.html |here} to see how to use GetStreamPackagingConfig API.
     */
    getStreamPackagingConfig(getStreamPackagingConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#getStreamPackagingConfig.");
            const operationName = "getStreamPackagingConfig";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamPackagingConfigId}": getStreamPackagingConfigRequest.streamPackagingConfigId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getStreamPackagingConfigRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getStreamPackagingConfigRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamPackagingConfigs/{streamPackagingConfigId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamPackagingConfig",
                    bodyModel: model.StreamPackagingConfig,
                    type: "model.StreamPackagingConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Ingests an Asset into a Distribution Channel.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param IngestStreamDistributionChannelRequest
     * @return IngestStreamDistributionChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/IngestStreamDistributionChannel.ts.html |here} to see how to use IngestStreamDistributionChannel API.
     */
    ingestStreamDistributionChannel(ingestStreamDistributionChannelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#ingestStreamDistributionChannel.");
            const operationName = "ingestStreamDistributionChannel";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamDistributionChannelId}": ingestStreamDistributionChannelRequest.streamDistributionChannelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": ingestStreamDistributionChannelRequest.opcRetryToken,
                "opc-request-id": ingestStreamDistributionChannelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, ingestStreamDistributionChannelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamDistributionChannels/{streamDistributionChannelId}/actions/ingest",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestStreamDistributionChannelRequest.ingestStreamDistributionChannelDetails, "IngestStreamDistributionChannelDetails", model.IngestStreamDistributionChannelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestStreamDistributionChannelResult",
                    bodyModel: model.IngestStreamDistributionChannelResult,
                    type: "model.IngestStreamDistributionChannelResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the MediaAssetDistributionChannelAttachments for a MediaAsset by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMediaAssetDistributionChannelAttachmentsRequest
     * @return ListMediaAssetDistributionChannelAttachmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ListMediaAssetDistributionChannelAttachments.ts.html |here} to see how to use ListMediaAssetDistributionChannelAttachments API.
     */
    listMediaAssetDistributionChannelAttachments(listMediaAssetDistributionChannelAttachmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#listMediaAssetDistributionChannelAttachments.");
            const operationName = "listMediaAssetDistributionChannelAttachments";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaAssetId}": listMediaAssetDistributionChannelAttachmentsRequest.mediaAssetId
            };
            const queryParams = {
                "displayName": listMediaAssetDistributionChannelAttachmentsRequest.displayName,
                "limit": listMediaAssetDistributionChannelAttachmentsRequest.limit,
                "page": listMediaAssetDistributionChannelAttachmentsRequest.page,
                "sortOrder": listMediaAssetDistributionChannelAttachmentsRequest.sortOrder,
                "sortBy": listMediaAssetDistributionChannelAttachmentsRequest.sortBy,
                "distributionChannelId": listMediaAssetDistributionChannelAttachmentsRequest.distributionChannelId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMediaAssetDistributionChannelAttachmentsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMediaAssetDistributionChannelAttachmentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaAssets/{mediaAssetId}/distributionChannelAttachments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaAssetDistributionChannelAttachmentCollection",
                    bodyModel: model.MediaAssetDistributionChannelAttachmentCollection,
                    type: "model.MediaAssetDistributionChannelAttachmentCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of MediaAssetSummary.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMediaAssetsRequest
     * @return ListMediaAssetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ListMediaAssets.ts.html |here} to see how to use ListMediaAssets API.
     */
    listMediaAssets(listMediaAssetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#listMediaAssets.");
            const operationName = "listMediaAssets";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMediaAssetsRequest.compartmentId,
                "displayName": listMediaAssetsRequest.displayName,
                "limit": listMediaAssetsRequest.limit,
                "page": listMediaAssetsRequest.page,
                "lifecycleState": listMediaAssetsRequest.lifecycleState,
                "sortOrder": listMediaAssetsRequest.sortOrder,
                "sortBy": listMediaAssetsRequest.sortBy,
                "distributionChannelId": listMediaAssetsRequest.distributionChannelId,
                "parentMediaAssetId": listMediaAssetsRequest.parentMediaAssetId,
                "masterMediaAssetId": listMediaAssetsRequest.masterMediaAssetId,
                "type": listMediaAssetsRequest.type,
                "bucketName": listMediaAssetsRequest.bucketName,
                "objectName": listMediaAssetsRequest.objectName,
                "mediaWorkflowJobId": listMediaAssetsRequest.mediaWorkflowJobId,
                "sourceMediaWorkflowId": listMediaAssetsRequest.sourceMediaWorkflowId,
                "sourceMediaWorkflowVersion": listMediaAssetsRequest.sourceMediaWorkflowVersion
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMediaAssetsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMediaAssetsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaAssets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaAssetCollection",
                    bodyModel: model.MediaAssetCollection,
                    type: "model.MediaAssetCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of MediaWorkflowConfigurations.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMediaWorkflowConfigurationsRequest
     * @return ListMediaWorkflowConfigurationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ListMediaWorkflowConfigurations.ts.html |here} to see how to use ListMediaWorkflowConfigurations API.
     */
    listMediaWorkflowConfigurations(listMediaWorkflowConfigurationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#listMediaWorkflowConfigurations.");
            const operationName = "listMediaWorkflowConfigurations";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMediaWorkflowConfigurationsRequest.compartmentId,
                "lifecycleState": listMediaWorkflowConfigurationsRequest.lifecycleState,
                "displayName": listMediaWorkflowConfigurationsRequest.displayName,
                "id": listMediaWorkflowConfigurationsRequest.id,
                "limit": listMediaWorkflowConfigurationsRequest.limit,
                "page": listMediaWorkflowConfigurationsRequest.page,
                "sortOrder": listMediaWorkflowConfigurationsRequest.sortOrder,
                "sortBy": listMediaWorkflowConfigurationsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMediaWorkflowConfigurationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMediaWorkflowConfigurationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowConfigurations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowConfigurationCollection",
                    bodyModel: model.MediaWorkflowConfigurationCollection,
                    type: "model.MediaWorkflowConfigurationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the MediaWorkflowJobs.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMediaWorkflowJobsRequest
     * @return ListMediaWorkflowJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ListMediaWorkflowJobs.ts.html |here} to see how to use ListMediaWorkflowJobs API.
     */
    listMediaWorkflowJobs(listMediaWorkflowJobsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#listMediaWorkflowJobs.");
            const operationName = "listMediaWorkflowJobs";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMediaWorkflowJobsRequest.compartmentId,
                "id": listMediaWorkflowJobsRequest.id,
                "mediaWorkflowId": listMediaWorkflowJobsRequest.mediaWorkflowId,
                "displayName": listMediaWorkflowJobsRequest.displayName,
                "lifecycleState": listMediaWorkflowJobsRequest.lifecycleState,
                "page": listMediaWorkflowJobsRequest.page,
                "limit": listMediaWorkflowJobsRequest.limit,
                "sortBy": listMediaWorkflowJobsRequest.sortBy,
                "sortOrder": listMediaWorkflowJobsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMediaWorkflowJobsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMediaWorkflowJobsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowJobs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowJobCollection",
                    bodyModel: model.MediaWorkflowJobCollection,
                    type: "model.MediaWorkflowJobCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of MediaWorkflowTaskDeclarations.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMediaWorkflowTaskDeclarationsRequest
     * @return ListMediaWorkflowTaskDeclarationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ListMediaWorkflowTaskDeclarations.ts.html |here} to see how to use ListMediaWorkflowTaskDeclarations API.
     */
    listMediaWorkflowTaskDeclarations(listMediaWorkflowTaskDeclarationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#listMediaWorkflowTaskDeclarations.");
            const operationName = "listMediaWorkflowTaskDeclarations";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMediaWorkflowTaskDeclarationsRequest.compartmentId,
                "name": listMediaWorkflowTaskDeclarationsRequest.name,
                "version": listMediaWorkflowTaskDeclarationsRequest.version,
                "isCurrent": listMediaWorkflowTaskDeclarationsRequest.isCurrent,
                "sortBy": listMediaWorkflowTaskDeclarationsRequest.sortBy,
                "limit": listMediaWorkflowTaskDeclarationsRequest.limit,
                "page": listMediaWorkflowTaskDeclarationsRequest.page,
                "sortOrder": listMediaWorkflowTaskDeclarationsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMediaWorkflowTaskDeclarationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMediaWorkflowTaskDeclarationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowTaskDeclarations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowTaskDeclarationCollection",
                    bodyModel: model.MediaWorkflowTaskDeclarationCollection,
                    type: "model.MediaWorkflowTaskDeclarationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the MediaWorkflows.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMediaWorkflowsRequest
     * @return ListMediaWorkflowsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ListMediaWorkflows.ts.html |here} to see how to use ListMediaWorkflows API.
     */
    listMediaWorkflows(listMediaWorkflowsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#listMediaWorkflows.");
            const operationName = "listMediaWorkflows";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMediaWorkflowsRequest.compartmentId,
                "id": listMediaWorkflowsRequest.id,
                "lifecycleState": listMediaWorkflowsRequest.lifecycleState,
                "displayName": listMediaWorkflowsRequest.displayName,
                "sortOrder": listMediaWorkflowsRequest.sortOrder,
                "sortBy": listMediaWorkflowsRequest.sortBy,
                "page": listMediaWorkflowsRequest.page,
                "limit": listMediaWorkflowsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMediaWorkflowsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMediaWorkflowsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflows",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowCollection",
                    bodyModel: model.MediaWorkflowCollection,
                    type: "model.MediaWorkflowCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the StreamCdnConfig.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListStreamCdnConfigsRequest
     * @return ListStreamCdnConfigsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ListStreamCdnConfigs.ts.html |here} to see how to use ListStreamCdnConfigs API.
     */
    listStreamCdnConfigs(listStreamCdnConfigsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#listStreamCdnConfigs.");
            const operationName = "listStreamCdnConfigs";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "distributionChannelId": listStreamCdnConfigsRequest.distributionChannelId,
                "id": listStreamCdnConfigsRequest.id,
                "lifecycleState": listStreamCdnConfigsRequest.lifecycleState,
                "displayName": listStreamCdnConfigsRequest.displayName,
                "sortOrder": listStreamCdnConfigsRequest.sortOrder,
                "sortBy": listStreamCdnConfigsRequest.sortBy,
                "page": listStreamCdnConfigsRequest.page,
                "limit": listStreamCdnConfigsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listStreamCdnConfigsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listStreamCdnConfigsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamCdnConfigs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamCdnConfigCollection",
                    bodyModel: model.StreamCdnConfigCollection,
                    type: "model.StreamCdnConfigCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the Stream Distribution Channels.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListStreamDistributionChannelsRequest
     * @return ListStreamDistributionChannelsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ListStreamDistributionChannels.ts.html |here} to see how to use ListStreamDistributionChannels API.
     */
    listStreamDistributionChannels(listStreamDistributionChannelsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#listStreamDistributionChannels.");
            const operationName = "listStreamDistributionChannels";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listStreamDistributionChannelsRequest.compartmentId,
                "id": listStreamDistributionChannelsRequest.id,
                "lifecycleState": listStreamDistributionChannelsRequest.lifecycleState,
                "displayName": listStreamDistributionChannelsRequest.displayName,
                "sortOrder": listStreamDistributionChannelsRequest.sortOrder,
                "sortBy": listStreamDistributionChannelsRequest.sortBy,
                "page": listStreamDistributionChannelsRequest.page,
                "limit": listStreamDistributionChannelsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listStreamDistributionChannelsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listStreamDistributionChannelsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamDistributionChannels",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamDistributionChannelCollection",
                    bodyModel: model.StreamDistributionChannelCollection,
                    type: "model.StreamDistributionChannelCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the Stream Packaging Configurations.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListStreamPackagingConfigsRequest
     * @return ListStreamPackagingConfigsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ListStreamPackagingConfigs.ts.html |here} to see how to use ListStreamPackagingConfigs API.
     */
    listStreamPackagingConfigs(listStreamPackagingConfigsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#listStreamPackagingConfigs.");
            const operationName = "listStreamPackagingConfigs";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "distributionChannelId": listStreamPackagingConfigsRequest.distributionChannelId,
                "streamPackagingConfigId": listStreamPackagingConfigsRequest.streamPackagingConfigId,
                "lifecycleState": listStreamPackagingConfigsRequest.lifecycleState,
                "displayName": listStreamPackagingConfigsRequest.displayName,
                "sortOrder": listStreamPackagingConfigsRequest.sortOrder,
                "sortBy": listStreamPackagingConfigsRequest.sortBy,
                "page": listStreamPackagingConfigsRequest.page,
                "limit": listStreamPackagingConfigsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listStreamPackagingConfigsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listStreamPackagingConfigsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamPackagingConfigs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamPackagingConfigCollection",
                    bodyModel: model.StreamPackagingConfigCollection,
                    type: "model.StreamPackagingConfigCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the SystemMediaWorkflows that can be used to run a job by name or as a template to create a MediaWorkflow.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSystemMediaWorkflowsRequest
     * @return ListSystemMediaWorkflowsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/ListSystemMediaWorkflows.ts.html |here} to see how to use ListSystemMediaWorkflows API.
     */
    listSystemMediaWorkflows(listSystemMediaWorkflowsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#listSystemMediaWorkflows.");
            const operationName = "listSystemMediaWorkflows";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSystemMediaWorkflowsRequest.compartmentId,
                "name": listSystemMediaWorkflowsRequest.name,
                "sortOrder": listSystemMediaWorkflowsRequest.sortOrder,
                "page": listSystemMediaWorkflowsRequest.page,
                "limit": listSystemMediaWorkflowsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSystemMediaWorkflowsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSystemMediaWorkflowsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/systemMediaWorkflows",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "systemMediaWorkflowCollection",
                    bodyModel: model.SystemMediaWorkflowCollection,
                    type: "model.SystemMediaWorkflowCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove a lock to an MediaAsset.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveMediaAssetLockRequest
     * @return RemoveMediaAssetLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/RemoveMediaAssetLock.ts.html |here} to see how to use RemoveMediaAssetLock API.
     */
    removeMediaAssetLock(removeMediaAssetLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#removeMediaAssetLock.");
            const operationName = "removeMediaAssetLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaAssetId}": removeMediaAssetLockRequest.mediaAssetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": removeMediaAssetLockRequest.opcRetryToken,
                "opc-request-id": removeMediaAssetLockRequest.opcRequestId,
                "if-match": removeMediaAssetLockRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeMediaAssetLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaAssets/{mediaAssetId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeMediaAssetLockRequest.removeLockDetails, "RemoveLockDetails", model.RemoveLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaAsset",
                    bodyModel: model.MediaAsset,
                    type: "model.MediaAsset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove a lock from a MediaWorkflowConfiguration.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveMediaWorkflowConfigurationLockRequest
     * @return RemoveMediaWorkflowConfigurationLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/RemoveMediaWorkflowConfigurationLock.ts.html |here} to see how to use RemoveMediaWorkflowConfigurationLock API.
     */
    removeMediaWorkflowConfigurationLock(removeMediaWorkflowConfigurationLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#removeMediaWorkflowConfigurationLock.");
            const operationName = "removeMediaWorkflowConfigurationLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowConfigurationId}": removeMediaWorkflowConfigurationLockRequest.mediaWorkflowConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removeMediaWorkflowConfigurationLockRequest.ifMatch,
                "opc-request-id": removeMediaWorkflowConfigurationLockRequest.opcRequestId,
                "opc-retry-token": removeMediaWorkflowConfigurationLockRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeMediaWorkflowConfigurationLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeMediaWorkflowConfigurationLockRequest.removeResourceLockDetails, "RemoveLockDetails", model.RemoveLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowConfiguration",
                    bodyModel: model.MediaWorkflowConfiguration,
                    type: "model.MediaWorkflowConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove a lock from a MediaWorkflowJob.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveMediaWorkflowJobLockRequest
     * @return RemoveMediaWorkflowJobLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/RemoveMediaWorkflowJobLock.ts.html |here} to see how to use RemoveMediaWorkflowJobLock API.
     */
    removeMediaWorkflowJobLock(removeMediaWorkflowJobLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#removeMediaWorkflowJobLock.");
            const operationName = "removeMediaWorkflowJobLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowJobId}": removeMediaWorkflowJobLockRequest.mediaWorkflowJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": removeMediaWorkflowJobLockRequest.opcRetryToken,
                "opc-request-id": removeMediaWorkflowJobLockRequest.opcRequestId,
                "if-match": removeMediaWorkflowJobLockRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeMediaWorkflowJobLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowJobs/{mediaWorkflowJobId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeMediaWorkflowJobLockRequest.removeLockDetails, "RemoveLockDetails", model.RemoveLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowJob",
                    bodyModel: model.MediaWorkflowJob,
                    type: "model.MediaWorkflowJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove a lock from a MediaWorkflow.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveMediaWorkflowLockRequest
     * @return RemoveMediaWorkflowLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/RemoveMediaWorkflowLock.ts.html |here} to see how to use RemoveMediaWorkflowLock API.
     */
    removeMediaWorkflowLock(removeMediaWorkflowLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#removeMediaWorkflowLock.");
            const operationName = "removeMediaWorkflowLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowId}": removeMediaWorkflowLockRequest.mediaWorkflowId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": removeMediaWorkflowLockRequest.opcRetryToken,
                "opc-request-id": removeMediaWorkflowLockRequest.opcRequestId,
                "if-match": removeMediaWorkflowLockRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeMediaWorkflowLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflows/{mediaWorkflowId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeMediaWorkflowLockRequest.removeResourceLockDetails, "RemoveLockDetails", model.RemoveLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflow",
                    bodyModel: model.MediaWorkflow,
                    type: "model.MediaWorkflow",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove a lock from a StreamCdnConfig.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveStreamCdnConfigLockRequest
     * @return RemoveStreamCdnConfigLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/RemoveStreamCdnConfigLock.ts.html |here} to see how to use RemoveStreamCdnConfigLock API.
     */
    removeStreamCdnConfigLock(removeStreamCdnConfigLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#removeStreamCdnConfigLock.");
            const operationName = "removeStreamCdnConfigLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamCdnConfigId}": removeStreamCdnConfigLockRequest.streamCdnConfigId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removeStreamCdnConfigLockRequest.ifMatch,
                "opc-request-id": removeStreamCdnConfigLockRequest.opcRequestId,
                "opc-retry-token": removeStreamCdnConfigLockRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeStreamCdnConfigLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamCdnConfigs/{streamCdnConfigId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeStreamCdnConfigLockRequest.removeResourceLockDetails, "RemoveLockDetails", model.RemoveLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamCdnConfig",
                    bodyModel: model.StreamCdnConfig,
                    type: "model.StreamCdnConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove a lock to a StreamDistributionChannel.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveStreamDistributionChannelLockRequest
     * @return RemoveStreamDistributionChannelLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/RemoveStreamDistributionChannelLock.ts.html |here} to see how to use RemoveStreamDistributionChannelLock API.
     */
    removeStreamDistributionChannelLock(removeStreamDistributionChannelLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#removeStreamDistributionChannelLock.");
            const operationName = "removeStreamDistributionChannelLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamDistributionChannelId}": removeStreamDistributionChannelLockRequest.streamDistributionChannelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removeStreamDistributionChannelLockRequest.ifMatch,
                "opc-request-id": removeStreamDistributionChannelLockRequest.opcRequestId,
                "opc-retry-token": removeStreamDistributionChannelLockRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeStreamDistributionChannelLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamDistributionChannels/{streamDistributionChannelId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeStreamDistributionChannelLockRequest.removeResourceLockDetails, "RemoveLockDetails", model.RemoveLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamDistributionChannel",
                    bodyModel: model.StreamDistributionChannel,
                    type: "model.StreamDistributionChannel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove a lock from a StreamPackagingConfig.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveStreamPackagingConfigLockRequest
     * @return RemoveStreamPackagingConfigLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/RemoveStreamPackagingConfigLock.ts.html |here} to see how to use RemoveStreamPackagingConfigLock API.
     */
    removeStreamPackagingConfigLock(removeStreamPackagingConfigLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#removeStreamPackagingConfigLock.");
            const operationName = "removeStreamPackagingConfigLock";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamPackagingConfigId}": removeStreamPackagingConfigLockRequest.streamPackagingConfigId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removeStreamPackagingConfigLockRequest.ifMatch,
                "opc-request-id": removeStreamPackagingConfigLockRequest.opcRequestId,
                "opc-retry-token": removeStreamPackagingConfigLockRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeStreamPackagingConfigLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamPackagingConfigs/{streamPackagingConfigId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeStreamPackagingConfigLockRequest.removeResourceLockDetails, "RemoveLockDetails", model.RemoveLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamPackagingConfig",
                    bodyModel: model.StreamPackagingConfig,
                    type: "model.StreamPackagingConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the MediaAsset.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMediaAssetRequest
     * @return UpdateMediaAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/UpdateMediaAsset.ts.html |here} to see how to use UpdateMediaAsset API.
     */
    updateMediaAsset(updateMediaAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#updateMediaAsset.");
            const operationName = "updateMediaAsset";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaAssetId}": updateMediaAssetRequest.mediaAssetId
            };
            const queryParams = {
                "isLockOverride": updateMediaAssetRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMediaAssetRequest.ifMatch,
                "opc-request-id": updateMediaAssetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMediaAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaAssets/{mediaAssetId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMediaAssetRequest.updateMediaAssetDetails, "UpdateMediaAssetDetails", model.UpdateMediaAssetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaAsset",
                    bodyModel: model.MediaAsset,
                    type: "model.MediaAsset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the MediaWorkflow.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMediaWorkflowRequest
     * @return UpdateMediaWorkflowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/UpdateMediaWorkflow.ts.html |here} to see how to use UpdateMediaWorkflow API.
     */
    updateMediaWorkflow(updateMediaWorkflowRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#updateMediaWorkflow.");
            const operationName = "updateMediaWorkflow";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowId}": updateMediaWorkflowRequest.mediaWorkflowId
            };
            const queryParams = {
                "isLockOverride": updateMediaWorkflowRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMediaWorkflowRequest.ifMatch,
                "opc-request-id": updateMediaWorkflowRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMediaWorkflowRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflows/{mediaWorkflowId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMediaWorkflowRequest.updateMediaWorkflowDetails, "UpdateMediaWorkflowDetails", model.UpdateMediaWorkflowDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflow",
                    bodyModel: model.MediaWorkflow,
                    type: "model.MediaWorkflow",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the MediaWorkflowConfiguration.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMediaWorkflowConfigurationRequest
     * @return UpdateMediaWorkflowConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/UpdateMediaWorkflowConfiguration.ts.html |here} to see how to use UpdateMediaWorkflowConfiguration API.
     */
    updateMediaWorkflowConfiguration(updateMediaWorkflowConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#updateMediaWorkflowConfiguration.");
            const operationName = "updateMediaWorkflowConfiguration";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowConfigurationId}": updateMediaWorkflowConfigurationRequest.mediaWorkflowConfigurationId
            };
            const queryParams = {
                "isLockOverride": updateMediaWorkflowConfigurationRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMediaWorkflowConfigurationRequest.ifMatch,
                "opc-request-id": updateMediaWorkflowConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMediaWorkflowConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMediaWorkflowConfigurationRequest.updateMediaWorkflowConfigurationDetails, "UpdateMediaWorkflowConfigurationDetails", model.UpdateMediaWorkflowConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowConfiguration",
                    bodyModel: model.MediaWorkflowConfiguration,
                    type: "model.MediaWorkflowConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the MediaWorkflowJob.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMediaWorkflowJobRequest
     * @return UpdateMediaWorkflowJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/UpdateMediaWorkflowJob.ts.html |here} to see how to use UpdateMediaWorkflowJob API.
     */
    updateMediaWorkflowJob(updateMediaWorkflowJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#updateMediaWorkflowJob.");
            const operationName = "updateMediaWorkflowJob";
            const apiReferenceLink = "";
            const pathParams = {
                "{mediaWorkflowJobId}": updateMediaWorkflowJobRequest.mediaWorkflowJobId
            };
            const queryParams = {
                "isLockOverride": updateMediaWorkflowJobRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMediaWorkflowJobRequest.ifMatch,
                "opc-request-id": updateMediaWorkflowJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMediaWorkflowJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mediaWorkflowJobs/{mediaWorkflowJobId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMediaWorkflowJobRequest.updateMediaWorkflowJobDetails, "UpdateMediaWorkflowJobDetails", model.UpdateMediaWorkflowJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mediaWorkflowJob",
                    bodyModel: model.MediaWorkflowJob,
                    type: "model.MediaWorkflowJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the StreamCdnConfig.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateStreamCdnConfigRequest
     * @return UpdateStreamCdnConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/UpdateStreamCdnConfig.ts.html |here} to see how to use UpdateStreamCdnConfig API.
     */
    updateStreamCdnConfig(updateStreamCdnConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#updateStreamCdnConfig.");
            const operationName = "updateStreamCdnConfig";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamCdnConfigId}": updateStreamCdnConfigRequest.streamCdnConfigId
            };
            const queryParams = {
                "isLockOverride": updateStreamCdnConfigRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateStreamCdnConfigRequest.ifMatch,
                "opc-request-id": updateStreamCdnConfigRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateStreamCdnConfigRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamCdnConfigs/{streamCdnConfigId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateStreamCdnConfigRequest.updateStreamCdnConfigDetails, "UpdateStreamCdnConfigDetails", model.UpdateStreamCdnConfigDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamCdnConfig",
                    bodyModel: model.StreamCdnConfig,
                    type: "model.StreamCdnConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the Stream Distribution Channel.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateStreamDistributionChannelRequest
     * @return UpdateStreamDistributionChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/UpdateStreamDistributionChannel.ts.html |here} to see how to use UpdateStreamDistributionChannel API.
     */
    updateStreamDistributionChannel(updateStreamDistributionChannelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#updateStreamDistributionChannel.");
            const operationName = "updateStreamDistributionChannel";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamDistributionChannelId}": updateStreamDistributionChannelRequest.streamDistributionChannelId
            };
            const queryParams = {
                "isLockOverride": updateStreamDistributionChannelRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateStreamDistributionChannelRequest.ifMatch,
                "opc-request-id": updateStreamDistributionChannelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateStreamDistributionChannelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamDistributionChannels/{streamDistributionChannelId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateStreamDistributionChannelRequest.updateStreamDistributionChannelDetails, "UpdateStreamDistributionChannelDetails", model.UpdateStreamDistributionChannelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamDistributionChannel",
                    bodyModel: model.StreamDistributionChannel,
                    type: "model.StreamDistributionChannel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the Stream Packaging Configuration.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateStreamPackagingConfigRequest
     * @return UpdateStreamPackagingConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/UpdateStreamPackagingConfig.ts.html |here} to see how to use UpdateStreamPackagingConfig API.
     */
    updateStreamPackagingConfig(updateStreamPackagingConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaServicesClient#updateStreamPackagingConfig.");
            const operationName = "updateStreamPackagingConfig";
            const apiReferenceLink = "";
            const pathParams = {
                "{streamPackagingConfigId}": updateStreamPackagingConfigRequest.streamPackagingConfigId
            };
            const queryParams = {
                "isLockOverride": updateStreamPackagingConfigRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateStreamPackagingConfigRequest.ifMatch,
                "opc-request-id": updateStreamPackagingConfigRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateStreamPackagingConfigRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/streamPackagingConfigs/{streamPackagingConfigId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateStreamPackagingConfigRequest.updateStreamPackagingConfigDetails, "UpdateStreamPackagingConfigDetails", model.UpdateStreamPackagingConfigDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "streamPackagingConfig",
                    bodyModel: model.StreamPackagingConfig,
                    type: "model.StreamPackagingConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.MediaServicesClient = MediaServicesClient;
MediaServicesClient.serviceEndpointTemplate = "https://mediaservices.{region}.oci.{secondLevelDomain}";
MediaServicesClient.endpointServiceName = "";
var MediaStreamApiKeys;
(function (MediaStreamApiKeys) {
})(MediaStreamApiKeys = exports.MediaStreamApiKeys || (exports.MediaStreamApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class MediaStreamClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "MediaStream";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("mediaservices")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("mediaservices");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20211101";
        if (this.logger)
            this.logger.info(`MediaStreamClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(MediaStreamClient.serviceEndpointTemplate, this._region, MediaStreamClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(MediaStreamClient.serviceEndpointTemplate, this._regionId, MediaStreamClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(MediaStreamClient.serviceEndpointTemplate, region, MediaStreamClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(MediaStreamClient.serviceEndpointTemplate, regionId, MediaStreamClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Gets the playlist content for the specified Packaging Configuration and Media Asset combination. This API call is made using the MediaStreamsClient, which requires the endpoint to be set with the value of the distribution channel domain name (for example, https://example_channel.dc.mediaservices.example_region.oci.oraclecloud.com) to generate a session token or playlist for a media asset registered in this distribution channel.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GeneratePlaylistRequest
     * @return GeneratePlaylistResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/GeneratePlaylist.ts.html |here} to see how to use GeneratePlaylist API.
     */
    generatePlaylist(generatePlaylistRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaStreamClient#generatePlaylist.");
            const operationName = "generatePlaylist";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "streamPackagingConfigId": generatePlaylistRequest.streamPackagingConfigId,
                "mediaAssetId": generatePlaylistRequest.mediaAssetId,
                "token": generatePlaylistRequest.token
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": generatePlaylistRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generatePlaylistRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/actions/generatePlaylist",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Generate a new streaming session token. This API call is made using the MediaStreamsClient, which requires the endpoint to be set with the value of the distribution channel domain name (for example, https://example_channel.dc.mediaservices.example_region.oci.oraclecloud.com) to generate a session token or playlist for a media asset registered in this distribution channel.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateSessionTokenRequest
     * @return GenerateSessionTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/mediaservices/GenerateSessionToken.ts.html |here} to see how to use GenerateSessionToken API.
     */
    generateSessionToken(generateSessionTokenRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MediaStreamClient#generateSessionToken.");
            const operationName = "generateSessionToken";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": generateSessionTokenRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, generateSessionTokenRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/actions/generateSessionToken",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(generateSessionTokenRequest.generateSessionTokenDetails, "GenerateSessionTokenDetails", model.GenerateSessionTokenDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sessionToken",
                    bodyModel: model.SessionToken,
                    type: "model.SessionToken",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.MediaStreamClient = MediaStreamClient;
MediaStreamClient.serviceEndpointTemplate = "https://mediaservices.{region}.oci.{secondLevelDomain}";
MediaStreamClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map