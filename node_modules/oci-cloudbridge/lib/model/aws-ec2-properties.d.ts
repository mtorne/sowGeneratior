/**
 * Oracle Cloud Bridge API
 * API for Oracle Cloud Bridge service.
 * OpenAPI spec version: 20220509
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * AWS virtual machine related properties.
 */
export interface AwsEc2Properties {
    /**
     * The architecture of the image.
     */
    "architecture": string;
    /**
     * The boot mode of the instance.
     */
    "bootMode"?: string;
    /**
     * The ID of the Capacity Reservation.
     */
    "capacityReservationKey"?: string;
    /**
     * Indicates if the elastic inference accelerators attached to an instance
     */
    "areElasticInferenceAcceleratorsPresent"?: boolean;
    /**
     * Indicates whether the instance is enabled for AWS Nitro Enclaves.
     */
    "isEnclaveOptions"?: boolean;
    /**
     * Indicates whether the instance is enabled for hibernation.
     */
    "isHibernationOptions"?: boolean;
    /**
     * The ID of the AMI used to launch the instance.
     */
    "imageKey"?: string;
    /**
     * The ID of the instance.
     */
    "instanceKey": string;
    /**
     * Indicates whether this is a Spot Instance or a Scheduled Instance.
     */
    "instanceLifecycle"?: string;
    /**
     * The instance type.
     */
    "instanceType": string;
    /**
     * The public IPv4 address, or the Carrier IP address assigned to the instance.
     */
    "ipAddress"?: string;
    /**
     * The IPv6 address assigned to the instance.
     */
    "ipv6Address"?: string;
    /**
     * The kernel associated with this instance, if applicable.
     */
    "kernelKey"?: string;
    /**
     * The time the instance was launched.
     */
    "timeLaunch"?: Date;
    /**
     * The license configurations for the instance.
     */
    "licenses"?: Array<string>;
    /**
     * Provides information on the recovery and maintenance options of your instance.
     */
    "maintenanceOptions"?: string;
    /**
     * The monitoring for the instance.
     */
    "monitoring"?: string;
    /**
     * The network interfaces for the instance.
     */
    "networkInterfaces"?: Array<model.InstanceNetworkInterface>;
    "placement"?: model.Placement;
    /**
     * (IPv4 only) The private DNS hostname name assigned to the instance.
     */
    "privateDnsName"?: string;
    /**
     * The private IPv4 address assigned to the instance.
     */
    "privateIpAddress"?: string;
    /**
     * The device name of the root device volume.
     */
    "rootDeviceName": string;
    /**
     * The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
     */
    "rootDeviceType"?: string;
    /**
     * The security groups for the instance.
     */
    "securityGroups"?: Array<model.GroupIdentifier>;
    /**
     * Indicates whether source/destination checking is enabled.
     */
    "isSourceDestCheck"?: boolean;
    /**
     * If the request is a Spot Instance request, this value will be true.
     */
    "isSpotInstance"?: boolean;
    /**
     * Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
     */
    "sriovNetSupport"?: string;
    "state": model.InstanceState;
    /**
     * EC2-VPC The ID of the subnet in which the instance is running.
     */
    "subnetKey"?: string;
    /**
     * Any tags assigned to the instance.
     */
    "tags"?: Array<model.Tag>;
    /**
     * If the instance is configured for NitroTPM support, the value is v2.0.
     */
    "tpmSupport"?: string;
    /**
     * The virtualization type of the instance.
     */
    "virtualizationType"?: string;
    /**
     * EC2-VPC The ID of the VPC in which the instance is running.
     */
    "vpcKey"?: string;
}
export declare namespace AwsEc2Properties {
    function getJsonObj(obj: AwsEc2Properties): object;
    function getDeserializedJsonObj(obj: AwsEc2Properties): object;
}
