"use strict";
/**
 * Oracle Cloud Bridge API
 * API for Oracle Cloud Bridge service.
 * OpenAPI spec version: 20220509
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OcbAgentSvcClient = exports.OcbAgentSvcApiKeys = exports.InventoryClient = exports.InventoryApiKeys = exports.DiscoveryClient = exports.DiscoveryApiKeys = exports.CommonClient = exports.CommonApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const common_waiter_1 = require("./common-waiter");
const discovery_waiter_1 = require("./discovery-waiter");
const inventory_waiter_1 = require("./inventory-waiter");
const ocbagentsvc_waiter_1 = require("./ocbagentsvc-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var CommonApiKeys;
(function (CommonApiKeys) {
})(CommonApiKeys = exports.CommonApiKeys || (exports.CommonApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class CommonClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "Common";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("cloudbridge")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("cloudbridge");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220509";
        if (this.logger)
            this.logger.info(`CommonClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(CommonClient.serviceEndpointTemplate, this._region, CommonClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(CommonClient.serviceEndpointTemplate, this._regionId, CommonClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(CommonClient.serviceEndpointTemplate, region, CommonClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(CommonClient.serviceEndpointTemplate, regionId, CommonClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new CommonWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new common_waiter_1.CommonWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Cancels the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CommonClient#cancelWorkRequest.");
            const operationName = "cancelWorkRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": cancelWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": cancelWorkRequestRequest.ifMatch,
                "opc-request-id": cancelWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CommonClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a (paginated) list of errors for the work request with the given ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CommonClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit,
                "sortBy": listWorkRequestErrorsRequest.sortBy,
                "sortOrder": listWorkRequestErrorsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: model.WorkRequestErrorCollection,
                    type: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a (paginated) list of logs for the work request with the given ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CommonClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit,
                "sortBy": listWorkRequestLogsRequest.sortBy,
                "sortOrder": listWorkRequestLogsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestLogEntryCollection",
                    bodyModel: model.WorkRequestLogEntryCollection,
                    type: "model.WorkRequestLogEntryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CommonClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "workRequestId": listWorkRequestsRequest.workRequestId,
                "status": listWorkRequestsRequest.status,
                "resourceId": listWorkRequestsRequest.resourceId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit,
                "sortOrder": listWorkRequestsRequest.sortOrder,
                "sortBy": listWorkRequestsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestSummaryCollection",
                    bodyModel: model.WorkRequestSummaryCollection,
                    type: "model.WorkRequestSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.CommonClient = CommonClient;
CommonClient.serviceEndpointTemplate = "https://cloudbridge.{region}.oci.{secondLevelDomain}";
CommonClient.endpointServiceName = "";
var DiscoveryApiKeys;
(function (DiscoveryApiKeys) {
})(DiscoveryApiKeys = exports.DiscoveryApiKeys || (exports.DiscoveryApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class DiscoveryClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "Discovery";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("cloudbridge")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("cloudbridge");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220509";
        if (this.logger)
            this.logger.info(`DiscoveryClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DiscoveryClient.serviceEndpointTemplate, this._region, DiscoveryClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DiscoveryClient.serviceEndpointTemplate, this._regionId, DiscoveryClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DiscoveryClient.serviceEndpointTemplate, region, DiscoveryClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DiscoveryClient.serviceEndpointTemplate, regionId, DiscoveryClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new DiscoveryWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new discovery_waiter_1.DiscoveryWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Moves a resource into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAssetSourceCompartmentRequest
     * @return ChangeAssetSourceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ChangeAssetSourceCompartment.ts.html |here} to see how to use ChangeAssetSourceCompartment API.
     */
    changeAssetSourceCompartment(changeAssetSourceCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#changeAssetSourceCompartment.");
            const operationName = "changeAssetSourceCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetSourceId}": changeAssetSourceCompartmentRequest.assetSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAssetSourceCompartmentRequest.ifMatch,
                "opc-request-id": changeAssetSourceCompartmentRequest.opcRequestId,
                "opc-retry-token": changeAssetSourceCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAssetSourceCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assetSources/{assetSourceId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAssetSourceCompartmentRequest.changeAssetSourceCompartmentDetails, "ChangeAssetSourceCompartmentDetails", model.ChangeAssetSourceCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified discovery schedule into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDiscoveryScheduleCompartmentRequest
     * @return ChangeDiscoveryScheduleCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ChangeDiscoveryScheduleCompartment.ts.html |here} to see how to use ChangeDiscoveryScheduleCompartment API.
     */
    changeDiscoveryScheduleCompartment(changeDiscoveryScheduleCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#changeDiscoveryScheduleCompartment.");
            const operationName = "changeDiscoveryScheduleCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{discoveryScheduleId}": changeDiscoveryScheduleCompartmentRequest.discoveryScheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeDiscoveryScheduleCompartmentRequest.ifMatch,
                "opc-request-id": changeDiscoveryScheduleCompartmentRequest.opcRequestId,
                "opc-retry-token": changeDiscoveryScheduleCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeDiscoveryScheduleCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoverySchedules/{discoveryScheduleId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDiscoveryScheduleCompartmentRequest.changeDiscoveryScheduleCompartmentDetails, "ChangeDiscoveryScheduleCompartmentDetails", model.ChangeDiscoveryScheduleCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an asset source.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAssetSourceRequest
     * @return CreateAssetSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/CreateAssetSource.ts.html |here} to see how to use CreateAssetSource API.
     */
    createAssetSource(createAssetSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#createAssetSource.");
            const operationName = "createAssetSource";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createAssetSourceRequest.opcRetryToken,
                "opc-request-id": createAssetSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAssetSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assetSources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAssetSourceRequest.createAssetSourceDetails, "CreateAssetSourceDetails", model.CreateAssetSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "assetSource",
                    bodyModel: model.AssetSource,
                    type: "model.AssetSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates the discovery schedule.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDiscoveryScheduleRequest
     * @return CreateDiscoveryScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/CreateDiscoverySchedule.ts.html |here} to see how to use CreateDiscoverySchedule API.
     */
    createDiscoverySchedule(createDiscoveryScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#createDiscoverySchedule.");
            const operationName = "createDiscoverySchedule";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDiscoveryScheduleRequest.opcRetryToken,
                "opc-request-id": createDiscoveryScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDiscoveryScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoverySchedules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDiscoveryScheduleRequest.createDiscoveryScheduleDetails, "CreateDiscoveryScheduleDetails", model.CreateDiscoveryScheduleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "discoverySchedule",
                    bodyModel: model.DiscoverySchedule,
                    type: "model.DiscoverySchedule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the asset source by ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAssetSourceRequest
     * @return DeleteAssetSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/DeleteAssetSource.ts.html |here} to see how to use DeleteAssetSource API.
     */
    deleteAssetSource(deleteAssetSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#deleteAssetSource.");
            const operationName = "deleteAssetSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetSourceId}": deleteAssetSourceRequest.assetSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAssetSourceRequest.ifMatch,
                "opc-request-id": deleteAssetSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAssetSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assetSources/{assetSourceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified discovery schedule.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDiscoveryScheduleRequest
     * @return DeleteDiscoveryScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/DeleteDiscoverySchedule.ts.html |here} to see how to use DeleteDiscoverySchedule API.
     */
    deleteDiscoverySchedule(deleteDiscoveryScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#deleteDiscoverySchedule.");
            const operationName = "deleteDiscoverySchedule";
            const apiReferenceLink = "";
            const pathParams = {
                "{discoveryScheduleId}": deleteDiscoveryScheduleRequest.discoveryScheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDiscoveryScheduleRequest.ifMatch,
                "opc-request-id": deleteDiscoveryScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDiscoveryScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoverySchedules/{discoveryScheduleId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the asset source by ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAssetSourceRequest
     * @return GetAssetSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/GetAssetSource.ts.html |here} to see how to use GetAssetSource API.
     */
    getAssetSource(getAssetSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#getAssetSource.");
            const operationName = "getAssetSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetSourceId}": getAssetSourceRequest.assetSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAssetSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAssetSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assetSources/{assetSourceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "assetSource",
                    bodyModel: model.AssetSource,
                    type: "model.AssetSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Reads information about the specified discovery schedule.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDiscoveryScheduleRequest
     * @return GetDiscoveryScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/GetDiscoverySchedule.ts.html |here} to see how to use GetDiscoverySchedule API.
     */
    getDiscoverySchedule(getDiscoveryScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#getDiscoverySchedule.");
            const operationName = "getDiscoverySchedule";
            const apiReferenceLink = "";
            const pathParams = {
                "{discoveryScheduleId}": getDiscoveryScheduleRequest.discoveryScheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDiscoveryScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDiscoveryScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoverySchedules/{discoveryScheduleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "discoverySchedule",
                    bodyModel: model.DiscoverySchedule,
                    type: "model.DiscoverySchedule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets known connections to the asset source by the asset source ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAssetSourceConnectionsRequest
     * @return ListAssetSourceConnectionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListAssetSourceConnections.ts.html |here} to see how to use ListAssetSourceConnections API.
     */
    listAssetSourceConnections(listAssetSourceConnectionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#listAssetSourceConnections.");
            const operationName = "listAssetSourceConnections";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetSourceId}": listAssetSourceConnectionsRequest.assetSourceId
            };
            const queryParams = {
                "limit": listAssetSourceConnectionsRequest.limit,
                "page": listAssetSourceConnectionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAssetSourceConnectionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAssetSourceConnectionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assetSources/{assetSourceId}/actions/listConnections",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "assetSourceConnectionCollection",
                    bodyModel: model.AssetSourceConnectionCollection,
                    type: "model.AssetSourceConnectionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of asset sources.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAssetSourcesRequest
     * @return ListAssetSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListAssetSources.ts.html |here} to see how to use ListAssetSources API.
     */
    listAssetSources(listAssetSourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#listAssetSources.");
            const operationName = "listAssetSources";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "assetSourceId": listAssetSourcesRequest.assetSourceId,
                "sortBy": listAssetSourcesRequest.sortBy,
                "lifecycleState": listAssetSourcesRequest.lifecycleState,
                "sortOrder": listAssetSourcesRequest.sortOrder,
                "displayName": listAssetSourcesRequest.displayName,
                "compartmentId": listAssetSourcesRequest.compartmentId,
                "limit": listAssetSourcesRequest.limit,
                "page": listAssetSourcesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAssetSourcesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAssetSourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assetSources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "assetSourceCollection",
                    bodyModel: model.AssetSourceCollection,
                    type: "model.AssetSourceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists discovery schedules.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDiscoverySchedulesRequest
     * @return ListDiscoverySchedulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListDiscoverySchedules.ts.html |here} to see how to use ListDiscoverySchedules API.
     */
    listDiscoverySchedules(listDiscoverySchedulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#listDiscoverySchedules.");
            const operationName = "listDiscoverySchedules";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "discoveryScheduleId": listDiscoverySchedulesRequest.discoveryScheduleId,
                "lifecycleState": listDiscoverySchedulesRequest.lifecycleState,
                "sortBy": listDiscoverySchedulesRequest.sortBy,
                "sortOrder": listDiscoverySchedulesRequest.sortOrder,
                "displayName": listDiscoverySchedulesRequest.displayName,
                "compartmentId": listDiscoverySchedulesRequest.compartmentId,
                "limit": listDiscoverySchedulesRequest.limit,
                "page": listDiscoverySchedulesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDiscoverySchedulesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDiscoverySchedulesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoverySchedules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "discoveryScheduleCollection",
                    bodyModel: model.DiscoveryScheduleCollection,
                    type: "model.DiscoveryScheduleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of supported cloud regions related to AssetSourceTypeParam.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSupportedCloudRegionsRequest
     * @return ListSupportedCloudRegionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListSupportedCloudRegions.ts.html |here} to see how to use ListSupportedCloudRegions API.
     */
    listSupportedCloudRegions(listSupportedCloudRegionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#listSupportedCloudRegions.");
            const operationName = "listSupportedCloudRegions";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "assetSourceType": listSupportedCloudRegionsRequest.assetSourceType,
                "nameContains": listSupportedCloudRegionsRequest.nameContains,
                "sortBy": listSupportedCloudRegionsRequest.sortBy,
                "sortOrder": listSupportedCloudRegionsRequest.sortOrder,
                "limit": listSupportedCloudRegionsRequest.limit,
                "page": listSupportedCloudRegionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSupportedCloudRegionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSupportedCloudRegionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/supportedCloudRegions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "supportedCloudRegionCollection",
                    bodyModel: model.SupportedCloudRegionCollection,
                    type: "model.SupportedCloudRegionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Initiates the process of asset metadata synchronization with the related asset source.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RefreshAssetSourceRequest
     * @return RefreshAssetSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/RefreshAssetSource.ts.html |here} to see how to use RefreshAssetSource API.
     */
    refreshAssetSource(refreshAssetSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#refreshAssetSource.");
            const operationName = "refreshAssetSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetSourceId}": refreshAssetSourceRequest.assetSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": refreshAssetSourceRequest.opcRequestId,
                "opc-retry-token": refreshAssetSourceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, refreshAssetSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assetSources/{assetSourceId}/actions/refresh",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the asset source.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAssetSourceRequest
     * @return UpdateAssetSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/UpdateAssetSource.ts.html |here} to see how to use UpdateAssetSource API.
     */
    updateAssetSource(updateAssetSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#updateAssetSource.");
            const operationName = "updateAssetSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetSourceId}": updateAssetSourceRequest.assetSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAssetSourceRequest.ifMatch,
                "opc-request-id": updateAssetSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAssetSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assetSources/{assetSourceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAssetSourceRequest.updateAssetSourceDetails, "UpdateAssetSourceDetails", model.UpdateAssetSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified discovery schedule.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDiscoveryScheduleRequest
     * @return UpdateDiscoveryScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/UpdateDiscoverySchedule.ts.html |here} to see how to use UpdateDiscoverySchedule API.
     */
    updateDiscoverySchedule(updateDiscoveryScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DiscoveryClient#updateDiscoverySchedule.");
            const operationName = "updateDiscoverySchedule";
            const apiReferenceLink = "";
            const pathParams = {
                "{discoveryScheduleId}": updateDiscoveryScheduleRequest.discoveryScheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDiscoveryScheduleRequest.ifMatch,
                "opc-request-id": updateDiscoveryScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDiscoveryScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/discoverySchedules/{discoveryScheduleId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDiscoveryScheduleRequest.updateDiscoveryScheduleDetails, "UpdateDiscoveryScheduleDetails", model.UpdateDiscoveryScheduleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "discoverySchedule",
                    bodyModel: model.DiscoverySchedule,
                    type: "model.DiscoverySchedule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DiscoveryClient = DiscoveryClient;
DiscoveryClient.serviceEndpointTemplate = "https://cloudbridge.{region}.oci.{secondLevelDomain}";
DiscoveryClient.endpointServiceName = "";
var InventoryApiKeys;
(function (InventoryApiKeys) {
})(InventoryApiKeys = exports.InventoryApiKeys || (exports.InventoryApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class InventoryClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "Inventory";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("cloudbridge")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("cloudbridge");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220509";
        if (this.logger)
            this.logger.info(`InventoryClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(InventoryClient.serviceEndpointTemplate, this._region, InventoryClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(InventoryClient.serviceEndpointTemplate, this._regionId, InventoryClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(InventoryClient.serviceEndpointTemplate, region, InventoryClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(InventoryClient.serviceEndpointTemplate, regionId, InventoryClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new InventoryWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new inventory_waiter_1.InventoryWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Returns an aggregation of assets. Aggregation groups are sorted by groupBy property.
     * Default sort order is ascending, but can be overridden by the sortOrder parameter.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AnalyzeAssetsRequest
     * @return AnalyzeAssetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/AnalyzeAssets.ts.html |here} to see how to use AnalyzeAssets API.
     */
    analyzeAssets(analyzeAssetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#analyzeAssets.");
            const operationName = "analyzeAssets";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": analyzeAssetsRequest.compartmentId,
                "limit": analyzeAssetsRequest.limit,
                "page": analyzeAssetsRequest.page,
                "lifecycleState": analyzeAssetsRequest.lifecycleState,
                "sourceKey": analyzeAssetsRequest.sourceKey,
                "externalAssetKey": analyzeAssetsRequest.externalAssetKey,
                "assetType": analyzeAssetsRequest.assetType,
                "sortOrder": analyzeAssetsRequest.sortOrder,
                "aggregationProperties": analyzeAssetsRequest.aggregationProperties,
                "groupBy": analyzeAssetsRequest.groupBy,
                "inventoryId": analyzeAssetsRequest.inventoryId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": analyzeAssetsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, analyzeAssetsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assetAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "assetAggregationCollection",
                    bodyModel: model.AssetAggregationCollection,
                    type: "model.AssetAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves an asset resource from one compartment to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAssetCompartmentRequest
     * @return ChangeAssetCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ChangeAssetCompartment.ts.html |here} to see how to use ChangeAssetCompartment API.
     */
    changeAssetCompartment(changeAssetCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#changeAssetCompartment.");
            const operationName = "changeAssetCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetId}": changeAssetCompartmentRequest.assetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAssetCompartmentRequest.ifMatch,
                "opc-request-id": changeAssetCompartmentRequest.opcRequestId,
                "opc-retry-token": changeAssetCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAssetCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assets/{assetId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAssetCompartmentRequest.changeAssetCompartmentDetails, "ChangeAssetCompartmentDetails", model.ChangeAssetCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Change an asset's tag.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAssetTagsRequest
     * @return ChangeAssetTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ChangeAssetTags.ts.html |here} to see how to use ChangeAssetTags API.
     */
    changeAssetTags(changeAssetTagsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#changeAssetTags.");
            const operationName = "changeAssetTags";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetId}": changeAssetTagsRequest.assetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAssetTagsRequest.ifMatch,
                "opc-request-id": changeAssetTagsRequest.opcRequestId,
                "opc-retry-token": changeAssetTagsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAssetTagsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assets/{assetId}/actions/changeTags",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAssetTagsRequest.changeAssetTagsDetails, "ChangeAssetTagsDetails", model.ChangeAssetTagsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "asset",
                    bodyModel: model.Asset,
                    type: "model.Asset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an asset.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAssetRequest
     * @return CreateAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/CreateAsset.ts.html |here} to see how to use CreateAsset API.
     */
    createAsset(createAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#createAsset.");
            const operationName = "createAsset";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createAssetRequest.opcRequestId,
                "opc-retry-token": createAssetRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assets",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAssetRequest.createAssetDetails, "CreateAssetDetails", model.CreateAssetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "asset",
                    bodyModel: model.Asset,
                    type: "model.Asset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an inventory.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateInventoryRequest
     * @return CreateInventoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/CreateInventory.ts.html |here} to see how to use CreateInventory API.
     */
    createInventory(createInventoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#createInventory.");
            const operationName = "createInventory";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createInventoryRequest.opcRequestId,
                "opc-retry-token": createInventoryRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createInventoryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/inventories",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createInventoryRequest.createInventoryDetails, "CreateInventoryDetails", model.CreateInventoryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an asset resource by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAssetRequest
     * @return DeleteAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/DeleteAsset.ts.html |here} to see how to use DeleteAsset API.
     */
    deleteAsset(deleteAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#deleteAsset.");
            const operationName = "deleteAsset";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetId}": deleteAssetRequest.assetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAssetRequest.ifMatch,
                "opc-request-id": deleteAssetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assets/{assetId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an inventory resource by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteInventoryRequest
     * @return DeleteInventoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/DeleteInventory.ts.html |here} to see how to use DeleteInventory API.
     */
    deleteInventory(deleteInventoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#deleteInventory.");
            const operationName = "deleteInventory";
            const apiReferenceLink = "";
            const pathParams = {
                "{inventoryId}": deleteInventoryRequest.inventoryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteInventoryRequest.ifMatch,
                "opc-request-id": deleteInventoryRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteInventoryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/inventories/{inventoryId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets an asset by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAssetRequest
     * @return GetAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/GetAsset.ts.html |here} to see how to use GetAsset API.
     */
    getAsset(getAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#getAsset.");
            const operationName = "getAsset";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetId}": getAssetRequest.assetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAssetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assets/{assetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "asset",
                    bodyModel: model.Asset,
                    type: "model.Asset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets an inventory by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetInventoryRequest
     * @return GetInventoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/GetInventory.ts.html |here} to see how to use GetInventory API.
     */
    getInventory(getInventoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#getInventory.");
            const operationName = "getInventory";
            const apiReferenceLink = "";
            const pathParams = {
                "{inventoryId}": getInventoryRequest.inventoryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getInventoryRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getInventoryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/inventories/{inventoryId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "inventory",
                    bodyModel: model.Inventory,
                    type: "model.Inventory",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Import resources in inventory.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ImportInventoryRequest
     * @return ImportInventoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ImportInventory.ts.html |here} to see how to use ImportInventory API.
     */
    importInventory(importInventoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#importInventory.");
            const operationName = "importInventory";
            const apiReferenceLink = "";
            const pathParams = {
                "{inventoryId}": importInventoryRequest.inventoryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": importInventoryRequest.opcRetryToken,
                "opc-request-id": importInventoryRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, importInventoryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/inventories/{inventoryId}/actions/import",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(importInventoryRequest.importInventoryDetails, "ImportInventoryDetails", model.ImportInventoryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of assets.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAssetsRequest
     * @return ListAssetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListAssets.ts.html |here} to see how to use ListAssets API.
     */
    listAssets(listAssetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#listAssets.");
            const operationName = "listAssets";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAssetsRequest.compartmentId,
                "limit": listAssetsRequest.limit,
                "page": listAssetsRequest.page,
                "lifecycleState": listAssetsRequest.lifecycleState,
                "sourceKey": listAssetsRequest.sourceKey,
                "externalAssetKey": listAssetsRequest.externalAssetKey,
                "assetType": listAssetsRequest.assetType,
                "assetId": listAssetsRequest.assetId,
                "displayName": listAssetsRequest.displayName,
                "sortOrder": listAssetsRequest.sortOrder,
                "sortBy": listAssetsRequest.sortBy,
                "inventoryId": listAssetsRequest.inventoryId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAssetsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAssetsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "assetCollection",
                    bodyModel: model.AssetCollection,
                    type: "model.AssetCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * List asset historical metrics.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListHistoricalMetricsRequest
     * @return ListHistoricalMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListHistoricalMetrics.ts.html |here} to see how to use ListHistoricalMetrics API.
     */
    listHistoricalMetrics(listHistoricalMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#listHistoricalMetrics.");
            const operationName = "listHistoricalMetrics";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetId}": listHistoricalMetricsRequest.assetId
            };
            const queryParams = {
                "limit": listHistoricalMetricsRequest.limit,
                "page": listHistoricalMetricsRequest.page,
                "sortOrder": listHistoricalMetricsRequest.sortOrder,
                "sortBy": listHistoricalMetricsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHistoricalMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHistoricalMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assets/{assetId}/historicalMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "historicalMetricCollection",
                    bodyModel: model.HistoricalMetricCollection,
                    type: "model.HistoricalMetricCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of inventories.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListInventoriesRequest
     * @return ListInventoriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListInventories.ts.html |here} to see how to use ListInventories API.
     */
    listInventories(listInventoriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#listInventories.");
            const operationName = "listInventories";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInventoriesRequest.compartmentId,
                "sortOrder": listInventoriesRequest.sortOrder,
                "sortBy": listInventoriesRequest.sortBy,
                "limit": listInventoriesRequest.limit,
                "page": listInventoriesRequest.page,
                "lifecycleState": listInventoriesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInventoriesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listInventoriesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/inventories",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "inventoryCollection",
                    bodyModel: model.InventoryCollection,
                    type: "model.InventoryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates or updates all metrics related to the asset.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SubmitHistoricalMetricsRequest
     * @return SubmitHistoricalMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/SubmitHistoricalMetrics.ts.html |here} to see how to use SubmitHistoricalMetrics API.
     */
    submitHistoricalMetrics(submitHistoricalMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#submitHistoricalMetrics.");
            const operationName = "submitHistoricalMetrics";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetId}": submitHistoricalMetricsRequest.assetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": submitHistoricalMetricsRequest.ifMatch,
                "opc-request-id": submitHistoricalMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, submitHistoricalMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assets/{assetId}/actions/submitHistoricalMetrics",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(submitHistoricalMetricsRequest.submitHistoricalMetricsDetails, "SubmitHistoricalMetricsDetails", model.SubmitHistoricalMetricsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "historicalMetricCollection",
                    bodyModel: model.HistoricalMetricCollection,
                    type: "model.HistoricalMetricCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the asset.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAssetRequest
     * @return UpdateAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/UpdateAsset.ts.html |here} to see how to use UpdateAsset API.
     */
    updateAsset(updateAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#updateAsset.");
            const operationName = "updateAsset";
            const apiReferenceLink = "";
            const pathParams = {
                "{assetId}": updateAssetRequest.assetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAssetRequest.ifMatch,
                "opc-request-id": updateAssetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/assets/{assetId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAssetRequest.updateAssetDetails, "UpdateAssetDetails", model.UpdateAssetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "asset",
                    bodyModel: model.Asset,
                    type: "model.Asset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates an inventory.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateInventoryRequest
     * @return UpdateInventoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/UpdateInventory.ts.html |here} to see how to use UpdateInventory API.
     */
    updateInventory(updateInventoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InventoryClient#updateInventory.");
            const operationName = "updateInventory";
            const apiReferenceLink = "";
            const pathParams = {
                "{inventoryId}": updateInventoryRequest.inventoryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateInventoryRequest.ifMatch,
                "opc-request-id": updateInventoryRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateInventoryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/inventories/{inventoryId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateInventoryRequest.updateInventoryDetails, "UpdateInventoryDetails", model.UpdateInventoryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "inventory",
                    bodyModel: model.Inventory,
                    type: "model.Inventory",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.InventoryClient = InventoryClient;
InventoryClient.serviceEndpointTemplate = "https://cloudbridge.{region}.oci.{secondLevelDomain}";
InventoryClient.endpointServiceName = "";
var OcbAgentSvcApiKeys;
(function (OcbAgentSvcApiKeys) {
})(OcbAgentSvcApiKeys = exports.OcbAgentSvcApiKeys || (exports.OcbAgentSvcApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class OcbAgentSvcClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "OcbAgentSvc";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("cloudbridge")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("cloudbridge");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220509";
        if (this.logger)
            this.logger.info(`OcbAgentSvcClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(OcbAgentSvcClient.serviceEndpointTemplate, this._region, OcbAgentSvcClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(OcbAgentSvcClient.serviceEndpointTemplate, this._regionId, OcbAgentSvcClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(OcbAgentSvcClient.serviceEndpointTemplate, region, OcbAgentSvcClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(OcbAgentSvcClient.serviceEndpointTemplate, regionId, OcbAgentSvcClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new OcbAgentSvcWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new ocbagentsvc_waiter_1.OcbAgentSvcWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Add a dependency to the environment. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddAgentDependencyRequest
     * @return AddAgentDependencyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/AddAgentDependency.ts.html |here} to see how to use AddAgentDependency API.
     */
    addAgentDependency(addAgentDependencyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#addAgentDependency.");
            const operationName = "addAgentDependency";
            const apiReferenceLink = "";
            const pathParams = {
                "{environmentId}": addAgentDependencyRequest.environmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": addAgentDependencyRequest.ifMatch,
                "opc-retry-token": addAgentDependencyRequest.opcRetryToken,
                "opc-request-id": addAgentDependencyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addAgentDependencyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/environments/{environmentId}/actions/addAgentDependency",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addAgentDependencyRequest.addAgentDependencyDetails, "AddAgentDependencyDetails", model.AddAgentDependencyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "environment",
                    bodyModel: model.Environment,
                    type: "model.Environment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves an Agent resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAgentCompartmentRequest
     * @return ChangeAgentCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ChangeAgentCompartment.ts.html |here} to see how to use ChangeAgentCompartment API.
     */
    changeAgentCompartment(changeAgentCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#changeAgentCompartment.");
            const operationName = "changeAgentCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{agentId}": changeAgentCompartmentRequest.agentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAgentCompartmentRequest.ifMatch,
                "opc-request-id": changeAgentCompartmentRequest.opcRequestId,
                "opc-retry-token": changeAgentCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAgentCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agents/{agentId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAgentCompartmentRequest.changeAgentCompartmentDetails, "ChangeAgentCompartmentDetails", model.ChangeAgentCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a AgentDependency resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAgentDependencyCompartmentRequest
     * @return ChangeAgentDependencyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ChangeAgentDependencyCompartment.ts.html |here} to see how to use ChangeAgentDependencyCompartment API.
     */
    changeAgentDependencyCompartment(changeAgentDependencyCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#changeAgentDependencyCompartment.");
            const operationName = "changeAgentDependencyCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{agentDependencyId}": changeAgentDependencyCompartmentRequest.agentDependencyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAgentDependencyCompartmentRequest.ifMatch,
                "opc-request-id": changeAgentDependencyCompartmentRequest.opcRequestId,
                "opc-retry-token": changeAgentDependencyCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAgentDependencyCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agentDependencies/{agentDependencyId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAgentDependencyCompartmentRequest.changeAgentDependencyCompartmentDetails, "ChangeAgentDependencyCompartmentDetails", model.ChangeAgentDependencyCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a source environment resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeEnvironmentCompartmentRequest
     * @return ChangeEnvironmentCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ChangeEnvironmentCompartment.ts.html |here} to see how to use ChangeEnvironmentCompartment API.
     */
    changeEnvironmentCompartment(changeEnvironmentCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#changeEnvironmentCompartment.");
            const operationName = "changeEnvironmentCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{environmentId}": changeEnvironmentCompartmentRequest.environmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeEnvironmentCompartmentRequest.ifMatch,
                "opc-request-id": changeEnvironmentCompartmentRequest.opcRequestId,
                "opc-retry-token": changeEnvironmentCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeEnvironmentCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/environments/{environmentId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeEnvironmentCompartmentRequest.changeEnvironmentCompartmentDetails, "ChangeEnvironmentCompartmentDetails", model.ChangeEnvironmentCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an Agent.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAgentRequest
     * @return CreateAgentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/CreateAgent.ts.html |here} to see how to use CreateAgent API.
     */
    createAgent(createAgentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#createAgent.");
            const operationName = "createAgent";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createAgentRequest.opcRetryToken,
                "opc-request-id": createAgentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAgentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agents",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAgentRequest.createAgentDetails, "CreateAgentDetails", model.CreateAgentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "agent",
                    bodyModel: model.Agent,
                    type: "model.Agent",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an AgentDependency.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAgentDependencyRequest
     * @return CreateAgentDependencyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/CreateAgentDependency.ts.html |here} to see how to use CreateAgentDependency API.
     */
    createAgentDependency(createAgentDependencyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#createAgentDependency.");
            const operationName = "createAgentDependency";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createAgentDependencyRequest.opcRetryToken,
                "opc-request-id": createAgentDependencyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAgentDependencyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agentDependencies",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAgentDependencyRequest.createAgentDependencyDetails, "CreateAgentDependencyDetails", model.CreateAgentDependencyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "agentDependency",
                    bodyModel: model.AgentDependency,
                    type: "model.AgentDependency",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a source environment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateEnvironmentRequest
     * @return CreateEnvironmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/CreateEnvironment.ts.html |here} to see how to use CreateEnvironment API.
     */
    createEnvironment(createEnvironmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#createEnvironment.");
            const operationName = "createEnvironment";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createEnvironmentRequest.opcRetryToken,
                "opc-request-id": createEnvironmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createEnvironmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/environments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createEnvironmentRequest.createEnvironmentDetails, "CreateEnvironmentDetails", model.CreateEnvironmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "environment",
                    bodyModel: model.Environment,
                    type: "model.Environment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an Agent resource identified by an identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAgentRequest
     * @return DeleteAgentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/DeleteAgent.ts.html |here} to see how to use DeleteAgent API.
     */
    deleteAgent(deleteAgentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#deleteAgent.");
            const operationName = "deleteAgent";
            const apiReferenceLink = "";
            const pathParams = {
                "{agentId}": deleteAgentRequest.agentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAgentRequest.ifMatch,
                "opc-request-id": deleteAgentRequest.opcRequestId,
                "opc-retry-token": deleteAgentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAgentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agents/{agentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the AgentDependency resource based on an identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAgentDependencyRequest
     * @return DeleteAgentDependencyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/DeleteAgentDependency.ts.html |here} to see how to use DeleteAgentDependency API.
     */
    deleteAgentDependency(deleteAgentDependencyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#deleteAgentDependency.");
            const operationName = "deleteAgentDependency";
            const apiReferenceLink = "";
            const pathParams = {
                "{agentDependencyId}": deleteAgentDependencyRequest.agentDependencyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAgentDependencyRequest.ifMatch,
                "opc-request-id": deleteAgentDependencyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAgentDependencyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agentDependencies/{agentDependencyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a the source environment resource identified by an identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteEnvironmentRequest
     * @return DeleteEnvironmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/DeleteEnvironment.ts.html |here} to see how to use DeleteEnvironment API.
     */
    deleteEnvironment(deleteEnvironmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#deleteEnvironment.");
            const operationName = "deleteEnvironment";
            const apiReferenceLink = "";
            const pathParams = {
                "{environmentId}": deleteEnvironmentRequest.environmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteEnvironmentRequest.ifMatch,
                "opc-request-id": deleteEnvironmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteEnvironmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/environments/{environmentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets an Agent by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAgentRequest
     * @return GetAgentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/GetAgent.ts.html |here} to see how to use GetAgent API.
     */
    getAgent(getAgentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#getAgent.");
            const operationName = "getAgent";
            const apiReferenceLink = "";
            const pathParams = {
                "{agentId}": getAgentRequest.agentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAgentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAgentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agents/{agentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "agent",
                    bodyModel: model.Agent,
                    type: "model.Agent",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets an AgentDependency by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAgentDependencyRequest
     * @return GetAgentDependencyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/GetAgentDependency.ts.html |here} to see how to use GetAgentDependency API.
     */
    getAgentDependency(getAgentDependencyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#getAgentDependency.");
            const operationName = "getAgentDependency";
            const apiReferenceLink = "";
            const pathParams = {
                "{agentDependencyId}": getAgentDependencyRequest.agentDependencyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAgentDependencyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAgentDependencyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agentDependencies/{agentDependencyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "agentDependency",
                    bodyModel: model.AgentDependency,
                    type: "model.AgentDependency",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a source environment by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetEnvironmentRequest
     * @return GetEnvironmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/GetEnvironment.ts.html |here} to see how to use GetEnvironment API.
     */
    getEnvironment(getEnvironmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#getEnvironment.");
            const operationName = "getEnvironment";
            const apiReferenceLink = "";
            const pathParams = {
                "{environmentId}": getEnvironmentRequest.environmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getEnvironmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getEnvironmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/environments/{environmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "environment",
                    bodyModel: model.Environment,
                    type: "model.Environment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a plugin by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPluginRequest
     * @return GetPluginResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/GetPlugin.ts.html |here} to see how to use GetPlugin API.
     */
    getPlugin(getPluginRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#getPlugin.");
            const operationName = "getPlugin";
            const apiReferenceLink = "";
            const pathParams = {
                "{agentId}": getPluginRequest.agentId,
                "{pluginName}": getPluginRequest.pluginName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getPluginRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getPluginRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agents/{agentId}/plugins/{pluginName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "plugin",
                    bodyModel: model.Plugin,
                    type: "model.Plugin",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of AgentDependencies such as AgentDependencyCollection.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAgentDependenciesRequest
     * @return ListAgentDependenciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListAgentDependencies.ts.html |here} to see how to use ListAgentDependencies API.
     */
    listAgentDependencies(listAgentDependenciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#listAgentDependencies.");
            const operationName = "listAgentDependencies";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAgentDependenciesRequest.compartmentId,
                "agentId": listAgentDependenciesRequest.agentId,
                "environmentId": listAgentDependenciesRequest.environmentId,
                "lifecycleState": listAgentDependenciesRequest.lifecycleState,
                "displayName": listAgentDependenciesRequest.displayName,
                "limit": listAgentDependenciesRequest.limit,
                "page": listAgentDependenciesRequest.page,
                "sortOrder": listAgentDependenciesRequest.sortOrder,
                "sortBy": listAgentDependenciesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAgentDependenciesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAgentDependenciesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agentDependencies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "agentDependencyCollection",
                    bodyModel: model.AgentDependencyCollection,
                    type: "model.AgentDependencyCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Agents.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAgentsRequest
     * @return ListAgentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListAgents.ts.html |here} to see how to use ListAgents API.
     */
    listAgents(listAgentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#listAgents.");
            const operationName = "listAgents";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAgentsRequest.compartmentId,
                "environmentId": listAgentsRequest.environmentId,
                "lifecycleState": listAgentsRequest.lifecycleState,
                "displayName": listAgentsRequest.displayName,
                "agentId": listAgentsRequest.agentId,
                "limit": listAgentsRequest.limit,
                "page": listAgentsRequest.page,
                "sortOrder": listAgentsRequest.sortOrder,
                "sortBy": listAgentsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAgentsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAgentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agents",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "agentCollection",
                    bodyModel: model.AgentCollection,
                    type: "model.AgentCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Appliance Images.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListApplianceImagesRequest
     * @return ListApplianceImagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListApplianceImages.ts.html |here} to see how to use ListApplianceImages API.
     */
    listApplianceImages(listApplianceImagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#listApplianceImages.");
            const operationName = "listApplianceImages";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listApplianceImagesRequest.compartmentId,
                "displayName": listApplianceImagesRequest.displayName,
                "limit": listApplianceImagesRequest.limit,
                "page": listApplianceImagesRequest.page,
                "sortOrder": listApplianceImagesRequest.sortOrder,
                "sortBy": listApplianceImagesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listApplianceImagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listApplianceImagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/applianceImages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "applianceImageCollection",
                    bodyModel: model.ApplianceImageCollection,
                    type: "model.ApplianceImageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of source environments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListEnvironmentsRequest
     * @return ListEnvironmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/ListEnvironments.ts.html |here} to see how to use ListEnvironments API.
     */
    listEnvironments(listEnvironmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#listEnvironments.");
            const operationName = "listEnvironments";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listEnvironmentsRequest.compartmentId,
                "lifecycleState": listEnvironmentsRequest.lifecycleState,
                "displayName": listEnvironmentsRequest.displayName,
                "environmentId": listEnvironmentsRequest.environmentId,
                "limit": listEnvironmentsRequest.limit,
                "page": listEnvironmentsRequest.page,
                "sortOrder": listEnvironmentsRequest.sortOrder,
                "sortBy": listEnvironmentsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listEnvironmentsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listEnvironmentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/environments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "environmentCollection",
                    bodyModel: model.EnvironmentCollection,
                    type: "model.EnvironmentCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds a dependency to the source environment. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveAgentDependencyRequest
     * @return RemoveAgentDependencyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/RemoveAgentDependency.ts.html |here} to see how to use RemoveAgentDependency API.
     */
    removeAgentDependency(removeAgentDependencyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#removeAgentDependency.");
            const operationName = "removeAgentDependency";
            const apiReferenceLink = "";
            const pathParams = {
                "{environmentId}": removeAgentDependencyRequest.environmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removeAgentDependencyRequest.ifMatch,
                "opc-retry-token": removeAgentDependencyRequest.opcRetryToken,
                "opc-request-id": removeAgentDependencyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeAgentDependencyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/environments/{environmentId}/actions/removeAgentDependency",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeAgentDependencyRequest.removeAgentDependencyDetails, "RemoveAgentDependencyDetails", model.RemoveAgentDependencyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "environment",
                    bodyModel: model.Environment,
                    type: "model.Environment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the Agent.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAgentRequest
     * @return UpdateAgentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/UpdateAgent.ts.html |here} to see how to use UpdateAgent API.
     */
    updateAgent(updateAgentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#updateAgent.");
            const operationName = "updateAgent";
            const apiReferenceLink = "";
            const pathParams = {
                "{agentId}": updateAgentRequest.agentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAgentRequest.ifMatch,
                "opc-request-id": updateAgentRequest.opcRequestId,
                "opc-retry-token": updateAgentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAgentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agents/{agentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAgentRequest.updateAgentDetails, "UpdateAgentDetails", model.UpdateAgentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "agent",
                    bodyModel: model.Agent,
                    type: "model.Agent",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the AgentDependency.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAgentDependencyRequest
     * @return UpdateAgentDependencyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/UpdateAgentDependency.ts.html |here} to see how to use UpdateAgentDependency API.
     */
    updateAgentDependency(updateAgentDependencyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#updateAgentDependency.");
            const operationName = "updateAgentDependency";
            const apiReferenceLink = "";
            const pathParams = {
                "{agentDependencyId}": updateAgentDependencyRequest.agentDependencyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAgentDependencyRequest.ifMatch,
                "opc-request-id": updateAgentDependencyRequest.opcRequestId,
                "opc-retry-token": updateAgentDependencyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAgentDependencyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agentDependencies/{agentDependencyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAgentDependencyRequest.updateAgentDependencyDetails, "UpdateAgentDependencyDetails", model.UpdateAgentDependencyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the source environment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateEnvironmentRequest
     * @return UpdateEnvironmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/UpdateEnvironment.ts.html |here} to see how to use UpdateEnvironment API.
     */
    updateEnvironment(updateEnvironmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#updateEnvironment.");
            const operationName = "updateEnvironment";
            const apiReferenceLink = "";
            const pathParams = {
                "{environmentId}": updateEnvironmentRequest.environmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateEnvironmentRequest.ifMatch,
                "opc-request-id": updateEnvironmentRequest.opcRequestId,
                "opc-retry-token": updateEnvironmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateEnvironmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/environments/{environmentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateEnvironmentRequest.updateEnvironmentDetails, "UpdateEnvironmentDetails", model.UpdateEnvironmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "environment",
                    bodyModel: model.Environment,
                    type: "model.Environment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the plugin.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdatePluginRequest
     * @return UpdatePluginResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudbridge/UpdatePlugin.ts.html |here} to see how to use UpdatePlugin API.
     */
    updatePlugin(updatePluginRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OcbAgentSvcClient#updatePlugin.");
            const operationName = "updatePlugin";
            const apiReferenceLink = "";
            const pathParams = {
                "{agentId}": updatePluginRequest.agentId,
                "{pluginName}": updatePluginRequest.pluginName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updatePluginRequest.ifMatch,
                "opc-request-id": updatePluginRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updatePluginRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/agents/{agentId}/plugins/{pluginName}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updatePluginRequest.updatePluginDetails, "UpdatePluginDetails", model.UpdatePluginDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.OcbAgentSvcClient = OcbAgentSvcClient;
OcbAgentSvcClient.serviceEndpointTemplate = "https://cloudbridge.{region}.oci.{secondLevelDomain}";
OcbAgentSvcClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map