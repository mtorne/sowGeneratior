/**
 * Fusion Applications Environment Management API
 * Use the Fusion Applications Environment Management API to manage the environments where your Fusion Applications run. For more information, see the [Fusion Applications Environment Management documentation](https://docs.oracle.com/iaas/Content/fusion-applications/home.htm).
 * OpenAPI spec version: 20211201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { FusionApplicationsClient } from "./client";
export declare class FusionApplicationsWaiter {
    private client;
    private readonly config?;
    constructor(client: FusionApplicationsClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forDataMaskingActivity till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataMaskingActivityResponse
     */
    forDataMaskingActivity(request: serviceRequests.GetDataMaskingActivityRequest, ...targetStates: models.DataMaskingActivity.LifecycleState[]): Promise<serviceResponses.GetDataMaskingActivityResponse>;
    /**
     * Waits forFusionEnvironment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFusionEnvironmentResponse | null (null in case of 404 response)
     */
    forFusionEnvironment(request: serviceRequests.GetFusionEnvironmentRequest, ...targetStates: models.FusionEnvironment.LifecycleState[]): Promise<serviceResponses.GetFusionEnvironmentResponse | null>;
    /**
     * Waits forFusionEnvironmentFamily till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFusionEnvironmentFamilyResponse | null (null in case of 404 response)
     */
    forFusionEnvironmentFamily(request: serviceRequests.GetFusionEnvironmentFamilyRequest, ...targetStates: models.FusionEnvironmentFamily.LifecycleState[]): Promise<serviceResponses.GetFusionEnvironmentFamilyResponse | null>;
    /**
     * Waits forRefreshActivity till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRefreshActivityResponse
     */
    forRefreshActivity(request: serviceRequests.GetRefreshActivityRequest, ...targetStates: models.RefreshActivity.LifecycleState[]): Promise<serviceResponses.GetRefreshActivityResponse>;
    /**
     * Waits forScheduledActivity till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetScheduledActivityResponse
     */
    forScheduledActivity(request: serviceRequests.GetScheduledActivityRequest, ...targetStates: models.ScheduledActivity.LifecycleState[]): Promise<serviceResponses.GetScheduledActivityResponse>;
    /**
     * Waits forServiceAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetServiceAttachmentResponse | null (null in case of 404 response)
     */
    forServiceAttachment(request: serviceRequests.GetServiceAttachmentRequest, ...targetStates: models.ServiceAttachment.LifecycleState[]): Promise<serviceResponses.GetServiceAttachmentResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
