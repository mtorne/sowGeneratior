/**
 * Resource Manager API
 * Use the Resource Manager API to automate deployment and operations for all Oracle Cloud Infrastructure resources.
Using the infrastructure-as-code (IaC) model, the service is based on Terraform, an open source industry standard that lets DevOps engineers develop and deploy their infrastructure anywhere.
For more information, see
[the Resource Manager documentation](https://docs.oracle.com/iaas/Content/ResourceManager/home.htm).

 * OpenAPI spec version: 20180917
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ResourceManagerClient } from "./client";
export declare class ResourceManagerWaiter {
    private client;
    private readonly config?;
    constructor(client: ResourceManagerClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forConfigurationSourceProvider till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConfigurationSourceProviderResponse
     */
    forConfigurationSourceProvider(request: serviceRequests.GetConfigurationSourceProviderRequest, ...targetStates: models.ConfigurationSourceProvider.LifecycleState[]): Promise<serviceResponses.GetConfigurationSourceProviderResponse>;
    /**
     * Waits forJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobResponse
     */
    forJob(request: serviceRequests.GetJobRequest, ...targetStates: models.Job.LifecycleState[]): Promise<serviceResponses.GetJobResponse>;
    /**
     * Waits forPrivateEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPrivateEndpointResponse | null (null in case of 404 response)
     */
    forPrivateEndpoint(request: serviceRequests.GetPrivateEndpointRequest, ...targetStates: models.PrivateEndpoint.LifecycleState[]): Promise<serviceResponses.GetPrivateEndpointResponse | null>;
    /**
     * Waits forStack till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetStackResponse | null (null in case of 404 response)
     */
    forStack(request: serviceRequests.GetStackRequest, ...targetStates: models.Stack.LifecycleState[]): Promise<serviceResponses.GetStackResponse | null>;
    /**
     * Waits forTemplate till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTemplateResponse
     */
    forTemplate(request: serviceRequests.GetTemplateRequest, ...targetStates: models.Template.LifecycleState[]): Promise<serviceResponses.GetTemplateResponse>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
