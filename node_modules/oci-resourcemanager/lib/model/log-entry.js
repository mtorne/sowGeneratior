"use strict";
/**
 * Resource Manager API
 * Use the Resource Manager API to automate deployment and operations for all Oracle Cloud Infrastructure resources.
Using the infrastructure-as-code (IaC) model, the service is based on Terraform, an open source industry standard that lets DevOps engineers develop and deploy their infrastructure anywhere.
For more information, see
[the Resource Manager documentation](https://docs.oracle.com/iaas/Content/ResourceManager/home.htm).

 * OpenAPI spec version: 20180917
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogEntry = void 0;
var LogEntry;
(function (LogEntry) {
    let Type;
    (function (Type) {
        Type["TerraformConsole"] = "TERRAFORM_CONSOLE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Type["UnknownValue"] = "UNKNOWN_VALUE";
    })(Type = LogEntry.Type || (LogEntry.Type = {}));
    let Level;
    (function (Level) {
        Level["Trace"] = "TRACE";
        Level["Debug"] = "DEBUG";
        Level["Info"] = "INFO";
        Level["Warn"] = "WARN";
        Level["Error"] = "ERROR";
        Level["Fatal"] = "FATAL";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Level["UnknownValue"] = "UNKNOWN_VALUE";
    })(Level = LogEntry.Level || (LogEntry.Level = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    LogEntry.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    LogEntry.getDeserializedJsonObj = getDeserializedJsonObj;
})(LogEntry = exports.LogEntry || (exports.LogEntry = {}));
//# sourceMappingURL=log-entry.js.map