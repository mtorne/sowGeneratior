"use strict";
/**
 * Resource Manager API
 * Use the Resource Manager API to automate deployment and operations for all Oracle Cloud Infrastructure resources.
Using the infrastructure-as-code (IaC) model, the service is based on Terraform, an open source industry standard that lets DevOps engineers develop and deploy their infrastructure anywhere.
For more information, see
[the Resource Manager documentation](https://docs.oracle.com/iaas/Content/ResourceManager/home.htm).

 * OpenAPI spec version: 20180917
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateConfigSourceDetails = void 0;
const model = __importStar(require("../model"));
const common = require("oci-common");
var CreateConfigSourceDetails;
(function (CreateConfigSourceDetails) {
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "configSourceType" in obj && obj.configSourceType) {
            switch (obj.configSourceType) {
                case "DEVOPS_CONFIG_SOURCE":
                    return model.CreateDevOpsConfigSourceDetails.getJsonObj(jsonObj, true);
                case "BITBUCKET_CLOUD_CONFIG_SOURCE":
                    return model.CreateBitbucketCloudConfigSourceDetails.getJsonObj(jsonObj, true);
                case "ZIP_UPLOAD":
                    return model.CreateZipUploadConfigSourceDetails.getJsonObj(jsonObj, true);
                case "BITBUCKET_SERVER_CONFIG_SOURCE":
                    return model.CreateBitbucketServerConfigSourceDetails.getJsonObj(jsonObj, true);
                case "GIT_CONFIG_SOURCE":
                    return model.CreateGitConfigSourceDetails.getJsonObj(jsonObj, true);
                case "OBJECT_STORAGE_CONFIG_SOURCE":
                    return model.CreateObjectStorageConfigSourceDetails.getJsonObj(jsonObj, true);
                case "COMPARTMENT_CONFIG_SOURCE":
                    return model.CreateCompartmentConfigSourceDetails.getJsonObj(jsonObj, true);
                case "TEMPLATE_CONFIG_SOURCE":
                    return model.CreateStackTemplateConfigSourceDetails.getJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.configSourceType}`);
            }
        }
        return jsonObj;
    }
    CreateConfigSourceDetails.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "configSourceType" in obj && obj.configSourceType) {
            switch (obj.configSourceType) {
                case "DEVOPS_CONFIG_SOURCE":
                    return model.CreateDevOpsConfigSourceDetails.getDeserializedJsonObj(jsonObj, true);
                case "BITBUCKET_CLOUD_CONFIG_SOURCE":
                    return model.CreateBitbucketCloudConfigSourceDetails.getDeserializedJsonObj(jsonObj, true);
                case "ZIP_UPLOAD":
                    return model.CreateZipUploadConfigSourceDetails.getDeserializedJsonObj(jsonObj, true);
                case "BITBUCKET_SERVER_CONFIG_SOURCE":
                    return model.CreateBitbucketServerConfigSourceDetails.getDeserializedJsonObj(jsonObj, true);
                case "GIT_CONFIG_SOURCE":
                    return model.CreateGitConfigSourceDetails.getDeserializedJsonObj(jsonObj, true);
                case "OBJECT_STORAGE_CONFIG_SOURCE":
                    return model.CreateObjectStorageConfigSourceDetails.getDeserializedJsonObj(jsonObj, true);
                case "COMPARTMENT_CONFIG_SOURCE":
                    return model.CreateCompartmentConfigSourceDetails.getDeserializedJsonObj(jsonObj, true);
                case "TEMPLATE_CONFIG_SOURCE":
                    return model.CreateStackTemplateConfigSourceDetails.getDeserializedJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.configSourceType}`);
            }
        }
        return jsonObj;
    }
    CreateConfigSourceDetails.getDeserializedJsonObj = getDeserializedJsonObj;
})(CreateConfigSourceDetails = exports.CreateConfigSourceDetails || (exports.CreateConfigSourceDetails = {}));
//# sourceMappingURL=create-config-source-details.js.map