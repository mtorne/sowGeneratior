"use strict";
/**
 * NoSQL Database API
 * The control plane API for NoSQL Database Cloud Service HTTPS
provides endpoints to perform NDCS operations, including creation
and deletion of tables and indexes; population and access of data
in tables; and access of table usage metrics.

 * OpenAPI spec version: 20190828
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateConfigurationDetails = void 0;
const model = __importStar(require("../model"));
const common = require("oci-common");
var UpdateConfigurationDetails;
(function (UpdateConfigurationDetails) {
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "environment" in obj && obj.environment) {
            switch (obj.environment) {
                case "MULTI_TENANCY":
                    return model.UpdateMultiTenancyConfigurationDetails.getJsonObj(jsonObj, true);
                case "HOSTED":
                    return model.UpdateHostedConfigurationDetails.getJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.environment}`);
            }
        }
        return jsonObj;
    }
    UpdateConfigurationDetails.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "environment" in obj && obj.environment) {
            switch (obj.environment) {
                case "MULTI_TENANCY":
                    return model.UpdateMultiTenancyConfigurationDetails.getDeserializedJsonObj(jsonObj, true);
                case "HOSTED":
                    return model.UpdateHostedConfigurationDetails.getDeserializedJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.environment}`);
            }
        }
        return jsonObj;
    }
    UpdateConfigurationDetails.getDeserializedJsonObj = getDeserializedJsonObj;
})(UpdateConfigurationDetails = exports.UpdateConfigurationDetails || (exports.UpdateConfigurationDetails = {}));
//# sourceMappingURL=update-configuration-details.js.map