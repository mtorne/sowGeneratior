/**
 * Data Labeling API
 * Use Data Labeling API to create Annotations on Images, Texts & Documents, and generate snapshots.
 * OpenAPI spec version: 20211001
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DataLabelingClient } from "./client";
export declare class DataLabelingWaiter {
    private client;
    private readonly config?;
    constructor(client: DataLabelingClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAnnotation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAnnotationResponse | null (null in case of 404 response)
     */
    forAnnotation(request: serviceRequests.GetAnnotationRequest, ...targetStates: models.Annotation.LifecycleState[]): Promise<serviceResponses.GetAnnotationResponse | null>;
    /**
     * Waits forDataset till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDatasetResponse | null (null in case of 404 response)
     */
    forDataset(request: serviceRequests.GetDatasetRequest, ...targetStates: models.Dataset.LifecycleState[]): Promise<serviceResponses.GetDatasetResponse | null>;
    /**
     * Waits forRecord till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRecordResponse | null (null in case of 404 response)
     */
    forRecord(request: serviceRequests.GetRecordRequest, ...targetStates: models.Record.LifecycleState[]): Promise<serviceResponses.GetRecordResponse | null>;
}
