"use strict";
/**
 * Data Labeling API
 * Use Data Labeling API to create Annotations on Images, Texts & Documents, and generate snapshots.
 * OpenAPI spec version: 20211001
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLabelingClient = exports.DataLabelingApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const datalabeling_waiter_1 = require("./datalabeling-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var DataLabelingApiKeys;
(function (DataLabelingApiKeys) {
})(DataLabelingApiKeys = exports.DataLabelingApiKeys || (exports.DataLabelingApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class DataLabelingClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "DataLabeling";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("datalabelingservicedataplane")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("datalabelingservicedataplane");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20211001";
        if (this.logger)
            this.logger.info(`DataLabelingClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DataLabelingClient.serviceEndpointTemplate, this._region, DataLabelingClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DataLabelingClient.serviceEndpointTemplate, this._regionId, DataLabelingClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DataLabelingClient.serviceEndpointTemplate, region, DataLabelingClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DataLabelingClient.serviceEndpointTemplate, regionId, DataLabelingClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new DataLabelingWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new datalabeling_waiter_1.DataLabelingWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Creates an annotation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAnnotationRequest
     * @return CreateAnnotationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/CreateAnnotation.ts.html |here} to see how to use CreateAnnotation API.
     */
    createAnnotation(createAnnotationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#createAnnotation.");
            const operationName = "createAnnotation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/Annotation/CreateAnnotation";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createAnnotationRequest.opcRetryToken,
                "opc-request-id": createAnnotationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAnnotationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/annotations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAnnotationRequest.createAnnotationDetails, "CreateAnnotationDetails", model.CreateAnnotationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "annotation",
                    bodyModel: model.Annotation,
                    type: "model.Annotation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a record.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateRecordRequest
     * @return CreateRecordResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/CreateRecord.ts.html |here} to see how to use CreateRecord API.
     */
    createRecord(createRecordRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#createRecord.");
            const operationName = "createRecord";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/Record/CreateRecord";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createRecordRequest.opcRetryToken,
                "opc-request-id": createRecordRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createRecordRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/records",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createRecordRequest.createRecordDetails, "CreateRecordDetails", model.CreateRecordDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "record",
                    bodyModel: model.Record,
                    type: "model.Record",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * It deletes an annotation resource by identifier.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAnnotationRequest
     * @return DeleteAnnotationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/DeleteAnnotation.ts.html |here} to see how to use DeleteAnnotation API.
     */
    deleteAnnotation(deleteAnnotationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#deleteAnnotation.");
            const operationName = "deleteAnnotation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/Annotation/DeleteAnnotation";
            const pathParams = {
                "{annotationId}": deleteAnnotationRequest.annotationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAnnotationRequest.ifMatch,
                "opc-request-id": deleteAnnotationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAnnotationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/annotations/{annotationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a record resource by identifier.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteRecordRequest
     * @return DeleteRecordResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/DeleteRecord.ts.html |here} to see how to use DeleteRecord API.
     */
    deleteRecord(deleteRecordRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#deleteRecord.");
            const operationName = "deleteRecord";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/Record/DeleteRecord";
            const pathParams = {
                "{recordId}": deleteRecordRequest.recordId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteRecordRequest.ifMatch,
                "opc-request-id": deleteRecordRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteRecordRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/records/{recordId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets an annotation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAnnotationRequest
     * @return GetAnnotationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/GetAnnotation.ts.html |here} to see how to use GetAnnotation API.
     */
    getAnnotation(getAnnotationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#getAnnotation.");
            const operationName = "getAnnotation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/Annotation/GetAnnotation";
            const pathParams = {
                "{annotationId}": getAnnotationRequest.annotationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAnnotationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAnnotationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/annotations/{annotationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "annotation",
                    bodyModel: model.Annotation,
                    type: "model.Annotation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a dataset by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDatasetRequest
     * @return GetDatasetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/GetDataset.ts.html |here} to see how to use GetDataset API.
     */
    getDataset(getDatasetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#getDataset.");
            const operationName = "getDataset";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/Dataset/GetDataset";
            const pathParams = {
                "{datasetId}": getDatasetRequest.datasetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDatasetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDatasetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/datasets/{datasetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataset",
                    bodyModel: model.Dataset,
                    type: "model.Dataset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a record.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRecordRequest
     * @return GetRecordResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/GetRecord.ts.html |here} to see how to use GetRecord API.
     */
    getRecord(getRecordRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#getRecord.");
            const operationName = "getRecord";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/Record/GetRecord";
            const pathParams = {
                "{recordId}": getRecordRequest.recordId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getRecordRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getRecordRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/records/{recordId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "record",
                    bodyModel: model.Record,
                    type: "model.Record",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves the content of the record from the dataset source.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRecordContentRequest
     * @return GetRecordContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/GetRecordContent.ts.html |here} to see how to use GetRecordContent API.
     */
    getRecordContent(getRecordContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#getRecordContent.");
            const operationName = "getRecordContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/Record/GetRecordContent";
            const pathParams = {
                "{recordId}": getRecordContentRequest.recordId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getRecordContentRequest.opcRequestId,
                "if-none-match": getRecordContentRequest.ifNoneMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getRecordContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/records/{recordId}/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-type"),
                            key: "contentType",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("cache-control"),
                            key: "cacheControl",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves the preview of the record content from the dataset source.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRecordPreviewContentRequest
     * @return GetRecordPreviewContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/GetRecordPreviewContent.ts.html |here} to see how to use GetRecordPreviewContent API.
     */
    getRecordPreviewContent(getRecordPreviewContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#getRecordPreviewContent.");
            const operationName = "getRecordPreviewContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/Record/GetRecordPreviewContent";
            const pathParams = {
                "{recordId}": getRecordPreviewContentRequest.recordId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getRecordPreviewContentRequest.opcRequestId,
                "if-none-match": getRecordPreviewContentRequest.ifNoneMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getRecordPreviewContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/records/{recordId}/preview/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-type"),
                            key: "contentType",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("cache-control"),
                            key: "cacheControl",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of annotations.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAnnotationsRequest
     * @return ListAnnotationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/ListAnnotations.ts.html |here} to see how to use ListAnnotations API.
     */
    listAnnotations(listAnnotationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#listAnnotations.");
            const operationName = "listAnnotations";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/AnnotationCollection/ListAnnotations";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAnnotationsRequest.compartmentId,
                "lifecycleState": listAnnotationsRequest.lifecycleState,
                "id": listAnnotationsRequest.id,
                "datasetId": listAnnotationsRequest.datasetId,
                "updatedBy": listAnnotationsRequest.updatedBy,
                "recordId": listAnnotationsRequest.recordId,
                "timeCreatedGreaterThanOrEqualTo": listAnnotationsRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThanOrEqualTo": listAnnotationsRequest.timeCreatedLessThanOrEqualTo,
                "limit": listAnnotationsRequest.limit,
                "page": listAnnotationsRequest.page,
                "sortOrder": listAnnotationsRequest.sortOrder,
                "sortBy": listAnnotationsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAnnotationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAnnotationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/annotations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "annotationCollection",
                    bodyModel: model.AnnotationCollection,
                    type: "model.AnnotationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The list of records in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRecordsRequest
     * @return ListRecordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/ListRecords.ts.html |here} to see how to use ListRecords API.
     */
    listRecords(listRecordsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#listRecords.");
            const operationName = "listRecords";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/RecordCollection/ListRecords";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listRecordsRequest.compartmentId,
                "lifecycleState": listRecordsRequest.lifecycleState,
                "name": listRecordsRequest.name,
                "id": listRecordsRequest.id,
                "datasetId": listRecordsRequest.datasetId,
                "isLabeled": listRecordsRequest.isLabeled,
                "annotationLabelsContains": listRecordsRequest.annotationLabelsContains,
                "limit": listRecordsRequest.limit,
                "page": listRecordsRequest.page,
                "sortOrder": listRecordsRequest.sortOrder,
                "sortBy": listRecordsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listRecordsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listRecordsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/records",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recordCollection",
                    bodyModel: model.RecordCollection,
                    type: "model.RecordCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarize the annotations created for a given dataset.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAnnotationAnalyticsRequest
     * @return SummarizeAnnotationAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/SummarizeAnnotationAnalytics.ts.html |here} to see how to use SummarizeAnnotationAnalytics API.
     */
    summarizeAnnotationAnalytics(summarizeAnnotationAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#summarizeAnnotationAnalytics.");
            const operationName = "summarizeAnnotationAnalytics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/AnnotationAnalyticsAggregationCollection/SummarizeAnnotationAnalytics";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeAnnotationAnalyticsRequest.compartmentId,
                "datasetId": summarizeAnnotationAnalyticsRequest.datasetId,
                "lifecycleState": summarizeAnnotationAnalyticsRequest.lifecycleState,
                "label": summarizeAnnotationAnalyticsRequest.label,
                "limit": summarizeAnnotationAnalyticsRequest.limit,
                "page": summarizeAnnotationAnalyticsRequest.page,
                "sortOrder": summarizeAnnotationAnalyticsRequest.sortOrder,
                "sortBy": summarizeAnnotationAnalyticsRequest.sortBy,
                "annotationGroupBy": summarizeAnnotationAnalyticsRequest.annotationGroupBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAnnotationAnalyticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAnnotationAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/annotationAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "annotationAnalyticsAggregationCollection",
                    bodyModel: model.AnnotationAnalyticsAggregationCollection,
                    type: "model.AnnotationAnalyticsAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarize the records created for a given dataset.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeRecordAnalyticsRequest
     * @return SummarizeRecordAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/SummarizeRecordAnalytics.ts.html |here} to see how to use SummarizeRecordAnalytics API.
     */
    summarizeRecordAnalytics(summarizeRecordAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#summarizeRecordAnalytics.");
            const operationName = "summarizeRecordAnalytics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/RecordAnalyticsAggregationCollection/SummarizeRecordAnalytics";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeRecordAnalyticsRequest.compartmentId,
                "lifecycleState": summarizeRecordAnalyticsRequest.lifecycleState,
                "datasetId": summarizeRecordAnalyticsRequest.datasetId,
                "limit": summarizeRecordAnalyticsRequest.limit,
                "page": summarizeRecordAnalyticsRequest.page,
                "sortOrder": summarizeRecordAnalyticsRequest.sortOrder,
                "recordGroupBy": summarizeRecordAnalyticsRequest.recordGroupBy,
                "sortBy": summarizeRecordAnalyticsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeRecordAnalyticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeRecordAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/recordAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recordAnalyticsAggregationCollection",
                    bodyModel: model.RecordAnalyticsAggregationCollection,
                    type: "model.RecordAnalyticsAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates an annotation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAnnotationRequest
     * @return UpdateAnnotationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/UpdateAnnotation.ts.html |here} to see how to use UpdateAnnotation API.
     */
    updateAnnotation(updateAnnotationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#updateAnnotation.");
            const operationName = "updateAnnotation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/Annotation/UpdateAnnotation";
            const pathParams = {
                "{annotationId}": updateAnnotationRequest.annotationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAnnotationRequest.ifMatch,
                "opc-request-id": updateAnnotationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAnnotationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/annotations/{annotationId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAnnotationRequest.updateAnnotationDetails, "UpdateAnnotationDetails", model.UpdateAnnotationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "annotation",
                    bodyModel: model.Annotation,
                    type: "model.Annotation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a record.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateRecordRequest
     * @return UpdateRecordResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datalabelingservicedataplane/UpdateRecord.ts.html |here} to see how to use UpdateRecord API.
     */
    updateRecord(updateRecordRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataLabelingClient#updateRecord.");
            const operationName = "updateRecord";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/datalabeling-dp/20211001/Record/UpdateRecord";
            const pathParams = {
                "{recordId}": updateRecordRequest.recordId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateRecordRequest.ifMatch,
                "opc-request-id": updateRecordRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateRecordRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/records/{recordId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateRecordRequest.updateRecordDetails, "UpdateRecordDetails", model.UpdateRecordDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "record",
                    bodyModel: model.Record,
                    type: "model.Record",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DataLabelingClient = DataLabelingClient;
DataLabelingClient.serviceEndpointTemplate = "https://datalabeling-dp.{region}.oci.{secondLevelDomain}";
DataLabelingClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map