"use strict";
/**
 * OS Management API
 * API for the OS Management service. Use these API operations for working
with Managed instances and Managed instance groups.

 * OpenAPI spec version: 20190801
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OsManagementClient = exports.OsManagementApiKeys = exports.EventClient = exports.EventApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const osmanagement_waiter_1 = require("./osmanagement-waiter");
const oci_common_2 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var EventApiKeys;
(function (EventApiKeys) {
})(EventApiKeys = exports.EventApiKeys || (exports.EventApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class EventClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "Event";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("osmanagement")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("osmanagement");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190801";
        if (this.logger)
            this.logger.info(`EventClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(EventClient.serviceEndpointTemplate, this._region, EventClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(EventClient.serviceEndpointTemplate, this._regionId, EventClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(EventClient.serviceEndpointTemplate, region, EventClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(EventClient.serviceEndpointTemplate, regionId, EventClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Delete an event content ZIP archive from the service
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteEventContentRequest
     * @return DeleteEventContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DeleteEventContent.ts.html |here} to see how to use DeleteEventContent API.
     */
    deleteEventContent(deleteEventContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EventClient#deleteEventContent.");
            const operationName = "deleteEventContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/EventContent/DeleteEventContent";
            const pathParams = {
                "{managedInstanceId}": deleteEventContentRequest.managedInstanceId,
                "{eventId}": deleteEventContentRequest.eventId
            };
            const queryParams = {
                "compartmentId": deleteEventContentRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteEventContentRequest.opcRequestId,
                "if-match": deleteEventContentRequest.ifMatch,
                "opc-retry-token": deleteEventContentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteEventContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/events/{eventId}/content",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets an Event by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetEventRequest
     * @return GetEventResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetEvent.ts.html |here} to see how to use GetEvent API.
     */
    getEvent(getEventRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EventClient#getEvent.");
            const operationName = "getEvent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/Event/GetEvent";
            const pathParams = {
                "{managedInstanceId}": getEventRequest.managedInstanceId,
                "{eventId}": getEventRequest.eventId
            };
            const queryParams = {
                "compartmentId": getEventRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getEventRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getEventRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/events/{eventId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "event",
                    bodyModel: model.Event,
                    type: "model.Event",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get additional data about a event as a ZIP archive. The archive content depends on the event eventType.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetEventContentRequest
     * @return GetEventContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetEventContent.ts.html |here} to see how to use GetEventContent API.
     */
    getEventContent(getEventContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EventClient#getEventContent.");
            const operationName = "getEventContent";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": getEventContentRequest.managedInstanceId,
                "{eventId}": getEventContentRequest.eventId
            };
            const queryParams = {
                "compartmentId": getEventContentRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getEventContentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getEventContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/events/{eventId}/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get summary information about events on this instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetEventReportRequest
     * @return GetEventReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetEventReport.ts.html |here} to see how to use GetEventReport API.
     */
    getEventReport(getEventReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EventClient#getEventReport.");
            const operationName = "getEventReport";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/EventReport/GetEventReport";
            const pathParams = {
                "{managedInstanceId}": getEventReportRequest.managedInstanceId
            };
            const queryParams = {
                "compartmentId": getEventReportRequest.compartmentId,
                "latestTimestampLessThan": getEventReportRequest.latestTimestampLessThan,
                "latestTimestampGreaterThanOrEqualTo": getEventReportRequest.latestTimestampGreaterThanOrEqualTo
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getEventReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getEventReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/events/report",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "eventReport",
                    bodyModel: model.EventReport,
                    type: "model.EventReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Events.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListEventsRequest
     * @return ListEventsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListEvents.ts.html |here} to see how to use ListEvents API.
     */
    listEvents(listEventsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EventClient#listEvents.");
            const operationName = "listEvents";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/EventCollection/ListEvents";
            const pathParams = {
                "{managedInstanceId}": listEventsRequest.managedInstanceId
            };
            const queryParams = {
                "compartmentId": listEventsRequest.compartmentId,
                "eventId": listEventsRequest.eventId,
                "limit": listEventsRequest.limit,
                "page": listEventsRequest.page,
                "sortOrder": listEventsRequest.sortOrder,
                "sortBy": listEventsRequest.sortBy,
                "eventType": listEventsRequest.eventType,
                "latestTimestampLessThan": listEventsRequest.latestTimestampLessThan,
                "latestTimestampGreaterThanOrEqualTo": listEventsRequest.latestTimestampGreaterThanOrEqualTo
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listEventsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listEventsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/events",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "eventCollection",
                    bodyModel: model.EventCollection,
                    type: "model.EventCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of related events. For now pagination is not implemented.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListRelatedEventsRequest
     * @return ListRelatedEventsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListRelatedEvents.ts.html |here} to see how to use ListRelatedEvents API.
     */
    listRelatedEvents(listRelatedEventsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EventClient#listRelatedEvents.");
            const operationName = "listRelatedEvents";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/RelatedEventCollection/ListRelatedEvents";
            const pathParams = {};
            const queryParams = {
                "limit": listRelatedEventsRequest.limit,
                "page": listRelatedEventsRequest.page,
                "sortOrder": listRelatedEventsRequest.sortOrder,
                "sortBy": listRelatedEventsRequest.sortBy,
                "latestTimestampLessThan": listRelatedEventsRequest.latestTimestampLessThan,
                "latestTimestampGreaterThanOrEqualTo": listRelatedEventsRequest.latestTimestampGreaterThanOrEqualTo,
                "eventFingerprint": listRelatedEventsRequest.eventFingerprint,
                "compartmentId": listRelatedEventsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listRelatedEventsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listRelatedEventsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/relatedEvents",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "relatedEventCollection",
                    bodyModel: model.RelatedEventCollection,
                    type: "model.RelatedEventCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates an existing event associated to a managed instance
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateEventRequest
     * @return UpdateEventResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UpdateEvent.ts.html |here} to see how to use UpdateEvent API.
     */
    updateEvent(updateEventRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EventClient#updateEvent.");
            const operationName = "updateEvent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/Event/UpdateEvent";
            const pathParams = {
                "{managedInstanceId}": updateEventRequest.managedInstanceId,
                "{eventId}": updateEventRequest.eventId
            };
            const queryParams = {
                "compartmentId": updateEventRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateEventRequest.opcRequestId,
                "if-match": updateEventRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateEventRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/events/{eventId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateEventRequest.updateEventDetails, "UpdateEventDetails", model.UpdateEventDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "event",
                    bodyModel: model.Event,
                    type: "model.Event",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Upload the event content as a ZIP archive from the managed instance to the service
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UploadEventContentRequest
     * @return UploadEventContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UploadEventContent.ts.html |here} to see how to use UploadEventContent API.
     */
    uploadEventContent(uploadEventContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EventClient#uploadEventContent.");
            const operationName = "uploadEventContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/EventContent/UploadEventContent";
            const pathParams = {
                "{managedInstanceId}": uploadEventContentRequest.managedInstanceId,
                "{eventId}": uploadEventContentRequest.eventId
            };
            const queryParams = {
                "compartmentId": uploadEventContentRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": uploadEventContentRequest.opcRequestId,
                "if-match": uploadEventContentRequest.ifMatch,
                "opc-retry-token": uploadEventContentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, uploadEventContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/events/{eventId}/content/actions/upload",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.EventClient = EventClient;
EventClient.serviceEndpointTemplate = "https://osms.{region}.oci.{secondLevelDomain}";
EventClient.endpointServiceName = "";
var OsManagementApiKeys;
(function (OsManagementApiKeys) {
})(OsManagementApiKeys = exports.OsManagementApiKeys || (exports.OsManagementApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class OsManagementClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "OsManagement";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("osmanagement")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("osmanagement");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190801";
        if (this.logger)
            this.logger.info(`OsManagementClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(OsManagementClient.serviceEndpointTemplate, this._region, OsManagementClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(OsManagementClient.serviceEndpointTemplate, this._regionId, OsManagementClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(OsManagementClient.serviceEndpointTemplate, region, OsManagementClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(OsManagementClient.serviceEndpointTemplate, regionId, OsManagementClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new OsManagementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new osmanagement_waiter_1.OsManagementWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Adds a given list of Software Packages to a specific Software Source.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddPackagesToSoftwareSourceRequest
     * @return AddPackagesToSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/AddPackagesToSoftwareSource.ts.html |here} to see how to use AddPackagesToSoftwareSource API.
     */
    addPackagesToSoftwareSource(addPackagesToSoftwareSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#addPackagesToSoftwareSource.");
            const operationName = "addPackagesToSoftwareSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/SoftwareSource/AddPackagesToSoftwareSource";
            const pathParams = {
                "{softwareSourceId}": addPackagesToSoftwareSourceRequest.softwareSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addPackagesToSoftwareSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addPackagesToSoftwareSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/actions/addPackages",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addPackagesToSoftwareSourceRequest.addPackagesToSoftwareSourceDetails, "AddPackagesToSoftwareSourceDetails", model.AddPackagesToSoftwareSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds a child software source to a managed instance. After the software
     * source has been added, then packages from that software source can be
     * installed on the managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AttachChildSoftwareSourceToManagedInstanceRequest
     * @return AttachChildSoftwareSourceToManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/AttachChildSoftwareSourceToManagedInstance.ts.html |here} to see how to use AttachChildSoftwareSourceToManagedInstance API.
     */
    attachChildSoftwareSourceToManagedInstance(attachChildSoftwareSourceToManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#attachChildSoftwareSourceToManagedInstance.");
            const operationName = "attachChildSoftwareSourceToManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/AttachChildSoftwareSourceToManagedInstance";
            const pathParams = {
                "{managedInstanceId}": attachChildSoftwareSourceToManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": attachChildSoftwareSourceToManagedInstanceRequest.opcRequestId,
                "opc-retry-token": attachChildSoftwareSourceToManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, attachChildSoftwareSourceToManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/attachChildSoftwareSource",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachChildSoftwareSourceToManagedInstanceRequest.attachChildSoftwareSourceToManagedInstanceDetails, "AttachChildSoftwareSourceToManagedInstanceDetails", model.AttachChildSoftwareSourceToManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds a Managed Instance to a Managed Instance Group. After the Managed
     * Instance has been added, then operations can be performed on the Managed
     * Instance Group which will then apply to all Managed Instances in the
     * group.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AttachManagedInstanceToManagedInstanceGroupRequest
     * @return AttachManagedInstanceToManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/AttachManagedInstanceToManagedInstanceGroup.ts.html |here} to see how to use AttachManagedInstanceToManagedInstanceGroup API.
     */
    attachManagedInstanceToManagedInstanceGroup(attachManagedInstanceToManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#attachManagedInstanceToManagedInstanceGroup.");
            const operationName = "attachManagedInstanceToManagedInstanceGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstanceGroup/AttachManagedInstanceToManagedInstanceGroup";
            const pathParams = {
                "{managedInstanceGroupId}": attachManagedInstanceToManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {
                "managedInstanceId": attachManagedInstanceToManagedInstanceGroupRequest.managedInstanceId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": attachManagedInstanceToManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": attachManagedInstanceToManagedInstanceGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, attachManagedInstanceToManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/attachManagedInstance",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds a parent software source to a managed instance. After the software
     * source has been added, then packages from that software source can be
     * installed on the managed instance. Software sources that have this
     * software source as a parent will be able to be added to this managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AttachParentSoftwareSourceToManagedInstanceRequest
     * @return AttachParentSoftwareSourceToManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/AttachParentSoftwareSourceToManagedInstance.ts.html |here} to see how to use AttachParentSoftwareSourceToManagedInstance API.
     */
    attachParentSoftwareSourceToManagedInstance(attachParentSoftwareSourceToManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#attachParentSoftwareSourceToManagedInstance.");
            const operationName = "attachParentSoftwareSourceToManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/AttachParentSoftwareSourceToManagedInstance";
            const pathParams = {
                "{managedInstanceId}": attachParentSoftwareSourceToManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": attachParentSoftwareSourceToManagedInstanceRequest.opcRequestId,
                "opc-retry-token": attachParentSoftwareSourceToManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, attachParentSoftwareSourceToManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/attachParentSoftwareSource",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachParentSoftwareSourceToManagedInstanceRequest.attachParentSoftwareSourceToManagedInstanceDetails, "AttachParentSoftwareSourceToManagedInstanceDetails", model.AttachParentSoftwareSourceToManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a resource into a different compartment. When provided, If-Match
     * is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeManagedInstanceGroupCompartmentRequest
     * @return ChangeManagedInstanceGroupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ChangeManagedInstanceGroupCompartment.ts.html |here} to see how to use ChangeManagedInstanceGroupCompartment API.
     */
    changeManagedInstanceGroupCompartment(changeManagedInstanceGroupCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#changeManagedInstanceGroupCompartment.");
            const operationName = "changeManagedInstanceGroupCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstanceGroup/ChangeManagedInstanceGroupCompartment";
            const pathParams = {
                "{managedInstanceGroupId}": changeManagedInstanceGroupCompartmentRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeManagedInstanceGroupCompartmentRequest.opcRequestId,
                "if-match": changeManagedInstanceGroupCompartmentRequest.ifMatch,
                "opc-retry-token": changeManagedInstanceGroupCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeManagedInstanceGroupCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeManagedInstanceGroupCompartmentRequest.changeManagedInstanceGroupCompartmentDetails, "ChangeManagedInstanceGroupCompartmentDetails", model.ChangeManagedInstanceGroupCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a resource into a different compartment. When provided, If-Match
     * is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeScheduledJobCompartmentRequest
     * @return ChangeScheduledJobCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ChangeScheduledJobCompartment.ts.html |here} to see how to use ChangeScheduledJobCompartment API.
     */
    changeScheduledJobCompartment(changeScheduledJobCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#changeScheduledJobCompartment.");
            const operationName = "changeScheduledJobCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ScheduledJob/ChangeScheduledJobCompartment";
            const pathParams = {
                "{scheduledJobId}": changeScheduledJobCompartmentRequest.scheduledJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeScheduledJobCompartmentRequest.opcRequestId,
                "if-match": changeScheduledJobCompartmentRequest.ifMatch,
                "opc-retry-token": changeScheduledJobCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeScheduledJobCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs/{scheduledJobId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeScheduledJobCompartmentRequest.changeScheduledJobCompartmentDetails, "ChangeScheduledJobCompartmentDetails", model.ChangeScheduledJobCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a resource into a different compartment. When provided, If-Match
     * is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeSoftwareSourceCompartmentRequest
     * @return ChangeSoftwareSourceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ChangeSoftwareSourceCompartment.ts.html |here} to see how to use ChangeSoftwareSourceCompartment API.
     */
    changeSoftwareSourceCompartment(changeSoftwareSourceCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#changeSoftwareSourceCompartment.");
            const operationName = "changeSoftwareSourceCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/SoftwareSource/ChangeSoftwareSourceCompartment";
            const pathParams = {
                "{softwareSourceId}": changeSoftwareSourceCompartmentRequest.softwareSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeSoftwareSourceCompartmentRequest.opcRequestId,
                "if-match": changeSoftwareSourceCompartmentRequest.ifMatch,
                "opc-retry-token": changeSoftwareSourceCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeSoftwareSourceCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeSoftwareSourceCompartmentRequest.changeSoftwareSourceCompartmentDetails, "ChangeSoftwareSourceCompartmentDetails", model.ChangeSoftwareSourceCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Managed Instance Group on the management system.
     * This will not contain any managed instances after it is first created,
     * and they must be added later.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateManagedInstanceGroupRequest
     * @return CreateManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/CreateManagedInstanceGroup.ts.html |here} to see how to use CreateManagedInstanceGroup API.
     */
    createManagedInstanceGroup(createManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#createManagedInstanceGroup.");
            const operationName = "createManagedInstanceGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstanceGroup/CreateManagedInstanceGroup";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": createManagedInstanceGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createManagedInstanceGroupRequest.createManagedInstanceGroupDetails, "CreateManagedInstanceGroupDetails", model.CreateManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceGroup",
                    bodyModel: model.ManagedInstanceGroup,
                    type: "model.ManagedInstanceGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Scheduled Job to perform a specific package operation on
     * a set of managed instances or managed instance groups.  Can be created
     * as a one-time execution in the future, or as a recurring execution
     * that repeats on a defined interval.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateScheduledJobRequest
     * @return CreateScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/CreateScheduledJob.ts.html |here} to see how to use CreateScheduledJob API.
     */
    createScheduledJob(createScheduledJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#createScheduledJob.");
            const operationName = "createScheduledJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ScheduledJob/CreateScheduledJob";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createScheduledJobRequest.opcRequestId,
                "opc-retry-token": createScheduledJobRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createScheduledJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createScheduledJobRequest.createScheduledJobDetails, "CreateScheduledJobDetails", model.CreateScheduledJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledJob",
                    bodyModel: model.ScheduledJob,
                    type: "model.ScheduledJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new custom Software Source on the management system.
     * This will not contain any packages after it is first created,
     * and they must be added later.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSoftwareSourceRequest
     * @return CreateSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/CreateSoftwareSource.ts.html |here} to see how to use CreateSoftwareSource API.
     */
    createSoftwareSource(createSoftwareSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#createSoftwareSource.");
            const operationName = "createSoftwareSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/SoftwareSource/CreateSoftwareSource";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createSoftwareSourceRequest.opcRequestId,
                "opc-retry-token": createSoftwareSourceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSoftwareSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSoftwareSourceRequest.createSoftwareSourceDetails, "CreateSoftwareSourceDetails", model.CreateSoftwareSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "softwareSource",
                    bodyModel: model.SoftwareSource,
                    type: "model.SoftwareSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a Managed Instance Group from the management system
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteManagedInstanceGroupRequest
     * @return DeleteManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DeleteManagedInstanceGroup.ts.html |here} to see how to use DeleteManagedInstanceGroup API.
     */
    deleteManagedInstanceGroup(deleteManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#deleteManagedInstanceGroup.");
            const operationName = "deleteManagedInstanceGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstanceGroup/DeleteManagedInstanceGroup";
            const pathParams = {
                "{managedInstanceGroupId}": deleteManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteManagedInstanceGroupRequest.opcRequestId,
                "if-match": deleteManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Cancels an existing Scheduled Job on the management system
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteScheduledJobRequest
     * @return DeleteScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DeleteScheduledJob.ts.html |here} to see how to use DeleteScheduledJob API.
     */
    deleteScheduledJob(deleteScheduledJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#deleteScheduledJob.");
            const operationName = "deleteScheduledJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ScheduledJob/DeleteScheduledJob";
            const pathParams = {
                "{scheduledJobId}": deleteScheduledJobRequest.scheduledJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteScheduledJobRequest.opcRequestId,
                "if-match": deleteScheduledJobRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteScheduledJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs/{scheduledJobId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a custom Software Source on the management system
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSoftwareSourceRequest
     * @return DeleteSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DeleteSoftwareSource.ts.html |here} to see how to use DeleteSoftwareSource API.
     */
    deleteSoftwareSource(deleteSoftwareSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#deleteSoftwareSource.");
            const operationName = "deleteSoftwareSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/SoftwareSource/DeleteSoftwareSource";
            const pathParams = {
                "{softwareSourceId}": deleteSoftwareSourceRequest.softwareSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteSoftwareSourceRequest.opcRequestId,
                "if-match": deleteSoftwareSourceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSoftwareSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a child software source from a managed instance. Packages will no longer be able to be
     * installed from these software sources.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DetachChildSoftwareSourceFromManagedInstanceRequest
     * @return DetachChildSoftwareSourceFromManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DetachChildSoftwareSourceFromManagedInstance.ts.html |here} to see how to use DetachChildSoftwareSourceFromManagedInstance API.
     */
    detachChildSoftwareSourceFromManagedInstance(detachChildSoftwareSourceFromManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#detachChildSoftwareSourceFromManagedInstance.");
            const operationName = "detachChildSoftwareSourceFromManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/DetachChildSoftwareSourceFromManagedInstance";
            const pathParams = {
                "{managedInstanceId}": detachChildSoftwareSourceFromManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": detachChildSoftwareSourceFromManagedInstanceRequest.opcRequestId,
                "opc-retry-token": detachChildSoftwareSourceFromManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, detachChildSoftwareSourceFromManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/detachChildSoftwareSource",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(detachChildSoftwareSourceFromManagedInstanceRequest.detachChildSoftwareSourceFromManagedInstanceDetails, "DetachChildSoftwareSourceFromManagedInstanceDetails", model.DetachChildSoftwareSourceFromManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a Managed Instance from a Managed Instance Group.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DetachManagedInstanceFromManagedInstanceGroupRequest
     * @return DetachManagedInstanceFromManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DetachManagedInstanceFromManagedInstanceGroup.ts.html |here} to see how to use DetachManagedInstanceFromManagedInstanceGroup API.
     */
    detachManagedInstanceFromManagedInstanceGroup(detachManagedInstanceFromManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#detachManagedInstanceFromManagedInstanceGroup.");
            const operationName = "detachManagedInstanceFromManagedInstanceGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstanceGroup/DetachManagedInstanceFromManagedInstanceGroup";
            const pathParams = {
                "{managedInstanceGroupId}": detachManagedInstanceFromManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {
                "managedInstanceId": detachManagedInstanceFromManagedInstanceGroupRequest.managedInstanceId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": detachManagedInstanceFromManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": detachManagedInstanceFromManagedInstanceGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, detachManagedInstanceFromManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/detachManagedInstance",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a software source from a managed instance. All child software sources will also be removed
     * from the managed instance. Packages will no longer be able to be installed from these software sources.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DetachParentSoftwareSourceFromManagedInstanceRequest
     * @return DetachParentSoftwareSourceFromManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DetachParentSoftwareSourceFromManagedInstance.ts.html |here} to see how to use DetachParentSoftwareSourceFromManagedInstance API.
     */
    detachParentSoftwareSourceFromManagedInstance(detachParentSoftwareSourceFromManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#detachParentSoftwareSourceFromManagedInstance.");
            const operationName = "detachParentSoftwareSourceFromManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/DetachParentSoftwareSourceFromManagedInstance";
            const pathParams = {
                "{managedInstanceId}": detachParentSoftwareSourceFromManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": detachParentSoftwareSourceFromManagedInstanceRequest.opcRequestId,
                "opc-retry-token": detachParentSoftwareSourceFromManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, detachParentSoftwareSourceFromManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/detachParentSoftwareSource",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(detachParentSoftwareSourceFromManagedInstanceRequest.detachParentSoftwareSourceFromManagedInstanceDetails, "DetachParentSoftwareSourceFromManagedInstanceDetails", model.DetachParentSoftwareSourceFromManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables a module stream on a managed instance.  After the stream is
     * disabled, it is no longer possible to install the profiles that are
     * contained by the stream.  All installed profiles must be removed prior
     * to disabling a module stream.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DisableModuleStreamOnManagedInstanceRequest
     * @return DisableModuleStreamOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DisableModuleStreamOnManagedInstance.ts.html |here} to see how to use DisableModuleStreamOnManagedInstance API.
     */
    disableModuleStreamOnManagedInstance(disableModuleStreamOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#disableModuleStreamOnManagedInstance.");
            const operationName = "disableModuleStreamOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ModuleStreamDetails/DisableModuleStreamOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": disableModuleStreamOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "moduleName": disableModuleStreamOnManagedInstanceRequest.moduleName,
                "streamName": disableModuleStreamOnManagedInstanceRequest.streamName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": disableModuleStreamOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": disableModuleStreamOnManagedInstanceRequest.opcRetryToken,
                "if-match": disableModuleStreamOnManagedInstanceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableModuleStreamOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/moduleStreams/disable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables a module stream on a managed instance.  After the stream is
     * enabled, it is possible to install the profiles that are contained
     * by the stream.  Enabling a stream that is already enabled will
     * succeed.  Attempting to enable a different stream for a module that
     * already has a stream enabled results in an error.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param EnableModuleStreamOnManagedInstanceRequest
     * @return EnableModuleStreamOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/EnableModuleStreamOnManagedInstance.ts.html |here} to see how to use EnableModuleStreamOnManagedInstance API.
     */
    enableModuleStreamOnManagedInstance(enableModuleStreamOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#enableModuleStreamOnManagedInstance.");
            const operationName = "enableModuleStreamOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ModuleStreamDetails/EnableModuleStreamOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": enableModuleStreamOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "moduleName": enableModuleStreamOnManagedInstanceRequest.moduleName,
                "streamName": enableModuleStreamOnManagedInstanceRequest.streamName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": enableModuleStreamOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": enableModuleStreamOnManagedInstanceRequest.opcRetryToken,
                "if-match": enableModuleStreamOnManagedInstanceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableModuleStreamOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/moduleStreams/enable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a specific erratum.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetErratumRequest
     * @return GetErratumResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetErratum.ts.html |here} to see how to use GetErratum API.
     */
    getErratum(getErratumRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#getErratum.");
            const operationName = "getErratum";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/Erratum/GetErratum";
            const pathParams = {
                "{erratumId}": getErratumRequest.erratumId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getErratumRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getErratumRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/errata/{erratumId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "erratum",
                    bodyModel: model.Erratum,
                    type: "model.Erratum",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a specific Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagedInstanceRequest
     * @return GetManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetManagedInstance.ts.html |here} to see how to use GetManagedInstance API.
     */
    getManagedInstance(getManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#getManagedInstance.");
            const operationName = "getManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/GetManagedInstance";
            const pathParams = {
                "{managedInstanceId}": getManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagedInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstance",
                    bodyModel: model.ManagedInstance,
                    type: "model.ManagedInstance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a specific Managed Instance Group.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagedInstanceGroupRequest
     * @return GetManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetManagedInstanceGroup.ts.html |here} to see how to use GetManagedInstanceGroup API.
     */
    getManagedInstanceGroup(getManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#getManagedInstanceGroup.");
            const operationName = "getManagedInstanceGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstanceGroup/GetManagedInstanceGroup";
            const pathParams = {
                "{managedInstanceGroupId}": getManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagedInstanceGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceGroup",
                    bodyModel: model.ManagedInstanceGroup,
                    type: "model.ManagedInstanceGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieve a detailed description of a module stream from a software source.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetModuleStreamRequest
     * @return GetModuleStreamResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetModuleStream.ts.html |here} to see how to use GetModuleStream API.
     */
    getModuleStream(getModuleStreamRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#getModuleStream.");
            const operationName = "getModuleStream";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ModuleStream/GetModuleStream";
            const pathParams = {
                "{softwareSourceId}": getModuleStreamRequest.softwareSourceId,
                "{moduleName}": getModuleStreamRequest.moduleName,
                "{streamName}": getModuleStreamRequest.streamName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getModuleStreamRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getModuleStreamRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/modules/{moduleName}/streams/{streamName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "moduleStream",
                    bodyModel: model.ModuleStream,
                    type: "model.ModuleStream",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieve a detailed description of a module stream profile from a software source.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetModuleStreamProfileRequest
     * @return GetModuleStreamProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetModuleStreamProfile.ts.html |here} to see how to use GetModuleStreamProfile API.
     */
    getModuleStreamProfile(getModuleStreamProfileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#getModuleStreamProfile.");
            const operationName = "getModuleStreamProfile";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ModuleStreamProfile/GetModuleStreamProfile";
            const pathParams = {
                "{softwareSourceId}": getModuleStreamProfileRequest.softwareSourceId,
                "{moduleName}": getModuleStreamProfileRequest.moduleName,
                "{streamName}": getModuleStreamProfileRequest.streamName,
                "{profileName}": getModuleStreamProfileRequest.profileName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getModuleStreamProfileRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getModuleStreamProfileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/modules/{moduleName}/streams/{streamName}/profiles/{profileName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "moduleStreamProfile",
                    bodyModel: model.ModuleStreamProfile,
                    type: "model.ModuleStreamProfile",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the detailed information for the Scheduled Job with the given ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetScheduledJobRequest
     * @return GetScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetScheduledJob.ts.html |here} to see how to use GetScheduledJob API.
     */
    getScheduledJob(getScheduledJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#getScheduledJob.");
            const operationName = "getScheduledJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ScheduledJob/GetScheduledJob";
            const pathParams = {
                "{scheduledJobId}": getScheduledJobRequest.scheduledJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getScheduledJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getScheduledJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs/{scheduledJobId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledJob",
                    bodyModel: model.ScheduledJob,
                    type: "model.ScheduledJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a specific Software Package.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSoftwarePackageRequest
     * @return GetSoftwarePackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetSoftwarePackage.ts.html |here} to see how to use GetSoftwarePackage API.
     */
    getSoftwarePackage(getSoftwarePackageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#getSoftwarePackage.");
            const operationName = "getSoftwarePackage";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/SoftwareSource/GetSoftwarePackage";
            const pathParams = {
                "{softwareSourceId}": getSoftwarePackageRequest.softwareSourceId,
                "{softwarePackageName}": getSoftwarePackageRequest.softwarePackageName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSoftwarePackageRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSoftwarePackageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/softwarePackages/{softwarePackageName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "softwarePackage",
                    bodyModel: model.SoftwarePackage,
                    type: "model.SoftwarePackage",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a specific Software Source.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSoftwareSourceRequest
     * @return GetSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetSoftwareSource.ts.html |here} to see how to use GetSoftwareSource API.
     */
    getSoftwareSource(getSoftwareSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#getSoftwareSource.");
            const operationName = "getSoftwareSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/SoftwareSource/GetSoftwareSource";
            const pathParams = {
                "{softwareSourceId}": getSoftwareSourceRequest.softwareSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSoftwareSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSoftwareSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "softwareSource",
                    bodyModel: model.SoftwareSource,
                    type: "model.SoftwareSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a Windows Update object.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWindowsUpdateRequest
     * @return GetWindowsUpdateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetWindowsUpdate.ts.html |here} to see how to use GetWindowsUpdate API.
     */
    getWindowsUpdate(getWindowsUpdateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#getWindowsUpdate.");
            const operationName = "getWindowsUpdate";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/WindowsUpdate/GetWindowsUpdate";
            const pathParams = {
                "{windowsUpdate}": getWindowsUpdateRequest.windowsUpdate
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWindowsUpdateRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWindowsUpdateRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/updates/{windowsUpdate}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "windowsUpdate",
                    bodyModel: model.WindowsUpdate,
                    type: "model.WindowsUpdate",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the detailed information for the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/WorkRequest/GetWorkRequest";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Install all of the available package updates for the managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallAllPackageUpdatesOnManagedInstanceRequest
     * @return InstallAllPackageUpdatesOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallAllPackageUpdatesOnManagedInstance.ts.html |here} to see how to use InstallAllPackageUpdatesOnManagedInstance API.
     */
    installAllPackageUpdatesOnManagedInstance(installAllPackageUpdatesOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#installAllPackageUpdatesOnManagedInstance.");
            const operationName = "installAllPackageUpdatesOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/InstallAllPackageUpdatesOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": installAllPackageUpdatesOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "updateType": installAllPackageUpdatesOnManagedInstanceRequest.updateType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": installAllPackageUpdatesOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": installAllPackageUpdatesOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, installAllPackageUpdatesOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/packages/updateAll",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Install all of the available updates for the Managed Instance Group.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallAllUpdatesOnManagedInstanceGroupRequest
     * @return InstallAllUpdatesOnManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallAllUpdatesOnManagedInstanceGroup.ts.html |here} to see how to use InstallAllUpdatesOnManagedInstanceGroup API.
     */
    installAllUpdatesOnManagedInstanceGroup(installAllUpdatesOnManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#installAllUpdatesOnManagedInstanceGroup.");
            const operationName = "installAllUpdatesOnManagedInstanceGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstanceGroup/InstallAllUpdatesOnManagedInstanceGroup";
            const pathParams = {
                "{managedInstanceGroupId}": installAllUpdatesOnManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {
                "updateType": installAllUpdatesOnManagedInstanceGroupRequest.updateType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": installAllUpdatesOnManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": installAllUpdatesOnManagedInstanceGroupRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, installAllUpdatesOnManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/updates/installAll",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Install all of the available Windows updates for the managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallAllWindowsUpdatesOnManagedInstanceRequest
     * @return InstallAllWindowsUpdatesOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallAllWindowsUpdatesOnManagedInstance.ts.html |here} to see how to use InstallAllWindowsUpdatesOnManagedInstance API.
     */
    installAllWindowsUpdatesOnManagedInstance(installAllWindowsUpdatesOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#installAllWindowsUpdatesOnManagedInstance.");
            const operationName = "installAllWindowsUpdatesOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/InstallAllWindowsUpdatesOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": installAllWindowsUpdatesOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "updateType": installAllWindowsUpdatesOnManagedInstanceRequest.updateType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": installAllWindowsUpdatesOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": installAllWindowsUpdatesOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, installAllWindowsUpdatesOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/updates/installAll",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Installs a profile for an module stream.  The stream must be
     * enabled before a profile can be installed.  If a module stream
     * defines multiple profiles, each one can be installed independently.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallModuleStreamProfileOnManagedInstanceRequest
     * @return InstallModuleStreamProfileOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallModuleStreamProfileOnManagedInstance.ts.html |here} to see how to use InstallModuleStreamProfileOnManagedInstance API.
     */
    installModuleStreamProfileOnManagedInstance(installModuleStreamProfileOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#installModuleStreamProfileOnManagedInstance.");
            const operationName = "installModuleStreamProfileOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ModuleStreamProfileDetails/InstallModuleStreamProfileOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": installModuleStreamProfileOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "moduleName": installModuleStreamProfileOnManagedInstanceRequest.moduleName,
                "streamName": installModuleStreamProfileOnManagedInstanceRequest.streamName,
                "profileName": installModuleStreamProfileOnManagedInstanceRequest.profileName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": installModuleStreamProfileOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": installModuleStreamProfileOnManagedInstanceRequest.opcRetryToken,
                "if-match": installModuleStreamProfileOnManagedInstanceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, installModuleStreamProfileOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/streamProfiles/install",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Installs a package on a managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallPackageOnManagedInstanceRequest
     * @return InstallPackageOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallPackageOnManagedInstance.ts.html |here} to see how to use InstallPackageOnManagedInstance API.
     */
    installPackageOnManagedInstance(installPackageOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#installPackageOnManagedInstance.");
            const operationName = "installPackageOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/InstallPackageOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": installPackageOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "softwarePackageName": installPackageOnManagedInstanceRequest.softwarePackageName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": installPackageOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": installPackageOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, installPackageOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/packages/install",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a package on a managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallPackageUpdateOnManagedInstanceRequest
     * @return InstallPackageUpdateOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallPackageUpdateOnManagedInstance.ts.html |here} to see how to use InstallPackageUpdateOnManagedInstance API.
     */
    installPackageUpdateOnManagedInstance(installPackageUpdateOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#installPackageUpdateOnManagedInstance.");
            const operationName = "installPackageUpdateOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/InstallPackageUpdateOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": installPackageUpdateOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "softwarePackageName": installPackageUpdateOnManagedInstanceRequest.softwarePackageName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": installPackageUpdateOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": installPackageUpdateOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, installPackageUpdateOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/packages/update",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Installs a Windows update on a managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallWindowsUpdateOnManagedInstanceRequest
     * @return InstallWindowsUpdateOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallWindowsUpdateOnManagedInstance.ts.html |here} to see how to use InstallWindowsUpdateOnManagedInstance API.
     */
    installWindowsUpdateOnManagedInstance(installWindowsUpdateOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#installWindowsUpdateOnManagedInstance.");
            const operationName = "installWindowsUpdateOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/InstallWindowsUpdateOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": installWindowsUpdateOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "windowsUpdateName": installWindowsUpdateOnManagedInstanceRequest.windowsUpdateName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": installWindowsUpdateOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": installWindowsUpdateOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, installWindowsUpdateOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/updates/install",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of packages available for install on the Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAvailablePackagesForManagedInstanceRequest
     * @return ListAvailablePackagesForManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListAvailablePackagesForManagedInstance.ts.html |here} to see how to use ListAvailablePackagesForManagedInstance API.
     */
    listAvailablePackagesForManagedInstance(listAvailablePackagesForManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listAvailablePackagesForManagedInstance.");
            const operationName = "listAvailablePackagesForManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/ListAvailablePackagesForManagedInstance";
            const pathParams = {
                "{managedInstanceId}": listAvailablePackagesForManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "displayName": listAvailablePackagesForManagedInstanceRequest.displayName,
                "compartmentId": listAvailablePackagesForManagedInstanceRequest.compartmentId,
                "limit": listAvailablePackagesForManagedInstanceRequest.limit,
                "page": listAvailablePackagesForManagedInstanceRequest.page,
                "sortOrder": listAvailablePackagesForManagedInstanceRequest.sortOrder,
                "sortBy": listAvailablePackagesForManagedInstanceRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAvailablePackagesForManagedInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAvailablePackagesForManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/packages/available",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.InstallablePackageSummary,
                    type: "Array<model.InstallablePackageSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listAvailablePackagesForManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.InstallablePackageSummary objects
     * contained in responses from the listAvailablePackagesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailablePackagesForManagedInstance(request) {
        return oci_common_1.paginateRecords(request, req => this.listAvailablePackagesForManagedInstance(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listAvailablePackagesForManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAvailablePackagesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailablePackagesForManagedInstanceResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAvailablePackagesForManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.InstallablePackageSummary objects
     * contained in responses from the listAvailablePackagesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailablePackagesForManagedInstanceRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listAvailablePackagesForManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAvailablePackagesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailablePackagesForManagedInstanceResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listAvailablePackagesForManagedInstance(req));
    }
    /**
     * Returns a list of available software sources for a Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAvailableSoftwareSourcesForManagedInstanceRequest
     * @return ListAvailableSoftwareSourcesForManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListAvailableSoftwareSourcesForManagedInstance.ts.html |here} to see how to use ListAvailableSoftwareSourcesForManagedInstance API.
     */
    listAvailableSoftwareSourcesForManagedInstance(listAvailableSoftwareSourcesForManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listAvailableSoftwareSourcesForManagedInstance.");
            const operationName = "listAvailableSoftwareSourcesForManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/ListAvailableSoftwareSourcesForManagedInstance";
            const pathParams = {
                "{managedInstanceId}": listAvailableSoftwareSourcesForManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "displayName": listAvailableSoftwareSourcesForManagedInstanceRequest.displayName,
                "compartmentId": listAvailableSoftwareSourcesForManagedInstanceRequest.compartmentId,
                "limit": listAvailableSoftwareSourcesForManagedInstanceRequest.limit,
                "page": listAvailableSoftwareSourcesForManagedInstanceRequest.page,
                "sortOrder": listAvailableSoftwareSourcesForManagedInstanceRequest.sortOrder,
                "sortBy": listAvailableSoftwareSourcesForManagedInstanceRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAvailableSoftwareSourcesForManagedInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAvailableSoftwareSourcesForManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/availableSoftwareSources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.AvailableSoftwareSourceSummary,
                    type: "Array<model.AvailableSoftwareSourceSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listAvailableSoftwareSourcesForManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AvailableSoftwareSourceSummary objects
     * contained in responses from the listAvailableSoftwareSourcesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableSoftwareSourcesForManagedInstance(request) {
        return oci_common_1.paginateRecords(request, req => this.listAvailableSoftwareSourcesForManagedInstance(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listAvailableSoftwareSourcesForManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAvailableSoftwareSourcesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableSoftwareSourcesForManagedInstanceResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAvailableSoftwareSourcesForManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.AvailableSoftwareSourceSummary objects
     * contained in responses from the listAvailableSoftwareSourcesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableSoftwareSourcesForManagedInstanceRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listAvailableSoftwareSourcesForManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAvailableSoftwareSourcesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableSoftwareSourcesForManagedInstanceResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listAvailableSoftwareSourcesForManagedInstance(req));
    }
    /**
     * Returns a list of available updates for a Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAvailableUpdatesForManagedInstanceRequest
     * @return ListAvailableUpdatesForManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListAvailableUpdatesForManagedInstance.ts.html |here} to see how to use ListAvailableUpdatesForManagedInstance API.
     */
    listAvailableUpdatesForManagedInstance(listAvailableUpdatesForManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listAvailableUpdatesForManagedInstance.");
            const operationName = "listAvailableUpdatesForManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/ListAvailableUpdatesForManagedInstance";
            const pathParams = {
                "{managedInstanceId}": listAvailableUpdatesForManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "displayName": listAvailableUpdatesForManagedInstanceRequest.displayName,
                "compartmentId": listAvailableUpdatesForManagedInstanceRequest.compartmentId,
                "limit": listAvailableUpdatesForManagedInstanceRequest.limit,
                "page": listAvailableUpdatesForManagedInstanceRequest.page,
                "sortOrder": listAvailableUpdatesForManagedInstanceRequest.sortOrder,
                "sortBy": listAvailableUpdatesForManagedInstanceRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAvailableUpdatesForManagedInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAvailableUpdatesForManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/packages/updates",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.AvailableUpdateSummary,
                    type: "Array<model.AvailableUpdateSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listAvailableUpdatesForManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AvailableUpdateSummary objects
     * contained in responses from the listAvailableUpdatesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableUpdatesForManagedInstance(request) {
        return oci_common_1.paginateRecords(request, req => this.listAvailableUpdatesForManagedInstance(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listAvailableUpdatesForManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAvailableUpdatesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableUpdatesForManagedInstanceResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAvailableUpdatesForManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.AvailableUpdateSummary objects
     * contained in responses from the listAvailableUpdatesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableUpdatesForManagedInstanceRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listAvailableUpdatesForManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAvailableUpdatesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableUpdatesForManagedInstanceResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listAvailableUpdatesForManagedInstance(req));
    }
    /**
     * Returns a list of available Windows updates for a Managed Instance. This is only applicable to Windows instances.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAvailableWindowsUpdatesForManagedInstanceRequest
     * @return ListAvailableWindowsUpdatesForManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListAvailableWindowsUpdatesForManagedInstance.ts.html |here} to see how to use ListAvailableWindowsUpdatesForManagedInstance API.
     */
    listAvailableWindowsUpdatesForManagedInstance(listAvailableWindowsUpdatesForManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listAvailableWindowsUpdatesForManagedInstance.");
            const operationName = "listAvailableWindowsUpdatesForManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/ListAvailableWindowsUpdatesForManagedInstance";
            const pathParams = {
                "{managedInstanceId}": listAvailableWindowsUpdatesForManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "displayName": listAvailableWindowsUpdatesForManagedInstanceRequest.displayName,
                "compartmentId": listAvailableWindowsUpdatesForManagedInstanceRequest.compartmentId,
                "limit": listAvailableWindowsUpdatesForManagedInstanceRequest.limit,
                "page": listAvailableWindowsUpdatesForManagedInstanceRequest.page,
                "sortOrder": listAvailableWindowsUpdatesForManagedInstanceRequest.sortOrder,
                "sortBy": listAvailableWindowsUpdatesForManagedInstanceRequest.sortBy,
                "isEligibleForInstallation": listAvailableWindowsUpdatesForManagedInstanceRequest.isEligibleForInstallation
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAvailableWindowsUpdatesForManagedInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAvailableWindowsUpdatesForManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/updates/available",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.AvailableWindowsUpdateSummary,
                    type: "Array<model.AvailableWindowsUpdateSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listAvailableWindowsUpdatesForManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AvailableWindowsUpdateSummary objects
     * contained in responses from the listAvailableWindowsUpdatesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableWindowsUpdatesForManagedInstance(request) {
        return oci_common_1.paginateRecords(request, req => this.listAvailableWindowsUpdatesForManagedInstance(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listAvailableWindowsUpdatesForManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAvailableWindowsUpdatesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableWindowsUpdatesForManagedInstanceResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAvailableWindowsUpdatesForManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.AvailableWindowsUpdateSummary objects
     * contained in responses from the listAvailableWindowsUpdatesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableWindowsUpdatesForManagedInstanceRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listAvailableWindowsUpdatesForManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAvailableWindowsUpdatesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableWindowsUpdatesForManagedInstanceResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listAvailableWindowsUpdatesForManagedInstance(req));
    }
    /**
     * Returns a list of all of the currently available Errata in the system
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListErrataRequest
     * @return ListErrataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListErrata.ts.html |here} to see how to use ListErrata API.
     */
    listErrata(listErrataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listErrata.");
            const operationName = "listErrata";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ErratumSummary/ListErrata";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listErrataRequest.compartmentId,
                "erratumId": listErrataRequest.erratumId,
                "advisoryName": listErrataRequest.advisoryName,
                "timeIssueDateStart": listErrataRequest.timeIssueDateStart,
                "timeIssueDateEnd": listErrataRequest.timeIssueDateEnd,
                "limit": listErrataRequest.limit,
                "page": listErrataRequest.page,
                "sortOrder": listErrataRequest.sortOrder,
                "sortBy": listErrataRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listErrataRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listErrataRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/errata",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ErratumSummary,
                    type: "Array<model.ErratumSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listErrataRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ErratumSummary objects
     * contained in responses from the listErrata operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllErrata(request) {
        return oci_common_1.paginateRecords(request, req => this.listErrata(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listErrataResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listErrata operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllErrataResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listErrata(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ErratumSummary objects
     * contained in responses from the listErrata operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listErrataRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listErrata(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listErrata operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listErrataResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listErrata(req));
    }
    /**
     * Returns a list of errata relevant to the Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagedInstanceErrataRequest
     * @return ListManagedInstanceErrataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListManagedInstanceErrata.ts.html |here} to see how to use ListManagedInstanceErrata API.
     */
    listManagedInstanceErrata(listManagedInstanceErrataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listManagedInstanceErrata.");
            const operationName = "listManagedInstanceErrata";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/ListManagedInstanceErrata";
            const pathParams = {
                "{managedInstanceId}": listManagedInstanceErrataRequest.managedInstanceId
            };
            const queryParams = {
                "displayName": listManagedInstanceErrataRequest.displayName,
                "compartmentId": listManagedInstanceErrataRequest.compartmentId,
                "limit": listManagedInstanceErrataRequest.limit,
                "page": listManagedInstanceErrataRequest.page,
                "sortOrder": listManagedInstanceErrataRequest.sortOrder,
                "sortBy": listManagedInstanceErrataRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceErrataRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceErrataRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/errata",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ErratumSummary,
                    type: "Array<model.ErratumSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listManagedInstanceErrataRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ErratumSummary objects
     * contained in responses from the listManagedInstanceErrata operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstanceErrata(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagedInstanceErrata(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listManagedInstanceErrataResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstanceErrata operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstanceErrataResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagedInstanceErrata(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ErratumSummary objects
     * contained in responses from the listManagedInstanceErrata operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstanceErrataRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagedInstanceErrata(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstanceErrata operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstanceErrataResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagedInstanceErrata(req));
    }
    /**
     * Returns a list of all Managed Instance Groups.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagedInstanceGroupsRequest
     * @return ListManagedInstanceGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListManagedInstanceGroups.ts.html |here} to see how to use ListManagedInstanceGroups API.
     */
    listManagedInstanceGroups(listManagedInstanceGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listManagedInstanceGroups.");
            const operationName = "listManagedInstanceGroups";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstanceGroupSummary/ListManagedInstanceGroups";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagedInstanceGroupsRequest.compartmentId,
                "displayName": listManagedInstanceGroupsRequest.displayName,
                "limit": listManagedInstanceGroupsRequest.limit,
                "page": listManagedInstanceGroupsRequest.page,
                "sortOrder": listManagedInstanceGroupsRequest.sortOrder,
                "sortBy": listManagedInstanceGroupsRequest.sortBy,
                "lifecycleState": listManagedInstanceGroupsRequest.lifecycleState,
                "osFamily": listManagedInstanceGroupsRequest.osFamily
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceGroupsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ManagedInstanceGroupSummary,
                    type: "Array<model.ManagedInstanceGroupSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listManagedInstanceGroupsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ManagedInstanceGroupSummary objects
     * contained in responses from the listManagedInstanceGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstanceGroups(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagedInstanceGroups(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listManagedInstanceGroupsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstanceGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstanceGroupsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagedInstanceGroups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ManagedInstanceGroupSummary objects
     * contained in responses from the listManagedInstanceGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstanceGroupsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagedInstanceGroups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstanceGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstanceGroupsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagedInstanceGroups(req));
    }
    /**
     * Returns a list of all Managed Instances.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagedInstancesRequest
     * @return ListManagedInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListManagedInstances.ts.html |here} to see how to use ListManagedInstances API.
     */
    listManagedInstances(listManagedInstancesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listManagedInstances.");
            const operationName = "listManagedInstances";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstanceSummary/ListManagedInstances";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagedInstancesRequest.compartmentId,
                "displayName": listManagedInstancesRequest.displayName,
                "limit": listManagedInstancesRequest.limit,
                "page": listManagedInstancesRequest.page,
                "sortOrder": listManagedInstancesRequest.sortOrder,
                "sortBy": listManagedInstancesRequest.sortBy,
                "osFamily": listManagedInstancesRequest.osFamily
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstancesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstancesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ManagedInstanceSummary,
                    type: "Array<model.ManagedInstanceSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listManagedInstancesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ManagedInstanceSummary objects
     * contained in responses from the listManagedInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstances(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagedInstances(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listManagedInstancesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstancesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagedInstances(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ManagedInstanceSummary objects
     * contained in responses from the listManagedInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstancesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagedInstances(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstancesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagedInstances(req));
    }
    /**
       * Retrieve a list of module stream profiles from a software source.
  * Filters may be applied to select a subset of module stream profiles
  * based on the filter criteria.
  * <p>
  The \"moduleName\", \"streamName\", and \"profileName\" attributes combine
  * to form a set of filters on the list of module stream profiles.  If
  * a \"moduleName\" is provided, only profiles that belong to that module
  * are returned.  If both a \"moduleName\" and \"streamName\" are given,
  * only profiles belonging to that module stream are returned.  Finally,
  * if all three are given then only the particular profile indicated
  * by the triple is returned.  It is not valid to supply a \"streamName\"
  * without a \"moduleName\".  It is also not valid to supply a \"profileName\"
  * without a \"streamName\".
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListModuleStreamProfilesRequest
       * @return ListModuleStreamProfilesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListModuleStreamProfiles.ts.html |here} to see how to use ListModuleStreamProfiles API.
       */
    listModuleStreamProfiles(listModuleStreamProfilesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listModuleStreamProfiles.");
            const operationName = "listModuleStreamProfiles";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ModuleStreamProfileSummary/ListModuleStreamProfiles";
            const pathParams = {
                "{softwareSourceId}": listModuleStreamProfilesRequest.softwareSourceId
            };
            const queryParams = {
                "compartmentId": listModuleStreamProfilesRequest.compartmentId,
                "moduleName": listModuleStreamProfilesRequest.moduleName,
                "streamName": listModuleStreamProfilesRequest.streamName,
                "profileName": listModuleStreamProfilesRequest.profileName,
                "limit": listModuleStreamProfilesRequest.limit,
                "page": listModuleStreamProfilesRequest.page,
                "sortOrder": listModuleStreamProfilesRequest.sortOrder,
                "sortBy": listModuleStreamProfilesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listModuleStreamProfilesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listModuleStreamProfilesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/streamProfiles",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ModuleStreamProfileSummary,
                    type: "Array<model.ModuleStreamProfileSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamProfilesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModuleStreamProfileSummary objects
     * contained in responses from the listModuleStreamProfiles operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamProfiles(request) {
        return oci_common_1.paginateRecords(request, req => this.listModuleStreamProfiles(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamProfilesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamProfiles operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamProfilesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listModuleStreamProfiles(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ModuleStreamProfileSummary objects
     * contained in responses from the listModuleStreamProfiles operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamProfilesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listModuleStreamProfiles(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamProfiles operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamProfilesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listModuleStreamProfiles(req));
    }
    /**
       * Retrieve a list of module stream profiles, along with a summary of their
  * of their status, from a managed instance.  Filters may be applied to
  * select a subset of profiles based on the filter criteria.
  * <p>
  The \"moduleName\", \"streamName\", and \"profileName\" attributes combine
  * to form a set of filters on the list of module stream profiles.  If
  * a \"modulName\" is provided, only profiles that belong to that module
  * are returned.  If both a \"moduleName\" and \"streamName\" are given,
  * only profiles belonging to that module stream are returned.  Finally,
  * if all three are given then only the particular profile indicated
  * by the triple is returned.  It is not valid to supply a \"streamName\"
  * without a \"moduleName\".  It is also not valid to supply a \"profileName\"
  * without a \"streamName\".
  * <p>
  The \"status\" attribute filters against the state of a module stream
  * profile.  Valid values are \"INSTALLED\" and \"AVAILABLE\".  If the
  * attribute is set to \"INSTALLED\", only module stream profiles that
  * are installed are included in the result set.  If the attribute is
  * set to \"AVAILABLE\", only module stream profiles that are not
  * installed are included in the result set.  If the attribute is not
  * defined, the request is not subject to this filter.
  * <p>
  When sorting by display name, the result set is sorted first by
  * module name, then by stream name, and finally by profile name.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListModuleStreamProfilesOnManagedInstanceRequest
       * @return ListModuleStreamProfilesOnManagedInstanceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListModuleStreamProfilesOnManagedInstance.ts.html |here} to see how to use ListModuleStreamProfilesOnManagedInstance API.
       */
    listModuleStreamProfilesOnManagedInstance(listModuleStreamProfilesOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listModuleStreamProfilesOnManagedInstance.");
            const operationName = "listModuleStreamProfilesOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/ListModuleStreamProfilesOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": listModuleStreamProfilesOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "compartmentId": listModuleStreamProfilesOnManagedInstanceRequest.compartmentId,
                "moduleName": listModuleStreamProfilesOnManagedInstanceRequest.moduleName,
                "streamName": listModuleStreamProfilesOnManagedInstanceRequest.streamName,
                "profileName": listModuleStreamProfilesOnManagedInstanceRequest.profileName,
                "profileStatus": listModuleStreamProfilesOnManagedInstanceRequest.profileStatus,
                "limit": listModuleStreamProfilesOnManagedInstanceRequest.limit,
                "page": listModuleStreamProfilesOnManagedInstanceRequest.page,
                "sortOrder": listModuleStreamProfilesOnManagedInstanceRequest.sortOrder,
                "sortBy": listModuleStreamProfilesOnManagedInstanceRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listModuleStreamProfilesOnManagedInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listModuleStreamProfilesOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/streamProfiles",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ModuleStreamProfileOnManagedInstanceSummary,
                    type: "Array<model.ModuleStreamProfileOnManagedInstanceSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamProfilesOnManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModuleStreamProfileOnManagedInstanceSummary objects
     * contained in responses from the listModuleStreamProfilesOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamProfilesOnManagedInstance(request) {
        return oci_common_1.paginateRecords(request, req => this.listModuleStreamProfilesOnManagedInstance(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamProfilesOnManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamProfilesOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamProfilesOnManagedInstanceResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listModuleStreamProfilesOnManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ModuleStreamProfileOnManagedInstanceSummary objects
     * contained in responses from the listModuleStreamProfilesOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamProfilesOnManagedInstanceRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listModuleStreamProfilesOnManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamProfilesOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamProfilesOnManagedInstanceResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listModuleStreamProfilesOnManagedInstance(req));
    }
    /**
       * Retrieve a list of module streams from a software source.
  * Filters may be applied to select a subset of module streams
  * based on the filter criteria.
  * <p>
  The 'moduleName' attribute filters against the name of a module.
  * It accepts strings of the format \"<module>\".  If this attribute
  * is defined, only streams that belong to the specified module are
  * included in the result set.  If it is not defined, the request is
  * not subject to this filter.  The 'streamName' attribute filters
  * against the name of a stream of a module.  If this attribute is
  * defined, only the particular module stream that matches both the
  * module and stream names is included in the result set.  It is
  * not valid to supply 'streamName' without also supplying a
  * 'moduleName'.
  * <p>
  When sorting by display name, the result set is sorted first by
  * module name, then by stream name.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListModuleStreamsRequest
       * @return ListModuleStreamsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListModuleStreams.ts.html |here} to see how to use ListModuleStreams API.
       */
    listModuleStreams(listModuleStreamsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listModuleStreams.");
            const operationName = "listModuleStreams";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ModuleStreamSummary/ListModuleStreams";
            const pathParams = {
                "{softwareSourceId}": listModuleStreamsRequest.softwareSourceId
            };
            const queryParams = {
                "compartmentId": listModuleStreamsRequest.compartmentId,
                "moduleName": listModuleStreamsRequest.moduleName,
                "streamName": listModuleStreamsRequest.streamName,
                "limit": listModuleStreamsRequest.limit,
                "page": listModuleStreamsRequest.page,
                "sortOrder": listModuleStreamsRequest.sortOrder,
                "sortBy": listModuleStreamsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listModuleStreamsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listModuleStreamsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/moduleStreams",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ModuleStreamSummary,
                    type: "Array<model.ModuleStreamSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModuleStreamSummary objects
     * contained in responses from the listModuleStreams operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreams(request) {
        return oci_common_1.paginateRecords(request, req => this.listModuleStreams(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreams operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listModuleStreams(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ModuleStreamSummary objects
     * contained in responses from the listModuleStreams operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listModuleStreams(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreams operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listModuleStreams(req));
    }
    /**
       * Retrieve a list of module streams, along with a summary of their
  * status, from a managed instance.  Filters may be applied to select
  * a subset of module streams based on the filter criteria.
  * <p>
  The 'moduleName' attribute filters against the name of a module.
  * It accepts strings of the format \"<module>\".  If this attribute
  * is defined, only streams that belong to the specified module are
  * included in the result set.  If it is not defined, the request is
  * not subject to this filter.
  * <p>
  The \"status\" attribute filters against the state of a module stream.
  * Valid values are \"ENABLED\", \"DISABLED\", and \"ACTIVE\".  If the
  * attribute is set to \"ENABLED\", only module streams that are enabled
  * are included in the result set.  If the attribute is set to \"DISABLED\",
  * only module streams that are not enabled are included in the result
  * set.  If the attribute is set to \"ACTIVE\", only module streams that
  * are active are included in the result set.  If the attribute is not
  * defined, the request is not subject to this filter.
  * <p>
  When sorting by the display name, the result set is sorted first
  * by the module name and then by the stream name.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListModuleStreamsOnManagedInstanceRequest
       * @return ListModuleStreamsOnManagedInstanceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListModuleStreamsOnManagedInstance.ts.html |here} to see how to use ListModuleStreamsOnManagedInstance API.
       */
    listModuleStreamsOnManagedInstance(listModuleStreamsOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listModuleStreamsOnManagedInstance.");
            const operationName = "listModuleStreamsOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/ListModuleStreamsOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": listModuleStreamsOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "compartmentId": listModuleStreamsOnManagedInstanceRequest.compartmentId,
                "moduleName": listModuleStreamsOnManagedInstanceRequest.moduleName,
                "streamName": listModuleStreamsOnManagedInstanceRequest.streamName,
                "streamStatus": listModuleStreamsOnManagedInstanceRequest.streamStatus,
                "limit": listModuleStreamsOnManagedInstanceRequest.limit,
                "page": listModuleStreamsOnManagedInstanceRequest.page,
                "sortOrder": listModuleStreamsOnManagedInstanceRequest.sortOrder,
                "sortBy": listModuleStreamsOnManagedInstanceRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listModuleStreamsOnManagedInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listModuleStreamsOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/moduleStreams",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ModuleStreamOnManagedInstanceSummary,
                    type: "Array<model.ModuleStreamOnManagedInstanceSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamsOnManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModuleStreamOnManagedInstanceSummary objects
     * contained in responses from the listModuleStreamsOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamsOnManagedInstance(request) {
        return oci_common_1.paginateRecords(request, req => this.listModuleStreamsOnManagedInstance(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamsOnManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamsOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamsOnManagedInstanceResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listModuleStreamsOnManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ModuleStreamOnManagedInstanceSummary objects
     * contained in responses from the listModuleStreamsOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamsOnManagedInstanceRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listModuleStreamsOnManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamsOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamsOnManagedInstanceResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listModuleStreamsOnManagedInstance(req));
    }
    /**
     * Returns a list of installed packages on the Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListPackagesInstalledOnManagedInstanceRequest
     * @return ListPackagesInstalledOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListPackagesInstalledOnManagedInstance.ts.html |here} to see how to use ListPackagesInstalledOnManagedInstance API.
     */
    listPackagesInstalledOnManagedInstance(listPackagesInstalledOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listPackagesInstalledOnManagedInstance.");
            const operationName = "listPackagesInstalledOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/ListPackagesInstalledOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": listPackagesInstalledOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "displayName": listPackagesInstalledOnManagedInstanceRequest.displayName,
                "compartmentId": listPackagesInstalledOnManagedInstanceRequest.compartmentId,
                "limit": listPackagesInstalledOnManagedInstanceRequest.limit,
                "page": listPackagesInstalledOnManagedInstanceRequest.page,
                "sortOrder": listPackagesInstalledOnManagedInstanceRequest.sortOrder,
                "sortBy": listPackagesInstalledOnManagedInstanceRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listPackagesInstalledOnManagedInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listPackagesInstalledOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/packages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.InstalledPackageSummary,
                    type: "Array<model.InstalledPackageSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listPackagesInstalledOnManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.InstalledPackageSummary objects
     * contained in responses from the listPackagesInstalledOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPackagesInstalledOnManagedInstance(request) {
        return oci_common_1.paginateRecords(request, req => this.listPackagesInstalledOnManagedInstance(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listPackagesInstalledOnManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listPackagesInstalledOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPackagesInstalledOnManagedInstanceResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listPackagesInstalledOnManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.InstalledPackageSummary objects
     * contained in responses from the listPackagesInstalledOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPackagesInstalledOnManagedInstanceRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listPackagesInstalledOnManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPackagesInstalledOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPackagesInstalledOnManagedInstanceResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listPackagesInstalledOnManagedInstance(req));
    }
    /**
     * Returns a list of all of the currently active Scheduled Jobs in the system
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListScheduledJobsRequest
     * @return ListScheduledJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListScheduledJobs.ts.html |here} to see how to use ListScheduledJobs API.
     */
    listScheduledJobs(listScheduledJobsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listScheduledJobs.");
            const operationName = "listScheduledJobs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ScheduledJob/ListScheduledJobs";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listScheduledJobsRequest.compartmentId,
                "displayName": listScheduledJobsRequest.displayName,
                "managedInstanceId": listScheduledJobsRequest.managedInstanceId,
                "managedInstanceGroupId": listScheduledJobsRequest.managedInstanceGroupId,
                "operationType": listScheduledJobsRequest.operationType,
                "limit": listScheduledJobsRequest.limit,
                "page": listScheduledJobsRequest.page,
                "sortOrder": listScheduledJobsRequest.sortOrder,
                "sortBy": listScheduledJobsRequest.sortBy,
                "lifecycleState": listScheduledJobsRequest.lifecycleState,
                "osFamily": listScheduledJobsRequest.osFamily,
                "isRestricted": listScheduledJobsRequest.isRestricted
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listScheduledJobsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listScheduledJobsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ScheduledJobSummary,
                    type: "Array<model.ScheduledJobSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listScheduledJobsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ScheduledJobSummary objects
     * contained in responses from the listScheduledJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllScheduledJobs(request) {
        return oci_common_1.paginateRecords(request, req => this.listScheduledJobs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listScheduledJobsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listScheduledJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllScheduledJobsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listScheduledJobs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ScheduledJobSummary objects
     * contained in responses from the listScheduledJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listScheduledJobsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listScheduledJobs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listScheduledJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listScheduledJobsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listScheduledJobs(req));
    }
    /**
     * Lists Software Packages in a Software Source
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSoftwareSourcePackagesRequest
     * @return ListSoftwareSourcePackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListSoftwareSourcePackages.ts.html |here} to see how to use ListSoftwareSourcePackages API.
     */
    listSoftwareSourcePackages(listSoftwareSourcePackagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listSoftwareSourcePackages.");
            const operationName = "listSoftwareSourcePackages";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/SoftwareSource/ListSoftwareSourcePackages";
            const pathParams = {
                "{softwareSourceId}": listSoftwareSourcePackagesRequest.softwareSourceId
            };
            const queryParams = {
                "compartmentId": listSoftwareSourcePackagesRequest.compartmentId,
                "displayName": listSoftwareSourcePackagesRequest.displayName,
                "limit": listSoftwareSourcePackagesRequest.limit,
                "page": listSoftwareSourcePackagesRequest.page,
                "sortOrder": listSoftwareSourcePackagesRequest.sortOrder,
                "sortBy": listSoftwareSourcePackagesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSoftwareSourcePackagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSoftwareSourcePackagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/softwarePackages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SoftwarePackageSummary,
                    type: "Array<model.SoftwarePackageSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSoftwareSourcePackagesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SoftwarePackageSummary objects
     * contained in responses from the listSoftwareSourcePackages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSoftwareSourcePackages(request) {
        return oci_common_1.paginateRecords(request, req => this.listSoftwareSourcePackages(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSoftwareSourcePackagesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSoftwareSourcePackages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSoftwareSourcePackagesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSoftwareSourcePackages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SoftwarePackageSummary objects
     * contained in responses from the listSoftwareSourcePackages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSoftwareSourcePackagesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSoftwareSourcePackages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSoftwareSourcePackages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSoftwareSourcePackagesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSoftwareSourcePackages(req));
    }
    /**
     * Returns a list of all Software Sources.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSoftwareSourcesRequest
     * @return ListSoftwareSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListSoftwareSources.ts.html |here} to see how to use ListSoftwareSources API.
     */
    listSoftwareSources(listSoftwareSourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listSoftwareSources.");
            const operationName = "listSoftwareSources";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/SoftwareSourceSummary/ListSoftwareSources";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSoftwareSourcesRequest.compartmentId,
                "displayName": listSoftwareSourcesRequest.displayName,
                "limit": listSoftwareSourcesRequest.limit,
                "page": listSoftwareSourcesRequest.page,
                "sortOrder": listSoftwareSourcesRequest.sortOrder,
                "sortBy": listSoftwareSourcesRequest.sortBy,
                "lifecycleState": listSoftwareSourcesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSoftwareSourcesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSoftwareSourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SoftwareSourceSummary,
                    type: "Array<model.SoftwareSourceSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSoftwareSourcesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SoftwareSourceSummary objects
     * contained in responses from the listSoftwareSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSoftwareSources(request) {
        return oci_common_1.paginateRecords(request, req => this.listSoftwareSources(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSoftwareSourcesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSoftwareSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSoftwareSourcesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSoftwareSources(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SoftwareSourceSummary objects
     * contained in responses from the listSoftwareSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSoftwareSourcesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSoftwareSources(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSoftwareSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSoftwareSourcesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSoftwareSources(req));
    }
    /**
     * Returns a list of all of the Scheduled Jobs whose next execution time is at or before the specified time.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListUpcomingScheduledJobsRequest
     * @return ListUpcomingScheduledJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListUpcomingScheduledJobs.ts.html |here} to see how to use ListUpcomingScheduledJobs API.
     */
    listUpcomingScheduledJobs(listUpcomingScheduledJobsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listUpcomingScheduledJobs.");
            const operationName = "listUpcomingScheduledJobs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ScheduledJob/ListUpcomingScheduledJobs";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listUpcomingScheduledJobsRequest.compartmentId,
                "displayName": listUpcomingScheduledJobsRequest.displayName,
                "timeEnd": listUpcomingScheduledJobsRequest.timeEnd,
                "limit": listUpcomingScheduledJobsRequest.limit,
                "page": listUpcomingScheduledJobsRequest.page,
                "sortOrder": listUpcomingScheduledJobsRequest.sortOrder,
                "sortBy": listUpcomingScheduledJobsRequest.sortBy,
                "tagName": listUpcomingScheduledJobsRequest.tagName,
                "tagValue": listUpcomingScheduledJobsRequest.tagValue,
                "lifecycleState": listUpcomingScheduledJobsRequest.lifecycleState,
                "osFamily": listUpcomingScheduledJobsRequest.osFamily
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listUpcomingScheduledJobsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listUpcomingScheduledJobsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs/upcomingSchedules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ScheduledJobSummary,
                    type: "Array<model.ScheduledJobSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listUpcomingScheduledJobsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ScheduledJobSummary objects
     * contained in responses from the listUpcomingScheduledJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUpcomingScheduledJobs(request) {
        return oci_common_1.paginateRecords(request, req => this.listUpcomingScheduledJobs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listUpcomingScheduledJobsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUpcomingScheduledJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUpcomingScheduledJobsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listUpcomingScheduledJobs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ScheduledJobSummary objects
     * contained in responses from the listUpcomingScheduledJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUpcomingScheduledJobsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listUpcomingScheduledJobs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUpcomingScheduledJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUpcomingScheduledJobsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listUpcomingScheduledJobs(req));
    }
    /**
     * Returns a list of Windows Updates.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWindowsUpdatesRequest
     * @return ListWindowsUpdatesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListWindowsUpdates.ts.html |here} to see how to use ListWindowsUpdates API.
     */
    listWindowsUpdates(listWindowsUpdatesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listWindowsUpdates.");
            const operationName = "listWindowsUpdates";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/WindowsUpdateSummary/ListWindowsUpdates";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWindowsUpdatesRequest.compartmentId,
                "displayName": listWindowsUpdatesRequest.displayName,
                "limit": listWindowsUpdatesRequest.limit,
                "page": listWindowsUpdatesRequest.page,
                "sortOrder": listWindowsUpdatesRequest.sortOrder,
                "sortBy": listWindowsUpdatesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWindowsUpdatesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWindowsUpdatesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/updates",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WindowsUpdateSummary,
                    type: "Array<model.WindowsUpdateSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWindowsUpdatesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WindowsUpdateSummary objects
     * contained in responses from the listWindowsUpdates operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWindowsUpdates(request) {
        return oci_common_1.paginateRecords(request, req => this.listWindowsUpdates(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWindowsUpdatesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWindowsUpdates operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWindowsUpdatesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWindowsUpdates(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WindowsUpdateSummary objects
     * contained in responses from the listWindowsUpdates operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWindowsUpdatesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWindowsUpdates(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWindowsUpdates operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWindowsUpdatesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWindowsUpdates(req));
    }
    /**
     * Returns a list of installed Windows updates for a Managed Instance. This is only applicable to Windows instances.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWindowsUpdatesInstalledOnManagedInstanceRequest
     * @return ListWindowsUpdatesInstalledOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListWindowsUpdatesInstalledOnManagedInstance.ts.html |here} to see how to use ListWindowsUpdatesInstalledOnManagedInstance API.
     */
    listWindowsUpdatesInstalledOnManagedInstance(listWindowsUpdatesInstalledOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listWindowsUpdatesInstalledOnManagedInstance.");
            const operationName = "listWindowsUpdatesInstalledOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/ListWindowsUpdatesInstalledOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": listWindowsUpdatesInstalledOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "displayName": listWindowsUpdatesInstalledOnManagedInstanceRequest.displayName,
                "compartmentId": listWindowsUpdatesInstalledOnManagedInstanceRequest.compartmentId,
                "limit": listWindowsUpdatesInstalledOnManagedInstanceRequest.limit,
                "page": listWindowsUpdatesInstalledOnManagedInstanceRequest.page,
                "sortOrder": listWindowsUpdatesInstalledOnManagedInstanceRequest.sortOrder,
                "sortBy": listWindowsUpdatesInstalledOnManagedInstanceRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWindowsUpdatesInstalledOnManagedInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWindowsUpdatesInstalledOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/updates/installed",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.InstalledWindowsUpdateSummary,
                    type: "Array<model.InstalledWindowsUpdateSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWindowsUpdatesInstalledOnManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.InstalledWindowsUpdateSummary objects
     * contained in responses from the listWindowsUpdatesInstalledOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWindowsUpdatesInstalledOnManagedInstance(request) {
        return oci_common_1.paginateRecords(request, req => this.listWindowsUpdatesInstalledOnManagedInstance(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWindowsUpdatesInstalledOnManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWindowsUpdatesInstalledOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWindowsUpdatesInstalledOnManagedInstanceResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWindowsUpdatesInstalledOnManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.InstalledWindowsUpdateSummary objects
     * contained in responses from the listWindowsUpdatesInstalledOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWindowsUpdatesInstalledOnManagedInstanceRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWindowsUpdatesInstalledOnManagedInstance(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWindowsUpdatesInstalledOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWindowsUpdatesInstalledOnManagedInstanceResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWindowsUpdatesInstalledOnManagedInstance(req));
    }
    /**
     * Gets the errors for the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/WorkRequest/ListWorkRequestErrors";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "limit": listWorkRequestErrorsRequest.limit,
                "page": listWorkRequestErrorsRequest.page,
                "sortOrder": listWorkRequestErrorsRequest.sortOrder,
                "sortBy": listWorkRequestErrorsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestError,
                    type: "Array<model.WorkRequestError>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Lists the log entries for the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/WorkRequest/ListWorkRequestLogs";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "limit": listWorkRequestLogsRequest.limit,
                "page": listWorkRequestLogsRequest.page,
                "sortOrder": listWorkRequestLogsRequest.sortOrder,
                "sortBy": listWorkRequestLogsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestLogEntry,
                    type: "Array<model.WorkRequestLogEntry>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Lists the work requests in a compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/WorkRequestSummary/ListWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "displayName": listWorkRequestsRequest.displayName,
                "managedInstanceId": listWorkRequestsRequest.managedInstanceId,
                "limit": listWorkRequestsRequest.limit,
                "page": listWorkRequestsRequest.page,
                "sortOrder": listWorkRequestsRequest.sortOrder,
                "sortBy": listWorkRequestsRequest.sortBy,
                "osFamily": listWorkRequestsRequest.osFamily
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestSummary,
                    type: "Array<model.WorkRequestSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
       * Perform an operation involving modules, streams, and profiles on a
  * managed instance.  Each operation may enable or disable an arbitrary
  * amount of module streams, and install or remove an arbitrary number
  * of module stream profiles.  When the operation is complete, the
  * state of the modules, streams, and profiles on the managed instance
  * will match the state indicated in the operation.
  * <p>
  Each module stream specified in the list of module streams to enable
  * will be in the \"ENABLED\" state upon completion of the operation.
  * If there was already a stream of that module enabled, any work
  * required to switch from the current stream to the new stream is
  * performed implicitly.
  * <p>
  Each module stream specified in the list of module streams to disable
  * will be in the \"DISABLED\" state upon completion of the operation.
  * Any profiles that are installed for the module stream will be removed
  * as part of the operation.
  * <p>
  Each module stream profile specified in the list of profiles to install
  * will be in the \"INSTALLED\" state upon completion of the operation,
  * indicating that any packages that are part of the profile are installed
  * on the managed instance.  If the module stream containing the profile
  * is not enabled, it will be enabled as part of the operation.  There
  * is an exception when attempting to install a stream of a profile when
  * another stream of the same module is enabled.  It is an error to attempt
  * to install a profile of another module stream, unless enabling the
  * new module stream is explicitly included in this operation.
  * <p>
  Each module stream profile specified in the list of profiles to remove
  * will be in the \"AVAILABLE\" state upon completion of the operation.
  * The status of packages within the profile after the operation is
  * complete is defined by the package manager on the managed instance.
  * <p>
  Operations that contain one or more elements that are not allowed
  * are rejected.
  * <p>
  The result of this request is a WorkRequest object.  The returned
  * WorkRequest is the parent of a structure of other WorkRequests.  Taken
  * as a whole, this structure indicates the entire set of work to be
  * performed to complete the operation.
  * <p>
  This interface can also be used to perform a dry run of the operation
  * rather than committing it to a managed instance.  If a dry run is
  * requested, the OS Management Service will evaluate the operation
  * against the current module, stream, and profile state on the managed
  * instance.  It will calculate the impact of the operation on all
  * modules, streams, and profiles on the managed instance, including those
  * that are implicitly impacted by the operation.
  * <p>
  The WorkRequest resulting from a dry run behaves differently than
  * a WorkRequest resulting from a committable operation.  Dry run
  * WorkRequests are always singletons and never have children.  The
  * impact of the operation is returned using the log and error
  * facilities of WorkRequests.  The impact of operations that are
  * allowed by the OS Management Service are communicated as one or
  * more work request log entries.  Operations that are not allowed
  * by the OS Management Service are communicated as one or more
  * work requst error entries.  Each entry, for either logs or errors,
  * contains a structured message containing the results of one
  * or more operations.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ManageModuleStreamsOnManagedInstanceRequest
       * @return ManageModuleStreamsOnManagedInstanceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ManageModuleStreamsOnManagedInstance.ts.html |here} to see how to use ManageModuleStreamsOnManagedInstance API.
       */
    manageModuleStreamsOnManagedInstance(manageModuleStreamsOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#manageModuleStreamsOnManagedInstance.");
            const operationName = "manageModuleStreamsOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/ManageModuleStreamsOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": manageModuleStreamsOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": manageModuleStreamsOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": manageModuleStreamsOnManagedInstanceRequest.opcRetryToken,
                "if-match": manageModuleStreamsOnManagedInstanceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, manageModuleStreamsOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/moduleStreams/manage",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(manageModuleStreamsOnManagedInstanceRequest.manageModuleStreamsOnManagedInstanceDetails, "ManageModuleStreamsOnManagedInstanceDetails", model.ManageModuleStreamsOnManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a profile for a module stream that is installed on a managed instance.
     * If a module stream is provided, rather than a fully qualified profile, all
     * profiles that have been installed for the module stream will be removed.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveModuleStreamProfileFromManagedInstanceRequest
     * @return RemoveModuleStreamProfileFromManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/RemoveModuleStreamProfileFromManagedInstance.ts.html |here} to see how to use RemoveModuleStreamProfileFromManagedInstance API.
     */
    removeModuleStreamProfileFromManagedInstance(removeModuleStreamProfileFromManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#removeModuleStreamProfileFromManagedInstance.");
            const operationName = "removeModuleStreamProfileFromManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ModuleStreamProfileDetails/RemoveModuleStreamProfileFromManagedInstance";
            const pathParams = {
                "{managedInstanceId}": removeModuleStreamProfileFromManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "moduleName": removeModuleStreamProfileFromManagedInstanceRequest.moduleName,
                "streamName": removeModuleStreamProfileFromManagedInstanceRequest.streamName,
                "profileName": removeModuleStreamProfileFromManagedInstanceRequest.profileName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeModuleStreamProfileFromManagedInstanceRequest.opcRequestId,
                "opc-retry-token": removeModuleStreamProfileFromManagedInstanceRequest.opcRetryToken,
                "if-match": removeModuleStreamProfileFromManagedInstanceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeModuleStreamProfileFromManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/streamProfiles/remove",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes an installed package from a managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemovePackageFromManagedInstanceRequest
     * @return RemovePackageFromManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/RemovePackageFromManagedInstance.ts.html |here} to see how to use RemovePackageFromManagedInstance API.
     */
    removePackageFromManagedInstance(removePackageFromManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#removePackageFromManagedInstance.");
            const operationName = "removePackageFromManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstance/RemovePackageFromManagedInstance";
            const pathParams = {
                "{managedInstanceId}": removePackageFromManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "softwarePackageName": removePackageFromManagedInstanceRequest.softwarePackageName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removePackageFromManagedInstanceRequest.opcRequestId,
                "opc-retry-token": removePackageFromManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removePackageFromManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/packages/remove",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a given list of Software Packages from a specific Software Source.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemovePackagesFromSoftwareSourceRequest
     * @return RemovePackagesFromSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/RemovePackagesFromSoftwareSource.ts.html |here} to see how to use RemovePackagesFromSoftwareSource API.
     */
    removePackagesFromSoftwareSource(removePackagesFromSoftwareSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#removePackagesFromSoftwareSource.");
            const operationName = "removePackagesFromSoftwareSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/SoftwareSource/RemovePackagesFromSoftwareSource";
            const pathParams = {
                "{softwareSourceId}": removePackagesFromSoftwareSourceRequest.softwareSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removePackagesFromSoftwareSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removePackagesFromSoftwareSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/actions/removePackages",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removePackagesFromSoftwareSourceRequest.removePackagesFromSoftwareSourceDetails, "RemovePackagesFromSoftwareSourceDetails", model.RemovePackagesFromSoftwareSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This will trigger an already created Scheduled Job to being executing
     * immediately instead of waiting for its next regularly scheduled time.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RunScheduledJobNowRequest
     * @return RunScheduledJobNowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/RunScheduledJobNow.ts.html |here} to see how to use RunScheduledJobNow API.
     */
    runScheduledJobNow(runScheduledJobNowRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#runScheduledJobNow.");
            const operationName = "runScheduledJobNow";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ScheduledJob/RunScheduledJobNow";
            const pathParams = {
                "{scheduledJobId}": runScheduledJobNowRequest.scheduledJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": runScheduledJobNowRequest.opcRequestId,
                "if-match": runScheduledJobNowRequest.ifMatch,
                "opc-retry-token": runScheduledJobNowRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, runScheduledJobNowRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs/{scheduledJobId}/actions/runNow",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Searches all of the available Software Sources and returns any/all Software Packages matching
     * the search criteria.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchSoftwarePackagesRequest
     * @return SearchSoftwarePackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/SearchSoftwarePackages.ts.html |here} to see how to use SearchSoftwarePackages API.
     */
    searchSoftwarePackages(searchSoftwarePackagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#searchSoftwarePackages.");
            const operationName = "searchSoftwarePackages";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/SoftwareSource/SearchSoftwarePackages";
            const pathParams = {};
            const queryParams = {
                "softwarePackageName": searchSoftwarePackagesRequest.softwarePackageName,
                "displayName": searchSoftwarePackagesRequest.displayName,
                "cveName": searchSoftwarePackagesRequest.cveName,
                "limit": searchSoftwarePackagesRequest.limit,
                "page": searchSoftwarePackagesRequest.page,
                "sortOrder": searchSoftwarePackagesRequest.sortOrder,
                "sortBy": searchSoftwarePackagesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": searchSoftwarePackagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchSoftwarePackagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/softwarePackages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SoftwarePackageSearchSummary,
                    type: "Array<model.SoftwarePackageSearchSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of searchSoftwarePackagesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SoftwarePackageSearchSummary objects
     * contained in responses from the searchSoftwarePackages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    searchAllSoftwarePackages(request) {
        return oci_common_1.paginateRecords(request, req => this.searchSoftwarePackages(req));
    }
    /**
     * NOTE: This function is deprecated in favor of searchSoftwarePackagesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the searchSoftwarePackages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    searchAllSoftwarePackagesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.searchSoftwarePackages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SoftwarePackageSearchSummary objects
     * contained in responses from the searchSoftwarePackages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    searchSoftwarePackagesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.searchSoftwarePackages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the searchSoftwarePackages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    searchSoftwarePackagesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.searchSoftwarePackages(req));
    }
    /**
     * This will force an already created Scheduled Job to skip its
     * next regularly scheduled execution
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SkipNextScheduledJobExecutionRequest
     * @return SkipNextScheduledJobExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/SkipNextScheduledJobExecution.ts.html |here} to see how to use SkipNextScheduledJobExecution API.
     */
    skipNextScheduledJobExecution(skipNextScheduledJobExecutionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#skipNextScheduledJobExecution.");
            const operationName = "skipNextScheduledJobExecution";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ScheduledJob/SkipNextScheduledJobExecution";
            const pathParams = {
                "{scheduledJobId}": skipNextScheduledJobExecutionRequest.scheduledJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": skipNextScheduledJobExecutionRequest.opcRequestId,
                "if-match": skipNextScheduledJobExecutionRequest.ifMatch,
                "opc-retry-token": skipNextScheduledJobExecutionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, skipNextScheduledJobExecutionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs/{scheduledJobId}/actions/skipNextExecution",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables a new stream for a module that already has a stream enabled.
     * If any profiles or packages from the original module are installed,
     * switching to a new stream will remove the existing packages and
     * install their counterparts in the new stream.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SwitchModuleStreamOnManagedInstanceRequest
     * @return SwitchModuleStreamOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/SwitchModuleStreamOnManagedInstance.ts.html |here} to see how to use SwitchModuleStreamOnManagedInstance API.
     */
    switchModuleStreamOnManagedInstance(switchModuleStreamOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#switchModuleStreamOnManagedInstance.");
            const operationName = "switchModuleStreamOnManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ModuleStreamDetails/SwitchModuleStreamOnManagedInstance";
            const pathParams = {
                "{managedInstanceId}": switchModuleStreamOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {
                "moduleName": switchModuleStreamOnManagedInstanceRequest.moduleName,
                "streamName": switchModuleStreamOnManagedInstanceRequest.streamName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": switchModuleStreamOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": switchModuleStreamOnManagedInstanceRequest.opcRetryToken,
                "if-match": switchModuleStreamOnManagedInstanceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, switchModuleStreamOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/moduleStreams/switch",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateManagedInstanceRequest
     * @return UpdateManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UpdateManagedInstance.ts.html |here} to see how to use UpdateManagedInstance API.
     */
    updateManagedInstance(updateManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#updateManagedInstance.");
            const operationName = "updateManagedInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/UpdateManagedInstanceDetails/UpdateManagedInstance";
            const pathParams = {
                "{managedInstanceId}": updateManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateManagedInstanceRequest.opcRequestId,
                "if-match": updateManagedInstanceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateManagedInstanceRequest.updateManagedInstanceDetails, "UpdateManagedInstanceDetails", model.UpdateManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstance",
                    bodyModel: model.ManagedInstance,
                    type: "model.ManagedInstance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific Managed Instance Group.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateManagedInstanceGroupRequest
     * @return UpdateManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UpdateManagedInstanceGroup.ts.html |here} to see how to use UpdateManagedInstanceGroup API.
     */
    updateManagedInstanceGroup(updateManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#updateManagedInstanceGroup.");
            const operationName = "updateManagedInstanceGroup";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ManagedInstanceGroup/UpdateManagedInstanceGroup";
            const pathParams = {
                "{managedInstanceGroupId}": updateManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateManagedInstanceGroupRequest.opcRequestId,
                "if-match": updateManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateManagedInstanceGroupRequest.updateManagedInstanceGroupDetails, "UpdateManagedInstanceGroupDetails", model.UpdateManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceGroup",
                    bodyModel: model.ManagedInstanceGroup,
                    type: "model.ManagedInstanceGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates an existing Scheduled Job on the management system.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateScheduledJobRequest
     * @return UpdateScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UpdateScheduledJob.ts.html |here} to see how to use UpdateScheduledJob API.
     */
    updateScheduledJob(updateScheduledJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#updateScheduledJob.");
            const operationName = "updateScheduledJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/ScheduledJob/UpdateScheduledJob";
            const pathParams = {
                "{scheduledJobId}": updateScheduledJobRequest.scheduledJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateScheduledJobRequest.opcRequestId,
                "if-match": updateScheduledJobRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateScheduledJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs/{scheduledJobId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateScheduledJobRequest.updateScheduledJobDetails, "UpdateScheduledJobDetails", model.UpdateScheduledJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledJob",
                    bodyModel: model.ScheduledJob,
                    type: "model.ScheduledJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates an existing custom Software Source on the management system.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateSoftwareSourceRequest
     * @return UpdateSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UpdateSoftwareSource.ts.html |here} to see how to use UpdateSoftwareSource API.
     */
    updateSoftwareSource(updateSoftwareSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OsManagementClient#updateSoftwareSource.");
            const operationName = "updateSoftwareSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/os-management/20190801/SoftwareSource/UpdateSoftwareSource";
            const pathParams = {
                "{softwareSourceId}": updateSoftwareSourceRequest.softwareSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateSoftwareSourceRequest.opcRequestId,
                "if-match": updateSoftwareSourceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSoftwareSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSoftwareSourceRequest.updateSoftwareSourceDetails, "UpdateSoftwareSourceDetails", model.UpdateSoftwareSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "softwareSource",
                    bodyModel: model.SoftwareSource,
                    type: "model.SoftwareSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.OsManagementClient = OsManagementClient;
OsManagementClient.serviceEndpointTemplate = "https://osms.{region}.oci.{secondLevelDomain}";
OsManagementClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map