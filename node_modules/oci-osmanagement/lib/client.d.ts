/**
 * OS Management API
 * API for the OS Management service. Use these API operations for working
with Managed instances and Managed instance groups.

 * OpenAPI spec version: 20190801
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { OsManagementWaiter } from "./osmanagement-waiter";
declare const Breaker: any;
export declare enum EventApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class EventClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Delete an event content ZIP archive from the service
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteEventContentRequest
     * @return DeleteEventContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DeleteEventContent.ts.html |here} to see how to use DeleteEventContent API.
     */
    deleteEventContent(deleteEventContentRequest: requests.DeleteEventContentRequest): Promise<responses.DeleteEventContentResponse>;
    /**
     * Gets an Event by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetEventRequest
     * @return GetEventResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetEvent.ts.html |here} to see how to use GetEvent API.
     */
    getEvent(getEventRequest: requests.GetEventRequest): Promise<responses.GetEventResponse>;
    /**
     * Get additional data about a event as a ZIP archive. The archive content depends on the event eventType.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetEventContentRequest
     * @return GetEventContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetEventContent.ts.html |here} to see how to use GetEventContent API.
     */
    getEventContent(getEventContentRequest: requests.GetEventContentRequest): Promise<responses.GetEventContentResponse>;
    /**
     * Get summary information about events on this instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetEventReportRequest
     * @return GetEventReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetEventReport.ts.html |here} to see how to use GetEventReport API.
     */
    getEventReport(getEventReportRequest: requests.GetEventReportRequest): Promise<responses.GetEventReportResponse>;
    /**
     * Returns a list of Events.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListEventsRequest
     * @return ListEventsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListEvents.ts.html |here} to see how to use ListEvents API.
     */
    listEvents(listEventsRequest: requests.ListEventsRequest): Promise<responses.ListEventsResponse>;
    /**
     * Returns a list of related events. For now pagination is not implemented.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListRelatedEventsRequest
     * @return ListRelatedEventsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListRelatedEvents.ts.html |here} to see how to use ListRelatedEvents API.
     */
    listRelatedEvents(listRelatedEventsRequest: requests.ListRelatedEventsRequest): Promise<responses.ListRelatedEventsResponse>;
    /**
     * Updates an existing event associated to a managed instance
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateEventRequest
     * @return UpdateEventResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UpdateEvent.ts.html |here} to see how to use UpdateEvent API.
     */
    updateEvent(updateEventRequest: requests.UpdateEventRequest): Promise<responses.UpdateEventResponse>;
    /**
     * Upload the event content as a ZIP archive from the managed instance to the service
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UploadEventContentRequest
     * @return UploadEventContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UploadEventContent.ts.html |here} to see how to use UploadEventContent API.
     */
    uploadEventContent(uploadEventContentRequest: requests.UploadEventContentRequest): Promise<responses.UploadEventContentResponse>;
}
export declare enum OsManagementApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class OsManagementClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": OsManagementWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new OsManagementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): OsManagementWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): OsManagementWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Adds a given list of Software Packages to a specific Software Source.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddPackagesToSoftwareSourceRequest
     * @return AddPackagesToSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/AddPackagesToSoftwareSource.ts.html |here} to see how to use AddPackagesToSoftwareSource API.
     */
    addPackagesToSoftwareSource(addPackagesToSoftwareSourceRequest: requests.AddPackagesToSoftwareSourceRequest): Promise<responses.AddPackagesToSoftwareSourceResponse>;
    /**
     * Adds a child software source to a managed instance. After the software
     * source has been added, then packages from that software source can be
     * installed on the managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AttachChildSoftwareSourceToManagedInstanceRequest
     * @return AttachChildSoftwareSourceToManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/AttachChildSoftwareSourceToManagedInstance.ts.html |here} to see how to use AttachChildSoftwareSourceToManagedInstance API.
     */
    attachChildSoftwareSourceToManagedInstance(attachChildSoftwareSourceToManagedInstanceRequest: requests.AttachChildSoftwareSourceToManagedInstanceRequest): Promise<responses.AttachChildSoftwareSourceToManagedInstanceResponse>;
    /**
     * Adds a Managed Instance to a Managed Instance Group. After the Managed
     * Instance has been added, then operations can be performed on the Managed
     * Instance Group which will then apply to all Managed Instances in the
     * group.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AttachManagedInstanceToManagedInstanceGroupRequest
     * @return AttachManagedInstanceToManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/AttachManagedInstanceToManagedInstanceGroup.ts.html |here} to see how to use AttachManagedInstanceToManagedInstanceGroup API.
     */
    attachManagedInstanceToManagedInstanceGroup(attachManagedInstanceToManagedInstanceGroupRequest: requests.AttachManagedInstanceToManagedInstanceGroupRequest): Promise<responses.AttachManagedInstanceToManagedInstanceGroupResponse>;
    /**
     * Adds a parent software source to a managed instance. After the software
     * source has been added, then packages from that software source can be
     * installed on the managed instance. Software sources that have this
     * software source as a parent will be able to be added to this managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AttachParentSoftwareSourceToManagedInstanceRequest
     * @return AttachParentSoftwareSourceToManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/AttachParentSoftwareSourceToManagedInstance.ts.html |here} to see how to use AttachParentSoftwareSourceToManagedInstance API.
     */
    attachParentSoftwareSourceToManagedInstance(attachParentSoftwareSourceToManagedInstanceRequest: requests.AttachParentSoftwareSourceToManagedInstanceRequest): Promise<responses.AttachParentSoftwareSourceToManagedInstanceResponse>;
    /**
     * Moves a resource into a different compartment. When provided, If-Match
     * is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeManagedInstanceGroupCompartmentRequest
     * @return ChangeManagedInstanceGroupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ChangeManagedInstanceGroupCompartment.ts.html |here} to see how to use ChangeManagedInstanceGroupCompartment API.
     */
    changeManagedInstanceGroupCompartment(changeManagedInstanceGroupCompartmentRequest: requests.ChangeManagedInstanceGroupCompartmentRequest): Promise<responses.ChangeManagedInstanceGroupCompartmentResponse>;
    /**
     * Moves a resource into a different compartment. When provided, If-Match
     * is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeScheduledJobCompartmentRequest
     * @return ChangeScheduledJobCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ChangeScheduledJobCompartment.ts.html |here} to see how to use ChangeScheduledJobCompartment API.
     */
    changeScheduledJobCompartment(changeScheduledJobCompartmentRequest: requests.ChangeScheduledJobCompartmentRequest): Promise<responses.ChangeScheduledJobCompartmentResponse>;
    /**
     * Moves a resource into a different compartment. When provided, If-Match
     * is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeSoftwareSourceCompartmentRequest
     * @return ChangeSoftwareSourceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ChangeSoftwareSourceCompartment.ts.html |here} to see how to use ChangeSoftwareSourceCompartment API.
     */
    changeSoftwareSourceCompartment(changeSoftwareSourceCompartmentRequest: requests.ChangeSoftwareSourceCompartmentRequest): Promise<responses.ChangeSoftwareSourceCompartmentResponse>;
    /**
     * Creates a new Managed Instance Group on the management system.
     * This will not contain any managed instances after it is first created,
     * and they must be added later.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateManagedInstanceGroupRequest
     * @return CreateManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/CreateManagedInstanceGroup.ts.html |here} to see how to use CreateManagedInstanceGroup API.
     */
    createManagedInstanceGroup(createManagedInstanceGroupRequest: requests.CreateManagedInstanceGroupRequest): Promise<responses.CreateManagedInstanceGroupResponse>;
    /**
     * Creates a new Scheduled Job to perform a specific package operation on
     * a set of managed instances or managed instance groups.  Can be created
     * as a one-time execution in the future, or as a recurring execution
     * that repeats on a defined interval.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateScheduledJobRequest
     * @return CreateScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/CreateScheduledJob.ts.html |here} to see how to use CreateScheduledJob API.
     */
    createScheduledJob(createScheduledJobRequest: requests.CreateScheduledJobRequest): Promise<responses.CreateScheduledJobResponse>;
    /**
     * Creates a new custom Software Source on the management system.
     * This will not contain any packages after it is first created,
     * and they must be added later.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSoftwareSourceRequest
     * @return CreateSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/CreateSoftwareSource.ts.html |here} to see how to use CreateSoftwareSource API.
     */
    createSoftwareSource(createSoftwareSourceRequest: requests.CreateSoftwareSourceRequest): Promise<responses.CreateSoftwareSourceResponse>;
    /**
     * Deletes a Managed Instance Group from the management system
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteManagedInstanceGroupRequest
     * @return DeleteManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DeleteManagedInstanceGroup.ts.html |here} to see how to use DeleteManagedInstanceGroup API.
     */
    deleteManagedInstanceGroup(deleteManagedInstanceGroupRequest: requests.DeleteManagedInstanceGroupRequest): Promise<responses.DeleteManagedInstanceGroupResponse>;
    /**
     * Cancels an existing Scheduled Job on the management system
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteScheduledJobRequest
     * @return DeleteScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DeleteScheduledJob.ts.html |here} to see how to use DeleteScheduledJob API.
     */
    deleteScheduledJob(deleteScheduledJobRequest: requests.DeleteScheduledJobRequest): Promise<responses.DeleteScheduledJobResponse>;
    /**
     * Deletes a custom Software Source on the management system
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSoftwareSourceRequest
     * @return DeleteSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DeleteSoftwareSource.ts.html |here} to see how to use DeleteSoftwareSource API.
     */
    deleteSoftwareSource(deleteSoftwareSourceRequest: requests.DeleteSoftwareSourceRequest): Promise<responses.DeleteSoftwareSourceResponse>;
    /**
     * Removes a child software source from a managed instance. Packages will no longer be able to be
     * installed from these software sources.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DetachChildSoftwareSourceFromManagedInstanceRequest
     * @return DetachChildSoftwareSourceFromManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DetachChildSoftwareSourceFromManagedInstance.ts.html |here} to see how to use DetachChildSoftwareSourceFromManagedInstance API.
     */
    detachChildSoftwareSourceFromManagedInstance(detachChildSoftwareSourceFromManagedInstanceRequest: requests.DetachChildSoftwareSourceFromManagedInstanceRequest): Promise<responses.DetachChildSoftwareSourceFromManagedInstanceResponse>;
    /**
     * Removes a Managed Instance from a Managed Instance Group.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DetachManagedInstanceFromManagedInstanceGroupRequest
     * @return DetachManagedInstanceFromManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DetachManagedInstanceFromManagedInstanceGroup.ts.html |here} to see how to use DetachManagedInstanceFromManagedInstanceGroup API.
     */
    detachManagedInstanceFromManagedInstanceGroup(detachManagedInstanceFromManagedInstanceGroupRequest: requests.DetachManagedInstanceFromManagedInstanceGroupRequest): Promise<responses.DetachManagedInstanceFromManagedInstanceGroupResponse>;
    /**
     * Removes a software source from a managed instance. All child software sources will also be removed
     * from the managed instance. Packages will no longer be able to be installed from these software sources.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DetachParentSoftwareSourceFromManagedInstanceRequest
     * @return DetachParentSoftwareSourceFromManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DetachParentSoftwareSourceFromManagedInstance.ts.html |here} to see how to use DetachParentSoftwareSourceFromManagedInstance API.
     */
    detachParentSoftwareSourceFromManagedInstance(detachParentSoftwareSourceFromManagedInstanceRequest: requests.DetachParentSoftwareSourceFromManagedInstanceRequest): Promise<responses.DetachParentSoftwareSourceFromManagedInstanceResponse>;
    /**
     * Disables a module stream on a managed instance.  After the stream is
     * disabled, it is no longer possible to install the profiles that are
     * contained by the stream.  All installed profiles must be removed prior
     * to disabling a module stream.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DisableModuleStreamOnManagedInstanceRequest
     * @return DisableModuleStreamOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/DisableModuleStreamOnManagedInstance.ts.html |here} to see how to use DisableModuleStreamOnManagedInstance API.
     */
    disableModuleStreamOnManagedInstance(disableModuleStreamOnManagedInstanceRequest: requests.DisableModuleStreamOnManagedInstanceRequest): Promise<responses.DisableModuleStreamOnManagedInstanceResponse>;
    /**
     * Enables a module stream on a managed instance.  After the stream is
     * enabled, it is possible to install the profiles that are contained
     * by the stream.  Enabling a stream that is already enabled will
     * succeed.  Attempting to enable a different stream for a module that
     * already has a stream enabled results in an error.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param EnableModuleStreamOnManagedInstanceRequest
     * @return EnableModuleStreamOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/EnableModuleStreamOnManagedInstance.ts.html |here} to see how to use EnableModuleStreamOnManagedInstance API.
     */
    enableModuleStreamOnManagedInstance(enableModuleStreamOnManagedInstanceRequest: requests.EnableModuleStreamOnManagedInstanceRequest): Promise<responses.EnableModuleStreamOnManagedInstanceResponse>;
    /**
     * Returns a specific erratum.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetErratumRequest
     * @return GetErratumResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetErratum.ts.html |here} to see how to use GetErratum API.
     */
    getErratum(getErratumRequest: requests.GetErratumRequest): Promise<responses.GetErratumResponse>;
    /**
     * Returns a specific Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagedInstanceRequest
     * @return GetManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetManagedInstance.ts.html |here} to see how to use GetManagedInstance API.
     */
    getManagedInstance(getManagedInstanceRequest: requests.GetManagedInstanceRequest): Promise<responses.GetManagedInstanceResponse>;
    /**
     * Returns a specific Managed Instance Group.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagedInstanceGroupRequest
     * @return GetManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetManagedInstanceGroup.ts.html |here} to see how to use GetManagedInstanceGroup API.
     */
    getManagedInstanceGroup(getManagedInstanceGroupRequest: requests.GetManagedInstanceGroupRequest): Promise<responses.GetManagedInstanceGroupResponse>;
    /**
     * Retrieve a detailed description of a module stream from a software source.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetModuleStreamRequest
     * @return GetModuleStreamResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetModuleStream.ts.html |here} to see how to use GetModuleStream API.
     */
    getModuleStream(getModuleStreamRequest: requests.GetModuleStreamRequest): Promise<responses.GetModuleStreamResponse>;
    /**
     * Retrieve a detailed description of a module stream profile from a software source.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetModuleStreamProfileRequest
     * @return GetModuleStreamProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetModuleStreamProfile.ts.html |here} to see how to use GetModuleStreamProfile API.
     */
    getModuleStreamProfile(getModuleStreamProfileRequest: requests.GetModuleStreamProfileRequest): Promise<responses.GetModuleStreamProfileResponse>;
    /**
     * Gets the detailed information for the Scheduled Job with the given ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetScheduledJobRequest
     * @return GetScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetScheduledJob.ts.html |here} to see how to use GetScheduledJob API.
     */
    getScheduledJob(getScheduledJobRequest: requests.GetScheduledJobRequest): Promise<responses.GetScheduledJobResponse>;
    /**
     * Returns a specific Software Package.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSoftwarePackageRequest
     * @return GetSoftwarePackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetSoftwarePackage.ts.html |here} to see how to use GetSoftwarePackage API.
     */
    getSoftwarePackage(getSoftwarePackageRequest: requests.GetSoftwarePackageRequest): Promise<responses.GetSoftwarePackageResponse>;
    /**
     * Returns a specific Software Source.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSoftwareSourceRequest
     * @return GetSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetSoftwareSource.ts.html |here} to see how to use GetSoftwareSource API.
     */
    getSoftwareSource(getSoftwareSourceRequest: requests.GetSoftwareSourceRequest): Promise<responses.GetSoftwareSourceResponse>;
    /**
     * Returns a Windows Update object.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWindowsUpdateRequest
     * @return GetWindowsUpdateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetWindowsUpdate.ts.html |here} to see how to use GetWindowsUpdate API.
     */
    getWindowsUpdate(getWindowsUpdateRequest: requests.GetWindowsUpdateRequest): Promise<responses.GetWindowsUpdateResponse>;
    /**
     * Gets the detailed information for the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Install all of the available package updates for the managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallAllPackageUpdatesOnManagedInstanceRequest
     * @return InstallAllPackageUpdatesOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallAllPackageUpdatesOnManagedInstance.ts.html |here} to see how to use InstallAllPackageUpdatesOnManagedInstance API.
     */
    installAllPackageUpdatesOnManagedInstance(installAllPackageUpdatesOnManagedInstanceRequest: requests.InstallAllPackageUpdatesOnManagedInstanceRequest): Promise<responses.InstallAllPackageUpdatesOnManagedInstanceResponse>;
    /**
     * Install all of the available updates for the Managed Instance Group.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallAllUpdatesOnManagedInstanceGroupRequest
     * @return InstallAllUpdatesOnManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallAllUpdatesOnManagedInstanceGroup.ts.html |here} to see how to use InstallAllUpdatesOnManagedInstanceGroup API.
     */
    installAllUpdatesOnManagedInstanceGroup(installAllUpdatesOnManagedInstanceGroupRequest: requests.InstallAllUpdatesOnManagedInstanceGroupRequest): Promise<responses.InstallAllUpdatesOnManagedInstanceGroupResponse>;
    /**
     * Install all of the available Windows updates for the managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallAllWindowsUpdatesOnManagedInstanceRequest
     * @return InstallAllWindowsUpdatesOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallAllWindowsUpdatesOnManagedInstance.ts.html |here} to see how to use InstallAllWindowsUpdatesOnManagedInstance API.
     */
    installAllWindowsUpdatesOnManagedInstance(installAllWindowsUpdatesOnManagedInstanceRequest: requests.InstallAllWindowsUpdatesOnManagedInstanceRequest): Promise<responses.InstallAllWindowsUpdatesOnManagedInstanceResponse>;
    /**
     * Installs a profile for an module stream.  The stream must be
     * enabled before a profile can be installed.  If a module stream
     * defines multiple profiles, each one can be installed independently.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallModuleStreamProfileOnManagedInstanceRequest
     * @return InstallModuleStreamProfileOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallModuleStreamProfileOnManagedInstance.ts.html |here} to see how to use InstallModuleStreamProfileOnManagedInstance API.
     */
    installModuleStreamProfileOnManagedInstance(installModuleStreamProfileOnManagedInstanceRequest: requests.InstallModuleStreamProfileOnManagedInstanceRequest): Promise<responses.InstallModuleStreamProfileOnManagedInstanceResponse>;
    /**
     * Installs a package on a managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallPackageOnManagedInstanceRequest
     * @return InstallPackageOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallPackageOnManagedInstance.ts.html |here} to see how to use InstallPackageOnManagedInstance API.
     */
    installPackageOnManagedInstance(installPackageOnManagedInstanceRequest: requests.InstallPackageOnManagedInstanceRequest): Promise<responses.InstallPackageOnManagedInstanceResponse>;
    /**
     * Updates a package on a managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallPackageUpdateOnManagedInstanceRequest
     * @return InstallPackageUpdateOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallPackageUpdateOnManagedInstance.ts.html |here} to see how to use InstallPackageUpdateOnManagedInstance API.
     */
    installPackageUpdateOnManagedInstance(installPackageUpdateOnManagedInstanceRequest: requests.InstallPackageUpdateOnManagedInstanceRequest): Promise<responses.InstallPackageUpdateOnManagedInstanceResponse>;
    /**
     * Installs a Windows update on a managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param InstallWindowsUpdateOnManagedInstanceRequest
     * @return InstallWindowsUpdateOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/InstallWindowsUpdateOnManagedInstance.ts.html |here} to see how to use InstallWindowsUpdateOnManagedInstance API.
     */
    installWindowsUpdateOnManagedInstance(installWindowsUpdateOnManagedInstanceRequest: requests.InstallWindowsUpdateOnManagedInstanceRequest): Promise<responses.InstallWindowsUpdateOnManagedInstanceResponse>;
    /**
     * Returns a list of packages available for install on the Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAvailablePackagesForManagedInstanceRequest
     * @return ListAvailablePackagesForManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListAvailablePackagesForManagedInstance.ts.html |here} to see how to use ListAvailablePackagesForManagedInstance API.
     */
    listAvailablePackagesForManagedInstance(listAvailablePackagesForManagedInstanceRequest: requests.ListAvailablePackagesForManagedInstanceRequest): Promise<responses.ListAvailablePackagesForManagedInstanceResponse>;
    /**
     * NOTE: This function is deprecated in favor of listAvailablePackagesForManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.InstallablePackageSummary objects
     * contained in responses from the listAvailablePackagesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailablePackagesForManagedInstance(request: requests.ListAvailablePackagesForManagedInstanceRequest): AsyncIterableIterator<model.InstallablePackageSummary>;
    /**
     * NOTE: This function is deprecated in favor of listAvailablePackagesForManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAvailablePackagesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailablePackagesForManagedInstanceResponses(request: requests.ListAvailablePackagesForManagedInstanceRequest): AsyncIterableIterator<responses.ListAvailablePackagesForManagedInstanceResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.InstallablePackageSummary objects
     * contained in responses from the listAvailablePackagesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailablePackagesForManagedInstanceRecordIterator(request: requests.ListAvailablePackagesForManagedInstanceRequest): AsyncIterableIterator<model.InstallablePackageSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAvailablePackagesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailablePackagesForManagedInstanceResponseIterator(request: requests.ListAvailablePackagesForManagedInstanceRequest): AsyncIterableIterator<responses.ListAvailablePackagesForManagedInstanceResponse>;
    /**
     * Returns a list of available software sources for a Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAvailableSoftwareSourcesForManagedInstanceRequest
     * @return ListAvailableSoftwareSourcesForManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListAvailableSoftwareSourcesForManagedInstance.ts.html |here} to see how to use ListAvailableSoftwareSourcesForManagedInstance API.
     */
    listAvailableSoftwareSourcesForManagedInstance(listAvailableSoftwareSourcesForManagedInstanceRequest: requests.ListAvailableSoftwareSourcesForManagedInstanceRequest): Promise<responses.ListAvailableSoftwareSourcesForManagedInstanceResponse>;
    /**
     * NOTE: This function is deprecated in favor of listAvailableSoftwareSourcesForManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AvailableSoftwareSourceSummary objects
     * contained in responses from the listAvailableSoftwareSourcesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableSoftwareSourcesForManagedInstance(request: requests.ListAvailableSoftwareSourcesForManagedInstanceRequest): AsyncIterableIterator<model.AvailableSoftwareSourceSummary>;
    /**
     * NOTE: This function is deprecated in favor of listAvailableSoftwareSourcesForManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAvailableSoftwareSourcesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableSoftwareSourcesForManagedInstanceResponses(request: requests.ListAvailableSoftwareSourcesForManagedInstanceRequest): AsyncIterableIterator<responses.ListAvailableSoftwareSourcesForManagedInstanceResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.AvailableSoftwareSourceSummary objects
     * contained in responses from the listAvailableSoftwareSourcesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableSoftwareSourcesForManagedInstanceRecordIterator(request: requests.ListAvailableSoftwareSourcesForManagedInstanceRequest): AsyncIterableIterator<model.AvailableSoftwareSourceSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAvailableSoftwareSourcesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableSoftwareSourcesForManagedInstanceResponseIterator(request: requests.ListAvailableSoftwareSourcesForManagedInstanceRequest): AsyncIterableIterator<responses.ListAvailableSoftwareSourcesForManagedInstanceResponse>;
    /**
     * Returns a list of available updates for a Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAvailableUpdatesForManagedInstanceRequest
     * @return ListAvailableUpdatesForManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListAvailableUpdatesForManagedInstance.ts.html |here} to see how to use ListAvailableUpdatesForManagedInstance API.
     */
    listAvailableUpdatesForManagedInstance(listAvailableUpdatesForManagedInstanceRequest: requests.ListAvailableUpdatesForManagedInstanceRequest): Promise<responses.ListAvailableUpdatesForManagedInstanceResponse>;
    /**
     * NOTE: This function is deprecated in favor of listAvailableUpdatesForManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AvailableUpdateSummary objects
     * contained in responses from the listAvailableUpdatesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableUpdatesForManagedInstance(request: requests.ListAvailableUpdatesForManagedInstanceRequest): AsyncIterableIterator<model.AvailableUpdateSummary>;
    /**
     * NOTE: This function is deprecated in favor of listAvailableUpdatesForManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAvailableUpdatesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableUpdatesForManagedInstanceResponses(request: requests.ListAvailableUpdatesForManagedInstanceRequest): AsyncIterableIterator<responses.ListAvailableUpdatesForManagedInstanceResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.AvailableUpdateSummary objects
     * contained in responses from the listAvailableUpdatesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableUpdatesForManagedInstanceRecordIterator(request: requests.ListAvailableUpdatesForManagedInstanceRequest): AsyncIterableIterator<model.AvailableUpdateSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAvailableUpdatesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableUpdatesForManagedInstanceResponseIterator(request: requests.ListAvailableUpdatesForManagedInstanceRequest): AsyncIterableIterator<responses.ListAvailableUpdatesForManagedInstanceResponse>;
    /**
     * Returns a list of available Windows updates for a Managed Instance. This is only applicable to Windows instances.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAvailableWindowsUpdatesForManagedInstanceRequest
     * @return ListAvailableWindowsUpdatesForManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListAvailableWindowsUpdatesForManagedInstance.ts.html |here} to see how to use ListAvailableWindowsUpdatesForManagedInstance API.
     */
    listAvailableWindowsUpdatesForManagedInstance(listAvailableWindowsUpdatesForManagedInstanceRequest: requests.ListAvailableWindowsUpdatesForManagedInstanceRequest): Promise<responses.ListAvailableWindowsUpdatesForManagedInstanceResponse>;
    /**
     * NOTE: This function is deprecated in favor of listAvailableWindowsUpdatesForManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AvailableWindowsUpdateSummary objects
     * contained in responses from the listAvailableWindowsUpdatesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableWindowsUpdatesForManagedInstance(request: requests.ListAvailableWindowsUpdatesForManagedInstanceRequest): AsyncIterableIterator<model.AvailableWindowsUpdateSummary>;
    /**
     * NOTE: This function is deprecated in favor of listAvailableWindowsUpdatesForManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAvailableWindowsUpdatesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailableWindowsUpdatesForManagedInstanceResponses(request: requests.ListAvailableWindowsUpdatesForManagedInstanceRequest): AsyncIterableIterator<responses.ListAvailableWindowsUpdatesForManagedInstanceResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.AvailableWindowsUpdateSummary objects
     * contained in responses from the listAvailableWindowsUpdatesForManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableWindowsUpdatesForManagedInstanceRecordIterator(request: requests.ListAvailableWindowsUpdatesForManagedInstanceRequest): AsyncIterableIterator<model.AvailableWindowsUpdateSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAvailableWindowsUpdatesForManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailableWindowsUpdatesForManagedInstanceResponseIterator(request: requests.ListAvailableWindowsUpdatesForManagedInstanceRequest): AsyncIterableIterator<responses.ListAvailableWindowsUpdatesForManagedInstanceResponse>;
    /**
     * Returns a list of all of the currently available Errata in the system
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListErrataRequest
     * @return ListErrataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListErrata.ts.html |here} to see how to use ListErrata API.
     */
    listErrata(listErrataRequest: requests.ListErrataRequest): Promise<responses.ListErrataResponse>;
    /**
     * NOTE: This function is deprecated in favor of listErrataRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ErratumSummary objects
     * contained in responses from the listErrata operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllErrata(request: requests.ListErrataRequest): AsyncIterableIterator<model.ErratumSummary>;
    /**
     * NOTE: This function is deprecated in favor of listErrataResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listErrata operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllErrataResponses(request: requests.ListErrataRequest): AsyncIterableIterator<responses.ListErrataResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ErratumSummary objects
     * contained in responses from the listErrata operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listErrataRecordIterator(request: requests.ListErrataRequest): AsyncIterableIterator<model.ErratumSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listErrata operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listErrataResponseIterator(request: requests.ListErrataRequest): AsyncIterableIterator<responses.ListErrataResponse>;
    /**
     * Returns a list of errata relevant to the Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagedInstanceErrataRequest
     * @return ListManagedInstanceErrataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListManagedInstanceErrata.ts.html |here} to see how to use ListManagedInstanceErrata API.
     */
    listManagedInstanceErrata(listManagedInstanceErrataRequest: requests.ListManagedInstanceErrataRequest): Promise<responses.ListManagedInstanceErrataResponse>;
    /**
     * NOTE: This function is deprecated in favor of listManagedInstanceErrataRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ErratumSummary objects
     * contained in responses from the listManagedInstanceErrata operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstanceErrata(request: requests.ListManagedInstanceErrataRequest): AsyncIterableIterator<model.ErratumSummary>;
    /**
     * NOTE: This function is deprecated in favor of listManagedInstanceErrataResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstanceErrata operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstanceErrataResponses(request: requests.ListManagedInstanceErrataRequest): AsyncIterableIterator<responses.ListManagedInstanceErrataResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ErratumSummary objects
     * contained in responses from the listManagedInstanceErrata operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstanceErrataRecordIterator(request: requests.ListManagedInstanceErrataRequest): AsyncIterableIterator<model.ErratumSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstanceErrata operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstanceErrataResponseIterator(request: requests.ListManagedInstanceErrataRequest): AsyncIterableIterator<responses.ListManagedInstanceErrataResponse>;
    /**
     * Returns a list of all Managed Instance Groups.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagedInstanceGroupsRequest
     * @return ListManagedInstanceGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListManagedInstanceGroups.ts.html |here} to see how to use ListManagedInstanceGroups API.
     */
    listManagedInstanceGroups(listManagedInstanceGroupsRequest: requests.ListManagedInstanceGroupsRequest): Promise<responses.ListManagedInstanceGroupsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listManagedInstanceGroupsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ManagedInstanceGroupSummary objects
     * contained in responses from the listManagedInstanceGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstanceGroups(request: requests.ListManagedInstanceGroupsRequest): AsyncIterableIterator<model.ManagedInstanceGroupSummary>;
    /**
     * NOTE: This function is deprecated in favor of listManagedInstanceGroupsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstanceGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstanceGroupsResponses(request: requests.ListManagedInstanceGroupsRequest): AsyncIterableIterator<responses.ListManagedInstanceGroupsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ManagedInstanceGroupSummary objects
     * contained in responses from the listManagedInstanceGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstanceGroupsRecordIterator(request: requests.ListManagedInstanceGroupsRequest): AsyncIterableIterator<model.ManagedInstanceGroupSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstanceGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstanceGroupsResponseIterator(request: requests.ListManagedInstanceGroupsRequest): AsyncIterableIterator<responses.ListManagedInstanceGroupsResponse>;
    /**
     * Returns a list of all Managed Instances.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagedInstancesRequest
     * @return ListManagedInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListManagedInstances.ts.html |here} to see how to use ListManagedInstances API.
     */
    listManagedInstances(listManagedInstancesRequest: requests.ListManagedInstancesRequest): Promise<responses.ListManagedInstancesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listManagedInstancesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ManagedInstanceSummary objects
     * contained in responses from the listManagedInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstances(request: requests.ListManagedInstancesRequest): AsyncIterableIterator<model.ManagedInstanceSummary>;
    /**
     * NOTE: This function is deprecated in favor of listManagedInstancesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagedInstancesResponses(request: requests.ListManagedInstancesRequest): AsyncIterableIterator<responses.ListManagedInstancesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ManagedInstanceSummary objects
     * contained in responses from the listManagedInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstancesRecordIterator(request: requests.ListManagedInstancesRequest): AsyncIterableIterator<model.ManagedInstanceSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listManagedInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagedInstancesResponseIterator(request: requests.ListManagedInstancesRequest): AsyncIterableIterator<responses.ListManagedInstancesResponse>;
    /**
       * Retrieve a list of module stream profiles from a software source.
  * Filters may be applied to select a subset of module stream profiles
  * based on the filter criteria.
  * <p>
  The \"moduleName\", \"streamName\", and \"profileName\" attributes combine
  * to form a set of filters on the list of module stream profiles.  If
  * a \"moduleName\" is provided, only profiles that belong to that module
  * are returned.  If both a \"moduleName\" and \"streamName\" are given,
  * only profiles belonging to that module stream are returned.  Finally,
  * if all three are given then only the particular profile indicated
  * by the triple is returned.  It is not valid to supply a \"streamName\"
  * without a \"moduleName\".  It is also not valid to supply a \"profileName\"
  * without a \"streamName\".
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListModuleStreamProfilesRequest
       * @return ListModuleStreamProfilesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListModuleStreamProfiles.ts.html |here} to see how to use ListModuleStreamProfiles API.
       */
    listModuleStreamProfiles(listModuleStreamProfilesRequest: requests.ListModuleStreamProfilesRequest): Promise<responses.ListModuleStreamProfilesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamProfilesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModuleStreamProfileSummary objects
     * contained in responses from the listModuleStreamProfiles operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamProfiles(request: requests.ListModuleStreamProfilesRequest): AsyncIterableIterator<model.ModuleStreamProfileSummary>;
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamProfilesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamProfiles operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamProfilesResponses(request: requests.ListModuleStreamProfilesRequest): AsyncIterableIterator<responses.ListModuleStreamProfilesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ModuleStreamProfileSummary objects
     * contained in responses from the listModuleStreamProfiles operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamProfilesRecordIterator(request: requests.ListModuleStreamProfilesRequest): AsyncIterableIterator<model.ModuleStreamProfileSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamProfiles operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamProfilesResponseIterator(request: requests.ListModuleStreamProfilesRequest): AsyncIterableIterator<responses.ListModuleStreamProfilesResponse>;
    /**
       * Retrieve a list of module stream profiles, along with a summary of their
  * of their status, from a managed instance.  Filters may be applied to
  * select a subset of profiles based on the filter criteria.
  * <p>
  The \"moduleName\", \"streamName\", and \"profileName\" attributes combine
  * to form a set of filters on the list of module stream profiles.  If
  * a \"modulName\" is provided, only profiles that belong to that module
  * are returned.  If both a \"moduleName\" and \"streamName\" are given,
  * only profiles belonging to that module stream are returned.  Finally,
  * if all three are given then only the particular profile indicated
  * by the triple is returned.  It is not valid to supply a \"streamName\"
  * without a \"moduleName\".  It is also not valid to supply a \"profileName\"
  * without a \"streamName\".
  * <p>
  The \"status\" attribute filters against the state of a module stream
  * profile.  Valid values are \"INSTALLED\" and \"AVAILABLE\".  If the
  * attribute is set to \"INSTALLED\", only module stream profiles that
  * are installed are included in the result set.  If the attribute is
  * set to \"AVAILABLE\", only module stream profiles that are not
  * installed are included in the result set.  If the attribute is not
  * defined, the request is not subject to this filter.
  * <p>
  When sorting by display name, the result set is sorted first by
  * module name, then by stream name, and finally by profile name.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListModuleStreamProfilesOnManagedInstanceRequest
       * @return ListModuleStreamProfilesOnManagedInstanceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListModuleStreamProfilesOnManagedInstance.ts.html |here} to see how to use ListModuleStreamProfilesOnManagedInstance API.
       */
    listModuleStreamProfilesOnManagedInstance(listModuleStreamProfilesOnManagedInstanceRequest: requests.ListModuleStreamProfilesOnManagedInstanceRequest): Promise<responses.ListModuleStreamProfilesOnManagedInstanceResponse>;
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamProfilesOnManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModuleStreamProfileOnManagedInstanceSummary objects
     * contained in responses from the listModuleStreamProfilesOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamProfilesOnManagedInstance(request: requests.ListModuleStreamProfilesOnManagedInstanceRequest): AsyncIterableIterator<model.ModuleStreamProfileOnManagedInstanceSummary>;
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamProfilesOnManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamProfilesOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamProfilesOnManagedInstanceResponses(request: requests.ListModuleStreamProfilesOnManagedInstanceRequest): AsyncIterableIterator<responses.ListModuleStreamProfilesOnManagedInstanceResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ModuleStreamProfileOnManagedInstanceSummary objects
     * contained in responses from the listModuleStreamProfilesOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamProfilesOnManagedInstanceRecordIterator(request: requests.ListModuleStreamProfilesOnManagedInstanceRequest): AsyncIterableIterator<model.ModuleStreamProfileOnManagedInstanceSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamProfilesOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamProfilesOnManagedInstanceResponseIterator(request: requests.ListModuleStreamProfilesOnManagedInstanceRequest): AsyncIterableIterator<responses.ListModuleStreamProfilesOnManagedInstanceResponse>;
    /**
       * Retrieve a list of module streams from a software source.
  * Filters may be applied to select a subset of module streams
  * based on the filter criteria.
  * <p>
  The 'moduleName' attribute filters against the name of a module.
  * It accepts strings of the format \"<module>\".  If this attribute
  * is defined, only streams that belong to the specified module are
  * included in the result set.  If it is not defined, the request is
  * not subject to this filter.  The 'streamName' attribute filters
  * against the name of a stream of a module.  If this attribute is
  * defined, only the particular module stream that matches both the
  * module and stream names is included in the result set.  It is
  * not valid to supply 'streamName' without also supplying a
  * 'moduleName'.
  * <p>
  When sorting by display name, the result set is sorted first by
  * module name, then by stream name.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListModuleStreamsRequest
       * @return ListModuleStreamsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListModuleStreams.ts.html |here} to see how to use ListModuleStreams API.
       */
    listModuleStreams(listModuleStreamsRequest: requests.ListModuleStreamsRequest): Promise<responses.ListModuleStreamsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModuleStreamSummary objects
     * contained in responses from the listModuleStreams operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreams(request: requests.ListModuleStreamsRequest): AsyncIterableIterator<model.ModuleStreamSummary>;
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreams operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamsResponses(request: requests.ListModuleStreamsRequest): AsyncIterableIterator<responses.ListModuleStreamsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ModuleStreamSummary objects
     * contained in responses from the listModuleStreams operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamsRecordIterator(request: requests.ListModuleStreamsRequest): AsyncIterableIterator<model.ModuleStreamSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreams operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamsResponseIterator(request: requests.ListModuleStreamsRequest): AsyncIterableIterator<responses.ListModuleStreamsResponse>;
    /**
       * Retrieve a list of module streams, along with a summary of their
  * status, from a managed instance.  Filters may be applied to select
  * a subset of module streams based on the filter criteria.
  * <p>
  The 'moduleName' attribute filters against the name of a module.
  * It accepts strings of the format \"<module>\".  If this attribute
  * is defined, only streams that belong to the specified module are
  * included in the result set.  If it is not defined, the request is
  * not subject to this filter.
  * <p>
  The \"status\" attribute filters against the state of a module stream.
  * Valid values are \"ENABLED\", \"DISABLED\", and \"ACTIVE\".  If the
  * attribute is set to \"ENABLED\", only module streams that are enabled
  * are included in the result set.  If the attribute is set to \"DISABLED\",
  * only module streams that are not enabled are included in the result
  * set.  If the attribute is set to \"ACTIVE\", only module streams that
  * are active are included in the result set.  If the attribute is not
  * defined, the request is not subject to this filter.
  * <p>
  When sorting by the display name, the result set is sorted first
  * by the module name and then by the stream name.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListModuleStreamsOnManagedInstanceRequest
       * @return ListModuleStreamsOnManagedInstanceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListModuleStreamsOnManagedInstance.ts.html |here} to see how to use ListModuleStreamsOnManagedInstance API.
       */
    listModuleStreamsOnManagedInstance(listModuleStreamsOnManagedInstanceRequest: requests.ListModuleStreamsOnManagedInstanceRequest): Promise<responses.ListModuleStreamsOnManagedInstanceResponse>;
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamsOnManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModuleStreamOnManagedInstanceSummary objects
     * contained in responses from the listModuleStreamsOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamsOnManagedInstance(request: requests.ListModuleStreamsOnManagedInstanceRequest): AsyncIterableIterator<model.ModuleStreamOnManagedInstanceSummary>;
    /**
     * NOTE: This function is deprecated in favor of listModuleStreamsOnManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamsOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModuleStreamsOnManagedInstanceResponses(request: requests.ListModuleStreamsOnManagedInstanceRequest): AsyncIterableIterator<responses.ListModuleStreamsOnManagedInstanceResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ModuleStreamOnManagedInstanceSummary objects
     * contained in responses from the listModuleStreamsOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamsOnManagedInstanceRecordIterator(request: requests.ListModuleStreamsOnManagedInstanceRequest): AsyncIterableIterator<model.ModuleStreamOnManagedInstanceSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModuleStreamsOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModuleStreamsOnManagedInstanceResponseIterator(request: requests.ListModuleStreamsOnManagedInstanceRequest): AsyncIterableIterator<responses.ListModuleStreamsOnManagedInstanceResponse>;
    /**
     * Returns a list of installed packages on the Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListPackagesInstalledOnManagedInstanceRequest
     * @return ListPackagesInstalledOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListPackagesInstalledOnManagedInstance.ts.html |here} to see how to use ListPackagesInstalledOnManagedInstance API.
     */
    listPackagesInstalledOnManagedInstance(listPackagesInstalledOnManagedInstanceRequest: requests.ListPackagesInstalledOnManagedInstanceRequest): Promise<responses.ListPackagesInstalledOnManagedInstanceResponse>;
    /**
     * NOTE: This function is deprecated in favor of listPackagesInstalledOnManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.InstalledPackageSummary objects
     * contained in responses from the listPackagesInstalledOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPackagesInstalledOnManagedInstance(request: requests.ListPackagesInstalledOnManagedInstanceRequest): AsyncIterableIterator<model.InstalledPackageSummary>;
    /**
     * NOTE: This function is deprecated in favor of listPackagesInstalledOnManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listPackagesInstalledOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPackagesInstalledOnManagedInstanceResponses(request: requests.ListPackagesInstalledOnManagedInstanceRequest): AsyncIterableIterator<responses.ListPackagesInstalledOnManagedInstanceResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.InstalledPackageSummary objects
     * contained in responses from the listPackagesInstalledOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPackagesInstalledOnManagedInstanceRecordIterator(request: requests.ListPackagesInstalledOnManagedInstanceRequest): AsyncIterableIterator<model.InstalledPackageSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPackagesInstalledOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPackagesInstalledOnManagedInstanceResponseIterator(request: requests.ListPackagesInstalledOnManagedInstanceRequest): AsyncIterableIterator<responses.ListPackagesInstalledOnManagedInstanceResponse>;
    /**
     * Returns a list of all of the currently active Scheduled Jobs in the system
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListScheduledJobsRequest
     * @return ListScheduledJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListScheduledJobs.ts.html |here} to see how to use ListScheduledJobs API.
     */
    listScheduledJobs(listScheduledJobsRequest: requests.ListScheduledJobsRequest): Promise<responses.ListScheduledJobsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listScheduledJobsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ScheduledJobSummary objects
     * contained in responses from the listScheduledJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllScheduledJobs(request: requests.ListScheduledJobsRequest): AsyncIterableIterator<model.ScheduledJobSummary>;
    /**
     * NOTE: This function is deprecated in favor of listScheduledJobsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listScheduledJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllScheduledJobsResponses(request: requests.ListScheduledJobsRequest): AsyncIterableIterator<responses.ListScheduledJobsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ScheduledJobSummary objects
     * contained in responses from the listScheduledJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listScheduledJobsRecordIterator(request: requests.ListScheduledJobsRequest): AsyncIterableIterator<model.ScheduledJobSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listScheduledJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listScheduledJobsResponseIterator(request: requests.ListScheduledJobsRequest): AsyncIterableIterator<responses.ListScheduledJobsResponse>;
    /**
     * Lists Software Packages in a Software Source
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSoftwareSourcePackagesRequest
     * @return ListSoftwareSourcePackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListSoftwareSourcePackages.ts.html |here} to see how to use ListSoftwareSourcePackages API.
     */
    listSoftwareSourcePackages(listSoftwareSourcePackagesRequest: requests.ListSoftwareSourcePackagesRequest): Promise<responses.ListSoftwareSourcePackagesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSoftwareSourcePackagesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SoftwarePackageSummary objects
     * contained in responses from the listSoftwareSourcePackages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSoftwareSourcePackages(request: requests.ListSoftwareSourcePackagesRequest): AsyncIterableIterator<model.SoftwarePackageSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSoftwareSourcePackagesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSoftwareSourcePackages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSoftwareSourcePackagesResponses(request: requests.ListSoftwareSourcePackagesRequest): AsyncIterableIterator<responses.ListSoftwareSourcePackagesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SoftwarePackageSummary objects
     * contained in responses from the listSoftwareSourcePackages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSoftwareSourcePackagesRecordIterator(request: requests.ListSoftwareSourcePackagesRequest): AsyncIterableIterator<model.SoftwarePackageSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSoftwareSourcePackages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSoftwareSourcePackagesResponseIterator(request: requests.ListSoftwareSourcePackagesRequest): AsyncIterableIterator<responses.ListSoftwareSourcePackagesResponse>;
    /**
     * Returns a list of all Software Sources.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSoftwareSourcesRequest
     * @return ListSoftwareSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListSoftwareSources.ts.html |here} to see how to use ListSoftwareSources API.
     */
    listSoftwareSources(listSoftwareSourcesRequest: requests.ListSoftwareSourcesRequest): Promise<responses.ListSoftwareSourcesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSoftwareSourcesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SoftwareSourceSummary objects
     * contained in responses from the listSoftwareSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSoftwareSources(request: requests.ListSoftwareSourcesRequest): AsyncIterableIterator<model.SoftwareSourceSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSoftwareSourcesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSoftwareSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSoftwareSourcesResponses(request: requests.ListSoftwareSourcesRequest): AsyncIterableIterator<responses.ListSoftwareSourcesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SoftwareSourceSummary objects
     * contained in responses from the listSoftwareSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSoftwareSourcesRecordIterator(request: requests.ListSoftwareSourcesRequest): AsyncIterableIterator<model.SoftwareSourceSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSoftwareSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSoftwareSourcesResponseIterator(request: requests.ListSoftwareSourcesRequest): AsyncIterableIterator<responses.ListSoftwareSourcesResponse>;
    /**
     * Returns a list of all of the Scheduled Jobs whose next execution time is at or before the specified time.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListUpcomingScheduledJobsRequest
     * @return ListUpcomingScheduledJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListUpcomingScheduledJobs.ts.html |here} to see how to use ListUpcomingScheduledJobs API.
     */
    listUpcomingScheduledJobs(listUpcomingScheduledJobsRequest: requests.ListUpcomingScheduledJobsRequest): Promise<responses.ListUpcomingScheduledJobsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listUpcomingScheduledJobsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ScheduledJobSummary objects
     * contained in responses from the listUpcomingScheduledJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUpcomingScheduledJobs(request: requests.ListUpcomingScheduledJobsRequest): AsyncIterableIterator<model.ScheduledJobSummary>;
    /**
     * NOTE: This function is deprecated in favor of listUpcomingScheduledJobsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUpcomingScheduledJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUpcomingScheduledJobsResponses(request: requests.ListUpcomingScheduledJobsRequest): AsyncIterableIterator<responses.ListUpcomingScheduledJobsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ScheduledJobSummary objects
     * contained in responses from the listUpcomingScheduledJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUpcomingScheduledJobsRecordIterator(request: requests.ListUpcomingScheduledJobsRequest): AsyncIterableIterator<model.ScheduledJobSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUpcomingScheduledJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUpcomingScheduledJobsResponseIterator(request: requests.ListUpcomingScheduledJobsRequest): AsyncIterableIterator<responses.ListUpcomingScheduledJobsResponse>;
    /**
     * Returns a list of Windows Updates.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWindowsUpdatesRequest
     * @return ListWindowsUpdatesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListWindowsUpdates.ts.html |here} to see how to use ListWindowsUpdates API.
     */
    listWindowsUpdates(listWindowsUpdatesRequest: requests.ListWindowsUpdatesRequest): Promise<responses.ListWindowsUpdatesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWindowsUpdatesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WindowsUpdateSummary objects
     * contained in responses from the listWindowsUpdates operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWindowsUpdates(request: requests.ListWindowsUpdatesRequest): AsyncIterableIterator<model.WindowsUpdateSummary>;
    /**
     * NOTE: This function is deprecated in favor of listWindowsUpdatesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWindowsUpdates operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWindowsUpdatesResponses(request: requests.ListWindowsUpdatesRequest): AsyncIterableIterator<responses.ListWindowsUpdatesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WindowsUpdateSummary objects
     * contained in responses from the listWindowsUpdates operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWindowsUpdatesRecordIterator(request: requests.ListWindowsUpdatesRequest): AsyncIterableIterator<model.WindowsUpdateSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWindowsUpdates operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWindowsUpdatesResponseIterator(request: requests.ListWindowsUpdatesRequest): AsyncIterableIterator<responses.ListWindowsUpdatesResponse>;
    /**
     * Returns a list of installed Windows updates for a Managed Instance. This is only applicable to Windows instances.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWindowsUpdatesInstalledOnManagedInstanceRequest
     * @return ListWindowsUpdatesInstalledOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListWindowsUpdatesInstalledOnManagedInstance.ts.html |here} to see how to use ListWindowsUpdatesInstalledOnManagedInstance API.
     */
    listWindowsUpdatesInstalledOnManagedInstance(listWindowsUpdatesInstalledOnManagedInstanceRequest: requests.ListWindowsUpdatesInstalledOnManagedInstanceRequest): Promise<responses.ListWindowsUpdatesInstalledOnManagedInstanceResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWindowsUpdatesInstalledOnManagedInstanceRecordIterator function.
     * Creates a new async iterator which will iterate over the models.InstalledWindowsUpdateSummary objects
     * contained in responses from the listWindowsUpdatesInstalledOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWindowsUpdatesInstalledOnManagedInstance(request: requests.ListWindowsUpdatesInstalledOnManagedInstanceRequest): AsyncIterableIterator<model.InstalledWindowsUpdateSummary>;
    /**
     * NOTE: This function is deprecated in favor of listWindowsUpdatesInstalledOnManagedInstanceResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWindowsUpdatesInstalledOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWindowsUpdatesInstalledOnManagedInstanceResponses(request: requests.ListWindowsUpdatesInstalledOnManagedInstanceRequest): AsyncIterableIterator<responses.ListWindowsUpdatesInstalledOnManagedInstanceResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.InstalledWindowsUpdateSummary objects
     * contained in responses from the listWindowsUpdatesInstalledOnManagedInstance operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWindowsUpdatesInstalledOnManagedInstanceRecordIterator(request: requests.ListWindowsUpdatesInstalledOnManagedInstanceRequest): AsyncIterableIterator<model.InstalledWindowsUpdateSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWindowsUpdatesInstalledOnManagedInstance operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWindowsUpdatesInstalledOnManagedInstanceResponseIterator(request: requests.ListWindowsUpdatesInstalledOnManagedInstanceRequest): AsyncIterableIterator<responses.ListWindowsUpdatesInstalledOnManagedInstanceResponse>;
    /**
     * Gets the errors for the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<model.WorkRequestError>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsRecordIterator(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<model.WorkRequestError>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsResponseIterator(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse>;
    /**
     * Lists the log entries for the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<model.WorkRequestLogEntry>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<responses.ListWorkRequestLogsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsRecordIterator(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<model.WorkRequestLogEntry>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsResponseIterator(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<model.WorkRequestSummary>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsRecordIterator(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<model.WorkRequestSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsResponseIterator(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
    /**
       * Perform an operation involving modules, streams, and profiles on a
  * managed instance.  Each operation may enable or disable an arbitrary
  * amount of module streams, and install or remove an arbitrary number
  * of module stream profiles.  When the operation is complete, the
  * state of the modules, streams, and profiles on the managed instance
  * will match the state indicated in the operation.
  * <p>
  Each module stream specified in the list of module streams to enable
  * will be in the \"ENABLED\" state upon completion of the operation.
  * If there was already a stream of that module enabled, any work
  * required to switch from the current stream to the new stream is
  * performed implicitly.
  * <p>
  Each module stream specified in the list of module streams to disable
  * will be in the \"DISABLED\" state upon completion of the operation.
  * Any profiles that are installed for the module stream will be removed
  * as part of the operation.
  * <p>
  Each module stream profile specified in the list of profiles to install
  * will be in the \"INSTALLED\" state upon completion of the operation,
  * indicating that any packages that are part of the profile are installed
  * on the managed instance.  If the module stream containing the profile
  * is not enabled, it will be enabled as part of the operation.  There
  * is an exception when attempting to install a stream of a profile when
  * another stream of the same module is enabled.  It is an error to attempt
  * to install a profile of another module stream, unless enabling the
  * new module stream is explicitly included in this operation.
  * <p>
  Each module stream profile specified in the list of profiles to remove
  * will be in the \"AVAILABLE\" state upon completion of the operation.
  * The status of packages within the profile after the operation is
  * complete is defined by the package manager on the managed instance.
  * <p>
  Operations that contain one or more elements that are not allowed
  * are rejected.
  * <p>
  The result of this request is a WorkRequest object.  The returned
  * WorkRequest is the parent of a structure of other WorkRequests.  Taken
  * as a whole, this structure indicates the entire set of work to be
  * performed to complete the operation.
  * <p>
  This interface can also be used to perform a dry run of the operation
  * rather than committing it to a managed instance.  If a dry run is
  * requested, the OS Management Service will evaluate the operation
  * against the current module, stream, and profile state on the managed
  * instance.  It will calculate the impact of the operation on all
  * modules, streams, and profiles on the managed instance, including those
  * that are implicitly impacted by the operation.
  * <p>
  The WorkRequest resulting from a dry run behaves differently than
  * a WorkRequest resulting from a committable operation.  Dry run
  * WorkRequests are always singletons and never have children.  The
  * impact of the operation is returned using the log and error
  * facilities of WorkRequests.  The impact of operations that are
  * allowed by the OS Management Service are communicated as one or
  * more work request log entries.  Operations that are not allowed
  * by the OS Management Service are communicated as one or more
  * work requst error entries.  Each entry, for either logs or errors,
  * contains a structured message containing the results of one
  * or more operations.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ManageModuleStreamsOnManagedInstanceRequest
       * @return ManageModuleStreamsOnManagedInstanceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/ManageModuleStreamsOnManagedInstance.ts.html |here} to see how to use ManageModuleStreamsOnManagedInstance API.
       */
    manageModuleStreamsOnManagedInstance(manageModuleStreamsOnManagedInstanceRequest: requests.ManageModuleStreamsOnManagedInstanceRequest): Promise<responses.ManageModuleStreamsOnManagedInstanceResponse>;
    /**
     * Removes a profile for a module stream that is installed on a managed instance.
     * If a module stream is provided, rather than a fully qualified profile, all
     * profiles that have been installed for the module stream will be removed.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveModuleStreamProfileFromManagedInstanceRequest
     * @return RemoveModuleStreamProfileFromManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/RemoveModuleStreamProfileFromManagedInstance.ts.html |here} to see how to use RemoveModuleStreamProfileFromManagedInstance API.
     */
    removeModuleStreamProfileFromManagedInstance(removeModuleStreamProfileFromManagedInstanceRequest: requests.RemoveModuleStreamProfileFromManagedInstanceRequest): Promise<responses.RemoveModuleStreamProfileFromManagedInstanceResponse>;
    /**
     * Removes an installed package from a managed instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemovePackageFromManagedInstanceRequest
     * @return RemovePackageFromManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/RemovePackageFromManagedInstance.ts.html |here} to see how to use RemovePackageFromManagedInstance API.
     */
    removePackageFromManagedInstance(removePackageFromManagedInstanceRequest: requests.RemovePackageFromManagedInstanceRequest): Promise<responses.RemovePackageFromManagedInstanceResponse>;
    /**
     * Removes a given list of Software Packages from a specific Software Source.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemovePackagesFromSoftwareSourceRequest
     * @return RemovePackagesFromSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/RemovePackagesFromSoftwareSource.ts.html |here} to see how to use RemovePackagesFromSoftwareSource API.
     */
    removePackagesFromSoftwareSource(removePackagesFromSoftwareSourceRequest: requests.RemovePackagesFromSoftwareSourceRequest): Promise<responses.RemovePackagesFromSoftwareSourceResponse>;
    /**
     * This will trigger an already created Scheduled Job to being executing
     * immediately instead of waiting for its next regularly scheduled time.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RunScheduledJobNowRequest
     * @return RunScheduledJobNowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/RunScheduledJobNow.ts.html |here} to see how to use RunScheduledJobNow API.
     */
    runScheduledJobNow(runScheduledJobNowRequest: requests.RunScheduledJobNowRequest): Promise<responses.RunScheduledJobNowResponse>;
    /**
     * Searches all of the available Software Sources and returns any/all Software Packages matching
     * the search criteria.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SearchSoftwarePackagesRequest
     * @return SearchSoftwarePackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/SearchSoftwarePackages.ts.html |here} to see how to use SearchSoftwarePackages API.
     */
    searchSoftwarePackages(searchSoftwarePackagesRequest: requests.SearchSoftwarePackagesRequest): Promise<responses.SearchSoftwarePackagesResponse>;
    /**
     * NOTE: This function is deprecated in favor of searchSoftwarePackagesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SoftwarePackageSearchSummary objects
     * contained in responses from the searchSoftwarePackages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    searchAllSoftwarePackages(request: requests.SearchSoftwarePackagesRequest): AsyncIterableIterator<model.SoftwarePackageSearchSummary>;
    /**
     * NOTE: This function is deprecated in favor of searchSoftwarePackagesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the searchSoftwarePackages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    searchAllSoftwarePackagesResponses(request: requests.SearchSoftwarePackagesRequest): AsyncIterableIterator<responses.SearchSoftwarePackagesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SoftwarePackageSearchSummary objects
     * contained in responses from the searchSoftwarePackages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    searchSoftwarePackagesRecordIterator(request: requests.SearchSoftwarePackagesRequest): AsyncIterableIterator<model.SoftwarePackageSearchSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the searchSoftwarePackages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    searchSoftwarePackagesResponseIterator(request: requests.SearchSoftwarePackagesRequest): AsyncIterableIterator<responses.SearchSoftwarePackagesResponse>;
    /**
     * This will force an already created Scheduled Job to skip its
     * next regularly scheduled execution
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SkipNextScheduledJobExecutionRequest
     * @return SkipNextScheduledJobExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/SkipNextScheduledJobExecution.ts.html |here} to see how to use SkipNextScheduledJobExecution API.
     */
    skipNextScheduledJobExecution(skipNextScheduledJobExecutionRequest: requests.SkipNextScheduledJobExecutionRequest): Promise<responses.SkipNextScheduledJobExecutionResponse>;
    /**
     * Enables a new stream for a module that already has a stream enabled.
     * If any profiles or packages from the original module are installed,
     * switching to a new stream will remove the existing packages and
     * install their counterparts in the new stream.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SwitchModuleStreamOnManagedInstanceRequest
     * @return SwitchModuleStreamOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/SwitchModuleStreamOnManagedInstance.ts.html |here} to see how to use SwitchModuleStreamOnManagedInstance API.
     */
    switchModuleStreamOnManagedInstance(switchModuleStreamOnManagedInstanceRequest: requests.SwitchModuleStreamOnManagedInstanceRequest): Promise<responses.SwitchModuleStreamOnManagedInstanceResponse>;
    /**
     * Updates a specific Managed Instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateManagedInstanceRequest
     * @return UpdateManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UpdateManagedInstance.ts.html |here} to see how to use UpdateManagedInstance API.
     */
    updateManagedInstance(updateManagedInstanceRequest: requests.UpdateManagedInstanceRequest): Promise<responses.UpdateManagedInstanceResponse>;
    /**
     * Updates a specific Managed Instance Group.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateManagedInstanceGroupRequest
     * @return UpdateManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UpdateManagedInstanceGroup.ts.html |here} to see how to use UpdateManagedInstanceGroup API.
     */
    updateManagedInstanceGroup(updateManagedInstanceGroupRequest: requests.UpdateManagedInstanceGroupRequest): Promise<responses.UpdateManagedInstanceGroupResponse>;
    /**
     * Updates an existing Scheduled Job on the management system.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateScheduledJobRequest
     * @return UpdateScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UpdateScheduledJob.ts.html |here} to see how to use UpdateScheduledJob API.
     */
    updateScheduledJob(updateScheduledJobRequest: requests.UpdateScheduledJobRequest): Promise<responses.UpdateScheduledJobResponse>;
    /**
     * Updates an existing custom Software Source on the management system.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateSoftwareSourceRequest
     * @return UpdateSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osmanagement/UpdateSoftwareSource.ts.html |here} to see how to use UpdateSoftwareSource API.
     */
    updateSoftwareSource(updateSoftwareSourceRequest: requests.UpdateSoftwareSourceRequest): Promise<responses.UpdateSoftwareSourceResponse>;
}
export {};
