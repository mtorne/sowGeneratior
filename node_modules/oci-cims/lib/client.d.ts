/**
 * Support Management API
 * Use the Support Management API to manage support requests.
For more information, see [Getting Help and Contacting Support](https://docs.oracle.com/iaas/Content/GSG/Tasks/contactingsupport.htm).
**Note**: Before you can create service requests with this API,
complete user registration at My Oracle Cloud Support
and then ask your tenancy administrator to provide you authorization for the related user groups.

 * OpenAPI spec version: 20181231
 * Contact: oci_ops_cims_dev_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
declare const Breaker: any;
export declare enum IncidentApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class IncidentClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Creates a support ticket in the specified tenancy.
     * For more information, see [Creating Support Requests](https://docs.oracle.com/iaas/Content/GSG/support/create-incident.htm).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateIncidentRequest
     * @return CreateIncidentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cims/CreateIncident.ts.html |here} to see how to use CreateIncident API.
     */
    createIncident(createIncidentRequest: requests.CreateIncidentRequest): Promise<responses.CreateIncidentResponse>;
    /**
     * Gets the specified support ticket.
     * For more information, see [Getting Details for a Support Request](https://docs.oracle.com/iaas/Content/GSG/support/get-incident.htm).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetIncidentRequest
     * @return GetIncidentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cims/GetIncident.ts.html |here} to see how to use GetIncident API.
     */
    getIncident(getIncidentRequest: requests.GetIncidentRequest): Promise<responses.GetIncidentResponse>;
    /**
     * Depending on the selected `productType`, either
     * lists available products (service groups, services, service categories, and subcategories) for technical support tickets or
     * lists limits and current usage for limit increase tickets.
     * This operation is called during creation of technical support and limit increase tickets.
     * For more information about listing products, see
     * [Listing Products for Support Requests](https://docs.oracle.com/iaas/Content/GSG/support/list-incident-resource-types-taxonomy.htm).
     * For more information about listing limits, see
     * [Listing Limits for Service Limit Increase Requests](https://docs.oracle.com/iaas/Content/GSG/support/list-incident-resource-types-limit.htm).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListIncidentResourceTypesRequest
     * @return ListIncidentResourceTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cims/ListIncidentResourceTypes.ts.html |here} to see how to use ListIncidentResourceTypes API.
     */
    listIncidentResourceTypes(listIncidentResourceTypesRequest: requests.ListIncidentResourceTypesRequest): Promise<responses.ListIncidentResourceTypesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listIncidentResourceTypesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IncidentResourceType objects
     * contained in responses from the listIncidentResourceTypes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIncidentResourceTypes(request: requests.ListIncidentResourceTypesRequest): AsyncIterableIterator<model.IncidentResourceType>;
    /**
     * NOTE: This function is deprecated in favor of listIncidentResourceTypesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIncidentResourceTypes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIncidentResourceTypesResponses(request: requests.ListIncidentResourceTypesRequest): AsyncIterableIterator<responses.ListIncidentResourceTypesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.IncidentResourceType objects
     * contained in responses from the listIncidentResourceTypes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIncidentResourceTypesRecordIterator(request: requests.ListIncidentResourceTypesRequest): AsyncIterableIterator<model.IncidentResourceType>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIncidentResourceTypes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIncidentResourceTypesResponseIterator(request: requests.ListIncidentResourceTypesRequest): AsyncIterableIterator<responses.ListIncidentResourceTypesResponse>;
    /**
     * Lists support tickets for the specified tenancy.
     * For more information, see [Listing Support Requests](https://docs.oracle.com/iaas/Content/GSG/support/list-incidents.htm).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListIncidentsRequest
     * @return ListIncidentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cims/ListIncidents.ts.html |here} to see how to use ListIncidents API.
     */
    listIncidents(listIncidentsRequest: requests.ListIncidentsRequest): Promise<responses.ListIncidentsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listIncidentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IncidentSummary objects
     * contained in responses from the listIncidents operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIncidents(request: requests.ListIncidentsRequest): AsyncIterableIterator<model.IncidentSummary>;
    /**
     * NOTE: This function is deprecated in favor of listIncidentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIncidents operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIncidentsResponses(request: requests.ListIncidentsRequest): AsyncIterableIterator<responses.ListIncidentsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.IncidentSummary objects
     * contained in responses from the listIncidents operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIncidentsRecordIterator(request: requests.ListIncidentsRequest): AsyncIterableIterator<model.IncidentSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIncidents operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIncidentsResponseIterator(request: requests.ListIncidentsRequest): AsyncIterableIterator<responses.ListIncidentsResponse>;
    /**
     * Updates the specified support ticket.
     * For more information, see [Updating Support Requests](https://docs.oracle.com/iaas/Content/GSG/support/update-incident.htm).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateIncidentRequest
     * @return UpdateIncidentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cims/UpdateIncident.ts.html |here} to see how to use UpdateIncident API.
     */
    updateIncident(updateIncidentRequest: requests.UpdateIncidentRequest): Promise<responses.UpdateIncidentResponse>;
    /**
     * Checks whether the requested user is valid.
     * For more information, see [Validating a User](https://docs.oracle.com/iaas/Content/GSG/support/validate-user.htm).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ValidateUserRequest
     * @return ValidateUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cims/ValidateUser.ts.html |here} to see how to use ValidateUser API.
     */
    validateUser(validateUserRequest: requests.ValidateUserRequest): Promise<responses.ValidateUserResponse>;
}
export {};
