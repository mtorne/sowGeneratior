/**
 *
 *
 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
import common = require("oci-common");
/**
 * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/cloudguard/ListResponderExecutions.ts.html |here} to see how to use ListResponderExecutionsRequest.
 */
export interface ListResponderExecutionsRequest extends common.BaseRequest {
    /**
     * The OCID of the compartment in which to list resources.
     */
    "compartmentId": string;
    /**
     * Default is false.
     * When set to true, the hierarchy of compartments is traversed
     * and all compartments and subcompartments in the tenancy are
     * returned depending on the setting of {@code accessLevel}.
     *
     */
    "compartmentIdInSubtree"?: boolean;
    /**
     * Valid values are {@code RESTRICTED} and {@code ACCESSIBLE}. Default is {@code RESTRICTED}.
     * Setting this to {@code ACCESSIBLE} returns only those compartments for which the
     * user has INSPECT permissions directly or indirectly (permissions can be on a
     * resource in a subcompartment).
     * When set to {@code RESTRICTED} permissions are checked and no partial results are displayed.
     *
     */
    "accessLevel"?: ListResponderExecutionsRequest.AccessLevel;
    /**
     * Responder rule unique identifier filter for the responder executions.
     */
    "responderRuleIds"?: Array<string>;
    /**
     * Creation start time for filtering
     */
    "timeCreatedGreaterThanOrEqualTo"?: Date;
    /**
     * Creation end time for filtering.
     */
    "timeCreatedLessThanOrEqualTo"?: Date;
    /**
     * Completion end time.
     */
    "timeCompletedGreaterThanOrEqualTo"?: Date;
    /**
     * Completion start time.
     */
    "timeCompletedLessThanOrEqualTo"?: Date;
    /**
     * The ID of the target in which to list resources.
     */
    "targetId"?: string;
    /**
     * Resource type associated with the resource.
     */
    "resourceType"?: string;
    /**
     * The field to list the responder executions by responder type. Valid values are REMEDIATION and NOTIFICATION.
     *
     */
    "responderType"?: ListResponderExecutionsRequest.ResponderType;
    /**
     * The status of the responder execution in which to list responders.
     */
    "responderExecutionStatus"?: model.ResponderExecutionStates;
    /**
     * The mode of the responder execution in which to list responders.
     */
    "responderExecutionMode"?: model.ResponderExecutionModes;
    /**
     * The maximum number of items to return
     */
    "limit"?: number;
    /**
     * The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
     */
    "page"?: string;
    /**
     * The sort order to use
     */
    "sortOrder"?: model.SortOrders;
    /**
     * The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for responderRuleName and resourceName is ascending. If no value is specified timeCreated is default.
     *
     */
    "sortBy"?: ListResponderExecutionsRequest.SortBy;
    /**
     * The client request ID for tracing.
     */
    "opcRequestId"?: string;
}
export declare namespace ListResponderExecutionsRequest {
    enum AccessLevel {
        Restricted = "RESTRICTED",
        Accessible = "ACCESSIBLE"
    }
    enum ResponderType {
        Remediation = "REMEDIATION",
        Notification = "NOTIFICATION"
    }
    enum SortBy {
        TimeCreated = "timeCreated",
        ResponderRuleName = "responderRuleName",
        ResourceName = "resourceName",
        TimeCompleted = "timeCompleted"
    }
}
