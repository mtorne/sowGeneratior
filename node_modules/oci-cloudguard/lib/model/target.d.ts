/**
 * Cloud Guard and Security Zones API
 * Use the Cloud Guard and Security Zones API to automate processes that you would otherwise perform through the Cloud Guard Console or the Security Zones Console. For more information on these services, see the [Cloud Guard](https://docs.oracle.com/iaas/cloud-guard/home.htm) and [Security Zones](https://docs.oracle.com/iaas/security-zone/home.htm) documentation.

**Note:** For Cloud Guard, you can perform Create, Update, and Delete operations only from the reporting region of your Cloud Guard tenancy. You can perform Read operations from any region.

 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * A target defines the scope of resources that Cloud Guard
 * monitors and the rules to be enforced in that monitoring. A Target resource
 * contains the settings for a specific target.
 *
 */
export interface Target {
    /**
     * Unique identifier that can't be changed after creation
     */
    "id": string;
    /**
     * Target display name
     */
    "displayName"?: string;
    /**
     * Compartment OCID where the resource is created
     */
    "compartmentId": string;
    /**
     * The target description
     */
    "description"?: string;
    /**
     * Type of target
     */
    "targetResourceType": model.TargetResourceType;
    /**
     * Resource ID which the target uses to monitor
     */
    "targetResourceId": string;
    /**
     * Total number of recipes attached to target Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "recipeCount": number;
    /**
     * List of detector recipes attached to target
     */
    "targetDetectorRecipes"?: Array<model.TargetDetectorRecipe>;
    /**
     * List of responder recipes attached to target
     */
    "targetResponderRecipes"?: Array<model.TargetResponderRecipe>;
    "targetDetails"?: model.SecurityZoneTargetDetails;
    /**
     * List of inherited compartments
     */
    "inheritedByCompartments"?: Array<string>;
    /**
     * The date and time the target was created. Format defined by RFC3339.
     */
    "timeCreated"?: Date;
    /**
     * The date and time the target was last updated. Format defined by RFC3339.
     */
    "timeUpdated"?: Date;
    /**
     * The current lifecycle state of the target
     */
    "lifecycleState"?: model.LifecycleState;
    /**
     * A message describing the current lifecycle state in more detail. For example, can be used to provide actionable information for a resource in Failed state. [DEPRECATE]
     */
    "lifecyleDetails"?: string;
    /**
      * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
  * Example: {@code {\"bar-key\": \"value\"}}
  * <p>
  Avoid entering confidential information.
  *
      */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
      * System tags for this resource. Each key is predefined and scoped to a namespace.
  * For more information, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
  * System tags can be viewed by users, but can only be created by the system.
  * <p>
  Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
  *
      */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace Target {
    function getJsonObj(obj: Target): object;
    function getDeserializedJsonObj(obj: Target): object;
}
