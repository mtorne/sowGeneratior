/**
 * Cloud Guard and Security Zones API
 * Use the Cloud Guard and Security Zones API to automate processes that you would otherwise perform through the Cloud Guard Console or the Security Zones Console. For more information on these services, see the [Cloud Guard](https://docs.oracle.com/iaas/cloud-guard/home.htm) and [Security Zones](https://docs.oracle.com/iaas/security-zone/home.htm) documentation.

**Note:** For Cloud Guard, you can perform Create, Update, and Delete operations only from the reporting region of your Cloud Guard tenancy. You can perform Read operations from any region.

 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
* A ResponderRecipeRule resource contains a specific instance of a
* single responder rule.
* <p>
A ResponderRecipeRule resource:
* * Is effectively a copy of a ResponderRule resource in which users can
* make certain changes if it\u2019s Oracle-managed, and other changes if it\u2019s user-managed.
* * Can also be created by cloning an existing ResponderRecipe resource, either
* user-managed or Oracle-managed; cloning the ResponderRecipe resource also clones
* its associated ResponderRule resources as ResponderRecipeRule resources.
* * Is visible on the Cloud Guard Responder Recipes, Responder Details page.
* * Is effectively located in a specific OCI compartment, through the ResponderRecipe
* resource to which it belongs.
* * Can be modified by users, programmatically or through the UI.
* * Changes that can be made here apply globally, to all resources in OCI compartments
* mapped to a target that attaches the associated responder recipe (in a
* TargetResponderRecipe resource), but are overridden by changes made in the
* corresponding TargetResponderRecipe resource (which is effectively a copy of the
* ResponderRecipe resource).
* type: object
*
*/
export interface ResponderRecipeResponderRule {
    /**
     * Unique identifier for the responder rule
     */
    "responderRuleId": string;
    /**
     * Responder rule display name
     */
    "displayName"?: string;
    /**
     * Responder rule description
     */
    "description"?: string;
    /**
     * Type of responder
     */
    "type"?: model.ResponderType;
    /**
     * List of policies
     */
    "policies"?: Array<string>;
    /**
     * Supported execution modes for the responder rule
     */
    "supportedModes"?: Array<ResponderRecipeResponderRule.SupportedModes>;
    "details"?: model.ResponderRuleDetails;
    /**
     * Compartment OCID
     */
    "compartmentId": string;
    /**
     * The date and time the responder recipe rule was created. Format defined by RFC3339.
     */
    "timeCreated"?: Date;
    /**
     * The date and time the responder recipe rule was last updated. Format defined by RFC3339.
     */
    "timeUpdated"?: Date;
    /**
     * The current lifecycle state of the responder rule
     */
    "lifecycleState"?: model.LifecycleState;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    "lifecycleDetails"?: string;
    /**
     * Locks associated with this resource.
     */
    "locks"?: Array<model.ResourceLock>;
}
export declare namespace ResponderRecipeResponderRule {
    enum SupportedModes {
        Autoaction = "AUTOACTION",
        Useraction = "USERACTION",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: ResponderRecipeResponderRule): object;
    function getDeserializedJsonObj(obj: ResponderRecipeResponderRule): object;
}
