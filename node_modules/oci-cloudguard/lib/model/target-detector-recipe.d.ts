/**
 * Cloud Guard and Security Zones API
 * Use the Cloud Guard and Security Zones API to automate processes that you would otherwise perform through the Cloud Guard Console or the Security Zones Console. For more information on these services, see the [Cloud Guard](https://docs.oracle.com/iaas/cloud-guard/home.htm) and [Security Zones](https://docs.oracle.com/iaas/security-zone/home.htm) documentation.

**Note:** For Cloud Guard, you can perform Create, Update, and Delete operations only from the reporting region of your Cloud Guard tenancy. You can perform Read operations from any region.

 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
* A TargetDetectorRecipe resource contains a specific instance of one of the
* supported detector types (for example, activity, configuration, or threat)
* in which some settings can be modified specifically for a single target.
* <p>
A TargetDetectorRecipe resource:
* * Is effectively a copy of a DetectorRecipe resource in which users can make
* very limited changes if it\u2019s Oracle-managed, and more changes if it\u2019s user-managed.
* * Is visible on the Cloud Guard Targets, Target Details page.
* * Is located in a specific OCI compartment.
* * Can be modified by users, programmatically or through the UI.
* * Changes that can be made here override any settings in the corresponding
* DetectorRecipe, of which the TargetDetectorRecipe resource is effectively a copy,
* created when the detector recipe is attached to the target.
*
*/
export interface TargetDetectorRecipe {
    /**
     * OCID for the detector recipe
     */
    "id": string;
    /**
     * Display name of the detector recipe
     */
    "displayName": string;
    /**
     * Detector recipe description.
     */
    "description"?: string;
    /**
     * Compartment OCID of the detector recipe
     */
    "compartmentId": string;
    /**
     * Unique identifier for of original Oracle-managed detector recipe on which the TargetDetectorRecipe is based
     */
    "detectorRecipeId": string;
    /**
     * Owner of the detector recipe
     */
    "owner": model.OwnerType;
    /**
     * Type of detector
     */
    "detector": model.DetectorEnum;
    /**
     * List of detector rules for the detector recipe - user input
     */
    "detectorRules"?: Array<model.TargetDetectorRecipeDetectorRule>;
    /**
     * List of currently enabled detector rules for the detector type for recipe after applying defaults
     */
    "effectiveDetectorRules"?: Array<model.TargetDetectorRecipeDetectorRule>;
    /**
     * The date and time the target detector recipe was created. Format defined by RFC3339.
     */
    "timeCreated"?: Date;
    /**
     * The date and time the target detector recipe was last updated. Format defined by RFC3339.
     */
    "timeUpdated"?: Date;
    /**
     * The current lifecycle state of the resource
     */
    "lifecycleState"?: model.LifecycleState;
    /**
     * Locks associated with this resource.
     */
    "locks"?: Array<model.ResourceLock>;
    /**
     * Recipe type ( STANDARD, ENTERPRISE )
     */
    "detectorRecipeType"?: model.DetectorRecipeEnum;
    /**
     * The number of days for which source data is retained Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "sourceDataRetention"?: number;
}
export declare namespace TargetDetectorRecipe {
    function getJsonObj(obj: TargetDetectorRecipe): object;
    function getDeserializedJsonObj(obj: TargetDetectorRecipe): object;
}
