/**
 * Cloud Guard and Security Zones API
 * Use the Cloud Guard and Security Zones API to automate processes that you would otherwise perform through the Cloud Guard Console or the Security Zones Console. For more information on these services, see the [Cloud Guard](https://docs.oracle.com/iaas/cloud-guard/home.htm) and [Security Zones](https://docs.oracle.com/iaas/security-zone/home.htm) documentation.

**Note:** For Cloud Guard, you can perform Create, Update, and Delete operations only from the reporting region of your Cloud Guard tenancy. You can perform Read operations from any region.

 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Summary information for a problem.
 */
export interface ProblemSummary {
    /**
     * Unique identifier that can't be changed after creation
     */
    "id": string;
    /**
     * Compartment OCID where the resource is created
     */
    "compartmentId": string;
    /**
     * Unique identifier of the detector rule
     */
    "detectorRuleId"?: string;
    /**
     * The risk level of the problem
     */
    "riskLevel"?: model.RiskLevel;
    /**
     * The risk score for the problem Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "riskScore"?: number;
    /**
     * Unique identifier of the resource that's impacted by the problem
     */
    "resourceId"?: string;
    /**
     * Display name of the resource impacted by the problem
     */
    "resourceName"?: string;
    /**
     * Type of the resource impacted by the problem
     */
    "resourceType"?: string;
    /**
     * User-defined labels on the problem
     */
    "labels"?: Array<string>;
    /**
     * The date and time the problem was first detected. Format defined by RFC3339.
     */
    "timeFirstDetected"?: Date;
    /**
     * The date and time the problem was last detected. Format defined by RFC3339.
     */
    "timeLastDetected"?: Date;
    /**
     * The current lifecycle state of the problem
     */
    "lifecycleState"?: model.ProblemLifecycleState;
    /**
     * Additional details on the substate of the lifecycle state
     */
    "lifecycleDetail"?: model.ProblemLifecycleDetail;
    /**
     * Unique identifier of the detector associated with the problem
     */
    "detectorId"?: model.DetectorEnum;
    /**
     * DEPRECATED
     */
    "region"?: string;
    /**
     * List of regions where the problem is found
     */
    "regions"?: Array<string>;
    /**
     * Unique target identifier associated with the problem
     */
    "targetId"?: string;
    /**
     * Locks associated with this resource.
     */
    "locks"?: Array<model.ResourceLock>;
}
export declare namespace ProblemSummary {
    function getJsonObj(obj: ProblemSummary): object;
    function getDeserializedJsonObj(obj: ProblemSummary): object;
}
