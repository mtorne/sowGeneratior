/**
 * Cloud Guard and Security Zones API
 * Use the Cloud Guard and Security Zones API to automate processes that you would otherwise perform through the Cloud Guard Console or the Security Zones Console. For more information on these services, see the [Cloud Guard](https://docs.oracle.com/iaas/cloud-guard/home.htm) and [Security Zones](https://docs.oracle.com/iaas/security-zone/home.htm) documentation.

**Note:** For Cloud Guard, you can perform Create, Update, and Delete operations only from the reporting region of your Cloud Guard tenancy. You can perform Read operations from any region.

 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Problems are at the core of Cloud Guard\u2019s functionality. A Problem resource is created whenever an action or a configuration on a resource triggers a rule in a detector that\u2019s attached to the target containing the compartment where the resource is located. Each Problem resource contains all the details for a single problem. This is the information for the problem that appears on the Cloud Guard Problems page.
 */
export interface Problem {
    /**
     * Unique identifier that can't be changed after creation
     */
    "id": string;
    /**
     * Compartment OCID where the resource is created
     */
    "compartmentId": string;
    /**
     * Unique identifier of the detector rule that triggered the problem
     */
    "detectorRuleId"?: string;
    /**
     * DEPRECATED
     */
    "region"?: string;
    /**
     * Regions where the problem is found
     */
    "regions"?: Array<string>;
    /**
     * The risk level for the problem
     */
    "riskLevel"?: model.RiskLevel;
    /**
     * The risk score for the problem Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "riskScore"?: number;
    /**
     * The date and time for the peak risk score that is observed for the problem. Format defined by RFC3339.
     */
    "peakRiskScoreDate"?: string;
    /**
     * Peak risk score for the problem Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "peakRiskScore"?: number;
    /**
     * The date and time when the problem will be auto resolved. Format defined by RFC3339.
     */
    "autoResolveDate"?: string;
    /**
     * Number of days for which peak score is calculated for the problem Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "peakRiskScoreLookupPeriodInDays"?: number;
    /**
     * Unique identifier of the resource affected by the problem
     */
    "resourceId"?: string;
    /**
     * Display name of the affected resource
     */
    "resourceName"?: string;
    /**
     * Type of the affected resource
     */
    "resourceType"?: string;
    /**
     * User-defined labels on the problem
     */
    "labels"?: Array<string>;
    /**
     * The date and time the problem was last detected. Format defined by RFC3339.
     */
    "timeLastDetected"?: Date;
    /**
     * The date and time the problem was first detected. Format defined by RFC3339.
     */
    "timeFirstDetected"?: Date;
    /**
     * The current lifecycle state of the problem
     */
    "lifecycleState"?: model.ProblemLifecycleState;
    /**
     * Additional details on the substate of the lifecycle state
     */
    "lifecycleDetail"?: model.ProblemLifecycleDetail;
    /**
     * Unique identifier of the detector rule that triggered the problem
     */
    "detectorId"?: model.DetectorEnum;
    /**
     * Unique identifier of the target associated with the problem
     */
    "targetId"?: string;
    /**
     * The additional details of the problem
     */
    "additionalDetails"?: {
        [key: string]: string;
    };
    /**
     * Description of the problem
     */
    "description"?: string;
    /**
     * Recommendation for the problem
     */
    "recommendation"?: string;
    /**
     * User comments on the problem
     */
    "comment"?: string;
    /**
     * Unique identifier of the resource impacted by the problem
     */
    "impactedResourceId"?: string;
    /**
     * Display name of the impacted resource
     */
    "impactedResourceName"?: string;
    /**
     * Type of the impacted resource
     */
    "impactedResourceType"?: string;
    /**
     * Locks associated with this resource.
     */
    "locks"?: Array<model.ResourceLock>;
}
export declare namespace Problem {
    function getJsonObj(obj: Problem): object;
    function getDeserializedJsonObj(obj: Problem): object;
}
