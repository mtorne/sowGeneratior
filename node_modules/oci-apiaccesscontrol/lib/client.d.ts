/**
 * Oracle API Access Control
 * This service is used to restrict the control plane service apis; so that everybody won't be
able to access those apis.
There are two main resouces defined as a part of this service
1. PrivilegedApiControl: This is created by the customer which defines which service apis are
   controlled and who can access it.
2. PrivilegedApiRequest: This is a request object again created by the customer operators who           seek access to those privileged apis. After a request is obtained based on the                       PrivilegedAccessControl for which the api belongs to, either it can be approved so that the          requested person can execute the service apis or it will wait for the customer to approve it.

 * OpenAPI spec version: 20241130
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { ApiMetadataWaiter } from "./apimetadata-waiter";
import { PrivilegedApiControlWaiter } from "./privilegedapicontrol-waiter";
import { PrivilegedApiRequestsWaiter } from "./privilegedapirequests-waiter";
import { PrivilegedApiWorkRequestWaiter } from "./privilegedapiworkrequest-waiter";
declare const Breaker: any;
export declare enum ApiMetadataApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class ApiMetadataClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": ApiMetadataWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new ApiMetadataWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): ApiMetadataWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): ApiMetadataWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Gets information about a ApiMetadata.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetApiMetadataRequest
     * @return GetApiMetadataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/GetApiMetadata.ts.html |here} to see how to use GetApiMetadata API.
     */
    getApiMetadata(getApiMetadataRequest: requests.GetApiMetadataRequest): Promise<responses.GetApiMetadataResponse>;
    /**
     * Gets a list of ApiMetadata.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListApiMetadataRequest
     * @return ListApiMetadataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/ListApiMetadata.ts.html |here} to see how to use ListApiMetadata API.
     */
    listApiMetadata(listApiMetadataRequest: requests.ListApiMetadataRequest): Promise<responses.ListApiMetadataResponse>;
    /**
     * Gets a list of ApiMetadata Grouped By Entity Types.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListApiMetadataByEntityTypesRequest
     * @return ListApiMetadataByEntityTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/ListApiMetadataByEntityTypes.ts.html |here} to see how to use ListApiMetadataByEntityTypes API.
     */
    listApiMetadataByEntityTypes(listApiMetadataByEntityTypesRequest: requests.ListApiMetadataByEntityTypesRequest): Promise<responses.ListApiMetadataByEntityTypesResponse>;
}
export declare enum PrivilegedApiControlApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class PrivilegedApiControlClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": PrivilegedApiControlWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new PrivilegedApiControlWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): PrivilegedApiControlWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): PrivilegedApiControlWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Moves a PrivilegedApiControl into a different compartment within the same tenancy. For information about moving resources between
     * compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangePrivilegedApiControlCompartmentRequest
     * @return ChangePrivilegedApiControlCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/ChangePrivilegedApiControlCompartment.ts.html |here} to see how to use ChangePrivilegedApiControlCompartment API.
     */
    changePrivilegedApiControlCompartment(changePrivilegedApiControlCompartmentRequest: requests.ChangePrivilegedApiControlCompartmentRequest): Promise<responses.ChangePrivilegedApiControlCompartmentResponse>;
    /**
     * Creates a PrivilegedApiControl.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreatePrivilegedApiControlRequest
     * @return CreatePrivilegedApiControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/CreatePrivilegedApiControl.ts.html |here} to see how to use CreatePrivilegedApiControl API.
     */
    createPrivilegedApiControl(createPrivilegedApiControlRequest: requests.CreatePrivilegedApiControlRequest): Promise<responses.CreatePrivilegedApiControlResponse>;
    /**
     * Deletes a PrivilegedApiControl.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeletePrivilegedApiControlRequest
     * @return DeletePrivilegedApiControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/DeletePrivilegedApiControl.ts.html |here} to see how to use DeletePrivilegedApiControl API.
     */
    deletePrivilegedApiControl(deletePrivilegedApiControlRequest: requests.DeletePrivilegedApiControlRequest): Promise<responses.DeletePrivilegedApiControlResponse>;
    /**
     * Gets information about a PrivilegedApiControl.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPrivilegedApiControlRequest
     * @return GetPrivilegedApiControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/GetPrivilegedApiControl.ts.html |here} to see how to use GetPrivilegedApiControl API.
     */
    getPrivilegedApiControl(getPrivilegedApiControlRequest: requests.GetPrivilegedApiControlRequest): Promise<responses.GetPrivilegedApiControlResponse>;
    /**
     * Gets a list of PrivilegedApiControls.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPrivilegedApiControlsRequest
     * @return ListPrivilegedApiControlsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/ListPrivilegedApiControls.ts.html |here} to see how to use ListPrivilegedApiControls API.
     */
    listPrivilegedApiControls(listPrivilegedApiControlsRequest: requests.ListPrivilegedApiControlsRequest): Promise<responses.ListPrivilegedApiControlsResponse>;
    /**
     * Updates a PrivilegedApiControl.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdatePrivilegedApiControlRequest
     * @return UpdatePrivilegedApiControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/UpdatePrivilegedApiControl.ts.html |here} to see how to use UpdatePrivilegedApiControl API.
     */
    updatePrivilegedApiControl(updatePrivilegedApiControlRequest: requests.UpdatePrivilegedApiControlRequest): Promise<responses.UpdatePrivilegedApiControlResponse>;
}
export declare enum PrivilegedApiRequestsApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class PrivilegedApiRequestsClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": PrivilegedApiRequestsWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new PrivilegedApiRequestsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): PrivilegedApiRequestsWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): PrivilegedApiRequestsWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Approves privilegedApi request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ApprovePrivilegedApiRequestRequest
     * @return ApprovePrivilegedApiRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/ApprovePrivilegedApiRequest.ts.html |here} to see how to use ApprovePrivilegedApiRequest API.
     */
    approvePrivilegedApiRequest(approvePrivilegedApiRequestRequest: requests.ApprovePrivilegedApiRequestRequest): Promise<responses.ApprovePrivilegedApiRequestResponse>;
    /**
     * Closes privilegedApi request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ClosePrivilegedApiRequestRequest
     * @return ClosePrivilegedApiRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/ClosePrivilegedApiRequest.ts.html |here} to see how to use ClosePrivilegedApiRequest API.
     */
    closePrivilegedApiRequest(closePrivilegedApiRequestRequest: requests.ClosePrivilegedApiRequestRequest): Promise<responses.ClosePrivilegedApiRequestResponse>;
    /**
     * Creates a PrivilegedApiRequest.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreatePrivilegedApiRequestRequest
     * @return CreatePrivilegedApiRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/CreatePrivilegedApiRequest.ts.html |here} to see how to use CreatePrivilegedApiRequest API.
     */
    createPrivilegedApiRequest(createPrivilegedApiRequestRequest: requests.CreatePrivilegedApiRequestRequest): Promise<responses.CreatePrivilegedApiRequestResponse>;
    /**
     * Gets information about a PrivilegedApiRequest.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPrivilegedApiRequestRequest
     * @return GetPrivilegedApiRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/GetPrivilegedApiRequest.ts.html |here} to see how to use GetPrivilegedApiRequest API.
     */
    getPrivilegedApiRequest(getPrivilegedApiRequestRequest: requests.GetPrivilegedApiRequestRequest): Promise<responses.GetPrivilegedApiRequestResponse>;
    /**
     * Lists all privilegedApi requests in the compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPrivilegedApiRequestsRequest
     * @return ListPrivilegedApiRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/ListPrivilegedApiRequests.ts.html |here} to see how to use ListPrivilegedApiRequests API.
     */
    listPrivilegedApiRequests(listPrivilegedApiRequestsRequest: requests.ListPrivilegedApiRequestsRequest): Promise<responses.ListPrivilegedApiRequestsResponse>;
    /**
     * Rejects privilegedApi request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RejectPrivilegedApiRequestRequest
     * @return RejectPrivilegedApiRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/RejectPrivilegedApiRequest.ts.html |here} to see how to use RejectPrivilegedApiRequest API.
     */
    rejectPrivilegedApiRequest(rejectPrivilegedApiRequestRequest: requests.RejectPrivilegedApiRequestRequest): Promise<responses.RejectPrivilegedApiRequestResponse>;
    /**
     * Revokes an already approved privilegedApi request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RevokePrivilegedApiRequestRequest
     * @return RevokePrivilegedApiRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/RevokePrivilegedApiRequest.ts.html |here} to see how to use RevokePrivilegedApiRequest API.
     */
    revokePrivilegedApiRequest(revokePrivilegedApiRequestRequest: requests.RevokePrivilegedApiRequestRequest): Promise<responses.RevokePrivilegedApiRequestResponse>;
}
export declare enum PrivilegedApiWorkRequestApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class PrivilegedApiWorkRequestClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": PrivilegedApiWorkRequestWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new PrivilegedApiWorkRequestWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): PrivilegedApiWorkRequestWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): PrivilegedApiWorkRequestWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Cancels a work request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest: requests.CancelWorkRequestRequest): Promise<responses.CancelWorkRequestResponse>;
    /**
     * Gets the details of a work request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Lists the errors for a work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Lists the logs for a work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apiaccesscontrol/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
}
export {};
