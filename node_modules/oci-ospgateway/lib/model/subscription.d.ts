/**
 * OSP Gateway API
 * This site describes all the Rest endpoints of OSP Gateway.
 * OpenAPI spec version: 20191001
 * Contact: osp_team_oci_cam_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Subscription details object which extends the SubscriptionSummary
 */
export interface Subscription {
    /**
     * Subscription id identifier (OCID).
     */
    "id"?: string;
    /**
     * Subscription plan number.
     */
    "subscriptionPlanNumber": string;
    /**
     * Subscription plan type.
     */
    "planType"?: Subscription.PlanType;
    /**
     * Start date of the subscription.
     */
    "timeStart"?: Date;
    /**
     * Ship to customer account site address id.
     */
    "shipToCustAcctSiteId"?: string;
    /**
     * Ship to customer account role.
     */
    "shipToCustAcctRoleId"?: string;
    /**
     * Bill to customer Account id.
     */
    "billToCustAccountId"?: string;
    /**
     * Payment intension.
     */
    "isIntentToPay"?: boolean;
    /**
     * Currency code
     */
    "currencyCode"?: string;
    /**
     * GSI Subscription external code.
     */
    "gsiOrgCode"?: string;
    /**
     * Language short code (en, de, hu, etc)
     */
    "languageCode"?: string;
    /**
     * GSI organization external identifier.
     */
    "organizationId"?: string;
    /**
     * Status of the upgrade.
     */
    "upgradeState"?: Subscription.UpgradeState;
    /**
     * This field is used to describe the Upgrade State in case of error (E.g. Upgrade failure caused by interfacing Tax details- TaxError)
     */
    "upgradeStateDetails"?: Subscription.UpgradeStateDetails;
    /**
     * Account type.
     */
    "accountType"?: Subscription.AccountType;
    "taxInfo"?: model.TaxInfo;
    /**
     * Payment option list of a subscription.
     */
    "paymentOptions"?: Array<model.PaymentOption>;
    "paymentGateway"?: model.PaymentGateway;
    "billingAddress"?: model.Address;
    /**
     * Date of upgrade/conversion when planType changed from FREE_TIER to PAYG
     */
    "timePlanUpgrade"?: Date;
    /**
     * Date of upgrade/conversion when account type changed from PERSONAL to CORPORATE
     */
    "timePersonalToCorporateConv"?: Date;
}
export declare namespace Subscription {
    enum PlanType {
        FreeTier = "FREE_TIER",
        Payg = "PAYG",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum UpgradeState {
        Promo = "PROMO",
        Submitted = "SUBMITTED",
        Error = "ERROR",
        Upgraded = "UPGRADED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum UpgradeStateDetails {
        TaxError = "TAX_ERROR",
        UpgradeError = "UPGRADE_ERROR",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum AccountType {
        Personal = "PERSONAL",
        Corporate = "CORPORATE",
        CorporateSubmitted = "CORPORATE_SUBMITTED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: Subscription): object;
    function getDeserializedJsonObj(obj: Subscription): object;
}
