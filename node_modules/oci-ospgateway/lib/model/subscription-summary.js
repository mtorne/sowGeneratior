"use strict";
/**
 * OSP Gateway API
 * This site describes all the Rest endpoints of OSP Gateway.
 * OpenAPI spec version: 20191001
 * Contact: osp_team_oci_cam_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionSummary = void 0;
const model = __importStar(require("../model"));
var SubscriptionSummary;
(function (SubscriptionSummary) {
    let PlanType;
    (function (PlanType) {
        PlanType["FreeTier"] = "FREE_TIER";
        PlanType["Payg"] = "PAYG";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        PlanType["UnknownValue"] = "UNKNOWN_VALUE";
    })(PlanType = SubscriptionSummary.PlanType || (SubscriptionSummary.PlanType = {}));
    let UpgradeState;
    (function (UpgradeState) {
        UpgradeState["Promo"] = "PROMO";
        UpgradeState["Submitted"] = "SUBMITTED";
        UpgradeState["Error"] = "ERROR";
        UpgradeState["Upgraded"] = "UPGRADED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UpgradeState["UnknownValue"] = "UNKNOWN_VALUE";
    })(UpgradeState = SubscriptionSummary.UpgradeState || (SubscriptionSummary.UpgradeState = {}));
    let UpgradeStateDetails;
    (function (UpgradeStateDetails) {
        UpgradeStateDetails["TaxError"] = "TAX_ERROR";
        UpgradeStateDetails["UpgradeError"] = "UPGRADE_ERROR";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UpgradeStateDetails["UnknownValue"] = "UNKNOWN_VALUE";
    })(UpgradeStateDetails = SubscriptionSummary.UpgradeStateDetails || (SubscriptionSummary.UpgradeStateDetails = {}));
    let AccountType;
    (function (AccountType) {
        AccountType["Personal"] = "PERSONAL";
        AccountType["Corporate"] = "CORPORATE";
        AccountType["CorporateSubmitted"] = "CORPORATE_SUBMITTED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        AccountType["UnknownValue"] = "UNKNOWN_VALUE";
    })(AccountType = SubscriptionSummary.AccountType || (SubscriptionSummary.AccountType = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "taxInfo": obj.taxInfo ? model.TaxInfo.getJsonObj(obj.taxInfo) : undefined,
            "paymentOptions": obj.paymentOptions
                ? obj.paymentOptions.map(item => {
                    return model.PaymentOption.getJsonObj(item);
                })
                : undefined,
            "paymentGateway": obj.paymentGateway
                ? model.PaymentGateway.getJsonObj(obj.paymentGateway)
                : undefined,
            "billingAddress": obj.billingAddress
                ? model.Address.getJsonObj(obj.billingAddress)
                : undefined
        });
        return jsonObj;
    }
    SubscriptionSummary.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "taxInfo": obj.taxInfo ? model.TaxInfo.getDeserializedJsonObj(obj.taxInfo) : undefined,
            "paymentOptions": obj.paymentOptions
                ? obj.paymentOptions.map(item => {
                    return model.PaymentOption.getDeserializedJsonObj(item);
                })
                : undefined,
            "paymentGateway": obj.paymentGateway
                ? model.PaymentGateway.getDeserializedJsonObj(obj.paymentGateway)
                : undefined,
            "billingAddress": obj.billingAddress
                ? model.Address.getDeserializedJsonObj(obj.billingAddress)
                : undefined
        });
        return jsonObj;
    }
    SubscriptionSummary.getDeserializedJsonObj = getDeserializedJsonObj;
})(SubscriptionSummary = exports.SubscriptionSummary || (exports.SubscriptionSummary = {}));
//# sourceMappingURL=subscription-summary.js.map