"use strict";
/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeoStatsCommandDescriptor = void 0;
const model = __importStar(require("../model"));
var GeoStatsCommandDescriptor;
(function (GeoStatsCommandDescriptor) {
    let Include;
    (function (Include) {
        Include["Client"] = "CLIENT";
        Include["Server"] = "SERVER";
        Include["ClientAndServer"] = "CLIENT_AND_SERVER";
        Include["Custom"] = "CUSTOM";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Include["UnknownValue"] = "UNKNOWN_VALUE";
    })(Include = GeoStatsCommandDescriptor.Include || (GeoStatsCommandDescriptor.Include = {}));
    function getJsonObj(obj, isParentJsonObj) {
        const jsonObj = Object.assign(Object.assign({}, (isParentJsonObj
            ? obj
            : model.AbstractCommandDescriptor.getJsonObj(obj))), {
            "cityField": obj.cityField ? model.AbstractField.getJsonObj(obj.cityField) : undefined,
            "regionField": obj.regionField
                ? model.AbstractField.getJsonObj(obj.regionField)
                : undefined,
            "countryField": obj.countryField
                ? model.AbstractField.getJsonObj(obj.countryField)
                : undefined,
            "continentField": obj.continentField
                ? model.AbstractField.getJsonObj(obj.continentField)
                : undefined,
            "coordinatesField": obj.coordinatesField
                ? model.AbstractField.getJsonObj(obj.coordinatesField)
                : undefined,
            "groupByFields": obj.groupByFields
                ? obj.groupByFields.map(item => {
                    return model.AbstractField.getJsonObj(item);
                })
                : undefined,
            "functions": obj.functions
                ? obj.functions.map(item => {
                    return model.FunctionField.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    GeoStatsCommandDescriptor.getJsonObj = getJsonObj;
    GeoStatsCommandDescriptor.name = "GEO_STATS";
    function getDeserializedJsonObj(obj, isParentJsonObj) {
        const jsonObj = Object.assign(Object.assign({}, (isParentJsonObj
            ? obj
            : model.AbstractCommandDescriptor.getDeserializedJsonObj(obj))), {
            "cityField": obj.cityField
                ? model.AbstractField.getDeserializedJsonObj(obj.cityField)
                : undefined,
            "regionField": obj.regionField
                ? model.AbstractField.getDeserializedJsonObj(obj.regionField)
                : undefined,
            "countryField": obj.countryField
                ? model.AbstractField.getDeserializedJsonObj(obj.countryField)
                : undefined,
            "continentField": obj.continentField
                ? model.AbstractField.getDeserializedJsonObj(obj.continentField)
                : undefined,
            "coordinatesField": obj.coordinatesField
                ? model.AbstractField.getDeserializedJsonObj(obj.coordinatesField)
                : undefined,
            "groupByFields": obj.groupByFields
                ? obj.groupByFields.map(item => {
                    return model.AbstractField.getDeserializedJsonObj(item);
                })
                : undefined,
            "functions": obj.functions
                ? obj.functions.map(item => {
                    return model.FunctionField.getDeserializedJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    GeoStatsCommandDescriptor.getDeserializedJsonObj = getDeserializedJsonObj;
})(GeoStatsCommandDescriptor = exports.GeoStatsCommandDescriptor || (exports.GeoStatsCommandDescriptor = {}));
//# sourceMappingURL=geo-stats-command-descriptor.js.map