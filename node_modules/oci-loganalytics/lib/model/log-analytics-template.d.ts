/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * A template object.
 *
 */
export interface LogAnalyticsTemplate {
    /**
     * The log analytics entity OCID. This ID is a reference used by log analytics features and it represents
     * a resource that is provisioned and managed by the customer on their premises or on the cloud.
     *
     */
    "id": string;
    /**
     * Description for this resource.
     *
     */
    "description"?: string;
    /**
     * Compartment Identifier [OCID] (https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    "compartmentId": string;
    /**
     * The date and time the resource was created, in the format defined by RFC3339.
     *
     */
    "timeCreated": Date;
    /**
     * The date and time the resource was last updated, in the format defined by RFC3339.
     *
     */
    "timeUpdated"?: Date;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * The template name.
     */
    "name": string;
    /**
     * The template type.
     */
    "type"?: string;
    /**
     * The system flag.  A value of false denotes a custom, or user
     * defined object.  A value of true denotes a built in object.
     *
     */
    "isSystem"?: boolean;
    /**
     * The current state of the template.
     *
     */
    "lifecycleState": model.ConfigLifecycleState;
    /**
     * Facets of the template
     */
    "facets"?: Array<model.TemplateFacet>;
    /**
     * Base64 encoded template content.
     */
    "content"?: string;
    /**
     * Content format. For example - XML.
     */
    "contentFormat"?: string;
    /**
     * Base64 encoded template parameters.
     */
    "parameters"?: string;
    /**
     * Parameters format.  For example - NAME_VALUE_PAIR.
     */
    "parametersFormat"?: string;
    /**
     * Base64 encoded parameters metadata definition.
     */
    "parametersMetadata"?: string;
}
export declare namespace LogAnalyticsTemplate {
    function getJsonObj(obj: LogAnalyticsTemplate): object;
    function getDeserializedJsonObj(obj: LogAnalyticsTemplate): object;
}
