/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * A condition block. This could represent a single condition, or have nested condition blocks under it.
 * To form a single condition, specify the name, operator and value(s).
 * To form nested conditions, specify the conditions in conditionBlocks, and how to join them in conditionBlocksOperator.
 *
 */
export interface GenericConditionBlock {
    /**
     * Operator using which the conditionBlocks should be joined. Specify this for nested conditions.
     *
     */
    "conditionBlocksOperator"?: GenericConditionBlock.ConditionBlocksOperator;
    /**
     * The name of the field the condition is based on. Specify this if this condition block represents a single condition.
     *
     */
    "name"?: string;
    /**
     * The condition operator. Specify this if this condition block represents a single condition.
     *
     */
    "operator"?: string;
    /**
     * The condition value. Specify this if this condition block represents a single condition.
     *
     */
    "value"?: string;
    /**
     * A list of condition values. Specify this if this condition block represents a single condition.
     *
     */
    "values"?: Array<string>;
    /**
     * Condition blocks to evaluate within this condition block. Specify this for nested conditions.
     *
     */
    "genericConditionBlocks"?: Array<model.GenericConditionBlock>;
}
export declare namespace GenericConditionBlock {
    enum ConditionBlocksOperator {
        And = "AND",
        Or = "OR",
        NotAnd = "NOT_AND",
        NotOr = "NOT_OR",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: GenericConditionBlock): object;
    function getDeserializedJsonObj(obj: GenericConditionBlock): object;
}
