"use strict";
/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IngestTimeRuleAdditionalFieldCondition = void 0;
var IngestTimeRuleAdditionalFieldCondition;
(function (IngestTimeRuleAdditionalFieldCondition) {
    let ConditionOperator;
    (function (ConditionOperator) {
        ConditionOperator["Contains"] = "CONTAINS";
        ConditionOperator["ContainsIgnoreCase"] = "CONTAINS_IGNORE_CASE";
        ConditionOperator["ContainsRegex"] = "CONTAINS_REGEX";
        ConditionOperator["ContainsOneofRegexes"] = "CONTAINS_ONEOF_REGEXES";
        ConditionOperator["EndsWith"] = "ENDS_WITH";
        ConditionOperator["Equal"] = "EQUAL";
        ConditionOperator["EqualIgnoreCase"] = "EQUAL_IGNORE_CASE";
        ConditionOperator["In"] = "IN";
        ConditionOperator["InIgnoreCase"] = "IN_IGNORE_CASE";
        ConditionOperator["NotContains"] = "NOT_CONTAINS";
        ConditionOperator["NotEqual"] = "NOT_EQUAL";
        ConditionOperator["NotIn"] = "NOT_IN";
        ConditionOperator["NotNull"] = "NOT_NULL";
        ConditionOperator["StartsWith"] = "STARTS_WITH";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ConditionOperator["UnknownValue"] = "UNKNOWN_VALUE";
    })(ConditionOperator = IngestTimeRuleAdditionalFieldCondition.ConditionOperator || (IngestTimeRuleAdditionalFieldCondition.ConditionOperator = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    IngestTimeRuleAdditionalFieldCondition.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    IngestTimeRuleAdditionalFieldCondition.getDeserializedJsonObj = getDeserializedJsonObj;
})(IngestTimeRuleAdditionalFieldCondition = exports.IngestTimeRuleAdditionalFieldCondition || (exports.IngestTimeRuleAdditionalFieldCondition = {}));
//# sourceMappingURL=ingest-time-rule-additional-field-condition.js.map