/**
 * Oracle Cloud Migrations API
 * A description of the Oracle Cloud Migrations API.
 * OpenAPI spec version: 20220919
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Description of the migration asset.
 */
export interface MigrationAsset {
    /**
     * Asset ID generated by mirgration service. It is used in the mirgration service pipeline.
     */
    "id": string;
    /**
     * The type of asset referenced for inventory.
     */
    "type": string;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    "displayName"?: string;
    /**
     * Compartment Identifier
     */
    "compartmentId"?: string;
    /**
     * The current state of the migration asset.
     */
    "lifecycleState": MigrationAsset.LifecycleState;
    /**
     * A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
     */
    "lifecycleDetails"?: string;
    /**
     * The time when the migration asset was created. An RFC3339 formatted datetime string.
     */
    "timeCreated": Date;
    /**
     * The time when the migration asset was updated. An RFC3339 formatted datetime string.
     */
    "timeUpdated"?: Date;
    /**
     * OCID of the associated migration.
     */
    "migrationId": string;
    /**
     * Key-value pair representing disks ID mapped to the OCIDs of replicated or hydration server volume snapshots.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "snapshots"?: {
        [key: string]: model.HydratedVolume;
    };
    /**
     * The parent snapshot of the migration asset to be used by the replication task.
     */
    "parentSnapshot"?: string;
    /**
     * Key-value pair representing asset metadata keys and values scoped to a namespace.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "sourceAssetData"?: {
        [key: string]: any;
    };
    /**
     * List of notifications
     */
    "notifications"?: Array<MigrationAsset.Notifications>;
    /**
     * OCID that is referenced to an asset for an inventory.
     */
    "sourceAssetId"?: string;
    /**
     * Replication schedule identifier
     */
    "replicationScheduleId"?: string;
    /**
     * Availability domain
     */
    "availabilityDomain": string;
    /**
     * Replication compartment identifier
     */
    "replicationCompartmentId": string;
    /**
     * Tenancy identifier
     */
    "tenancyId"?: string;
    /**
     * Name of snapshot bucket
     */
    "snapShotBucketName": string;
    /**
     * List of migration assets that depend on the asset.
     */
    "dependedOnBy"?: Array<string>;
    /**
     * List of migration assets that depends on the asset.
     */
    "dependsOn"?: Array<string>;
}
export declare namespace MigrationAsset {
    enum LifecycleState {
        Creating = "CREATING",
        Updating = "UPDATING",
        NeedsAttention = "NEEDS_ATTENTION",
        Active = "ACTIVE",
        Deleting = "DELETING",
        Deleted = "DELETED",
        Failed = "FAILED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum Notifications {
        OutOfDate = "OUT_OF_DATE",
        SourceRemoved = "SOURCE_REMOVED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: MigrationAsset): object;
    function getDeserializedJsonObj(obj: MigrationAsset): object;
}
