/**
 * NetworkLoadBalancer API
 * This describes the network load balancer API.
 * OpenAPI spec version: 20200501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The configuration details for updating a load balancer backend set.
 * For more information about backend set configuration, see
 * [Backend Sets for Network Load Balancers](https://docs.oracle.com/iaas/Content/NetworkLoadBalancer/BackendSets/backend-set-management.htm).
 * <p>
 **Caution:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
 *
 */
export interface UpdateBackendSetDetails {
    /**
      * The network load balancer policy for the backend set. To get a list of available policies, use the
  * {@link #listNetworkLoadBalancersPolicies(ListNetworkLoadBalancersPoliciesRequest) listNetworkLoadBalancersPolicies} operation.
  * <p>
  Example: {@code FIVE_TUPLE}
  *
      */
    "policy"?: string;
    /**
     * If this parameter is enabled, then the network load balancer preserves the source IP of the packet when it is forwarded to backends.
     * Backends see the original source IP. If the isPreserveSourceDestination parameter is enabled for the network load balancer resource, then this parameter cannot be disabled.
     * The value is true by default.
     *
     */
    "isPreserveSource"?: boolean;
    /**
     * If enabled, the network load balancer will continue to distribute traffic in the configured distribution in the event all backends are unhealthy.
     * The value is false by default.
     *
     */
    "isFailOpen"?: boolean;
    /**
     * If enabled existing connections will be forwarded to an alternative healthy backend as soon as current backend becomes unhealthy.
     *
     */
    "isInstantFailoverEnabled"?: boolean;
    /**
     * If enabled along with instant failover, the network load balancer will send TCP RST to the clients for the existing connections instead of failing over to a healthy backend. This only applies when using the instant failover.
     *
     */
    "isInstantFailoverTcpResetEnabled"?: boolean;
    /**
     * If enabled, NLB supports active-standby backends. The standby backend takes over the traffic when the active node fails, and continues to serve the traffic even when the old active node is back healthy.
     *
     */
    "areOperationallyActiveBackendsPreferred"?: boolean;
    /**
     * The IP version associated with the backend set.
     */
    "ipVersion"?: model.IpVersion;
    /**
     * An array of backends associated with the backend set.
     */
    "backends"?: Array<model.BackendDetails>;
    "healthChecker"?: model.HealthCheckerDetails;
}
export declare namespace UpdateBackendSetDetails {
    function getJsonObj(obj: UpdateBackendSetDetails): object;
    function getDeserializedJsonObj(obj: UpdateBackendSetDetails): object;
}
