"use strict";
/**
 * Scanning API
 * Use the Vulnerability Scanning Service (VSS) API to manage scan recipes, targets, and reports. For more information, see [the Vulnerability Scanning documentation](https://docs.oracle.com/iaas/scanning/home.htm).
 * OpenAPI spec version: 20210215
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VulnerabilityScanningClient = exports.VulnerabilityScanningApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const vulnerabilityscanning_waiter_1 = require("./vulnerabilityscanning-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var VulnerabilityScanningApiKeys;
(function (VulnerabilityScanningApiKeys) {
})(VulnerabilityScanningApiKeys = exports.VulnerabilityScanningApiKeys || (exports.VulnerabilityScanningApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class VulnerabilityScanningClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "VulnerabilityScanning";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("vulnerabilityscanning")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("vulnerabilityscanning");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20210215";
        if (this.logger)
            this.logger.info(`VulnerabilityScanningClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(VulnerabilityScanningClient.serviceEndpointTemplate, this._region, VulnerabilityScanningClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(VulnerabilityScanningClient.serviceEndpointTemplate, this._regionId, VulnerabilityScanningClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(VulnerabilityScanningClient.serviceEndpointTemplate, region, VulnerabilityScanningClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(VulnerabilityScanningClient.serviceEndpointTemplate, regionId, VulnerabilityScanningClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new VulnerabilityScanningWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new vulnerabilityscanning_waiter_1.VulnerabilityScanningWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Moves a ContainerScanRecipe into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeContainerScanRecipeCompartmentRequest
     * @return ChangeContainerScanRecipeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ChangeContainerScanRecipeCompartment.ts.html |here} to see how to use ChangeContainerScanRecipeCompartment API.
     */
    changeContainerScanRecipeCompartment(changeContainerScanRecipeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeContainerScanRecipeCompartment.");
            const operationName = "changeContainerScanRecipeCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanRecipe/ChangeContainerScanRecipeCompartment";
            const pathParams = {
                "{containerScanRecipeId}": changeContainerScanRecipeCompartmentRequest.containerScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeContainerScanRecipeCompartmentRequest.ifMatch,
                "opc-request-id": changeContainerScanRecipeCompartmentRequest.opcRequestId,
                "opc-retry-token": changeContainerScanRecipeCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeContainerScanRecipeCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes/{containerScanRecipeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeContainerScanRecipeCompartmentRequest.changeContainerScanRecipeCompartmentDetails, "ChangeContainerScanRecipeCompartmentDetails", model.ChangeContainerScanRecipeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a ContainerScanResult into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeContainerScanResultCompartmentRequest
     * @return ChangeContainerScanResultCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ChangeContainerScanResultCompartment.ts.html |here} to see how to use ChangeContainerScanResultCompartment API.
     */
    changeContainerScanResultCompartment(changeContainerScanResultCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeContainerScanResultCompartment.");
            const operationName = "changeContainerScanResultCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanResult/ChangeContainerScanResultCompartment";
            const pathParams = {
                "{containerScanResultId}": changeContainerScanResultCompartmentRequest.containerScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeContainerScanResultCompartmentRequest.ifMatch,
                "opc-request-id": changeContainerScanResultCompartmentRequest.opcRequestId,
                "opc-retry-token": changeContainerScanResultCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeContainerScanResultCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanResults/{containerScanResultId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeContainerScanResultCompartmentRequest.changeContainerScanResultCompartmentDetails, "ChangeContainerScanResultCompartmentDetails", model.ChangeContainerScanResultCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a ContainerScanTarget into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeContainerScanTargetCompartmentRequest
     * @return ChangeContainerScanTargetCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ChangeContainerScanTargetCompartment.ts.html |here} to see how to use ChangeContainerScanTargetCompartment API.
     */
    changeContainerScanTargetCompartment(changeContainerScanTargetCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeContainerScanTargetCompartment.");
            const operationName = "changeContainerScanTargetCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanTarget/ChangeContainerScanTargetCompartment";
            const pathParams = {
                "{containerScanTargetId}": changeContainerScanTargetCompartmentRequest.containerScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeContainerScanTargetCompartmentRequest.ifMatch,
                "opc-request-id": changeContainerScanTargetCompartmentRequest.opcRequestId,
                "opc-retry-token": changeContainerScanTargetCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeContainerScanTargetCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets/{containerScanTargetId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeContainerScanTargetCompartmentRequest.changeContainerScanTargetCompartmentDetails, "ChangeContainerScanTargetCompartmentDetails", model.ChangeContainerScanTargetCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostAgentScanResult into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeHostAgentScanResultCompartmentRequest
     * @return ChangeHostAgentScanResultCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ChangeHostAgentScanResultCompartment.ts.html |here} to see how to use ChangeHostAgentScanResultCompartment API.
     */
    changeHostAgentScanResultCompartment(changeHostAgentScanResultCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostAgentScanResultCompartment.");
            const operationName = "changeHostAgentScanResultCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostAgentScanResult/ChangeHostAgentScanResultCompartment";
            const pathParams = {
                "{hostAgentScanResultId}": changeHostAgentScanResultCompartmentRequest.hostAgentScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostAgentScanResultCompartmentRequest.ifMatch,
                "opc-request-id": changeHostAgentScanResultCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostAgentScanResultCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeHostAgentScanResultCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostAgentScanResults/{hostAgentScanResultId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostAgentScanResultCompartmentRequest.changeHostAgentScanResultCompartmentDetails, "ChangeHostAgentScanResultCompartmentDetails", model.ChangeHostAgentScanResultCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostCisBenchmarkScanResult into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeHostCisBenchmarkScanResultCompartmentRequest
     * @return ChangeHostCisBenchmarkScanResultCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ChangeHostCisBenchmarkScanResultCompartment.ts.html |here} to see how to use ChangeHostCisBenchmarkScanResultCompartment API.
     */
    changeHostCisBenchmarkScanResultCompartment(changeHostCisBenchmarkScanResultCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostCisBenchmarkScanResultCompartment.");
            const operationName = "changeHostCisBenchmarkScanResultCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostCisBenchmarkScanResult/ChangeHostCisBenchmarkScanResultCompartment";
            const pathParams = {
                "{hostCisBenchmarkScanResultId}": changeHostCisBenchmarkScanResultCompartmentRequest.hostCisBenchmarkScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostCisBenchmarkScanResultCompartmentRequest.ifMatch,
                "opc-request-id": changeHostCisBenchmarkScanResultCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostCisBenchmarkScanResultCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeHostCisBenchmarkScanResultCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostCisBenchmarkScanResults/{hostCisBenchmarkScanResultId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostCisBenchmarkScanResultCompartmentRequest.changeHostCisBenchmarkScanResultCompartmentDetails, "ChangeHostCisBenchmarkScanResultCompartmentDetails", model.ChangeHostCisBenchmarkScanResultCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostEndpointProtectionScanResult into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeHostEndpointProtectionScanResultCompartmentRequest
     * @return ChangeHostEndpointProtectionScanResultCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ChangeHostEndpointProtectionScanResultCompartment.ts.html |here} to see how to use ChangeHostEndpointProtectionScanResultCompartment API.
     */
    changeHostEndpointProtectionScanResultCompartment(changeHostEndpointProtectionScanResultCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostEndpointProtectionScanResultCompartment.");
            const operationName = "changeHostEndpointProtectionScanResultCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostEndpointProtectionScanResult/ChangeHostEndpointProtectionScanResultCompartment";
            const pathParams = {
                "{hostEndpointProtectionScanResultId}": changeHostEndpointProtectionScanResultCompartmentRequest.hostEndpointProtectionScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostEndpointProtectionScanResultCompartmentRequest.ifMatch,
                "opc-request-id": changeHostEndpointProtectionScanResultCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostEndpointProtectionScanResultCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeHostEndpointProtectionScanResultCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostEndpointProtectionScanResults/{hostEndpointProtectionScanResultId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostEndpointProtectionScanResultCompartmentRequest.changeHostEndpointProtectionScanResultCompartmentDetails, "ChangeHostEndpointProtectionScanResultCompartmentDetails", model.ChangeHostEndpointProtectionScanResultCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostPortScanResult into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeHostPortScanResultCompartmentRequest
     * @return ChangeHostPortScanResultCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ChangeHostPortScanResultCompartment.ts.html |here} to see how to use ChangeHostPortScanResultCompartment API.
     */
    changeHostPortScanResultCompartment(changeHostPortScanResultCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostPortScanResultCompartment.");
            const operationName = "changeHostPortScanResultCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostPortScanResult/ChangeHostPortScanResultCompartment";
            const pathParams = {
                "{hostPortScanResultId}": changeHostPortScanResultCompartmentRequest.hostPortScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostPortScanResultCompartmentRequest.ifMatch,
                "opc-request-id": changeHostPortScanResultCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostPortScanResultCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeHostPortScanResultCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostPortScanResults/{hostPortScanResultId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostPortScanResultCompartmentRequest.changeHostPortScanResultCompartmentDetails, "ChangeHostPortScanResultCompartmentDetails", model.ChangeHostPortScanResultCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostScanRecipe into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeHostScanRecipeCompartmentRequest
     * @return ChangeHostScanRecipeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ChangeHostScanRecipeCompartment.ts.html |here} to see how to use ChangeHostScanRecipeCompartment API.
     */
    changeHostScanRecipeCompartment(changeHostScanRecipeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostScanRecipeCompartment.");
            const operationName = "changeHostScanRecipeCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanRecipe/ChangeHostScanRecipeCompartment";
            const pathParams = {
                "{hostScanRecipeId}": changeHostScanRecipeCompartmentRequest.hostScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostScanRecipeCompartmentRequest.ifMatch,
                "opc-request-id": changeHostScanRecipeCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostScanRecipeCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeHostScanRecipeCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes/{hostScanRecipeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostScanRecipeCompartmentRequest.changeHostScanRecipeCompartmentDetails, "ChangeHostScanRecipeCompartmentDetails", model.ChangeHostScanRecipeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostScanTarget into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeHostScanTargetCompartmentRequest
     * @return ChangeHostScanTargetCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ChangeHostScanTargetCompartment.ts.html |here} to see how to use ChangeHostScanTargetCompartment API.
     */
    changeHostScanTargetCompartment(changeHostScanTargetCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostScanTargetCompartment.");
            const operationName = "changeHostScanTargetCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanTarget/ChangeHostScanTargetCompartment";
            const pathParams = {
                "{hostScanTargetId}": changeHostScanTargetCompartmentRequest.hostScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostScanTargetCompartmentRequest.ifMatch,
                "opc-request-id": changeHostScanTargetCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostScanTargetCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeHostScanTargetCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets/{hostScanTargetId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostScanTargetCompartmentRequest.changeHostScanTargetCompartmentDetails, "ChangeHostScanTargetCompartmentDetails", model.ChangeHostScanTargetCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new ContainerScanRecipe. A recipe determines the types of security issues that you want scanned.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateContainerScanRecipeRequest
     * @return CreateContainerScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/CreateContainerScanRecipe.ts.html |here} to see how to use CreateContainerScanRecipe API.
     */
    createContainerScanRecipe(createContainerScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#createContainerScanRecipe.");
            const operationName = "createContainerScanRecipe";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanRecipe/CreateContainerScanRecipe";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createContainerScanRecipeRequest.opcRetryToken,
                "opc-request-id": createContainerScanRecipeRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createContainerScanRecipeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createContainerScanRecipeRequest.createContainerScanRecipeDetails, "CreateContainerScanRecipeDetails", model.CreateContainerScanRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanRecipe",
                    bodyModel: model.ContainerScanRecipe,
                    type: "model.ContainerScanRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new ContainerScanTarget. A container scan target specifies a group of one or more Docker image repositories in Oracle Cloud Infrastructure Registry (OCIR) that you want routinely scanned for security vulnerabilities.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateContainerScanTargetRequest
     * @return CreateContainerScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/CreateContainerScanTarget.ts.html |here} to see how to use CreateContainerScanTarget API.
     */
    createContainerScanTarget(createContainerScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#createContainerScanTarget.");
            const operationName = "createContainerScanTarget";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanTarget/CreateContainerScanTarget";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createContainerScanTargetRequest.opcRetryToken,
                "opc-request-id": createContainerScanTargetRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createContainerScanTargetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createContainerScanTargetRequest.createContainerScanTargetDetails, "CreateContainerScanTargetDetails", model.CreateContainerScanTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanTarget",
                    bodyModel: model.ContainerScanTarget,
                    type: "model.ContainerScanTarget",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new HostScanRecipe. A recipe determines the types of security issues that you want scanned, and how often to scan.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateHostScanRecipeRequest
     * @return CreateHostScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/CreateHostScanRecipe.ts.html |here} to see how to use CreateHostScanRecipe API.
     */
    createHostScanRecipe(createHostScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#createHostScanRecipe.");
            const operationName = "createHostScanRecipe";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanRecipe/CreateHostScanRecipe";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createHostScanRecipeRequest.opcRetryToken,
                "opc-request-id": createHostScanRecipeRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createHostScanRecipeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createHostScanRecipeRequest.createHostScanRecipeDetails, "CreateHostScanRecipeDetails", model.CreateHostScanRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanRecipe",
                    bodyModel: model.HostScanRecipe,
                    type: "model.HostScanRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new HostScanTarget. A host scan target is a collection of compute instances that you want routinely scanned for security vulnerabilities.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateHostScanTargetRequest
     * @return CreateHostScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/CreateHostScanTarget.ts.html |here} to see how to use CreateHostScanTarget API.
     */
    createHostScanTarget(createHostScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#createHostScanTarget.");
            const operationName = "createHostScanTarget";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanTarget/CreateHostScanTarget";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createHostScanTargetRequest.opcRetryToken,
                "opc-request-id": createHostScanTargetRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createHostScanTargetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createHostScanTargetRequest.createHostScanTargetDetails, "CreateHostScanTargetDetails", model.CreateHostScanTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanTarget",
                    bodyModel: model.HostScanTarget,
                    type: "model.HostScanTarget",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the ContainerScanRecipe identified by the recipe ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteContainerScanRecipeRequest
     * @return DeleteContainerScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/DeleteContainerScanRecipe.ts.html |here} to see how to use DeleteContainerScanRecipe API.
     */
    deleteContainerScanRecipe(deleteContainerScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteContainerScanRecipe.");
            const operationName = "deleteContainerScanRecipe";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanRecipe/DeleteContainerScanRecipe";
            const pathParams = {
                "{containerScanRecipeId}": deleteContainerScanRecipeRequest.containerScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteContainerScanRecipeRequest.ifMatch,
                "opc-request-id": deleteContainerScanRecipeRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteContainerScanRecipeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes/{containerScanRecipeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the ContainerScanResult identified by the container scan ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteContainerScanResultRequest
     * @return DeleteContainerScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/DeleteContainerScanResult.ts.html |here} to see how to use DeleteContainerScanResult API.
     */
    deleteContainerScanResult(deleteContainerScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteContainerScanResult.");
            const operationName = "deleteContainerScanResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanResult/DeleteContainerScanResult";
            const pathParams = {
                "{containerScanResultId}": deleteContainerScanResultRequest.containerScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteContainerScanResultRequest.ifMatch,
                "opc-request-id": deleteContainerScanResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteContainerScanResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanResults/{containerScanResultId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the ContainerScanTarget identified by the target ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteContainerScanTargetRequest
     * @return DeleteContainerScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/DeleteContainerScanTarget.ts.html |here} to see how to use DeleteContainerScanTarget API.
     */
    deleteContainerScanTarget(deleteContainerScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteContainerScanTarget.");
            const operationName = "deleteContainerScanTarget";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanTarget/DeleteContainerScanTarget";
            const pathParams = {
                "{containerScanTargetId}": deleteContainerScanTargetRequest.containerScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteContainerScanTargetRequest.ifMatch,
                "opc-request-id": deleteContainerScanTargetRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteContainerScanTargetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets/{containerScanTargetId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the HostAgentScanResult identified by the host agent scan ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteHostAgentScanResultRequest
     * @return DeleteHostAgentScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/DeleteHostAgentScanResult.ts.html |here} to see how to use DeleteHostAgentScanResult API.
     */
    deleteHostAgentScanResult(deleteHostAgentScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostAgentScanResult.");
            const operationName = "deleteHostAgentScanResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostAgentScanResult/DeleteHostAgentScanResult";
            const pathParams = {
                "{hostAgentScanResultId}": deleteHostAgentScanResultRequest.hostAgentScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostAgentScanResultRequest.ifMatch,
                "opc-request-id": deleteHostAgentScanResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteHostAgentScanResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostAgentScanResults/{hostAgentScanResultId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the HostCisBenchmarkScanResult identified by the benchmark scan result ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteHostCisBenchmarkScanResultRequest
     * @return DeleteHostCisBenchmarkScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/DeleteHostCisBenchmarkScanResult.ts.html |here} to see how to use DeleteHostCisBenchmarkScanResult API.
     */
    deleteHostCisBenchmarkScanResult(deleteHostCisBenchmarkScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostCisBenchmarkScanResult.");
            const operationName = "deleteHostCisBenchmarkScanResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostCisBenchmarkScanResult/DeleteHostCisBenchmarkScanResult";
            const pathParams = {
                "{hostCisBenchmarkScanResultId}": deleteHostCisBenchmarkScanResultRequest.hostCisBenchmarkScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostCisBenchmarkScanResultRequest.ifMatch,
                "opc-request-id": deleteHostCisBenchmarkScanResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteHostCisBenchmarkScanResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostCisBenchmarkScanResults/{hostCisBenchmarkScanResultId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the HostEndpointProtectionScanResult identified by the id
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteHostEndpointProtectionScanResultRequest
     * @return DeleteHostEndpointProtectionScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/DeleteHostEndpointProtectionScanResult.ts.html |here} to see how to use DeleteHostEndpointProtectionScanResult API.
     */
    deleteHostEndpointProtectionScanResult(deleteHostEndpointProtectionScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostEndpointProtectionScanResult.");
            const operationName = "deleteHostEndpointProtectionScanResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostEndpointProtectionScanResult/DeleteHostEndpointProtectionScanResult";
            const pathParams = {
                "{hostEndpointProtectionScanResultId}": deleteHostEndpointProtectionScanResultRequest.hostEndpointProtectionScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostEndpointProtectionScanResultRequest.ifMatch,
                "opc-request-id": deleteHostEndpointProtectionScanResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteHostEndpointProtectionScanResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostEndpointProtectionScanResults/{hostEndpointProtectionScanResultId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the HostPortScanResult identified by the host port scan ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteHostPortScanResultRequest
     * @return DeleteHostPortScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/DeleteHostPortScanResult.ts.html |here} to see how to use DeleteHostPortScanResult API.
     */
    deleteHostPortScanResult(deleteHostPortScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostPortScanResult.");
            const operationName = "deleteHostPortScanResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostPortScanResult/DeleteHostPortScanResult";
            const pathParams = {
                "{hostPortScanResultId}": deleteHostPortScanResultRequest.hostPortScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostPortScanResultRequest.ifMatch,
                "opc-request-id": deleteHostPortScanResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteHostPortScanResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostPortScanResults/{hostPortScanResultId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the HostScanRecipe identified by the recipe ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteHostScanRecipeRequest
     * @return DeleteHostScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/DeleteHostScanRecipe.ts.html |here} to see how to use DeleteHostScanRecipe API.
     */
    deleteHostScanRecipe(deleteHostScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostScanRecipe.");
            const operationName = "deleteHostScanRecipe";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanRecipe/DeleteHostScanRecipe";
            const pathParams = {
                "{hostScanRecipeId}": deleteHostScanRecipeRequest.hostScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostScanRecipeRequest.ifMatch,
                "opc-request-id": deleteHostScanRecipeRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteHostScanRecipeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes/{hostScanRecipeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the HostScanTarget identified by the target ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteHostScanTargetRequest
     * @return DeleteHostScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/DeleteHostScanTarget.ts.html |here} to see how to use DeleteHostScanTarget API.
     */
    deleteHostScanTarget(deleteHostScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostScanTarget.");
            const operationName = "deleteHostScanTarget";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanTarget/DeleteHostScanTarget";
            const pathParams = {
                "{hostScanTargetId}": deleteHostScanTargetRequest.hostScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostScanTargetRequest.ifMatch,
                "opc-request-id": deleteHostScanTargetRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteHostScanTargetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets/{hostScanTargetId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Exports a list of HostAgentScanResultSummary objects within a compartment and during a specified time range in CSV format. You can filter the results by problem severity.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ExportHostAgentScanResultCsvRequest
     * @return ExportHostAgentScanResultCsvResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ExportHostAgentScanResultCsv.ts.html |here} to see how to use ExportHostAgentScanResultCsv API.
     */
    exportHostAgentScanResultCsv(exportHostAgentScanResultCsvRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#exportHostAgentScanResultCsv.");
            const operationName = "exportHostAgentScanResultCsv";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostAgentScanResult/ExportHostAgentScanResultCsv";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": exportHostAgentScanResultCsvRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, exportHostAgentScanResultCsvRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostAgentScanResults/actions/exportCsv",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(exportHostAgentScanResultCsvRequest.exportHostAgentScanResultCsvDetails, "ExportHostAgentScanResultCsvDetails", model.ExportHostAgentScanResultCsvDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Exports a list of HostVulnerabilitySummary objects in a compartment in CSV format.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ExportHostVulnerabilityCsvRequest
     * @return ExportHostVulnerabilityCsvResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ExportHostVulnerabilityCsv.ts.html |here} to see how to use ExportHostVulnerabilityCsv API.
     */
    exportHostVulnerabilityCsv(exportHostVulnerabilityCsvRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#exportHostVulnerabilityCsv.");
            const operationName = "exportHostVulnerabilityCsv";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostVulnerability/ExportHostVulnerabilityCsv";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": exportHostVulnerabilityCsvRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, exportHostVulnerabilityCsvRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostVulnerabilities/actions/exportCsv",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(exportHostVulnerabilityCsvRequest.exportHostVulnerabilityCsvDetails, "ExportHostVulnerabilityCsvDetails", model.ExportHostVulnerabilityCsvDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a ContainerScanRecipe identified by the recipe ID. A recipe determines the types of security issues that you want scanned.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetContainerScanRecipeRequest
     * @return GetContainerScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetContainerScanRecipe.ts.html |here} to see how to use GetContainerScanRecipe API.
     */
    getContainerScanRecipe(getContainerScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getContainerScanRecipe.");
            const operationName = "getContainerScanRecipe";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanRecipe/GetContainerScanRecipe";
            const pathParams = {
                "{containerScanRecipeId}": getContainerScanRecipeRequest.containerScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getContainerScanRecipeRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getContainerScanRecipeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes/{containerScanRecipeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanRecipe",
                    bodyModel: model.ContainerScanRecipe,
                    type: "model.ContainerScanRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a ContainerScanResult identified by the container scan ID. The result includes a list of problems found in a specific image in a Docker repository.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetContainerScanResultRequest
     * @return GetContainerScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetContainerScanResult.ts.html |here} to see how to use GetContainerScanResult API.
     */
    getContainerScanResult(getContainerScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getContainerScanResult.");
            const operationName = "getContainerScanResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanResult/GetContainerScanResult";
            const pathParams = {
                "{containerScanResultId}": getContainerScanResultRequest.containerScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getContainerScanResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getContainerScanResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanResults/{containerScanResultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanResult",
                    bodyModel: model.ContainerScanResult,
                    type: "model.ContainerScanResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a ContainerScanTarget identified by the target ID. A container scan target specifies a group of one or more Docker image repositories in Oracle Cloud Infrastructure Registry (OCIR) that you want routinely scanned for security vulnerabilities.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetContainerScanTargetRequest
     * @return GetContainerScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetContainerScanTarget.ts.html |here} to see how to use GetContainerScanTarget API.
     */
    getContainerScanTarget(getContainerScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getContainerScanTarget.");
            const operationName = "getContainerScanTarget";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanTarget/GetContainerScanTarget";
            const pathParams = {
                "{containerScanTargetId}": getContainerScanTargetRequest.containerScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getContainerScanTargetRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getContainerScanTargetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets/{containerScanTargetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanTarget",
                    bodyModel: model.ContainerScanTarget,
                    type: "model.ContainerScanTarget",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a HostAgentScanResult identified by the host agent scan ID. The result includes a list of CVEs detected in a specific compute instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetHostAgentScanResultRequest
     * @return GetHostAgentScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetHostAgentScanResult.ts.html |here} to see how to use GetHostAgentScanResult API.
     */
    getHostAgentScanResult(getHostAgentScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostAgentScanResult.");
            const operationName = "getHostAgentScanResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostAgentScanResult/GetHostAgentScanResult";
            const pathParams = {
                "{hostAgentScanResultId}": getHostAgentScanResultRequest.hostAgentScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostAgentScanResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getHostAgentScanResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostAgentScanResults/{hostAgentScanResultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostAgentScanResult",
                    bodyModel: model.HostAgentScanResult,
                    type: "model.HostAgentScanResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a HostCisBenchmarkScanResult identified by the benchmark scan result ID. A CIS (Center for Internet Security) benchmark scan result includes a list of benchmarks that were tested on a specific compute instance, and whether each test passed or failed.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetHostCisBenchmarkScanResultRequest
     * @return GetHostCisBenchmarkScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetHostCisBenchmarkScanResult.ts.html |here} to see how to use GetHostCisBenchmarkScanResult API.
     */
    getHostCisBenchmarkScanResult(getHostCisBenchmarkScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostCisBenchmarkScanResult.");
            const operationName = "getHostCisBenchmarkScanResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostCisBenchmarkScanResult/GetHostCisBenchmarkScanResult";
            const pathParams = {
                "{hostCisBenchmarkScanResultId}": getHostCisBenchmarkScanResultRequest.hostCisBenchmarkScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostCisBenchmarkScanResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getHostCisBenchmarkScanResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostCisBenchmarkScanResults/{hostCisBenchmarkScanResultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostCisBenchmarkScanResult",
                    bodyModel: model.HostCisBenchmarkScanResult,
                    type: "model.HostCisBenchmarkScanResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns HostEndpointProtectionScanResults for the given host endpoint protection scan result ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetHostEndpointProtectionScanResultRequest
     * @return GetHostEndpointProtectionScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetHostEndpointProtectionScanResult.ts.html |here} to see how to use GetHostEndpointProtectionScanResult API.
     */
    getHostEndpointProtectionScanResult(getHostEndpointProtectionScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostEndpointProtectionScanResult.");
            const operationName = "getHostEndpointProtectionScanResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostEndpointProtectionScanResult/GetHostEndpointProtectionScanResult";
            const pathParams = {
                "{hostEndpointProtectionScanResultId}": getHostEndpointProtectionScanResultRequest.hostEndpointProtectionScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostEndpointProtectionScanResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getHostEndpointProtectionScanResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostEndpointProtectionScanResults/{hostEndpointProtectionScanResultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostEndpointProtectionScanResult",
                    bodyModel: model.HostEndpointProtectionScanResult,
                    type: "model.HostEndpointProtectionScanResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a HostPortScanResult identified by the host port scan ID. The result includes a list of open ports that were detected in a specific compute instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetHostPortScanResultRequest
     * @return GetHostPortScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetHostPortScanResult.ts.html |here} to see how to use GetHostPortScanResult API.
     */
    getHostPortScanResult(getHostPortScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostPortScanResult.");
            const operationName = "getHostPortScanResult";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostPortScanResult/GetHostPortScanResult";
            const pathParams = {
                "{hostPortScanResultId}": getHostPortScanResultRequest.hostPortScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostPortScanResultRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getHostPortScanResultRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostPortScanResults/{hostPortScanResultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostPortScanResult",
                    bodyModel: model.HostPortScanResult,
                    type: "model.HostPortScanResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a HostScanRecipe identified by the recipe ID. A recipe determines the types of security issues that you want scanned, and how often to scan.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetHostScanRecipeRequest
     * @return GetHostScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetHostScanRecipe.ts.html |here} to see how to use GetHostScanRecipe API.
     */
    getHostScanRecipe(getHostScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostScanRecipe.");
            const operationName = "getHostScanRecipe";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanRecipe/GetHostScanRecipe";
            const pathParams = {
                "{hostScanRecipeId}": getHostScanRecipeRequest.hostScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostScanRecipeRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getHostScanRecipeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes/{hostScanRecipeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanRecipe",
                    bodyModel: model.HostScanRecipe,
                    type: "model.HostScanRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a HostScanTarget identified by the target ID. A host scan target is a collection of compute instances that you want routinely scanned for security vulnerabilities.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetHostScanTargetRequest
     * @return GetHostScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetHostScanTarget.ts.html |here} to see how to use GetHostScanTarget API.
     */
    getHostScanTarget(getHostScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostScanTarget.");
            const operationName = "getHostScanTarget";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanTarget/GetHostScanTarget";
            const pathParams = {
                "{hostScanTargetId}": getHostScanTargetRequest.hostScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostScanTargetRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getHostScanTargetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets/{hostScanTargetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanTarget",
                    bodyModel: model.HostScanTarget,
                    type: "model.HostScanTarget",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a HostVulnerability identified by the host vulnerability ID. A host vulnerability describes a security issue that was detected in scans of one or more compute instances. Common Vulnerabilities and Exposures (CVE) numbers identify security vulnerabilities for operating systems and other software, including Critical Patch Updates and Security Alert advisories.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetHostVulnerabilityRequest
     * @return GetHostVulnerabilityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetHostVulnerability.ts.html |here} to see how to use GetHostVulnerability API.
     */
    getHostVulnerability(getHostVulnerabilityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostVulnerability.");
            const operationName = "getHostVulnerability";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostVulnerability/GetHostVulnerability";
            const pathParams = {
                "{hostVulnerabilityId}": getHostVulnerabilityRequest.hostVulnerabilityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostVulnerabilityRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getHostVulnerabilityRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostVulnerabilities/{hostVulnerabilityId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostVulnerability",
                    bodyModel: model.HostVulnerability,
                    type: "model.HostVulnerability",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a Vulnerability identified by the vulnerability ID. A vulnerability describes a security issue that was detected in scans of one or more compute instances, container scan repositories. Common Vulnerabilities and Exposures (CVE) numbers identify security vulnerabilities for operating systems and other software, including Critical Patch Updates and Security Alert advisories.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetVulnerabilityRequest
     * @return GetVulnerabilityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetVulnerability.ts.html |here} to see how to use GetVulnerability API.
     */
    getVulnerability(getVulnerabilityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getVulnerability.");
            const operationName = "getVulnerability";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/Vulnerability/GetVulnerability";
            const pathParams = {
                "{vulnerabilityId}": getVulnerabilityRequest.vulnerabilityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getVulnerabilityRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getVulnerabilityRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vulnerabilities/{vulnerabilityId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vulnerability",
                    bodyModel: model.Vulnerability,
                    type: "model.Vulnerability",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the work request with the given ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/WorkRequest/GetWorkRequest";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of ContainerScanRecipeSummary objects in a compartment. A recipe determines the types of security issues that you want scanned.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListContainerScanRecipesRequest
     * @return ListContainerScanRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListContainerScanRecipes.ts.html |here} to see how to use ListContainerScanRecipes API.
     */
    listContainerScanRecipes(listContainerScanRecipesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listContainerScanRecipes.");
            const operationName = "listContainerScanRecipes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanRecipe/ListContainerScanRecipes";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listContainerScanRecipesRequest.compartmentId,
                "lifecycleState": listContainerScanRecipesRequest.lifecycleState,
                "displayName": listContainerScanRecipesRequest.displayName,
                "limit": listContainerScanRecipesRequest.limit,
                "page": listContainerScanRecipesRequest.page,
                "sortOrder": listContainerScanRecipesRequest.sortOrder,
                "sortBy": listContainerScanRecipesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listContainerScanRecipesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listContainerScanRecipesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanRecipeSummaryCollection",
                    bodyModel: model.ContainerScanRecipeSummaryCollection,
                    type: "model.ContainerScanRecipeSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of ContainerScanResultSummary objects in a compartment. You can filter and sort the results by problem severity and time. A container scan result includes a list of problems detected in a specific image in a Docker repository.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListContainerScanResultsRequest
     * @return ListContainerScanResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListContainerScanResults.ts.html |here} to see how to use ListContainerScanResults API.
     */
    listContainerScanResults(listContainerScanResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listContainerScanResults.");
            const operationName = "listContainerScanResults";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanResult/ListContainerScanResults";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listContainerScanResultsRequest.compartmentId,
                "repository": listContainerScanResultsRequest.repository,
                "image": listContainerScanResultsRequest.image,
                "areSubcompartmentsIncluded": listContainerScanResultsRequest.areSubcompartmentsIncluded,
                "highestProblemSeverity": listContainerScanResultsRequest.highestProblemSeverity,
                "timeStartedGreaterThanOrEqualTo": listContainerScanResultsRequest.timeStartedGreaterThanOrEqualTo,
                "timeStartedLessThanOrEqualTo": listContainerScanResultsRequest.timeStartedLessThanOrEqualTo,
                "sortOrder": listContainerScanResultsRequest.sortOrder,
                "sortBy": listContainerScanResultsRequest.sortBy,
                "limit": listContainerScanResultsRequest.limit,
                "page": listContainerScanResultsRequest.page,
                "isLatestOnly": listContainerScanResultsRequest.isLatestOnly
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listContainerScanResultsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listContainerScanResultsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanResults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanResultSummaryCollection",
                    bodyModel: model.ContainerScanResultSummaryCollection,
                    type: "model.ContainerScanResultSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of ContainerScanTargetSummary objects in a compartment. A container scan target specifies a group of one or more Docker image repositories in Oracle Cloud Infrastructure Registry (OCIR) that you want routinely scanned for security vulnerabilities.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListContainerScanTargetsRequest
     * @return ListContainerScanTargetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListContainerScanTargets.ts.html |here} to see how to use ListContainerScanTargets API.
     */
    listContainerScanTargets(listContainerScanTargetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listContainerScanTargets.");
            const operationName = "listContainerScanTargets";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanTarget/ListContainerScanTargets";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listContainerScanTargetsRequest.compartmentId,
                "lifecycleState": listContainerScanTargetsRequest.lifecycleState,
                "displayName": listContainerScanTargetsRequest.displayName,
                "limit": listContainerScanTargetsRequest.limit,
                "page": listContainerScanTargetsRequest.page,
                "sortOrder": listContainerScanTargetsRequest.sortOrder,
                "sortBy": listContainerScanTargetsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listContainerScanTargetsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listContainerScanTargetsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanTargetSummaryCollection",
                    bodyModel: model.ContainerScanTargetSummaryCollection,
                    type: "model.ContainerScanTargetSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostAgentScanResultSummary objects in a compartment. You can filter and sort the results by problem severity and time. An agent scan result includes a list of CVEs detected in a specific compute instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListHostAgentScanResultsRequest
     * @return ListHostAgentScanResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListHostAgentScanResults.ts.html |here} to see how to use ListHostAgentScanResults API.
     */
    listHostAgentScanResults(listHostAgentScanResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostAgentScanResults.");
            const operationName = "listHostAgentScanResults";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostAgentScanResult/ListHostAgentScanResults";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostAgentScanResultsRequest.compartmentId,
                "instanceId": listHostAgentScanResultsRequest.instanceId,
                "highestProblemSeverity": listHostAgentScanResultsRequest.highestProblemSeverity,
                "operatingSystem": listHostAgentScanResultsRequest.operatingSystem,
                "timeStartedGreaterThanOrEqualTo": listHostAgentScanResultsRequest.timeStartedGreaterThanOrEqualTo,
                "timeStartedLessThanOrEqualTo": listHostAgentScanResultsRequest.timeStartedLessThanOrEqualTo,
                "sortOrder": listHostAgentScanResultsRequest.sortOrder,
                "sortBy": listHostAgentScanResultsRequest.sortBy,
                "limit": listHostAgentScanResultsRequest.limit,
                "page": listHostAgentScanResultsRequest.page,
                "displayName": listHostAgentScanResultsRequest.displayName,
                "isLatestOnly": listHostAgentScanResultsRequest.isLatestOnly
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostAgentScanResultsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostAgentScanResultsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostAgentScanResults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostAgentScanResultSummaryCollection",
                    bodyModel: model.HostAgentScanResultSummaryCollection,
                    type: "model.HostAgentScanResultSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostCisBenchmarkScanResultSummary objects in a compartment. You can filter and sort the results by problem severity and time. A CIS (Center for Internet Security) benchmark scan result includes the number of failed benchmark tests on a specific compute instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListHostCisBenchmarkScanResultsRequest
     * @return ListHostCisBenchmarkScanResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListHostCisBenchmarkScanResults.ts.html |here} to see how to use ListHostCisBenchmarkScanResults API.
     */
    listHostCisBenchmarkScanResults(listHostCisBenchmarkScanResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostCisBenchmarkScanResults.");
            const operationName = "listHostCisBenchmarkScanResults";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostCisBenchmarkScanResult/ListHostCisBenchmarkScanResults";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostCisBenchmarkScanResultsRequest.compartmentId,
                "instanceId": listHostCisBenchmarkScanResultsRequest.instanceId,
                "highestProblemSeverity": listHostCisBenchmarkScanResultsRequest.highestProblemSeverity,
                "timeStartedGreaterThanOrEqualTo": listHostCisBenchmarkScanResultsRequest.timeStartedGreaterThanOrEqualTo,
                "timeStartedLessThanOrEqualTo": listHostCisBenchmarkScanResultsRequest.timeStartedLessThanOrEqualTo,
                "sortOrder": listHostCisBenchmarkScanResultsRequest.sortOrder,
                "sortBy": listHostCisBenchmarkScanResultsRequest.sortBy,
                "limit": listHostCisBenchmarkScanResultsRequest.limit,
                "page": listHostCisBenchmarkScanResultsRequest.page,
                "displayName": listHostCisBenchmarkScanResultsRequest.displayName,
                "isLatestOnly": listHostCisBenchmarkScanResultsRequest.isLatestOnly
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostCisBenchmarkScanResultsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostCisBenchmarkScanResultsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostCisBenchmarkScanResults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostCisBenchmarkScanResultSummaryCollection",
                    bodyModel: model.HostCisBenchmarkScanResultSummaryCollection,
                    type: "model.HostCisBenchmarkScanResultSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a collection of HostEndpointProtectionScanResultSummary objects
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListHostEndpointProtectionScanResultsRequest
     * @return ListHostEndpointProtectionScanResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListHostEndpointProtectionScanResults.ts.html |here} to see how to use ListHostEndpointProtectionScanResults API.
     */
    listHostEndpointProtectionScanResults(listHostEndpointProtectionScanResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostEndpointProtectionScanResults.");
            const operationName = "listHostEndpointProtectionScanResults";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostEndpointProtectionScanResult/ListHostEndpointProtectionScanResults";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostEndpointProtectionScanResultsRequest.compartmentId,
                "instanceId": listHostEndpointProtectionScanResultsRequest.instanceId,
                "highestProblemSeverity": listHostEndpointProtectionScanResultsRequest.highestProblemSeverity,
                "timeStartedGreaterThanOrEqualTo": listHostEndpointProtectionScanResultsRequest.timeStartedGreaterThanOrEqualTo,
                "timeStartedLessThanOrEqualTo": listHostEndpointProtectionScanResultsRequest.timeStartedLessThanOrEqualTo,
                "sortOrder": listHostEndpointProtectionScanResultsRequest.sortOrder,
                "sortBy": listHostEndpointProtectionScanResultsRequest.sortBy,
                "limit": listHostEndpointProtectionScanResultsRequest.limit,
                "page": listHostEndpointProtectionScanResultsRequest.page,
                "displayName": listHostEndpointProtectionScanResultsRequest.displayName,
                "isLatestOnly": listHostEndpointProtectionScanResultsRequest.isLatestOnly
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostEndpointProtectionScanResultsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostEndpointProtectionScanResultsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostEndpointProtectionScanResults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostEndpointProtectionScanResultSummaryCollection",
                    bodyModel: model.HostEndpointProtectionScanResultSummaryCollection,
                    type: "model.HostEndpointProtectionScanResultSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostPortScanResultSummary objects in a compartment. You can filter and sort the results by problem severity and time. A port scan result includes a list of open ports that were detected in a specific compute instance.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListHostPortScanResultsRequest
     * @return ListHostPortScanResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListHostPortScanResults.ts.html |here} to see how to use ListHostPortScanResults API.
     */
    listHostPortScanResults(listHostPortScanResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostPortScanResults.");
            const operationName = "listHostPortScanResults";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostPortScanResult/ListHostPortScanResults";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostPortScanResultsRequest.compartmentId,
                "instanceId": listHostPortScanResultsRequest.instanceId,
                "highestProblemSeverity": listHostPortScanResultsRequest.highestProblemSeverity,
                "timeStartedGreaterThanOrEqualTo": listHostPortScanResultsRequest.timeStartedGreaterThanOrEqualTo,
                "timeStartedLessThanOrEqualTo": listHostPortScanResultsRequest.timeStartedLessThanOrEqualTo,
                "sortOrder": listHostPortScanResultsRequest.sortOrder,
                "sortBy": listHostPortScanResultsRequest.sortBy,
                "limit": listHostPortScanResultsRequest.limit,
                "page": listHostPortScanResultsRequest.page,
                "displayName": listHostPortScanResultsRequest.displayName,
                "isLatestOnly": listHostPortScanResultsRequest.isLatestOnly
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostPortScanResultsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostPortScanResultsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostPortScanResults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostPortScanResultSummaryCollection",
                    bodyModel: model.HostPortScanResultSummaryCollection,
                    type: "model.HostPortScanResultSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostScanRecipeSummary objects in a compartment. A recipe determines the types of security issues that you want scanned, and how often to scan.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListHostScanRecipesRequest
     * @return ListHostScanRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListHostScanRecipes.ts.html |here} to see how to use ListHostScanRecipes API.
     */
    listHostScanRecipes(listHostScanRecipesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostScanRecipes.");
            const operationName = "listHostScanRecipes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanRecipe/ListHostScanRecipes";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostScanRecipesRequest.compartmentId,
                "lifecycleState": listHostScanRecipesRequest.lifecycleState,
                "displayName": listHostScanRecipesRequest.displayName,
                "limit": listHostScanRecipesRequest.limit,
                "page": listHostScanRecipesRequest.page,
                "sortOrder": listHostScanRecipesRequest.sortOrder,
                "sortBy": listHostScanRecipesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostScanRecipesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostScanRecipesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanRecipeSummaryCollection",
                    bodyModel: model.HostScanRecipeSummaryCollection,
                    type: "model.HostScanRecipeSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves list of errors during scanning on instances associated with HostScanTarget identified by the target ID. A host scan target is a collection of compute instances that you want routinely scanned for security vulnerabilities.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListHostScanTargetErrorsRequest
     * @return ListHostScanTargetErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListHostScanTargetErrors.ts.html |here} to see how to use ListHostScanTargetErrors API.
     */
    listHostScanTargetErrors(listHostScanTargetErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostScanTargetErrors.");
            const operationName = "listHostScanTargetErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanTargetErrorSummaryCollection/ListHostScanTargetErrors";
            const pathParams = {
                "{hostScanTargetId}": listHostScanTargetErrorsRequest.hostScanTargetId
            };
            const queryParams = {
                "compartmentId": listHostScanTargetErrorsRequest.compartmentId,
                "lifecycleState": listHostScanTargetErrorsRequest.lifecycleState,
                "sortOrder": listHostScanTargetErrorsRequest.sortOrder,
                "sortBy": listHostScanTargetErrorsRequest.sortBy,
                "limit": listHostScanTargetErrorsRequest.limit,
                "page": listHostScanTargetErrorsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostScanTargetErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostScanTargetErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets/{hostScanTargetId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanTargetErrorSummaryCollection",
                    bodyModel: model.HostScanTargetErrorSummaryCollection,
                    type: "model.HostScanTargetErrorSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostScanTargetSummary objects in a compartment. A host scan target is a collection of compute instances that you want routinely scanned for security vulnerabilities.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListHostScanTargetsRequest
     * @return ListHostScanTargetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListHostScanTargets.ts.html |here} to see how to use ListHostScanTargets API.
     */
    listHostScanTargets(listHostScanTargetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostScanTargets.");
            const operationName = "listHostScanTargets";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanTarget/ListHostScanTargets";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostScanTargetsRequest.compartmentId,
                "lifecycleState": listHostScanTargetsRequest.lifecycleState,
                "displayName": listHostScanTargetsRequest.displayName,
                "limit": listHostScanTargetsRequest.limit,
                "page": listHostScanTargetsRequest.page,
                "sortOrder": listHostScanTargetsRequest.sortOrder,
                "sortBy": listHostScanTargetsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostScanTargetsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostScanTargetsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanTargetSummaryCollection",
                    bodyModel: model.HostScanTargetSummaryCollection,
                    type: "model.HostScanTargetSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostVulnerabilitySummary objects in a compartment. You can filter and sort the vulnerabilities by problem severity and time. A host vulnerability describes a security issue that was detected in scans of one or more compute instances.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListHostVulnerabilitiesRequest
     * @return ListHostVulnerabilitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListHostVulnerabilities.ts.html |here} to see how to use ListHostVulnerabilities API.
     */
    listHostVulnerabilities(listHostVulnerabilitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostVulnerabilities.");
            const operationName = "listHostVulnerabilities";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostVulnerability/ListHostVulnerabilities";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostVulnerabilitiesRequest.compartmentId,
                "limit": listHostVulnerabilitiesRequest.limit,
                "page": listHostVulnerabilitiesRequest.page,
                "severity": listHostVulnerabilitiesRequest.severity,
                "name": listHostVulnerabilitiesRequest.name,
                "cveReference": listHostVulnerabilitiesRequest.cveReference,
                "vulnerabilityType": listHostVulnerabilitiesRequest.vulnerabilityType,
                "sortOrder": listHostVulnerabilitiesRequest.sortOrder,
                "sortBy": listHostVulnerabilitiesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostVulnerabilitiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostVulnerabilitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostVulnerabilities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostVulnerabilitySummaryCollection",
                    bodyModel: model.HostVulnerabilitySummaryCollection,
                    type: "model.HostVulnerabilitySummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostVulnerabilityImpactedHostSummary objects for a specific host vulnerability ID. An impacted host summary identifies a compute instance on which the specified vulnerability was detected.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListHostVulnerabilityImpactedHostsRequest
     * @return ListHostVulnerabilityImpactedHostsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListHostVulnerabilityImpactedHosts.ts.html |here} to see how to use ListHostVulnerabilityImpactedHosts API.
     */
    listHostVulnerabilityImpactedHosts(listHostVulnerabilityImpactedHostsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostVulnerabilityImpactedHosts.");
            const operationName = "listHostVulnerabilityImpactedHosts";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostVulnerability/ListHostVulnerabilityImpactedHosts";
            const pathParams = {
                "{hostVulnerabilityId}": listHostVulnerabilityImpactedHostsRequest.hostVulnerabilityId
            };
            const queryParams = {
                "sortOrder": listHostVulnerabilityImpactedHostsRequest.sortOrder,
                "sortBy": listHostVulnerabilityImpactedHostsRequest.sortBy,
                "limit": listHostVulnerabilityImpactedHostsRequest.limit,
                "page": listHostVulnerabilityImpactedHostsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostVulnerabilityImpactedHostsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostVulnerabilityImpactedHostsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostVulnerabilities/{hostVulnerabilityId}/impactedHosts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostVulnerabilityImpactedHostSummaryCollection",
                    bodyModel: model.HostVulnerabilityImpactedHostSummaryCollection,
                    type: "model.HostVulnerabilityImpactedHostSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of VulnerabilitySummary objects in a compartment. You can filter and sort the vulnerabilities by problem severity and time and type. A vulnerability describes a security issue that was detected in scans of one or more compute instances, container images.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListVulnerabilitiesRequest
     * @return ListVulnerabilitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListVulnerabilities.ts.html |here} to see how to use ListVulnerabilities API.
     */
    listVulnerabilities(listVulnerabilitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listVulnerabilities.");
            const operationName = "listVulnerabilities";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/Vulnerability/ListVulnerabilities";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVulnerabilitiesRequest.compartmentId,
                "limit": listVulnerabilitiesRequest.limit,
                "page": listVulnerabilitiesRequest.page,
                "severity": listVulnerabilitiesRequest.severity,
                "name": listVulnerabilitiesRequest.name,
                "vulnerabilityReference": listVulnerabilitiesRequest.vulnerabilityReference,
                "vulnerabilityType": listVulnerabilitiesRequest.vulnerabilityType,
                "sortOrder": listVulnerabilitiesRequest.sortOrder,
                "sortBy": listVulnerabilitiesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listVulnerabilitiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listVulnerabilitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vulnerabilities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vulnerabilitySummaryCollection",
                    bodyModel: model.VulnerabilitySummaryCollection,
                    type: "model.VulnerabilitySummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of VulnerabilityImpactedContainerSummary objects for a specific vulnerability ID. An impacted container image summary identifies container images on which the specified vulnerability was detected.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListVulnerabilityImpactedContainersRequest
     * @return ListVulnerabilityImpactedContainersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListVulnerabilityImpactedContainers.ts.html |here} to see how to use ListVulnerabilityImpactedContainers API.
     */
    listVulnerabilityImpactedContainers(listVulnerabilityImpactedContainersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listVulnerabilityImpactedContainers.");
            const operationName = "listVulnerabilityImpactedContainers";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/Vulnerability/ListVulnerabilityImpactedContainers";
            const pathParams = {
                "{vulnerabilityId}": listVulnerabilityImpactedContainersRequest.vulnerabilityId
            };
            const queryParams = {
                "sortOrder": listVulnerabilityImpactedContainersRequest.sortOrder,
                "limit": listVulnerabilityImpactedContainersRequest.limit,
                "page": listVulnerabilityImpactedContainersRequest.page,
                "sortBy": listVulnerabilityImpactedContainersRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listVulnerabilityImpactedContainersRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listVulnerabilityImpactedContainersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vulnerabilities/{vulnerabilityId}/impactedContainers",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vulnerabilityImpactedContainerSummaryCollection",
                    bodyModel: model.VulnerabilityImpactedContainerSummaryCollection,
                    type: "model.VulnerabilityImpactedContainerSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of VulnerabilityImpactedHostSummary objects for a specific host vulnerability ID. An impacted host summary identifies a compute instance on which the specified vulnerability was detected.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListVulnerabilityImpactedHostsRequest
     * @return ListVulnerabilityImpactedHostsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListVulnerabilityImpactedHosts.ts.html |here} to see how to use ListVulnerabilityImpactedHosts API.
     */
    listVulnerabilityImpactedHosts(listVulnerabilityImpactedHostsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listVulnerabilityImpactedHosts.");
            const operationName = "listVulnerabilityImpactedHosts";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/Vulnerability/ListVulnerabilityImpactedHosts";
            const pathParams = {
                "{vulnerabilityId}": listVulnerabilityImpactedHostsRequest.vulnerabilityId
            };
            const queryParams = {
                "sortOrder": listVulnerabilityImpactedHostsRequest.sortOrder,
                "sortBy": listVulnerabilityImpactedHostsRequest.sortBy,
                "limit": listVulnerabilityImpactedHostsRequest.limit,
                "page": listVulnerabilityImpactedHostsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listVulnerabilityImpactedHostsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listVulnerabilityImpactedHostsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vulnerabilities/{vulnerabilityId}/impactedHosts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vulnerabilityImpactedHostSummaryCollection",
                    bodyModel: model.VulnerabilityImpactedHostSummaryCollection,
                    type: "model.VulnerabilityImpactedHostSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/WorkRequestError/ListWorkRequestErrors";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: model.WorkRequestErrorCollection,
                    type: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/WorkRequestLogEntry/ListWorkRequestLogs";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestLogEntryCollection",
                    bodyModel: model.WorkRequestLogEntryCollection,
                    type: "model.WorkRequestLogEntryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the work requests in a compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/WorkRequest/ListWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestCollection",
                    bodyModel: model.WorkRequestCollection,
                    type: "model.WorkRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the ContainerScanRecipe identified by the recipe ID. A recipe determines the types of security issues that you want scanned.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateContainerScanRecipeRequest
     * @return UpdateContainerScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/UpdateContainerScanRecipe.ts.html |here} to see how to use UpdateContainerScanRecipe API.
     */
    updateContainerScanRecipe(updateContainerScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#updateContainerScanRecipe.");
            const operationName = "updateContainerScanRecipe";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanRecipe/UpdateContainerScanRecipe";
            const pathParams = {
                "{containerScanRecipeId}": updateContainerScanRecipeRequest.containerScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateContainerScanRecipeRequest.ifMatch,
                "opc-request-id": updateContainerScanRecipeRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateContainerScanRecipeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes/{containerScanRecipeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateContainerScanRecipeRequest.updateContainerScanRecipeDetails, "UpdateContainerScanRecipeDetails", model.UpdateContainerScanRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the ContainerScanTarget identified by the target ID. A container scan target specifies a group of one or more Docker image repositories in Oracle Cloud Infrastructure Registry (OCIR) that you want routinely scanned for security vulnerabilities.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateContainerScanTargetRequest
     * @return UpdateContainerScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/UpdateContainerScanTarget.ts.html |here} to see how to use UpdateContainerScanTarget API.
     */
    updateContainerScanTarget(updateContainerScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#updateContainerScanTarget.");
            const operationName = "updateContainerScanTarget";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/ContainerScanTarget/UpdateContainerScanTarget";
            const pathParams = {
                "{containerScanTargetId}": updateContainerScanTargetRequest.containerScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateContainerScanTargetRequest.ifMatch,
                "opc-request-id": updateContainerScanTargetRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateContainerScanTargetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets/{containerScanTargetId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateContainerScanTargetRequest.updateContainerScanTargetDetails, "UpdateContainerScanTargetDetails", model.UpdateContainerScanTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the HostScanRecipe identified by the recipe ID. A recipe determines the types of security issues that you want scanned, and how often to scan.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateHostScanRecipeRequest
     * @return UpdateHostScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/UpdateHostScanRecipe.ts.html |here} to see how to use UpdateHostScanRecipe API.
     */
    updateHostScanRecipe(updateHostScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#updateHostScanRecipe.");
            const operationName = "updateHostScanRecipe";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanRecipe/UpdateHostScanRecipe";
            const pathParams = {
                "{hostScanRecipeId}": updateHostScanRecipeRequest.hostScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateHostScanRecipeRequest.ifMatch,
                "opc-request-id": updateHostScanRecipeRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateHostScanRecipeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes/{hostScanRecipeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateHostScanRecipeRequest.updateHostScanRecipeDetails, "UpdateHostScanRecipeDetails", model.UpdateHostScanRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the HostScanTarget identified by the target ID. A host scan target is a collection of compute instances that you want routinely scanned for security vulnerabilities.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateHostScanTargetRequest
     * @return UpdateHostScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vulnerabilityscanning/UpdateHostScanTarget.ts.html |here} to see how to use UpdateHostScanTarget API.
     */
    updateHostScanTarget(updateHostScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#updateHostScanTarget.");
            const operationName = "updateHostScanTarget";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/scanning/20210215/HostScanTarget/UpdateHostScanTarget";
            const pathParams = {
                "{hostScanTargetId}": updateHostScanTargetRequest.hostScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateHostScanTargetRequest.ifMatch,
                "opc-request-id": updateHostScanTargetRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateHostScanTargetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets/{hostScanTargetId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateHostScanTargetRequest.updateHostScanTargetDetails, "UpdateHostScanTargetDetails", model.UpdateHostScanTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.VulnerabilityScanningClient = VulnerabilityScanningClient;
VulnerabilityScanningClient.serviceEndpointTemplate = "https://vss-cp-api.{region}.oci.{secondLevelDomain}";
VulnerabilityScanningClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map