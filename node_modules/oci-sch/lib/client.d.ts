/**
 * Connector Hub API
 * Use the Connector Hub API to transfer data between services in Oracle Cloud Infrastructure.
For more information about Connector Hub, see
[the Connector Hub documentation](https://docs.oracle.com/iaas/Content/connector-hub/home.htm).
Connector Hub is formerly known as Service Connector Hub.

 * OpenAPI spec version: 20200909
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { ConnectorPluginsWaiter } from "./connectorplugins-waiter";
import { ServiceConnectorWaiter } from "./serviceconnector-waiter";
declare const Breaker: any;
export declare enum ConnectorPluginsApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class ConnectorPluginsClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": ConnectorPluginsWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new ConnectorPluginsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): ConnectorPluginsWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): ConnectorPluginsWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Gets the specified connector plugin configuration information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetConnectorPluginRequest
     * @return GetConnectorPluginResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/GetConnectorPlugin.ts.html |here} to see how to use GetConnectorPlugin API.
     */
    getConnectorPlugin(getConnectorPluginRequest: requests.GetConnectorPluginRequest): Promise<responses.GetConnectorPluginResponse>;
    /**
     * Lists connector plugins according to the specified filter.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListConnectorPluginsRequest
     * @return ListConnectorPluginsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/ListConnectorPlugins.ts.html |here} to see how to use ListConnectorPlugins API.
     */
    listConnectorPlugins(listConnectorPluginsRequest: requests.ListConnectorPluginsRequest): Promise<responses.ListConnectorPluginsResponse>;
}
export declare enum ServiceConnectorApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class ServiceConnectorClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": ServiceConnectorWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new ServiceConnectorWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): ServiceConnectorWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): ServiceConnectorWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
       * Activates the specified connector.
  * <p>
  After you send your request, the connector's state is temporarily
  * UPDATING. When the state changes to ACTIVE, data begins transferring from the
  * source service to the target service.
  * For more information, see
  * [Activating a Connector](https://docs.oracle.com/iaas/Content/connector-hub/activate-service-connector.htm).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ActivateServiceConnectorRequest
       * @return ActivateServiceConnectorResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/ActivateServiceConnector.ts.html |here} to see how to use ActivateServiceConnector API.
       */
    activateServiceConnector(activateServiceConnectorRequest: requests.ActivateServiceConnectorRequest): Promise<responses.ActivateServiceConnectorResponse>;
    /**
       * Moves a connector into a different compartment within the same tenancy.
  * For more information, see
  * [Moving a Connector](https://docs.oracle.com/iaas/Content/connector-hub/change-compartment-service-connector.htm).
  * <p>
  When provided, If-Match is checked against ETag values of the resource.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeServiceConnectorCompartmentRequest
       * @return ChangeServiceConnectorCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/ChangeServiceConnectorCompartment.ts.html |here} to see how to use ChangeServiceConnectorCompartment API.
       */
    changeServiceConnectorCompartment(changeServiceConnectorCompartmentRequest: requests.ChangeServiceConnectorCompartmentRequest): Promise<responses.ChangeServiceConnectorCompartmentResponse>;
    /**
       * Creates a new connector in the specified compartment.
  * A connector is a logically defined flow for moving data from
  * a source service to a destination service in Oracle Cloud Infrastructure.
  * For more information, see
  * [Creating a Connector](https://docs.oracle.com/iaas/Content/connector-hub/create-service-connector.htm).
  * For general information about connectors, see
  * [Overview of Connector Hub](https://docs.oracle.com/iaas/Content/connector-hub/overview.htm).
  * <p>
  For purposes of access control, you must provide the
  * [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where
  * you want the connector to reside. Notice that the connector
  * doesn't have to be in the same compartment as the source or target services.
  * For information about access control and compartments, see
  * [Overview of the IAM Service](https://docs.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * <p>
  After you send your request, the new connector's state is temporarily
  * CREATING. When the state changes to ACTIVE, data begins transferring from the
  * source service to the target service. For instructions on deactivating and
  * activating connectors, see
  * [Activating a Connector](https://docs.oracle.com/iaas/Content/connector-hub/activate-service-connector.htm).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateServiceConnectorRequest
       * @return CreateServiceConnectorResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/CreateServiceConnector.ts.html |here} to see how to use CreateServiceConnector API.
       */
    createServiceConnector(createServiceConnectorRequest: requests.CreateServiceConnectorRequest): Promise<responses.CreateServiceConnectorResponse>;
    /**
       * Deactivates the specified connector.
  * <p>
  After you send your request, the connector's state is temporarily
  * UPDATING and any data transfer stops. The state then changes to INACTIVE.
  * For more information, see
  * [Deactivating a Connector](https://docs.oracle.com/iaas/Content/connector-hub/deactivate-service-connector.htm).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeactivateServiceConnectorRequest
       * @return DeactivateServiceConnectorResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/DeactivateServiceConnector.ts.html |here} to see how to use DeactivateServiceConnector API.
       */
    deactivateServiceConnector(deactivateServiceConnectorRequest: requests.DeactivateServiceConnectorRequest): Promise<responses.DeactivateServiceConnectorResponse>;
    /**
       * Deletes the specified connector.
  * For more information, see
  * [Deleting a Connector](https://docs.oracle.com/iaas/Content/connector-hub/delete-service-connector.htm).
  * <p>
  After you send your request, the connector's state is temporarily
  * DELETING and any data transfer stops. The state then changes to DELETED.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteServiceConnectorRequest
       * @return DeleteServiceConnectorResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/DeleteServiceConnector.ts.html |here} to see how to use DeleteServiceConnector API.
       */
    deleteServiceConnector(deleteServiceConnectorRequest: requests.DeleteServiceConnectorRequest): Promise<responses.DeleteServiceConnectorResponse>;
    /**
     * Gets the specified connector's configuration information.
     * For more information, see
     * [Getting a Connector](https://docs.oracle.com/iaas/Content/connector-hub/get-service-connector.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetServiceConnectorRequest
     * @return GetServiceConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/GetServiceConnector.ts.html |here} to see how to use GetServiceConnector API.
     */
    getServiceConnector(getServiceConnectorRequest: requests.GetServiceConnectorRequest): Promise<responses.GetServiceConnectorResponse>;
    /**
     * Gets the details of the specified work request.
     * For more information, see
     * [Getting a Work Request's Details](https://docs.oracle.com/iaas/Content/connector-hub/get-work-request.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Lists connectors in the specified compartment.
     * For more information, see
     * [Listing Connectors](https://docs.oracle.com/iaas/Content/connector-hub/list-service-connector.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListServiceConnectorsRequest
     * @return ListServiceConnectorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/ListServiceConnectors.ts.html |here} to see how to use ListServiceConnectors API.
     */
    listServiceConnectors(listServiceConnectorsRequest: requests.ListServiceConnectorsRequest): Promise<responses.ListServiceConnectorsResponse>;
    /**
     * Lists work request errors for the specified work request. Results are paginated.
     * For more information, see
     * [Listing Work Request Errors](https://docs.oracle.com/iaas/Content/connector-hub/list-work-request-error.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Lists logs for the specified work request. Results are paginated.
     * For more information, see
     * [Listing Work Request Log Entries](https://docs.oracle.com/iaas/Content/connector-hub/list-work-request-log-entry.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in the specified compartment.
     * For more information, see
     * [Listing Work Requests](https://docs.oracle.com/iaas/Content/connector-hub/list-work-request.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
       * Updates the configuration information for the specified connector.
  * For more information, see
  * [Updating a Connector](https://docs.oracle.com/iaas/Content/connector-hub/update-service-connector.htm).
  * <p>
  After you send your request, the connector's state is temporarily
  * UPDATING and any data transfer pauses. The state then changes back to its
  * original value: if ACTIVE, then data transfer resumes.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateServiceConnectorRequest
       * @return UpdateServiceConnectorResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/sch/UpdateServiceConnector.ts.html |here} to see how to use UpdateServiceConnector API.
       */
    updateServiceConnector(updateServiceConnectorRequest: requests.UpdateServiceConnectorRequest): Promise<responses.UpdateServiceConnectorResponse>;
}
export {};
