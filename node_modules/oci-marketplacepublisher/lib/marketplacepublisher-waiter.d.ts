/**
 * MarketplacePublisherService API
 * Use the Marketplace Publisher API to manage the publishing of applications in Oracle Cloud Infrastructure Marketplace.
 * OpenAPI spec version: 20220901
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { MarketplacePublisherClient } from "./client";
export declare class MarketplacePublisherWaiter {
    private client;
    private readonly config?;
    constructor(client: MarketplacePublisherClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forArtifact till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetArtifactResponse | null (null in case of 404 response)
     */
    forArtifact(request: serviceRequests.GetArtifactRequest, ...targetStates: models.Artifact.LifecycleState[]): Promise<serviceResponses.GetArtifactResponse | null>;
    /**
     * Waits forCategory till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCategoryResponse
     */
    forCategory(request: serviceRequests.GetCategoryRequest, ...targetStates: models.Category.LifecycleState[]): Promise<serviceResponses.GetCategoryResponse>;
    /**
     * Waits forListing till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetListingResponse | null (null in case of 404 response)
     */
    forListing(request: serviceRequests.GetListingRequest, ...targetStates: models.Listing.LifecycleState[]): Promise<serviceResponses.GetListingResponse | null>;
    /**
     * Waits forListingRevision till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetListingRevisionResponse | null (null in case of 404 response)
     */
    forListingRevision(request: serviceRequests.GetListingRevisionRequest, ...targetStates: models.ListingRevision.LifecycleState[]): Promise<serviceResponses.GetListingRevisionResponse | null>;
    /**
     * Waits forListingRevisionAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetListingRevisionAttachmentResponse | null (null in case of 404 response)
     */
    forListingRevisionAttachment(request: serviceRequests.GetListingRevisionAttachmentRequest, ...targetStates: models.ListingRevisionAttachment.LifecycleState[]): Promise<serviceResponses.GetListingRevisionAttachmentResponse | null>;
    /**
     * Waits forListingRevisionNote till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetListingRevisionNoteResponse | null (null in case of 404 response)
     */
    forListingRevisionNote(request: serviceRequests.GetListingRevisionNoteRequest, ...targetStates: models.ListingRevisionNote.LifecycleState[]): Promise<serviceResponses.GetListingRevisionNoteResponse | null>;
    /**
     * Waits forListingRevisionPackage till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetListingRevisionPackageResponse | null (null in case of 404 response)
     */
    forListingRevisionPackage(request: serviceRequests.GetListingRevisionPackageRequest, ...targetStates: models.ListingRevisionPackage.LifecycleState[]): Promise<serviceResponses.GetListingRevisionPackageResponse | null>;
    /**
     * Waits forMarket till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMarketResponse
     */
    forMarket(request: serviceRequests.GetMarketRequest, ...targetStates: models.Market.LifecycleState[]): Promise<serviceResponses.GetMarketResponse>;
    /**
     * Waits forProduct till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetProductResponse
     */
    forProduct(request: serviceRequests.GetProductRequest, ...targetStates: models.Product.LifecycleState[]): Promise<serviceResponses.GetProductResponse>;
    /**
     * Waits forTerm till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTermResponse
     */
    forTerm(request: serviceRequests.GetTermRequest, ...targetStates: models.Term.LifecycleState[]): Promise<serviceResponses.GetTermResponse>;
    /**
     * Waits forTermVersion till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTermVersionResponse
     */
    forTermVersion(request: serviceRequests.GetTermVersionRequest, ...targetStates: models.TermVersion.LifecycleState[]): Promise<serviceResponses.GetTermVersionResponse>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
