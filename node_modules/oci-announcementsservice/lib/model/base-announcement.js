"use strict";
/**
 * Announcements Service API
 * Manage Oracle Cloud Infrastructure console announcements.
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAnnouncement = void 0;
const model = __importStar(require("../model"));
const common = require("oci-common");
var BaseAnnouncement;
(function (BaseAnnouncement) {
    let TimeOneType;
    (function (TimeOneType) {
        TimeOneType["ActionRequiredBy"] = "ACTION_REQUIRED_BY";
        TimeOneType["NewStartTime"] = "NEW_START_TIME";
        TimeOneType["OriginalEndTime"] = "ORIGINAL_END_TIME";
        TimeOneType["ReportDate"] = "REPORT_DATE";
        TimeOneType["StartTime"] = "START_TIME";
        TimeOneType["TimeDetected"] = "TIME_DETECTED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        TimeOneType["UnknownValue"] = "UNKNOWN_VALUE";
    })(TimeOneType = BaseAnnouncement.TimeOneType || (BaseAnnouncement.TimeOneType = {}));
    let TimeTwoType;
    (function (TimeTwoType) {
        TimeTwoType["EndTime"] = "END_TIME";
        TimeTwoType["NewEndTime"] = "NEW_END_TIME";
        TimeTwoType["EstimatedEndTime"] = "ESTIMATED_END_TIME";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        TimeTwoType["UnknownValue"] = "UNKNOWN_VALUE";
    })(TimeTwoType = BaseAnnouncement.TimeTwoType || (BaseAnnouncement.TimeTwoType = {}));
    let AnnouncementType;
    (function (AnnouncementType) {
        AnnouncementType["ActionRecommended"] = "ACTION_RECOMMENDED";
        AnnouncementType["ActionRequired"] = "ACTION_REQUIRED";
        AnnouncementType["EmergencyChange"] = "EMERGENCY_CHANGE";
        AnnouncementType["EmergencyMaintenance"] = "EMERGENCY_MAINTENANCE";
        AnnouncementType["EmergencyMaintenanceComplete"] = "EMERGENCY_MAINTENANCE_COMPLETE";
        AnnouncementType["EmergencyMaintenanceExtended"] = "EMERGENCY_MAINTENANCE_EXTENDED";
        AnnouncementType["EmergencyMaintenanceRescheduled"] = "EMERGENCY_MAINTENANCE_RESCHEDULED";
        AnnouncementType["Information"] = "INFORMATION";
        AnnouncementType["PlannedChange"] = "PLANNED_CHANGE";
        AnnouncementType["PlannedChangeComplete"] = "PLANNED_CHANGE_COMPLETE";
        AnnouncementType["PlannedChangeExtended"] = "PLANNED_CHANGE_EXTENDED";
        AnnouncementType["PlannedChangeRescheduled"] = "PLANNED_CHANGE_RESCHEDULED";
        AnnouncementType["ProductionEventNotification"] = "PRODUCTION_EVENT_NOTIFICATION";
        AnnouncementType["ScheduledMaintenance"] = "SCHEDULED_MAINTENANCE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        AnnouncementType["UnknownValue"] = "UNKNOWN_VALUE";
    })(AnnouncementType = BaseAnnouncement.AnnouncementType || (BaseAnnouncement.AnnouncementType = {}));
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Active"] = "ACTIVE";
        LifecycleState["Inactive"] = "INACTIVE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = BaseAnnouncement.LifecycleState || (BaseAnnouncement.LifecycleState = {}));
    let PlatformType;
    (function (PlatformType) {
        PlatformType["Iaas"] = "IAAS";
        PlatformType["Saas"] = "SAAS";
        PlatformType["Paas"] = "PAAS";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        PlatformType["UnknownValue"] = "UNKNOWN_VALUE";
    })(PlatformType = BaseAnnouncement.PlatformType || (BaseAnnouncement.PlatformType = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "type" in obj && obj.type) {
            switch (obj.type) {
                case "AnnouncementSummary":
                    return model.AnnouncementSummary.getJsonObj(jsonObj, true);
                case "Announcement":
                    return model.Announcement.getJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.type}`);
            }
        }
        return jsonObj;
    }
    BaseAnnouncement.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "type" in obj && obj.type) {
            switch (obj.type) {
                case "AnnouncementSummary":
                    return model.AnnouncementSummary.getDeserializedJsonObj(jsonObj, true);
                case "Announcement":
                    return model.Announcement.getDeserializedJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.type}`);
            }
        }
        return jsonObj;
    }
    BaseAnnouncement.getDeserializedJsonObj = getDeserializedJsonObj;
})(BaseAnnouncement = exports.BaseAnnouncement || (exports.BaseAnnouncement = {}));
//# sourceMappingURL=base-announcement.js.map