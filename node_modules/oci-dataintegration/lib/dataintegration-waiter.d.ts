/**
 * Data Integration API
 * Use the Data Integration API to organize your data integration projects, create data flows, pipelines and tasks, and then publish, schedule, and run tasks that extract, transform, and load data. For more information, see [Data Integration](https://docs.oracle.com/iaas/data-integration/home.htm).
 * OpenAPI spec version: 20200430
 * Contact: di_dis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DataIntegrationClient } from "./client";
export declare class DataIntegrationWaiter {
    private client;
    private readonly config?;
    constructor(client: DataIntegrationClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forApplication till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetApplicationResponse | null (null in case of 404 response)
     */
    forApplication(request: serviceRequests.GetApplicationRequest, ...targetStates: models.Application.LifecycleState[]): Promise<serviceResponses.GetApplicationResponse | null>;
    /**
     * Waits forDependentObject till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDependentObjectResponse | null (null in case of 404 response)
     */
    forDependentObject(request: serviceRequests.GetDependentObjectRequest, ...targetStates: models.DependentObject.LifecycleState[]): Promise<serviceResponses.GetDependentObjectResponse | null>;
    /**
     * Waits forDisApplication till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDisApplicationResponse | null (null in case of 404 response)
     */
    forDisApplication(request: serviceRequests.GetDisApplicationRequest, ...targetStates: models.DisApplication.LifecycleState[]): Promise<serviceResponses.GetDisApplicationResponse | null>;
    /**
     * Waits forTemplate till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTemplateResponse | null (null in case of 404 response)
     */
    forTemplate(request: serviceRequests.GetTemplateRequest, ...targetStates: models.Template.LifecycleState[]): Promise<serviceResponses.GetTemplateResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
    /**
     * Waits forWorkspace till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetWorkspaceResponse | null (null in case of 404 response)
     */
    forWorkspace(request: serviceRequests.GetWorkspaceRequest, ...targetStates: models.Workspace.LifecycleState[]): Promise<serviceResponses.GetWorkspaceResponse | null>;
}
