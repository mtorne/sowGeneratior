/**
 * OneSubscription API Subscription, Commitment and and Rate Card Details
 * Set of APIs that return the Subscription Details, Commitment and Effective Rate Card Details

 * OpenAPI spec version: 20210501
 * Contact: kuaskum_org_ww@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
declare const Breaker: any;
export declare enum CommitmentApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class CommitmentClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * This API returns the commitment details corresponding to the id provided
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetCommitmentRequest
     * @return GetCommitmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osubsubscription/GetCommitment.ts.html |here} to see how to use GetCommitment API.
     */
    getCommitment(getCommitmentRequest: requests.GetCommitmentRequest): Promise<responses.GetCommitmentResponse>;
    /**
     * This list API returns all commitments for a particular Subscribed Service
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListCommitmentsRequest
     * @return ListCommitmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osubsubscription/ListCommitments.ts.html |here} to see how to use ListCommitments API.
     */
    listCommitments(listCommitmentsRequest: requests.ListCommitmentsRequest): Promise<responses.ListCommitmentsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listCommitmentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.CommitmentSummary objects
     * contained in responses from the listCommitments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCommitments(request: requests.ListCommitmentsRequest): AsyncIterableIterator<model.CommitmentSummary>;
    /**
     * NOTE: This function is deprecated in favor of listCommitmentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listCommitments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCommitmentsResponses(request: requests.ListCommitmentsRequest): AsyncIterableIterator<responses.ListCommitmentsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.CommitmentSummary objects
     * contained in responses from the listCommitments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCommitmentsRecordIterator(request: requests.ListCommitmentsRequest): AsyncIterableIterator<model.CommitmentSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCommitments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCommitmentsResponseIterator(request: requests.ListCommitmentsRequest): AsyncIterableIterator<responses.ListCommitmentsResponse>;
}
export declare enum RatecardApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class RatecardClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * List API that returns all ratecards for given Subscription Id and Account ID (if provided) and
     * for a particular date range
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListRateCardsRequest
     * @return ListRateCardsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osubsubscription/ListRateCards.ts.html |here} to see how to use ListRateCards API.
     */
    listRateCards(listRateCardsRequest: requests.ListRateCardsRequest): Promise<responses.ListRateCardsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listRateCardsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.RateCardSummary objects
     * contained in responses from the listRateCards operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRateCards(request: requests.ListRateCardsRequest): AsyncIterableIterator<model.RateCardSummary>;
    /**
     * NOTE: This function is deprecated in favor of listRateCardsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listRateCards operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRateCardsResponses(request: requests.ListRateCardsRequest): AsyncIterableIterator<responses.ListRateCardsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.RateCardSummary objects
     * contained in responses from the listRateCards operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRateCardsRecordIterator(request: requests.ListRateCardsRequest): AsyncIterableIterator<model.RateCardSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listRateCards operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRateCardsResponseIterator(request: requests.ListRateCardsRequest): AsyncIterableIterator<responses.ListRateCardsResponse>;
}
export declare enum SubscriptionApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class SubscriptionClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * This list API returns all subscriptions for a given plan number or subscription id or buyer email
     * and provides additional parameters to include ratecard and commitment details.
     * This API expects exactly one of the above mentioned parameters as input. If more than one parameters are provided the API will throw
     * a 400 - invalid parameters exception and if no parameters are provided it will throw a 400 - missing parameter exception
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSubscriptionsRequest
     * @return ListSubscriptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osubsubscription/ListSubscriptions.ts.html |here} to see how to use ListSubscriptions API.
     */
    listSubscriptions(listSubscriptionsRequest: requests.ListSubscriptionsRequest): Promise<responses.ListSubscriptionsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSubscriptionsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SubscriptionSummary objects
     * contained in responses from the listSubscriptions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSubscriptions(request: requests.ListSubscriptionsRequest): AsyncIterableIterator<model.SubscriptionSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSubscriptionsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSubscriptions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSubscriptionsResponses(request: requests.ListSubscriptionsRequest): AsyncIterableIterator<responses.ListSubscriptionsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SubscriptionSummary objects
     * contained in responses from the listSubscriptions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSubscriptionsRecordIterator(request: requests.ListSubscriptionsRequest): AsyncIterableIterator<model.SubscriptionSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSubscriptions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSubscriptionsResponseIterator(request: requests.ListSubscriptionsRequest): AsyncIterableIterator<responses.ListSubscriptionsResponse>;
}
export {};
