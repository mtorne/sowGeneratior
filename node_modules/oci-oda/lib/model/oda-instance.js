"use strict";
/**
 * Digital Assistant Service Instance API
 * API to create and maintain Oracle Digital Assistant service instances.
 * OpenAPI spec version: 20190506
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OdaInstance = void 0;
const model = __importStar(require("../model"));
var OdaInstance;
(function (OdaInstance) {
    let ShapeName;
    (function (ShapeName) {
        ShapeName["Development"] = "DEVELOPMENT";
        ShapeName["Production"] = "PRODUCTION";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ShapeName["UnknownValue"] = "UNKNOWN_VALUE";
    })(ShapeName = OdaInstance.ShapeName || (OdaInstance.ShapeName = {}));
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Creating"] = "CREATING";
        LifecycleState["Updating"] = "UPDATING";
        LifecycleState["Active"] = "ACTIVE";
        LifecycleState["Inactive"] = "INACTIVE";
        LifecycleState["Deleting"] = "DELETING";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = OdaInstance.LifecycleState || (OdaInstance.LifecycleState = {}));
    let LifecycleSubState;
    (function (LifecycleSubState) {
        LifecycleSubState["Creating"] = "CREATING";
        LifecycleSubState["Starting"] = "STARTING";
        LifecycleSubState["Stopping"] = "STOPPING";
        LifecycleSubState["ChangingCompartment"] = "CHANGING_COMPARTMENT";
        LifecycleSubState["ActivatingCustomerEncryptionKey"] = "ACTIVATING_CUSTOMER_ENCRYPTION_KEY";
        LifecycleSubState["UpdatingCustomerEncryptionKey"] = "UPDATING_CUSTOMER_ENCRYPTION_KEY";
        LifecycleSubState["DeactivatingCustomerEncryptionKey"] = "DEACTIVATING_CUSTOMER_ENCRYPTION_KEY";
        LifecycleSubState["Deleting"] = "DELETING";
        LifecycleSubState["DeletePending"] = "DELETE_PENDING";
        LifecycleSubState["Recovering"] = "RECOVERING";
        LifecycleSubState["Updating"] = "UPDATING";
        LifecycleSubState["Purging"] = "PURGING";
        LifecycleSubState["Queued"] = "QUEUED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleSubState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleSubState = OdaInstance.LifecycleSubState || (OdaInstance.LifecycleSubState = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "restrictedOperations": obj.restrictedOperations
                ? obj.restrictedOperations.map(item => {
                    return model.RestrictedOperation.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    OdaInstance.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "restrictedOperations": obj.restrictedOperations
                ? obj.restrictedOperations.map(item => {
                    return model.RestrictedOperation.getDeserializedJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    OdaInstance.getDeserializedJsonObj = getDeserializedJsonObj;
})(OdaInstance = exports.OdaInstance || (exports.OdaInstance = {}));
//# sourceMappingURL=oda-instance.js.map