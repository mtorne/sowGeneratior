/**
 * Digital Assistant Service Instance API
 * API to create and maintain Oracle Digital Assistant service instances.
 * OpenAPI spec version: 20190506
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Description of {@code OdaServiceInstance} object.
 */
export interface OdaInstance {
    /**
     * Unique immutable identifier that was assigned when the instance was created.
     */
    "id": string;
    /**
     * User-defined name for the Digital Assistant instance. Avoid entering confidential information.
     * You can change this value.
     *
     */
    "displayName"?: string;
    /**
     * Description of the Digital Assistant instance.
     */
    "description"?: string;
    /**
     * Identifier of the compartment that the instance belongs to.
     */
    "compartmentId": string;
    /**
     * Shape or size of the instance.
     */
    "shapeName": OdaInstance.ShapeName;
    /**
     * URL for the Digital Assistant web application that's associated with the instance.
     */
    "webAppUrl"?: string;
    /**
     * URL for the connector's endpoint.
     */
    "connectorUrl"?: string;
    /**
     * When the Digital Assistant instance was created. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
     */
    "timeCreated"?: Date;
    /**
     * When the Digital Assistance instance was last updated. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
     */
    "timeUpdated"?: Date;
    /**
     * The current state of the Digital Assistant instance.
     */
    "lifecycleState"?: OdaInstance.LifecycleState;
    /**
     * The current sub-state of the Digital Assistant instance.
     */
    "lifecycleSubState"?: OdaInstance.LifecycleSubState;
    /**
     * A message that describes the current state in more detail.
     * For example, actionable information about an instance that's in the {@code FAILED} state.
     *
     */
    "stateMessage"?: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type, or scope.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Usage of predefined tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Should this Digital Assistant instance use role-based authorization via an identity domain (true) or use the default policy-based authorization via IAM policies (false)
     */
    "isRoleBasedAccess"?: boolean;
    /**
     * If isRoleBasedAccess is set to true, this property specifies the identity domain that is to be used to implement this type of authorzation. Digital Assistant will create an Identity Application instance and Application Roles within this identity domain. The caller may then perform and user roll mappings they like to grant access to users within the identity domain.
     */
    "identityDomain"?: string;
    /**
     * If isRoleBasedAccess is set to true, this property specifies the GUID of the Identity Application instance Digital Assistant has created inside the user-specified identity domain. This identity application instance may be used to host user roll mappings to grant access to this Digital Assistant instance for users within the identity domain.
     */
    "identityAppGuid"?: string;
    /**
     * If isRoleBasedAccess is set to true, this property specifies the URL for the administration console used to manage the Identity Application instance Digital Assistant has created inside the user-specified identity domain.
     */
    "identityAppConsoleUrl"?: string;
    /**
     * A list of package names imported into this instance (if any). Use importedPackageIds field to get the details of the imported packages.
     */
    "importedPackageNames"?: Array<string>;
    /**
     * A list of package ids imported into this instance (if any). Use GetImportedPackage to get the details of the imported packages.
     */
    "importedPackageIds"?: Array<string>;
    /**
     * A list of attachment types for this instance (if any). Use attachmentIds to get the details of the attachments.
     */
    "attachmentTypes"?: Array<string>;
    /**
     * A list of attachment identifiers for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
     */
    "attachmentIds"?: Array<string>;
    /**
     * A list of restricted operations (across all attachments) for this instance (if any). Use GetOdaInstanceAttachment to get the details of the attachments.
     */
    "restrictedOperations"?: Array<model.RestrictedOperation>;
}
export declare namespace OdaInstance {
    enum ShapeName {
        Development = "DEVELOPMENT",
        Production = "PRODUCTION",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum LifecycleState {
        Creating = "CREATING",
        Updating = "UPDATING",
        Active = "ACTIVE",
        Inactive = "INACTIVE",
        Deleting = "DELETING",
        Deleted = "DELETED",
        Failed = "FAILED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum LifecycleSubState {
        Creating = "CREATING",
        Starting = "STARTING",
        Stopping = "STOPPING",
        ChangingCompartment = "CHANGING_COMPARTMENT",
        ActivatingCustomerEncryptionKey = "ACTIVATING_CUSTOMER_ENCRYPTION_KEY",
        UpdatingCustomerEncryptionKey = "UPDATING_CUSTOMER_ENCRYPTION_KEY",
        DeactivatingCustomerEncryptionKey = "DEACTIVATING_CUSTOMER_ENCRYPTION_KEY",
        Deleting = "DELETING",
        DeletePending = "DELETE_PENDING",
        Recovering = "RECOVERING",
        Updating = "UPDATING",
        Purging = "PURGING",
        Queued = "QUEUED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: OdaInstance): object;
    function getDeserializedJsonObj(obj: OdaInstance): object;
}
