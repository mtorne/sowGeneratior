/**
 * Digital Assistant Service Instance API
 * API to create and maintain Oracle Digital Assistant service instances.
 * OpenAPI spec version: 20190506
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ManagementClient } from "./client";
export declare class ManagementWaiter {
    private client;
    private readonly config?;
    constructor(client: ManagementClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAuthenticationProvider till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAuthenticationProviderResponse | null (null in case of 404 response)
     */
    forAuthenticationProvider(request: serviceRequests.GetAuthenticationProviderRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetAuthenticationProviderResponse | null>;
    /**
     * Waits forChannel till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetChannelResponse | null (null in case of 404 response)
     */
    forChannel(request: serviceRequests.GetChannelRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetChannelResponse | null>;
    /**
     * Waits forDigitalAssistant till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDigitalAssistantResponse | null (null in case of 404 response)
     */
    forDigitalAssistant(request: serviceRequests.GetDigitalAssistantRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDigitalAssistantResponse | null>;
    /**
     * Waits forDigitalAssistantParameter till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDigitalAssistantParameterResponse | null (null in case of 404 response)
     */
    forDigitalAssistantParameter(request: serviceRequests.GetDigitalAssistantParameterRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDigitalAssistantParameterResponse | null>;
    /**
     * Waits forOdaPrivateEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOdaPrivateEndpointResponse | null (null in case of 404 response)
     */
    forOdaPrivateEndpoint(request: serviceRequests.GetOdaPrivateEndpointRequest, ...targetStates: models.OdaPrivateEndpoint.LifecycleState[]): Promise<serviceResponses.GetOdaPrivateEndpointResponse | null>;
    /**
     * Waits forOdaPrivateEndpointAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOdaPrivateEndpointAttachmentResponse | null (null in case of 404 response)
     */
    forOdaPrivateEndpointAttachment(request: serviceRequests.GetOdaPrivateEndpointAttachmentRequest, ...targetStates: models.OdaPrivateEndpointAttachment.LifecycleState[]): Promise<serviceResponses.GetOdaPrivateEndpointAttachmentResponse | null>;
    /**
     * Waits forOdaPrivateEndpointScanProxy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOdaPrivateEndpointScanProxyResponse | null (null in case of 404 response)
     */
    forOdaPrivateEndpointScanProxy(request: serviceRequests.GetOdaPrivateEndpointScanProxyRequest, ...targetStates: models.OdaPrivateEndpointScanProxy.LifecycleState[]): Promise<serviceResponses.GetOdaPrivateEndpointScanProxyResponse | null>;
    /**
     * Waits forSkill till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSkillResponse | null (null in case of 404 response)
     */
    forSkill(request: serviceRequests.GetSkillRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetSkillResponse | null>;
    /**
     * Waits forSkillParameter till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSkillParameterResponse | null (null in case of 404 response)
     */
    forSkillParameter(request: serviceRequests.GetSkillParameterRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetSkillParameterResponse | null>;
    /**
     * Waits forTranslator till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTranslatorResponse | null (null in case of 404 response)
     */
    forTranslator(request: serviceRequests.GetTranslatorRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetTranslatorResponse | null>;
}
