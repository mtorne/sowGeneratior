/**
 * Usage API
 * Use the Usage API to view your Oracle Cloud usage and costs. The API allows you to request data that meets the specified filter criteria, and to group that data by the chosen dimension. The Usage API is used by [Cost Analysis](https://docs.oracle.com/iaas/Content/Billing/Concepts/costanalysisoverview.htm), [Scheduled Reports](https://docs.oracle.com/iaas/Content/Billing/Concepts/scheduledreportoverview.htm), and [Carbon Emissions Analysis](https://docs.oracle.com/iaas/Content/General/Concepts/emissions-management.htm) in the Console. Also see [Using the Usage API](https://docs.oracle.com/iaas/Content/Billing/Concepts/costanalysisoverview.htm#cost_analysis_using_the_api) for more information.
 * OpenAPI spec version: 20200107
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Details for the '/usage' query.
 */
export interface RequestSummarizedUsagesDetails {
    /**
     * Tenant ID.
     */
    "tenantId": string;
    /**
     * The usage start time.
     */
    "timeUsageStarted": Date;
    /**
     * The usage end time.
     */
    "timeUsageEnded": Date;
    /**
     * The usage granularity.
     * HOURLY - Hourly data aggregation.
     * DAILY - Daily data aggregation.
     * MONTHLY - Monthly data aggregation.
     * TOTAL - Not yet supported.
     *
     */
    "granularity": RequestSummarizedUsagesDetails.Granularity;
    /**
     * Specifies whether aggregated by time. If isAggregateByTime is true, all usage or cost over the query time period will be added up.
     */
    "isAggregateByTime"?: boolean;
    "forecast"?: model.Forecast;
    /**
     * The query usage type. COST by default if it is missing.
     * Usage - Query the usage data.
     * Cost - Query the cost/billing data.
     * Credit - Query the credit adjustments data.
     * ExpiredCredit - Query the expired credits data.
     * AllCredit - Query the credit adjustments and expired credit.
     *
     */
    "queryType"?: RequestSummarizedUsagesDetails.QueryType;
    /**
     * Aggregate the result by.
     * For example:
     *   {@code [\"tagNamespace\", \"tagKey\", \"tagValue\", \"service\", \"skuName\", \"skuPartNumber\", \"unit\",
     *     \"compartmentName\", \"compartmentPath\", \"compartmentId\", \"platform\", \"region\", \"logicalAd\",
     *     \"resourceId\", \"tenantId\", \"tenantName\"]}
     *
     */
    "groupBy"?: Array<string>;
    /**
     * GroupBy a specific tagKey. Provide the tagNamespace and tagKey in the tag object. Only supports one tag in the list.
     * For example:
     *   {@code [{\"namespace\":\"oracle\", \"key\":\"createdBy\"]}
     *
     */
    "groupByTag"?: Array<model.Tag>;
    /**
     * The compartment depth level. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "compartmentDepth"?: number;
    "filter"?: model.Filter;
}
export declare namespace RequestSummarizedUsagesDetails {
    enum Granularity {
        Hourly = "HOURLY",
        Daily = "DAILY",
        Monthly = "MONTHLY",
        Total = "TOTAL"
    }
    enum QueryType {
        Usage = "USAGE",
        Cost = "COST",
        Credit = "CREDIT",
        Expiredcredit = "EXPIREDCREDIT",
        Allcredit = "ALLCREDIT"
    }
    function getJsonObj(obj: RequestSummarizedUsagesDetails): object;
    function getDeserializedJsonObj(obj: RequestSummarizedUsagesDetails): object;
}
