/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DataSafeWaiter } from "./datasafe-waiter";
declare const Breaker: any;
export declare enum DataSafeApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DataSafeClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DataSafeWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DataSafeWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DataSafeWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DataSafeWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Reactivates a previously deactivated Data Safe target database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ActivateTargetDatabaseRequest
     * @return ActivateTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ActivateTargetDatabase.ts.html |here} to see how to use ActivateTargetDatabase API.
     */
    activateTargetDatabase(activateTargetDatabaseRequest: requests.ActivateTargetDatabaseRequest): Promise<responses.ActivateTargetDatabaseResponse>;
    /**
     * Adds columns to the specified masking policy from the associated sensitive data model. It
     * automatically pulls all the sensitive columns and their relationships from the sensitive
     * data model and uses this information to create columns in the masking policy. It also assigns
     * default masking formats to these columns based on the associated sensitive types.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddMaskingColumnsFromSdmRequest
     * @return AddMaskingColumnsFromSdmResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/AddMaskingColumnsFromSdm.ts.html |here} to see how to use AddMaskingColumnsFromSdm API.
     */
    addMaskingColumnsFromSdm(addMaskingColumnsFromSdmRequest: requests.AddMaskingColumnsFromSdmRequest): Promise<responses.AddMaskingColumnsFromSdmResponse>;
    /**
     * Updates alerts in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AlertsUpdateRequest
     * @return AlertsUpdateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/AlertsUpdate.ts.html |here} to see how to use AlertsUpdate API.
     */
    alertsUpdate(alertsUpdateRequest: requests.AlertsUpdateRequest): Promise<responses.AlertsUpdateResponse>;
    /**
     * Applies the results of a discovery job to the specified sensitive data model. Note that the plannedAction attribute
     * of discovery results is used for processing them. You should first use PatchDiscoveryJobResults to set the plannedAction
     * attribute of the discovery results you want to process. ApplyDiscoveryJobResults automatically reads the plannedAction
     * attribute and updates the sensitive data model to reflect the actions you planned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ApplyDiscoveryJobResultsRequest
     * @return ApplyDiscoveryJobResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ApplyDiscoveryJobResults.ts.html |here} to see how to use ApplyDiscoveryJobResults API.
     */
    applyDiscoveryJobResults(applyDiscoveryJobResultsRequest: requests.ApplyDiscoveryJobResultsRequest): Promise<responses.ApplyDiscoveryJobResultsResponse>;
    /**
     * Applies the difference of a SDM Masking policy difference resource to the specified masking policy. Note that the plannedAction attribute
     * of difference columns is used for processing. You should first use PatchSdmMaskingPolicyDifferenceColumns to set the plannedAction
     * attribute of the difference columns you want to process. ApplySdmMaskingPolicyDifference automatically reads the plannedAction
     * attribute and updates the masking policy to reflect the actions you planned. If the sdmMaskingPolicydifferenceId is not passed, the
     * latest sdmMaskingPolicydifference is used. Note that if the masking policy associated with the SdmMaskingPolicyDifference used for this
     * operation is not associated with the original SDM anymore, this operation won't be allowed.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ApplySdmMaskingPolicyDifferenceRequest
     * @return ApplySdmMaskingPolicyDifferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ApplySdmMaskingPolicyDifference.ts.html |here} to see how to use ApplySdmMaskingPolicyDifference API.
     */
    applySdmMaskingPolicyDifference(applySdmMaskingPolicyDifferenceRequest: requests.ApplySdmMaskingPolicyDifferenceRequest): Promise<responses.ApplySdmMaskingPolicyDifferenceResponse>;
    /**
     * Uploads a sensitive types xml file (also called template) to create new sensitive types.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkCreateSensitiveTypesRequest
     * @return BulkCreateSensitiveTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/BulkCreateSensitiveTypes.ts.html |here} to see how to use BulkCreateSensitiveTypes API.
     */
    bulkCreateSensitiveTypes(bulkCreateSensitiveTypesRequest: requests.BulkCreateSensitiveTypesRequest): Promise<responses.BulkCreateSensitiveTypesResponse>;
    /**
     * Appends the allowedSqls with entries from the logs.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkCreateSqlFirewallAllowedSqlsRequest
     * @return BulkCreateSqlFirewallAllowedSqlsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/BulkCreateSqlFirewallAllowedSqls.ts.html |here} to see how to use BulkCreateSqlFirewallAllowedSqls API.
     */
    bulkCreateSqlFirewallAllowedSqls(bulkCreateSqlFirewallAllowedSqlsRequest: requests.BulkCreateSqlFirewallAllowedSqlsRequest): Promise<responses.BulkCreateSqlFirewallAllowedSqlsResponse>;
    /**
     * Delete multiple allowed sqls from the SQL firewall policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkDeleteSqlFirewallAllowedSqlsRequest
     * @return BulkDeleteSqlFirewallAllowedSqlsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/BulkDeleteSqlFirewallAllowedSqls.ts.html |here} to see how to use BulkDeleteSqlFirewallAllowedSqls API.
     */
    bulkDeleteSqlFirewallAllowedSqls(bulkDeleteSqlFirewallAllowedSqlsRequest: requests.BulkDeleteSqlFirewallAllowedSqlsRequest): Promise<responses.BulkDeleteSqlFirewallAllowedSqlsResponse>;
    /**
     * Calculates the volume of audit events available on the target database to be collected. Measurable up to the defined retention period of the audit target resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CalculateAuditVolumeAvailableRequest
     * @return CalculateAuditVolumeAvailableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CalculateAuditVolumeAvailable.ts.html |here} to see how to use CalculateAuditVolumeAvailable API.
     */
    calculateAuditVolumeAvailable(calculateAuditVolumeAvailableRequest: requests.CalculateAuditVolumeAvailableRequest): Promise<responses.CalculateAuditVolumeAvailableResponse>;
    /**
     * Calculates the volume of audit events collected by data safe.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CalculateAuditVolumeCollectedRequest
     * @return CalculateAuditVolumeCollectedResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CalculateAuditVolumeCollected.ts.html |here} to see how to use CalculateAuditVolumeCollected API.
     */
    calculateAuditVolumeCollected(calculateAuditVolumeCollectedRequest: requests.CalculateAuditVolumeCollectedRequest): Promise<responses.CalculateAuditVolumeCollectedResponse>;
    /**
     * Cancel the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest: requests.CancelWorkRequestRequest): Promise<responses.CancelWorkRequestResponse>;
    /**
     * Moves the specified alert into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAlertCompartmentRequest
     * @return ChangeAlertCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeAlertCompartment.ts.html |here} to see how to use ChangeAlertCompartment API.
     */
    changeAlertCompartment(changeAlertCompartmentRequest: requests.ChangeAlertCompartmentRequest): Promise<responses.ChangeAlertCompartmentResponse>;
    /**
     * Moves the specified alert policy into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAlertPolicyCompartmentRequest
     * @return ChangeAlertPolicyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeAlertPolicyCompartment.ts.html |here} to see how to use ChangeAlertPolicyCompartment API.
     */
    changeAlertPolicyCompartment(changeAlertPolicyCompartmentRequest: requests.ChangeAlertPolicyCompartmentRequest): Promise<responses.ChangeAlertPolicyCompartmentResponse>;
    /**
     * Moves the archive retreival to the specified compartment. When provided, if-Match is checked against ETag value of the resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAuditArchiveRetrievalCompartmentRequest
     * @return ChangeAuditArchiveRetrievalCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeAuditArchiveRetrievalCompartment.ts.html |here} to see how to use ChangeAuditArchiveRetrievalCompartment API.
     */
    changeAuditArchiveRetrievalCompartment(changeAuditArchiveRetrievalCompartmentRequest: requests.ChangeAuditArchiveRetrievalCompartmentRequest): Promise<responses.ChangeAuditArchiveRetrievalCompartmentResponse>;
    /**
     * Moves the specified audit policy and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAuditPolicyCompartmentRequest
     * @return ChangeAuditPolicyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeAuditPolicyCompartment.ts.html |here} to see how to use ChangeAuditPolicyCompartment API.
     */
    changeAuditPolicyCompartment(changeAuditPolicyCompartmentRequest: requests.ChangeAuditPolicyCompartmentRequest): Promise<responses.ChangeAuditPolicyCompartmentResponse>;
    /**
     * Moves the specified audit profile and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAuditProfileCompartmentRequest
     * @return ChangeAuditProfileCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeAuditProfileCompartment.ts.html |here} to see how to use ChangeAuditProfileCompartment API.
     */
    changeAuditProfileCompartment(changeAuditProfileCompartmentRequest: requests.ChangeAuditProfileCompartmentRequest): Promise<responses.ChangeAuditProfileCompartmentResponse>;
    /**
     * Moves the Data Safe private endpoint and its dependent resources to the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDataSafePrivateEndpointCompartmentRequest
     * @return ChangeDataSafePrivateEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeDataSafePrivateEndpointCompartment.ts.html |here} to see how to use ChangeDataSafePrivateEndpointCompartment API.
     */
    changeDataSafePrivateEndpointCompartment(changeDataSafePrivateEndpointCompartmentRequest: requests.ChangeDataSafePrivateEndpointCompartmentRequest): Promise<responses.ChangeDataSafePrivateEndpointCompartmentResponse>;
    /**
     * Moves the specified database security configuration and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDatabaseSecurityConfigCompartmentRequest
     * @return ChangeDatabaseSecurityConfigCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeDatabaseSecurityConfigCompartment.ts.html |here} to see how to use ChangeDatabaseSecurityConfigCompartment API.
     */
    changeDatabaseSecurityConfigCompartment(changeDatabaseSecurityConfigCompartmentRequest: requests.ChangeDatabaseSecurityConfigCompartmentRequest): Promise<responses.ChangeDatabaseSecurityConfigCompartmentResponse>;
    /**
     * Moves the specified discovery job and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDiscoveryJobCompartmentRequest
     * @return ChangeDiscoveryJobCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeDiscoveryJobCompartment.ts.html |here} to see how to use ChangeDiscoveryJobCompartment API.
     */
    changeDiscoveryJobCompartment(changeDiscoveryJobCompartmentRequest: requests.ChangeDiscoveryJobCompartmentRequest): Promise<responses.ChangeDiscoveryJobCompartmentResponse>;
    /**
     * Moves the specified library masking format into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeLibraryMaskingFormatCompartmentRequest
     * @return ChangeLibraryMaskingFormatCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeLibraryMaskingFormatCompartment.ts.html |here} to see how to use ChangeLibraryMaskingFormatCompartment API.
     */
    changeLibraryMaskingFormatCompartment(changeLibraryMaskingFormatCompartmentRequest: requests.ChangeLibraryMaskingFormatCompartmentRequest): Promise<responses.ChangeLibraryMaskingFormatCompartmentResponse>;
    /**
     * Moves the specified masking policy and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMaskingPolicyCompartmentRequest
     * @return ChangeMaskingPolicyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeMaskingPolicyCompartment.ts.html |here} to see how to use ChangeMaskingPolicyCompartment API.
     */
    changeMaskingPolicyCompartment(changeMaskingPolicyCompartmentRequest: requests.ChangeMaskingPolicyCompartmentRequest): Promise<responses.ChangeMaskingPolicyCompartmentResponse>;
    /**
     * Moves the specified masking policy health report and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMaskingPolicyHealthReportCompartmentRequest
     * @return ChangeMaskingPolicyHealthReportCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeMaskingPolicyHealthReportCompartment.ts.html |here} to see how to use ChangeMaskingPolicyHealthReportCompartment API.
     */
    changeMaskingPolicyHealthReportCompartment(changeMaskingPolicyHealthReportCompartmentRequest: requests.ChangeMaskingPolicyHealthReportCompartmentRequest): Promise<responses.ChangeMaskingPolicyHealthReportCompartmentResponse>;
    /**
     * Moves the specified on-premises connector into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeOnPremConnectorCompartmentRequest
     * @return ChangeOnPremConnectorCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeOnPremConnectorCompartment.ts.html |here} to see how to use ChangeOnPremConnectorCompartment API.
     */
    changeOnPremConnectorCompartment(changeOnPremConnectorCompartmentRequest: requests.ChangeOnPremConnectorCompartmentRequest): Promise<responses.ChangeOnPremConnectorCompartmentResponse>;
    /**
     * Moves a resource into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeReportCompartmentRequest
     * @return ChangeReportCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeReportCompartment.ts.html |here} to see how to use ChangeReportCompartment API.
     */
    changeReportCompartment(changeReportCompartmentRequest: requests.ChangeReportCompartmentRequest): Promise<responses.ChangeReportCompartmentResponse>;
    /**
     * Moves a resource into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeReportDefinitionCompartmentRequest
     * @return ChangeReportDefinitionCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeReportDefinitionCompartment.ts.html |here} to see how to use ChangeReportDefinitionCompartment API.
     */
    changeReportDefinitionCompartment(changeReportDefinitionCompartmentRequest: requests.ChangeReportDefinitionCompartmentRequest): Promise<responses.ChangeReportDefinitionCompartmentResponse>;
    /**
     * Change the online and offline months .
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeRetentionRequest
     * @return ChangeRetentionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeRetention.ts.html |here} to see how to use ChangeRetention API.
     */
    changeRetention(changeRetentionRequest: requests.ChangeRetentionRequest): Promise<responses.ChangeRetentionResponse>;
    /**
     * Moves the specified SDM masking policy difference into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSdmMaskingPolicyDifferenceCompartmentRequest
     * @return ChangeSdmMaskingPolicyDifferenceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSdmMaskingPolicyDifferenceCompartment.ts.html |here} to see how to use ChangeSdmMaskingPolicyDifferenceCompartment API.
     */
    changeSdmMaskingPolicyDifferenceCompartment(changeSdmMaskingPolicyDifferenceCompartmentRequest: requests.ChangeSdmMaskingPolicyDifferenceCompartmentRequest): Promise<responses.ChangeSdmMaskingPolicyDifferenceCompartmentResponse>;
    /**
       * Moves the specified saved security assessment or future scheduled assessments into a different compartment.
  * <p>
  To start, call first the operation ListSecurityAssessments with filters \"type = save_schedule\". This returns the scheduleAssessmentId. Then, call this changeCompartment with the scheduleAssessmentId.
  * <p>
  The existing saved security assessments created due to the schedule are not moved. However, all new saves will be associated with the new compartment.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeSecurityAssessmentCompartmentRequest
       * @return ChangeSecurityAssessmentCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSecurityAssessmentCompartment.ts.html |here} to see how to use ChangeSecurityAssessmentCompartment API.
       */
    changeSecurityAssessmentCompartment(changeSecurityAssessmentCompartmentRequest: requests.ChangeSecurityAssessmentCompartmentRequest): Promise<responses.ChangeSecurityAssessmentCompartmentResponse>;
    /**
     * Moves the specified security policy and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSecurityPolicyCompartmentRequest
     * @return ChangeSecurityPolicyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSecurityPolicyCompartment.ts.html |here} to see how to use ChangeSecurityPolicyCompartment API.
     */
    changeSecurityPolicyCompartment(changeSecurityPolicyCompartmentRequest: requests.ChangeSecurityPolicyCompartmentRequest): Promise<responses.ChangeSecurityPolicyCompartmentResponse>;
    /**
     * Moves the specified security policy deployment and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSecurityPolicyDeploymentCompartmentRequest
     * @return ChangeSecurityPolicyDeploymentCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSecurityPolicyDeploymentCompartment.ts.html |here} to see how to use ChangeSecurityPolicyDeploymentCompartment API.
     */
    changeSecurityPolicyDeploymentCompartment(changeSecurityPolicyDeploymentCompartmentRequest: requests.ChangeSecurityPolicyDeploymentCompartmentRequest): Promise<responses.ChangeSecurityPolicyDeploymentCompartmentResponse>;
    /**
     * Moves the specified sensitive data model and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSensitiveDataModelCompartmentRequest
     * @return ChangeSensitiveDataModelCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSensitiveDataModelCompartment.ts.html |here} to see how to use ChangeSensitiveDataModelCompartment API.
     */
    changeSensitiveDataModelCompartment(changeSensitiveDataModelCompartmentRequest: requests.ChangeSensitiveDataModelCompartmentRequest): Promise<responses.ChangeSensitiveDataModelCompartmentResponse>;
    /**
     * Moves the specified sensitive type into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSensitiveTypeCompartmentRequest
     * @return ChangeSensitiveTypeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSensitiveTypeCompartment.ts.html |here} to see how to use ChangeSensitiveTypeCompartment API.
     */
    changeSensitiveTypeCompartment(changeSensitiveTypeCompartmentRequest: requests.ChangeSensitiveTypeCompartmentRequest): Promise<responses.ChangeSensitiveTypeCompartmentResponse>;
    /**
     * Moves the sensitive type group to the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSensitiveTypeGroupCompartmentRequest
     * @return ChangeSensitiveTypeGroupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSensitiveTypeGroupCompartment.ts.html |here} to see how to use ChangeSensitiveTypeGroupCompartment API.
     */
    changeSensitiveTypeGroupCompartment(changeSensitiveTypeGroupCompartmentRequest: requests.ChangeSensitiveTypeGroupCompartmentRequest): Promise<responses.ChangeSensitiveTypeGroupCompartmentResponse>;
    /**
     * Moves the specified sensitive types export into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSensitiveTypesExportCompartmentRequest
     * @return ChangeSensitiveTypesExportCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSensitiveTypesExportCompartment.ts.html |here} to see how to use ChangeSensitiveTypesExportCompartment API.
     */
    changeSensitiveTypesExportCompartment(changeSensitiveTypesExportCompartmentRequest: requests.ChangeSensitiveTypesExportCompartmentRequest): Promise<responses.ChangeSensitiveTypesExportCompartmentResponse>;
    /**
     * Moves the specified SQL collection and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSqlCollectionCompartmentRequest
     * @return ChangeSqlCollectionCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSqlCollectionCompartment.ts.html |here} to see how to use ChangeSqlCollectionCompartment API.
     */
    changeSqlCollectionCompartment(changeSqlCollectionCompartmentRequest: requests.ChangeSqlCollectionCompartmentRequest): Promise<responses.ChangeSqlCollectionCompartmentResponse>;
    /**
     * Moves the specified SQL Firewall policy and its dependent resources into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSqlFirewallPolicyCompartmentRequest
     * @return ChangeSqlFirewallPolicyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeSqlFirewallPolicyCompartment.ts.html |here} to see how to use ChangeSqlFirewallPolicyCompartment API.
     */
    changeSqlFirewallPolicyCompartment(changeSqlFirewallPolicyCompartmentRequest: requests.ChangeSqlFirewallPolicyCompartmentRequest): Promise<responses.ChangeSqlFirewallPolicyCompartmentResponse>;
    /**
     * Moves the specified target-alert policy Association into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeTargetAlertPolicyAssociationCompartmentRequest
     * @return ChangeTargetAlertPolicyAssociationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeTargetAlertPolicyAssociationCompartment.ts.html |here} to see how to use ChangeTargetAlertPolicyAssociationCompartment API.
     */
    changeTargetAlertPolicyAssociationCompartment(changeTargetAlertPolicyAssociationCompartmentRequest: requests.ChangeTargetAlertPolicyAssociationCompartmentRequest): Promise<responses.ChangeTargetAlertPolicyAssociationCompartmentResponse>;
    /**
     * Moves the Data Safe target database to the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeTargetDatabaseCompartmentRequest
     * @return ChangeTargetDatabaseCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeTargetDatabaseCompartment.ts.html |here} to see how to use ChangeTargetDatabaseCompartment API.
     */
    changeTargetDatabaseCompartment(changeTargetDatabaseCompartmentRequest: requests.ChangeTargetDatabaseCompartmentRequest): Promise<responses.ChangeTargetDatabaseCompartmentResponse>;
    /**
     * Moves the specified saved user assessment or future scheduled assessments into a different compartment.
     * To start storing scheduled user assessments on a different compartment, first call the operation ListUserAssessments with
     * the filters \"type = save_schedule\". That call returns the scheduleAssessmentId. Then call
     * ChangeUserAssessmentCompartment with the scheduleAssessmentId. The existing saved user assessments created per the schedule
     * are not be moved. However, all new saves will be associated with the new compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeUserAssessmentCompartmentRequest
     * @return ChangeUserAssessmentCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ChangeUserAssessmentCompartment.ts.html |here} to see how to use ChangeUserAssessmentCompartment API.
     */
    changeUserAssessmentCompartment(changeUserAssessmentCompartmentRequest: requests.ChangeUserAssessmentCompartmentRequest): Promise<responses.ChangeUserAssessmentCompartmentResponse>;
    /**
     * Compares two security assessments. For this comparison, a security assessment can be a saved assessment, a latest assessment, or a baseline assessment.
     * For example, you can compare saved assessment or a latest assessment against a baseline.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CompareSecurityAssessmentRequest
     * @return CompareSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CompareSecurityAssessment.ts.html |here} to see how to use CompareSecurityAssessment API.
     */
    compareSecurityAssessment(compareSecurityAssessmentRequest: requests.CompareSecurityAssessmentRequest): Promise<responses.CompareSecurityAssessmentResponse>;
    /**
     * Compares two user assessments. For this comparison, a user assessment can be a saved, a latest assessment, or a baseline.
     * As an example, it can be used to compare a user assessment saved or a latest assessment with a baseline.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CompareUserAssessmentRequest
     * @return CompareUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CompareUserAssessment.ts.html |here} to see how to use CompareUserAssessment API.
     */
    compareUserAssessment(compareUserAssessmentRequest: requests.CompareUserAssessmentRequest): Promise<responses.CompareUserAssessmentResponse>;
    /**
     * Creates a new user-defined alert policy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAlertPolicyRequest
     * @return CreateAlertPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateAlertPolicy.ts.html |here} to see how to use CreateAlertPolicy API.
     */
    createAlertPolicy(createAlertPolicyRequest: requests.CreateAlertPolicyRequest): Promise<responses.CreateAlertPolicyResponse>;
    /**
     * Creates a new rule for the alert policy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAlertPolicyRuleRequest
     * @return CreateAlertPolicyRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateAlertPolicyRule.ts.html |here} to see how to use CreateAlertPolicyRule API.
     */
    createAlertPolicyRule(createAlertPolicyRuleRequest: requests.CreateAlertPolicyRuleRequest): Promise<responses.CreateAlertPolicyRuleResponse>;
    /**
     * Creates a work request to retrieve archived audit data. This asynchronous process will usually take over an hour to complete.
     * Save the id from the response of this operation. Call GetAuditArchiveRetrieval operation after an hour, passing the id to know the status of
     * this operation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAuditArchiveRetrievalRequest
     * @return CreateAuditArchiveRetrievalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateAuditArchiveRetrieval.ts.html |here} to see how to use CreateAuditArchiveRetrieval API.
     */
    createAuditArchiveRetrieval(createAuditArchiveRetrievalRequest: requests.CreateAuditArchiveRetrievalRequest): Promise<responses.CreateAuditArchiveRetrievalResponse>;
    /**
     * Creates a new Data Safe private endpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDataSafePrivateEndpointRequest
     * @return CreateDataSafePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateDataSafePrivateEndpoint.ts.html |here} to see how to use CreateDataSafePrivateEndpoint API.
     */
    createDataSafePrivateEndpoint(createDataSafePrivateEndpointRequest: requests.CreateDataSafePrivateEndpointRequest): Promise<responses.CreateDataSafePrivateEndpointResponse>;
    /**
     * Performs incremental data discovery for the specified sensitive data model. It uses the target database associated
     * with the sensitive data model.
     * After performing data discovery, you can use ListDiscoveryJobResults to view the discovery results, PatchDiscoveryJobResults
     * to specify the action you want perform on these results, and then ApplyDiscoveryJobResults to process the results
     * and apply them to the sensitive data model.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDiscoveryJobRequest
     * @return CreateDiscoveryJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateDiscoveryJob.ts.html |here} to see how to use CreateDiscoveryJob API.
     */
    createDiscoveryJob(createDiscoveryJobRequest: requests.CreateDiscoveryJobRequest): Promise<responses.CreateDiscoveryJobResponse>;
    /**
     * Creates a new library masking format. A masking format can have one or more
     * format entries. The combined output of all the format entries is used for masking.
     * It provides the flexibility to define a masking format that can generate different
     * parts of a data value separately and then combine them to get the final data value
     * for masking. Note that you cannot define masking condition in a library masking format.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateLibraryMaskingFormatRequest
     * @return CreateLibraryMaskingFormatResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateLibraryMaskingFormat.ts.html |here} to see how to use CreateLibraryMaskingFormat API.
     */
    createLibraryMaskingFormat(createLibraryMaskingFormatRequest: requests.CreateLibraryMaskingFormatRequest): Promise<responses.CreateLibraryMaskingFormatResponse>;
    /**
       * Creates a new masking column in the specified masking policy. Use this operation
  * to add parent columns only. It automatically adds the child columns from the
  * associated sensitive data model or target database. If you provide the
  * sensitiveTypeId attribute but not the maskingFormats attribute, it automatically
  * assigns the default masking format associated with the specified sensitive type.
  * Alternatively, if you provide the maskingFormats attribute, the specified masking
  * formats are assigned to the column.
  * <p>
  Using the maskingFormats attribute, you can assign one or more masking formats
  * to a column. You need to specify a condition as part of each masking format. It
  * enables you to do <a href=\"https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html\">conditional masking</a>
  * so that you can mask the column data values differently using different
  * masking conditions. A masking format can have one or more format entries. The
  * combined output of all the format entries is used for masking. It provides the
  * flexibility to define a masking format that can generate different parts of a data
  * value separately and then combine them to get the final data value for masking.
  * <p>
  You can use the maskingColumnGroup attribute to group the columns that you would
  * like to mask together. It enables you to do <a href=\"https://docs.oracle.com/en/cloud/paas/data-safe/udscs/group-masking1.html#GUID-755056B9-9540-48C0-9491-262A44A85037\">group or compound masking</a> that ensures that the
  * masked data across the columns in a group continue to retain the same logical relationship.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateMaskingColumnRequest
       * @return CreateMaskingColumnResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateMaskingColumn.ts.html |here} to see how to use CreateMaskingColumn API.
       */
    createMaskingColumn(createMaskingColumnRequest: requests.CreateMaskingColumnRequest): Promise<responses.CreateMaskingColumnResponse>;
    /**
       * Creates a new masking policy and associates it with a sensitive data model or a target database.
  * <p>
  To use a sensitive data model as the source of masking columns, set the columnSource attribute to
  * SENSITIVE_DATA_MODEL and provide the sensitiveDataModelId attribute. After creating a masking policy,
  * you can use the AddMaskingColumnsFromSdm operation to automatically add all the columns from
  * the associated sensitive data model. In this case, the target database associated with the
  * sensitive data model is used for column and masking format validations.
  * <p>
  You can also create a masking policy without using a sensitive data model. In this case,
  * you need to associate your masking policy with a target database by setting the columnSource
  * attribute to TARGET and providing the targetId attribute. The specified target database
  * is used for column and masking format validations.
  * <p>
  After creating a masking policy, you can use the CreateMaskingColumn or PatchMaskingColumns
  * operation to manually add columns to the policy. You need to add the parent columns only,
  * and it automatically adds the child columns (in referential relationship with the parent columns)
  * from the associated sensitive data model or target database.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateMaskingPolicyRequest
       * @return CreateMaskingPolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateMaskingPolicy.ts.html |here} to see how to use CreateMaskingPolicy API.
       */
    createMaskingPolicy(createMaskingPolicyRequest: requests.CreateMaskingPolicyRequest): Promise<responses.CreateMaskingPolicyResponse>;
    /**
     * Creates a new on-premises connector.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOnPremConnectorRequest
     * @return CreateOnPremConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateOnPremConnector.ts.html |here} to see how to use CreateOnPremConnector API.
     */
    createOnPremConnector(createOnPremConnectorRequest: requests.CreateOnPremConnectorRequest): Promise<responses.CreateOnPremConnectorResponse>;
    /**
     * Creates the peer target database under the primary target database in Data Safe.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreatePeerTargetDatabaseRequest
     * @return CreatePeerTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreatePeerTargetDatabase.ts.html |here} to see how to use CreatePeerTargetDatabase API.
     */
    createPeerTargetDatabase(createPeerTargetDatabaseRequest: requests.CreatePeerTargetDatabaseRequest): Promise<responses.CreatePeerTargetDatabaseResponse>;
    /**
     * Creates a new referential relation in the specified sensitive data model.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateReferentialRelationRequest
     * @return CreateReferentialRelationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateReferentialRelation.ts.html |here} to see how to use CreateReferentialRelation API.
     */
    createReferentialRelation(createReferentialRelationRequest: requests.CreateReferentialRelationRequest): Promise<responses.CreateReferentialRelationResponse>;
    /**
     * Creates a new report definition with parameters specified in the body. The report definition is stored in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateReportDefinitionRequest
     * @return CreateReportDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateReportDefinition.ts.html |here} to see how to use CreateReportDefinition API.
     */
    createReportDefinition(createReportDefinitionRequest: requests.CreateReportDefinitionRequest): Promise<responses.CreateReportDefinitionResponse>;
    /**
     * Creates SDM masking policy difference for the specified masking policy. It finds the difference between
     * masking columns of the masking policy and sensitive columns of the SDM. After performing this operation,
     * you can use ListDifferenceColumns to view the difference columns, PatchSdmMaskingPolicyDifferenceColumns
     * to specify the action you want perform on these columns, and then ApplySdmMaskingPolicyDifference to process the
     * difference columns and apply them to the masking policy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSdmMaskingPolicyDifferenceRequest
     * @return CreateSdmMaskingPolicyDifferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSdmMaskingPolicyDifference.ts.html |here} to see how to use CreateSdmMaskingPolicyDifference API.
     */
    createSdmMaskingPolicyDifference(createSdmMaskingPolicyDifferenceRequest: requests.CreateSdmMaskingPolicyDifferenceRequest): Promise<responses.CreateSdmMaskingPolicyDifferenceResponse>;
    /**
     * Creates a new saved security assessment for one or multiple targets in a compartment. When this operation is performed,
     * it will save the latest assessments in the specified compartment. If a schedule is passed, it will persist the latest assessments,
     * at the defined date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSecurityAssessmentRequest
     * @return CreateSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSecurityAssessment.ts.html |here} to see how to use CreateSecurityAssessment API.
     */
    createSecurityAssessment(createSecurityAssessmentRequest: requests.CreateSecurityAssessmentRequest): Promise<responses.CreateSecurityAssessmentResponse>;
    /**
     * Creates a new sensitive column in the specified sensitive data model.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSensitiveColumnRequest
     * @return CreateSensitiveColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSensitiveColumn.ts.html |here} to see how to use CreateSensitiveColumn API.
     */
    createSensitiveColumn(createSensitiveColumnRequest: requests.CreateSensitiveColumnRequest): Promise<responses.CreateSensitiveColumnResponse>;
    /**
     * Creates a new sensitive data model. If schemas and sensitive types are provided, it automatically runs data discovery
     * and adds the discovered columns to the sensitive data model. Otherwise, it creates an empty sensitive data model
     * that can be updated later.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSensitiveDataModelRequest
     * @return CreateSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSensitiveDataModel.ts.html |here} to see how to use CreateSensitiveDataModel API.
     */
    createSensitiveDataModel(createSensitiveDataModelRequest: requests.CreateSensitiveDataModelRequest): Promise<responses.CreateSensitiveDataModelResponse>;
    /**
     * Creates a new sensitive type, which can be a basic sensitive type with regular expressions or a sensitive category.
     * While sensitive types are used for data discovery, sensitive categories are used for logically grouping the related
     * or similar sensitive types.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSensitiveTypeRequest
     * @return CreateSensitiveTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSensitiveType.ts.html |here} to see how to use CreateSensitiveType API.
     */
    createSensitiveType(createSensitiveTypeRequest: requests.CreateSensitiveTypeRequest): Promise<responses.CreateSensitiveTypeResponse>;
    /**
     * Creates a new sensitive type group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSensitiveTypeGroupRequest
     * @return CreateSensitiveTypeGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSensitiveTypeGroup.ts.html |here} to see how to use CreateSensitiveTypeGroup API.
     */
    createSensitiveTypeGroup(createSensitiveTypeGroupRequest: requests.CreateSensitiveTypeGroupRequest): Promise<responses.CreateSensitiveTypeGroupResponse>;
    /**
     * Generates a downloadable file corresponding to the specified list of sensitive types. It's a prerequisite for the
     * DownloadSensitiveTypesExport operation. Use this endpoint to generate a sensitive Types Export file and then use
     * DownloadSensitiveTypesExport to download the generated file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSensitiveTypesExportRequest
     * @return CreateSensitiveTypesExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSensitiveTypesExport.ts.html |here} to see how to use CreateSensitiveTypesExport API.
     */
    createSensitiveTypesExport(createSensitiveTypesExportRequest: requests.CreateSensitiveTypesExportRequest): Promise<responses.CreateSensitiveTypesExportResponse>;
    /**
     * Creates a new SQL collection resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSqlCollectionRequest
     * @return CreateSqlCollectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateSqlCollection.ts.html |here} to see how to use CreateSqlCollection API.
     */
    createSqlCollection(createSqlCollectionRequest: requests.CreateSqlCollectionRequest): Promise<responses.CreateSqlCollectionResponse>;
    /**
     * Creates a new target-alert policy association to track a alert policy applied on target.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateTargetAlertPolicyAssociationRequest
     * @return CreateTargetAlertPolicyAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateTargetAlertPolicyAssociation.ts.html |here} to see how to use CreateTargetAlertPolicyAssociation API.
     */
    createTargetAlertPolicyAssociation(createTargetAlertPolicyAssociationRequest: requests.CreateTargetAlertPolicyAssociationRequest): Promise<responses.CreateTargetAlertPolicyAssociationResponse>;
    /**
     * Registers the specified database with Data Safe and creates a Data Safe target database in the Data Safe Console.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateTargetDatabaseRequest
     * @return CreateTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateTargetDatabase.ts.html |here} to see how to use CreateTargetDatabase API.
     */
    createTargetDatabase(createTargetDatabaseRequest: requests.CreateTargetDatabaseRequest): Promise<responses.CreateTargetDatabaseResponse>;
    /**
     * Creates a new saved user assessment for one or multiple targets in a compartment. It saves the latest assessments in the
     * specified compartment. If a scheduled is passed in, this operation persists the latest assessments that exist at the defined
     * date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateUserAssessmentRequest
     * @return CreateUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/CreateUserAssessment.ts.html |here} to see how to use CreateUserAssessment API.
     */
    createUserAssessment(createUserAssessmentRequest: requests.CreateUserAssessmentRequest): Promise<responses.CreateUserAssessmentResponse>;
    /**
     * Deactivates a target database in Data Safe.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeactivateTargetDatabaseRequest
     * @return DeactivateTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeactivateTargetDatabase.ts.html |here} to see how to use DeactivateTargetDatabase API.
     */
    deactivateTargetDatabase(deactivateTargetDatabaseRequest: requests.DeactivateTargetDatabaseRequest): Promise<responses.DeactivateTargetDatabaseResponse>;
    /**
     * Deletes the specified user-defined alert policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAlertPolicyRequest
     * @return DeleteAlertPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteAlertPolicy.ts.html |here} to see how to use DeleteAlertPolicy API.
     */
    deleteAlertPolicy(deleteAlertPolicyRequest: requests.DeleteAlertPolicyRequest): Promise<responses.DeleteAlertPolicyResponse>;
    /**
     * Deletes the specified user-defined alert policy rule.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAlertPolicyRuleRequest
     * @return DeleteAlertPolicyRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteAlertPolicyRule.ts.html |here} to see how to use DeleteAlertPolicyRule API.
     */
    deleteAlertPolicyRule(deleteAlertPolicyRuleRequest: requests.DeleteAlertPolicyRuleRequest): Promise<responses.DeleteAlertPolicyRuleResponse>;
    /**
     * To unload retrieved archive data, call the operation ListAuditArchiveRetrieval first.
     * This will return the auditArchiveRetrievalId. Then call this operation with auditArchiveRetrievalId.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAuditArchiveRetrievalRequest
     * @return DeleteAuditArchiveRetrievalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteAuditArchiveRetrieval.ts.html |here} to see how to use DeleteAuditArchiveRetrieval API.
     */
    deleteAuditArchiveRetrieval(deleteAuditArchiveRetrievalRequest: requests.DeleteAuditArchiveRetrievalRequest): Promise<responses.DeleteAuditArchiveRetrievalResponse>;
    /**
     * Deletes the specified audit trail.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAuditTrailRequest
     * @return DeleteAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteAuditTrail.ts.html |here} to see how to use DeleteAuditTrail API.
     */
    deleteAuditTrail(deleteAuditTrailRequest: requests.DeleteAuditTrailRequest): Promise<responses.DeleteAuditTrailResponse>;
    /**
     * Deletes the specified Data Safe private endpoint.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDataSafePrivateEndpointRequest
     * @return DeleteDataSafePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteDataSafePrivateEndpoint.ts.html |here} to see how to use DeleteDataSafePrivateEndpoint API.
     */
    deleteDataSafePrivateEndpoint(deleteDataSafePrivateEndpointRequest: requests.DeleteDataSafePrivateEndpointRequest): Promise<responses.DeleteDataSafePrivateEndpointResponse>;
    /**
     * Deletes the specified discovery job.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDiscoveryJobRequest
     * @return DeleteDiscoveryJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteDiscoveryJob.ts.html |here} to see how to use DeleteDiscoveryJob API.
     */
    deleteDiscoveryJob(deleteDiscoveryJobRequest: requests.DeleteDiscoveryJobRequest): Promise<responses.DeleteDiscoveryJobResponse>;
    /**
     * Deletes the specified discovery result.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDiscoveryJobResultRequest
     * @return DeleteDiscoveryJobResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteDiscoveryJobResult.ts.html |here} to see how to use DeleteDiscoveryJobResult API.
     */
    deleteDiscoveryJobResult(deleteDiscoveryJobResultRequest: requests.DeleteDiscoveryJobResultRequest): Promise<responses.DeleteDiscoveryJobResultResponse>;
    /**
     * Deletes the specified library masking format.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteLibraryMaskingFormatRequest
     * @return DeleteLibraryMaskingFormatResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteLibraryMaskingFormat.ts.html |here} to see how to use DeleteLibraryMaskingFormat API.
     */
    deleteLibraryMaskingFormat(deleteLibraryMaskingFormatRequest: requests.DeleteLibraryMaskingFormatRequest): Promise<responses.DeleteLibraryMaskingFormatResponse>;
    /**
     * Deletes the specified masking column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMaskingColumnRequest
     * @return DeleteMaskingColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteMaskingColumn.ts.html |here} to see how to use DeleteMaskingColumn API.
     */
    deleteMaskingColumn(deleteMaskingColumnRequest: requests.DeleteMaskingColumnRequest): Promise<responses.DeleteMaskingColumnResponse>;
    /**
     * Deletes the specified masking policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMaskingPolicyRequest
     * @return DeleteMaskingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteMaskingPolicy.ts.html |here} to see how to use DeleteMaskingPolicy API.
     */
    deleteMaskingPolicy(deleteMaskingPolicyRequest: requests.DeleteMaskingPolicyRequest): Promise<responses.DeleteMaskingPolicyResponse>;
    /**
     * Deletes the specified masking policy health report.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMaskingPolicyHealthReportRequest
     * @return DeleteMaskingPolicyHealthReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteMaskingPolicyHealthReport.ts.html |here} to see how to use DeleteMaskingPolicyHealthReport API.
     */
    deleteMaskingPolicyHealthReport(deleteMaskingPolicyHealthReportRequest: requests.DeleteMaskingPolicyHealthReportRequest): Promise<responses.DeleteMaskingPolicyHealthReportResponse>;
    /**
     * Deletes the specified masking report.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMaskingReportRequest
     * @return DeleteMaskingReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteMaskingReport.ts.html |here} to see how to use DeleteMaskingReport API.
     */
    deleteMaskingReport(deleteMaskingReportRequest: requests.DeleteMaskingReportRequest): Promise<responses.DeleteMaskingReportResponse>;
    /**
     * Deletes the specified on-premises connector.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOnPremConnectorRequest
     * @return DeleteOnPremConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteOnPremConnector.ts.html |here} to see how to use DeleteOnPremConnector API.
     */
    deleteOnPremConnector(deleteOnPremConnectorRequest: requests.DeleteOnPremConnectorRequest): Promise<responses.DeleteOnPremConnectorResponse>;
    /**
     * Removes the specified peer target database from Data Safe.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeletePeerTargetDatabaseRequest
     * @return DeletePeerTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeletePeerTargetDatabase.ts.html |here} to see how to use DeletePeerTargetDatabase API.
     */
    deletePeerTargetDatabase(deletePeerTargetDatabaseRequest: requests.DeletePeerTargetDatabaseRequest): Promise<responses.DeletePeerTargetDatabaseResponse>;
    /**
     * Deletes the specified referential relation.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteReferentialRelationRequest
     * @return DeleteReferentialRelationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteReferentialRelation.ts.html |here} to see how to use DeleteReferentialRelation API.
     */
    deleteReferentialRelation(deleteReferentialRelationRequest: requests.DeleteReferentialRelationRequest): Promise<responses.DeleteReferentialRelationResponse>;
    /**
     * Deletes the specified report definition. Only the user created report definition can be deleted. The seeded report definitions cannot be deleted.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteReportDefinitionRequest
     * @return DeleteReportDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteReportDefinition.ts.html |here} to see how to use DeleteReportDefinition API.
     */
    deleteReportDefinition(deleteReportDefinitionRequest: requests.DeleteReportDefinitionRequest): Promise<responses.DeleteReportDefinitionResponse>;
    /**
     * Deletes the specified SDM Masking policy difference.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSdmMaskingPolicyDifferenceRequest
     * @return DeleteSdmMaskingPolicyDifferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSdmMaskingPolicyDifference.ts.html |here} to see how to use DeleteSdmMaskingPolicyDifference API.
     */
    deleteSdmMaskingPolicyDifference(deleteSdmMaskingPolicyDifferenceRequest: requests.DeleteSdmMaskingPolicyDifferenceRequest): Promise<responses.DeleteSdmMaskingPolicyDifferenceResponse>;
    /**
     * Deletes the specified saved security assessment or schedule. To delete a security assessment schedule,
     * first call the operation ListSecurityAssessments with filters \"type = save_schedule\".
     * That operation returns the scheduleAssessmentId. Then, call DeleteSecurityAssessment with the scheduleAssessmentId.
     * If the assessment being deleted is the baseline for that compartment, then it will impact all baselines in the compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSecurityAssessmentRequest
     * @return DeleteSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSecurityAssessment.ts.html |here} to see how to use DeleteSecurityAssessment API.
     */
    deleteSecurityAssessment(deleteSecurityAssessmentRequest: requests.DeleteSecurityAssessmentRequest): Promise<responses.DeleteSecurityAssessmentResponse>;
    /**
     * Deletes the specified sensitive column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSensitiveColumnRequest
     * @return DeleteSensitiveColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSensitiveColumn.ts.html |here} to see how to use DeleteSensitiveColumn API.
     */
    deleteSensitiveColumn(deleteSensitiveColumnRequest: requests.DeleteSensitiveColumnRequest): Promise<responses.DeleteSensitiveColumnResponse>;
    /**
     * Deletes the specified sensitive data model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSensitiveDataModelRequest
     * @return DeleteSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSensitiveDataModel.ts.html |here} to see how to use DeleteSensitiveDataModel API.
     */
    deleteSensitiveDataModel(deleteSensitiveDataModelRequest: requests.DeleteSensitiveDataModelRequest): Promise<responses.DeleteSensitiveDataModelResponse>;
    /**
     * Deletes the specified sensitive type.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSensitiveTypeRequest
     * @return DeleteSensitiveTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSensitiveType.ts.html |here} to see how to use DeleteSensitiveType API.
     */
    deleteSensitiveType(deleteSensitiveTypeRequest: requests.DeleteSensitiveTypeRequest): Promise<responses.DeleteSensitiveTypeResponse>;
    /**
     * Deletes the specified sensitive type group.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSensitiveTypeGroupRequest
     * @return DeleteSensitiveTypeGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSensitiveTypeGroup.ts.html |here} to see how to use DeleteSensitiveTypeGroup API.
     */
    deleteSensitiveTypeGroup(deleteSensitiveTypeGroupRequest: requests.DeleteSensitiveTypeGroupRequest): Promise<responses.DeleteSensitiveTypeGroupResponse>;
    /**
     * Deletes the specified sensitive types export.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSensitiveTypesExportRequest
     * @return DeleteSensitiveTypesExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSensitiveTypesExport.ts.html |here} to see how to use DeleteSensitiveTypesExport API.
     */
    deleteSensitiveTypesExport(deleteSensitiveTypesExportRequest: requests.DeleteSensitiveTypesExportRequest): Promise<responses.DeleteSensitiveTypesExportResponse>;
    /**
     * Deletes the specified SQL collection.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSqlCollectionRequest
     * @return DeleteSqlCollectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSqlCollection.ts.html |here} to see how to use DeleteSqlCollection API.
     */
    deleteSqlCollection(deleteSqlCollectionRequest: requests.DeleteSqlCollectionRequest): Promise<responses.DeleteSqlCollectionResponse>;
    /**
     * Deletes the specified allowed sql.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSqlFirewallAllowedSqlRequest
     * @return DeleteSqlFirewallAllowedSqlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSqlFirewallAllowedSql.ts.html |here} to see how to use DeleteSqlFirewallAllowedSql API.
     */
    deleteSqlFirewallAllowedSql(deleteSqlFirewallAllowedSqlRequest: requests.DeleteSqlFirewallAllowedSqlRequest): Promise<responses.DeleteSqlFirewallAllowedSqlResponse>;
    /**
     * Deletes the SQL Firewall policy resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSqlFirewallPolicyRequest
     * @return DeleteSqlFirewallPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteSqlFirewallPolicy.ts.html |here} to see how to use DeleteSqlFirewallPolicy API.
     */
    deleteSqlFirewallPolicy(deleteSqlFirewallPolicyRequest: requests.DeleteSqlFirewallPolicyRequest): Promise<responses.DeleteSqlFirewallPolicyResponse>;
    /**
     * Deletes the specified target-alert policy Association.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteTargetAlertPolicyAssociationRequest
     * @return DeleteTargetAlertPolicyAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteTargetAlertPolicyAssociation.ts.html |here} to see how to use DeleteTargetAlertPolicyAssociation API.
     */
    deleteTargetAlertPolicyAssociation(deleteTargetAlertPolicyAssociationRequest: requests.DeleteTargetAlertPolicyAssociationRequest): Promise<responses.DeleteTargetAlertPolicyAssociationResponse>;
    /**
     * Deregisters the specified database from Data Safe and removes the target database from the Data Safe Console.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteTargetDatabaseRequest
     * @return DeleteTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteTargetDatabase.ts.html |here} to see how to use DeleteTargetDatabase API.
     */
    deleteTargetDatabase(deleteTargetDatabaseRequest: requests.DeleteTargetDatabaseRequest): Promise<responses.DeleteTargetDatabaseResponse>;
    /**
     * Deletes the specified saved user assessment or schedule. To delete a user assessment schedule, first call the operation
     * ListUserAssessments with filters \"type = save_schedule\".
     * That call returns the scheduleAssessmentId. Then call DeleteUserAssessment with the scheduleAssessmentId.
     * If the assessment being deleted is the baseline for that compartment, then it will impact all baselines in the compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteUserAssessmentRequest
     * @return DeleteUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DeleteUserAssessment.ts.html |here} to see how to use DeleteUserAssessment API.
     */
    deleteUserAssessment(deleteUserAssessmentRequest: requests.DeleteUserAssessmentRequest): Promise<responses.DeleteUserAssessmentResponse>;
    /**
     * Updates the list of audit trails created under audit profile.The
     * operation can be used to create new audit trails for target database
     * when they become available for audit collection because of change of database version
     * or change of database unified mode or change of data base  edition or being deleted previously etc.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DiscoverAuditTrailsRequest
     * @return DiscoverAuditTrailsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DiscoverAuditTrails.ts.html |here} to see how to use DiscoverAuditTrails API.
     */
    discoverAuditTrails(discoverAuditTrailsRequest: requests.DiscoverAuditTrailsRequest): Promise<responses.DiscoverAuditTrailsResponse>;
    /**
     * Downloads an already-generated discovery report. Note that the GenerateDiscoveryReportForDownload operation is a
     * prerequisite for the DownloadDiscoveryReport operation. Use GenerateDiscoveryReportForDownload to generate a discovery
     * report file and then use DownloadDiscoveryReport to download the generated file. By default, it downloads report for
     * all the columns in a sensitive data model. Use the discoveryJobId attribute to download report for a specific discovery job.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadDiscoveryReportRequest
     * @return DownloadDiscoveryReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadDiscoveryReport.ts.html |here} to see how to use DownloadDiscoveryReport API.
     */
    downloadDiscoveryReport(downloadDiscoveryReportRequest: requests.DownloadDiscoveryReportRequest): Promise<responses.DownloadDiscoveryReportResponse>;
    /**
     * Downloads the masking log generated by the last masking operation on a target database using the specified masking policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadMaskingLogRequest
     * @return DownloadMaskingLogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadMaskingLog.ts.html |here} to see how to use DownloadMaskingLog API.
     */
    downloadMaskingLog(downloadMaskingLogRequest: requests.DownloadMaskingLogRequest): Promise<responses.DownloadMaskingLogResponse>;
    /**
     * Downloads an already-generated file corresponding to the specified masking policy.
     * Note that the GenerateMaskingPolicyForDownload operation is a prerequisite for the
     * DownloadMaskingPolicy operation. Use GenerateMaskingPolicyForDownload to generate
     * a masking policy file and then use DownloadMaskingPolicy to download the generated file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadMaskingPolicyRequest
     * @return DownloadMaskingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadMaskingPolicy.ts.html |here} to see how to use DownloadMaskingPolicy API.
     */
    downloadMaskingPolicy(downloadMaskingPolicyRequest: requests.DownloadMaskingPolicyRequest): Promise<responses.DownloadMaskingPolicyResponse>;
    /**
     * Downloads an already-generated masking report. Note that the GenerateMaskingReportForDownload
     * operation is a prerequisite for the DownloadMaskingReport operation. Use GenerateMaskingReportForDownload
     * to generate a masking report file and then use DownloadMaskingReport to download the generated file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadMaskingReportRequest
     * @return DownloadMaskingReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadMaskingReport.ts.html |here} to see how to use DownloadMaskingReport API.
     */
    downloadMaskingReport(downloadMaskingReportRequest: requests.DownloadMaskingReportRequest): Promise<responses.DownloadMaskingReportResponse>;
    /**
     * Downloads the privilege script to grant/revoke required roles from the Data Safe account on the target database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadPrivilegeScriptRequest
     * @return DownloadPrivilegeScriptResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadPrivilegeScript.ts.html |here} to see how to use DownloadPrivilegeScript API.
     */
    downloadPrivilegeScript(downloadPrivilegeScriptRequest: requests.DownloadPrivilegeScriptRequest): Promise<responses.DownloadPrivilegeScriptResponse>;
    /**
     * Downloads the report of the specified security assessment. To download the security assessment report, it needs to be generated first.
     * Please use GenerateSecurityAssessmentReport to generate a downloadable report in the preferred format (PDF, XLS).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadSecurityAssessmentReportRequest
     * @return DownloadSecurityAssessmentReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadSecurityAssessmentReport.ts.html |here} to see how to use DownloadSecurityAssessmentReport API.
     */
    downloadSecurityAssessmentReport(downloadSecurityAssessmentReportRequest: requests.DownloadSecurityAssessmentReportRequest): Promise<responses.DownloadSecurityAssessmentReportResponse>;
    /**
     * Downloads an already-generated file corresponding to the specified sensitive data model. Note that the
     * GenerateSensitiveDataModelForDownload operation is a prerequisite for the DownloadSensitiveDataModel operation.
     * Use GenerateSensitiveDataModelForDownload to generate a data model file and then use DownloadSensitiveDataModel
     * to download the generated file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadSensitiveDataModelRequest
     * @return DownloadSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadSensitiveDataModel.ts.html |here} to see how to use DownloadSensitiveDataModel API.
     */
    downloadSensitiveDataModel(downloadSensitiveDataModelRequest: requests.DownloadSensitiveDataModelRequest): Promise<responses.DownloadSensitiveDataModelResponse>;
    /**
     * Downloads an already-generated file corresponding to the specified sensitive types export.
     * Use CreateSensitiveTypesExport to generate an XML file and then use DownloadSensitiveTypesExport
     * to download the generated file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadSensitiveTypesExportRequest
     * @return DownloadSensitiveTypesExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadSensitiveTypesExport.ts.html |here} to see how to use DownloadSensitiveTypesExport API.
     */
    downloadSensitiveTypesExport(downloadSensitiveTypesExportRequest: requests.DownloadSensitiveTypesExportRequest): Promise<responses.DownloadSensitiveTypesExportResponse>;
    /**
     * Downloads the report of the specified user assessment. To download the user assessment report, it needs to be generated first.
     * Please use GenerateUserAssessmentReport to generate a downloadable report in the preferred format (PDF, XLS).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadUserAssessmentReportRequest
     * @return DownloadUserAssessmentReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/DownloadUserAssessmentReport.ts.html |here} to see how to use DownloadUserAssessmentReport API.
     */
    downloadUserAssessmentReport(downloadUserAssessmentReportRequest: requests.DownloadUserAssessmentReportRequest): Promise<responses.DownloadUserAssessmentReportResponse>;
    /**
     * Enables Data Safe in the tenancy and region.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableDataSafeConfigurationRequest
     * @return EnableDataSafeConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/EnableDataSafeConfiguration.ts.html |here} to see how to use EnableDataSafeConfiguration API.
     */
    enableDataSafeConfiguration(enableDataSafeConfigurationRequest: requests.EnableDataSafeConfigurationRequest): Promise<responses.EnableDataSafeConfigurationResponse>;
    /**
     * Generates a downloadable discovery report. It's a prerequisite for the DownloadDiscoveryReport operation. Use this
     * endpoint to generate a discovery report file and then use DownloadDiscoveryReport to download the generated file.
     * By default, it generates report for all the columns in a sensitive data model. Use the discoveryJobId attribute
     * to generate report for a specific discovery job.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateDiscoveryReportForDownloadRequest
     * @return GenerateDiscoveryReportForDownloadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateDiscoveryReportForDownload.ts.html |here} to see how to use GenerateDiscoveryReportForDownload API.
     */
    generateDiscoveryReportForDownload(generateDiscoveryReportForDownloadRequest: requests.GenerateDiscoveryReportForDownloadRequest): Promise<responses.GenerateDiscoveryReportForDownloadResponse>;
    /**
     * Performs health check on the masking policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateHealthReportRequest
     * @return GenerateHealthReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateHealthReport.ts.html |here} to see how to use GenerateHealthReport API.
     */
    generateHealthReport(generateHealthReportRequest: requests.GenerateHealthReportRequest): Promise<responses.GenerateHealthReportResponse>;
    /**
     * Generates a downloadable file corresponding to the specified masking policy. It's
     * a prerequisite for the DownloadMaskingPolicy operation. Use this endpoint to generate
     * a masking policy file and then use DownloadMaskingPolicy to download the generated file.
     * Note that file generation and download are serial operations. The download operation
     * can't be invoked while the generate operation is in progress.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateMaskingPolicyForDownloadRequest
     * @return GenerateMaskingPolicyForDownloadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateMaskingPolicyForDownload.ts.html |here} to see how to use GenerateMaskingPolicyForDownload API.
     */
    generateMaskingPolicyForDownload(generateMaskingPolicyForDownloadRequest: requests.GenerateMaskingPolicyForDownloadRequest): Promise<responses.GenerateMaskingPolicyForDownloadResponse>;
    /**
     * Generates a downloadable masking report. It's a prerequisite for the
     * DownloadMaskingReport operation. Use this endpoint to generate a
     * masking report file and then use DownloadMaskingReport to download
     * the generated file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateMaskingReportForDownloadRequest
     * @return GenerateMaskingReportForDownloadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateMaskingReportForDownload.ts.html |here} to see how to use GenerateMaskingReportForDownload API.
     */
    generateMaskingReportForDownload(generateMaskingReportForDownloadRequest: requests.GenerateMaskingReportForDownloadRequest): Promise<responses.GenerateMaskingReportForDownloadResponse>;
    /**
     * Creates and downloads the configuration of the specified on-premises connector.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateOnPremConnectorConfigurationRequest
     * @return GenerateOnPremConnectorConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateOnPremConnectorConfiguration.ts.html |here} to see how to use GenerateOnPremConnectorConfiguration API.
     */
    generateOnPremConnectorConfiguration(generateOnPremConnectorConfigurationRequest: requests.GenerateOnPremConnectorConfigurationRequest): Promise<responses.GenerateOnPremConnectorConfigurationResponse>;
    /**
     * Generates a .xls or .pdf report based on parameters and report definition.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateReportRequest
     * @return GenerateReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateReport.ts.html |here} to see how to use GenerateReport API.
     */
    generateReport(generateReportRequest: requests.GenerateReportRequest): Promise<responses.GenerateReportResponse>;
    /**
     * Generates the report of the specified security assessment. You can get the report in PDF or XLS format.
     * After generating the report, use DownloadSecurityAssessmentReport to download it in the preferred format.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateSecurityAssessmentReportRequest
     * @return GenerateSecurityAssessmentReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateSecurityAssessmentReport.ts.html |here} to see how to use GenerateSecurityAssessmentReport API.
     */
    generateSecurityAssessmentReport(generateSecurityAssessmentReportRequest: requests.GenerateSecurityAssessmentReportRequest): Promise<responses.GenerateSecurityAssessmentReportResponse>;
    /**
     * Generates a downloadable file corresponding to the specified sensitive data model. It's a prerequisite for the
     * DownloadSensitiveDataModel operation. Use this endpoint to generate a data model file and then use DownloadSensitiveDataModel
     * to download the generated file. Note that file generation and download are serial operations. The download operation
     * can't be invoked while the generate operation is in progress.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateSensitiveDataModelForDownloadRequest
     * @return GenerateSensitiveDataModelForDownloadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateSensitiveDataModelForDownload.ts.html |here} to see how to use GenerateSensitiveDataModelForDownload API.
     */
    generateSensitiveDataModelForDownload(generateSensitiveDataModelForDownloadRequest: requests.GenerateSensitiveDataModelForDownloadRequest): Promise<responses.GenerateSensitiveDataModelForDownloadResponse>;
    /**
     * Generates or appends to the SQL Firewall policy using the specified SQL collection.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateSqlFirewallPolicyRequest
     * @return GenerateSqlFirewallPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateSqlFirewallPolicy.ts.html |here} to see how to use GenerateSqlFirewallPolicy API.
     */
    generateSqlFirewallPolicy(generateSqlFirewallPolicyRequest: requests.GenerateSqlFirewallPolicyRequest): Promise<responses.GenerateSqlFirewallPolicyResponse>;
    /**
     * Generates the report of the specified user assessment. The report is available in PDF or XLS format.
     * After generating the report, use DownloadUserAssessmentReport to download it in the preferred format.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateUserAssessmentReportRequest
     * @return GenerateUserAssessmentReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GenerateUserAssessmentReport.ts.html |here} to see how to use GenerateUserAssessmentReport API.
     */
    generateUserAssessmentReport(generateUserAssessmentReportRequest: requests.GenerateUserAssessmentReportRequest): Promise<responses.GenerateUserAssessmentReportResponse>;
    /**
     * Gets the details of the specified alerts.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAlertRequest
     * @return GetAlertResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAlert.ts.html |here} to see how to use GetAlert API.
     */
    getAlert(getAlertRequest: requests.GetAlertRequest): Promise<responses.GetAlertResponse>;
    /**
     * Gets the details of alert policy by its ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAlertPolicyRequest
     * @return GetAlertPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAlertPolicy.ts.html |here} to see how to use GetAlertPolicy API.
     */
    getAlertPolicy(getAlertPolicyRequest: requests.GetAlertPolicyRequest): Promise<responses.GetAlertPolicyResponse>;
    /**
     * Gets the details of a policy rule by its key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAlertPolicyRuleRequest
     * @return GetAlertPolicyRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAlertPolicyRule.ts.html |here} to see how to use GetAlertPolicyRule API.
     */
    getAlertPolicyRule(getAlertPolicyRuleRequest: requests.GetAlertPolicyRuleRequest): Promise<responses.GetAlertPolicyRuleResponse>;
    /**
     * Gets the details of the specified archive retreival.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAuditArchiveRetrievalRequest
     * @return GetAuditArchiveRetrievalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAuditArchiveRetrieval.ts.html |here} to see how to use GetAuditArchiveRetrieval API.
     */
    getAuditArchiveRetrieval(getAuditArchiveRetrievalRequest: requests.GetAuditArchiveRetrievalRequest): Promise<responses.GetAuditArchiveRetrievalResponse>;
    /**
     * Gets a audit policy by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAuditPolicyRequest
     * @return GetAuditPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAuditPolicy.ts.html |here} to see how to use GetAuditPolicy API.
     */
    getAuditPolicy(getAuditPolicyRequest: requests.GetAuditPolicyRequest): Promise<responses.GetAuditPolicyResponse>;
    /**
     * Gets the details of audit profile resource and associated audit trails of the audit profile.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAuditProfileRequest
     * @return GetAuditProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAuditProfile.ts.html |here} to see how to use GetAuditProfile API.
     */
    getAuditProfile(getAuditProfileRequest: requests.GetAuditProfileRequest): Promise<responses.GetAuditProfileResponse>;
    /**
     * Gets the details of audit trail.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAuditTrailRequest
     * @return GetAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetAuditTrail.ts.html |here} to see how to use GetAuditTrail API.
     */
    getAuditTrail(getAuditTrailRequest: requests.GetAuditTrailRequest): Promise<responses.GetAuditTrailResponse>;
    /**
     * Gets a list of basic masking formats compatible with the supported data types.
     * The data types are grouped into the following categories -
     * Character - Includes CHAR, NCHAR, VARCHAR2, and NVARCHAR2
     * Numeric - Includes NUMBER, FLOAT, RAW, BINARY_FLOAT, and BINARY_DOUBLE
     * Date - Includes DATE and TIMESTAMP
     * LOB - Includes BLOB, CLOB, and NCLOB
     * All - Includes all the supported data types
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetCompatibleFormatsForDataTypesRequest
     * @return GetCompatibleFormatsForDataTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetCompatibleFormatsForDataTypes.ts.html |here} to see how to use GetCompatibleFormatsForDataTypes API.
     */
    getCompatibleFormatsForDataTypes(getCompatibleFormatsForDataTypesRequest: requests.GetCompatibleFormatsForDataTypesRequest): Promise<responses.GetCompatibleFormatsForDataTypesResponse>;
    /**
     * Gets a list of library masking formats compatible with the existing sensitive types.
     * For each sensitive type, it returns the assigned default masking format as well as
     * the other library masking formats that have the sensitiveTypeIds attribute containing
     * the OCID of the sensitive type.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetCompatibleFormatsForSensitiveTypesRequest
     * @return GetCompatibleFormatsForSensitiveTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetCompatibleFormatsForSensitiveTypes.ts.html |here} to see how to use GetCompatibleFormatsForSensitiveTypes API.
     */
    getCompatibleFormatsForSensitiveTypes(getCompatibleFormatsForSensitiveTypesRequest: requests.GetCompatibleFormatsForSensitiveTypesRequest): Promise<responses.GetCompatibleFormatsForSensitiveTypesResponse>;
    /**
     * Gets the details of the Data Safe configuration.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDataSafeConfigurationRequest
     * @return GetDataSafeConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDataSafeConfiguration.ts.html |here} to see how to use GetDataSafeConfiguration API.
     */
    getDataSafeConfiguration(getDataSafeConfigurationRequest: requests.GetDataSafeConfigurationRequest): Promise<responses.GetDataSafeConfigurationResponse>;
    /**
     * Gets the details of the specified Data Safe private endpoint.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDataSafePrivateEndpointRequest
     * @return GetDataSafePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDataSafePrivateEndpoint.ts.html |here} to see how to use GetDataSafePrivateEndpoint API.
     */
    getDataSafePrivateEndpoint(getDataSafePrivateEndpointRequest: requests.GetDataSafePrivateEndpointRequest): Promise<responses.GetDataSafePrivateEndpointResponse>;
    /**
     * Gets a database security configuration by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDatabaseSecurityConfigRequest
     * @return GetDatabaseSecurityConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDatabaseSecurityConfig.ts.html |here} to see how to use GetDatabaseSecurityConfig API.
     */
    getDatabaseSecurityConfig(getDatabaseSecurityConfigRequest: requests.GetDatabaseSecurityConfigRequest): Promise<responses.GetDatabaseSecurityConfigResponse>;
    /**
     * Gets a database table access entry object by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDatabaseTableAccessEntryRequest
     * @return GetDatabaseTableAccessEntryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDatabaseTableAccessEntry.ts.html |here} to see how to use GetDatabaseTableAccessEntry API.
     */
    getDatabaseTableAccessEntry(getDatabaseTableAccessEntryRequest: requests.GetDatabaseTableAccessEntryRequest): Promise<responses.GetDatabaseTableAccessEntryResponse>;
    /**
     * Gets a database view access object by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDatabaseViewAccessEntryRequest
     * @return GetDatabaseViewAccessEntryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDatabaseViewAccessEntry.ts.html |here} to see how to use GetDatabaseViewAccessEntry API.
     */
    getDatabaseViewAccessEntry(getDatabaseViewAccessEntryRequest: requests.GetDatabaseViewAccessEntryRequest): Promise<responses.GetDatabaseViewAccessEntryResponse>;
    /**
     * Gets the details of the specified SDM Masking policy difference column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDifferenceColumnRequest
     * @return GetDifferenceColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDifferenceColumn.ts.html |here} to see how to use GetDifferenceColumn API.
     */
    getDifferenceColumn(getDifferenceColumnRequest: requests.GetDifferenceColumnRequest): Promise<responses.GetDifferenceColumnResponse>;
    /**
     * Gets the details of the specified discovery job.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDiscoveryJobRequest
     * @return GetDiscoveryJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDiscoveryJob.ts.html |here} to see how to use GetDiscoveryJob API.
     */
    getDiscoveryJob(getDiscoveryJobRequest: requests.GetDiscoveryJobRequest): Promise<responses.GetDiscoveryJobResponse>;
    /**
     * Gets the details of the specified discovery result.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDiscoveryJobResultRequest
     * @return GetDiscoveryJobResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetDiscoveryJobResult.ts.html |here} to see how to use GetDiscoveryJobResult API.
     */
    getDiscoveryJobResult(getDiscoveryJobResultRequest: requests.GetDiscoveryJobResultRequest): Promise<responses.GetDiscoveryJobResultResponse>;
    /**
     * Gets the details of the specified library masking format.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetLibraryMaskingFormatRequest
     * @return GetLibraryMaskingFormatResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetLibraryMaskingFormat.ts.html |here} to see how to use GetLibraryMaskingFormat API.
     */
    getLibraryMaskingFormat(getLibraryMaskingFormatRequest: requests.GetLibraryMaskingFormatRequest): Promise<responses.GetLibraryMaskingFormatResponse>;
    /**
     * Gets the details of the specified masking column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMaskingColumnRequest
     * @return GetMaskingColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetMaskingColumn.ts.html |here} to see how to use GetMaskingColumn API.
     */
    getMaskingColumn(getMaskingColumnRequest: requests.GetMaskingColumnRequest): Promise<responses.GetMaskingColumnResponse>;
    /**
     * Gets the details of the specified masking policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMaskingPolicyRequest
     * @return GetMaskingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetMaskingPolicy.ts.html |here} to see how to use GetMaskingPolicy API.
     */
    getMaskingPolicy(getMaskingPolicyRequest: requests.GetMaskingPolicyRequest): Promise<responses.GetMaskingPolicyResponse>;
    /**
     * Gets the details of the specified masking policy health report.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMaskingPolicyHealthReportRequest
     * @return GetMaskingPolicyHealthReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetMaskingPolicyHealthReport.ts.html |here} to see how to use GetMaskingPolicyHealthReport API.
     */
    getMaskingPolicyHealthReport(getMaskingPolicyHealthReportRequest: requests.GetMaskingPolicyHealthReportRequest): Promise<responses.GetMaskingPolicyHealthReportResponse>;
    /**
     * Gets the details of the specified masking report.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMaskingReportRequest
     * @return GetMaskingReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetMaskingReport.ts.html |here} to see how to use GetMaskingReport API.
     */
    getMaskingReport(getMaskingReportRequest: requests.GetMaskingReportRequest): Promise<responses.GetMaskingReportResponse>;
    /**
     * Gets the details of the specified on-premises connector.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOnPremConnectorRequest
     * @return GetOnPremConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetOnPremConnector.ts.html |here} to see how to use GetOnPremConnector API.
     */
    getOnPremConnector(getOnPremConnectorRequest: requests.GetOnPremConnectorRequest): Promise<responses.GetOnPremConnectorResponse>;
    /**
     * Returns the details of the specified Data Safe peer target database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPeerTargetDatabaseRequest
     * @return GetPeerTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetPeerTargetDatabase.ts.html |here} to see how to use GetPeerTargetDatabase API.
     */
    getPeerTargetDatabase(getPeerTargetDatabaseRequest: requests.GetPeerTargetDatabaseRequest): Promise<responses.GetPeerTargetDatabaseResponse>;
    /**
       * Lists the details of given profile available on the target.
  * <p>
  The GetProfile operation returns only the profiles in the specified 'userAssessmentId'.
  * This does not include any subcompartments of the current compartment.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetProfileRequest
       * @return GetProfileResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetProfile.ts.html |here} to see how to use GetProfile API.
       */
    getProfile(getProfileRequest: requests.GetProfileRequest): Promise<responses.GetProfileResponse>;
    /**
     * Gets the details of the specified referential relation.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetReferentialRelationRequest
     * @return GetReferentialRelationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetReferentialRelation.ts.html |here} to see how to use GetReferentialRelation API.
     */
    getReferentialRelation(getReferentialRelationRequest: requests.GetReferentialRelationRequest): Promise<responses.GetReferentialRelationResponse>;
    /**
     * Gets a report by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetReportRequest
     * @return GetReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetReport.ts.html |here} to see how to use GetReport API.
     */
    getReport(getReportRequest: requests.GetReportRequest): Promise<responses.GetReportResponse>;
    /**
     * Downloads the specified report in the form of .xls or .pdf.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetReportContentRequest
     * @return GetReportContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetReportContent.ts.html |here} to see how to use GetReportContent API.
     */
    getReportContent(getReportContentRequest: requests.GetReportContentRequest): Promise<responses.GetReportContentResponse>;
    /**
     * Gets the details of report definition specified by the identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetReportDefinitionRequest
     * @return GetReportDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetReportDefinition.ts.html |here} to see how to use GetReportDefinition API.
     */
    getReportDefinition(getReportDefinitionRequest: requests.GetReportDefinitionRequest): Promise<responses.GetReportDefinitionResponse>;
    /**
     * Gets the details of the specified SDM Masking policy difference.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSdmMaskingPolicyDifferenceRequest
     * @return GetSdmMaskingPolicyDifferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSdmMaskingPolicyDifference.ts.html |here} to see how to use GetSdmMaskingPolicyDifference API.
     */
    getSdmMaskingPolicyDifference(getSdmMaskingPolicyDifferenceRequest: requests.GetSdmMaskingPolicyDifferenceRequest): Promise<responses.GetSdmMaskingPolicyDifferenceResponse>;
    /**
     * Gets the details of the specified security assessment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityAssessmentRequest
     * @return GetSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityAssessment.ts.html |here} to see how to use GetSecurityAssessment API.
     */
    getSecurityAssessment(getSecurityAssessmentRequest: requests.GetSecurityAssessmentRequest): Promise<responses.GetSecurityAssessmentResponse>;
    /**
     * Gets the details of the comparison report for the security assessments submitted for comparison.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityAssessmentComparisonRequest
     * @return GetSecurityAssessmentComparisonResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityAssessmentComparison.ts.html |here} to see how to use GetSecurityAssessmentComparison API.
     */
    getSecurityAssessmentComparison(getSecurityAssessmentComparisonRequest: requests.GetSecurityAssessmentComparisonRequest): Promise<responses.GetSecurityAssessmentComparisonResponse>;
    /**
     * Gets a security policy by the specified OCID of the security policy resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityPolicyRequest
     * @return GetSecurityPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityPolicy.ts.html |here} to see how to use GetSecurityPolicy API.
     */
    getSecurityPolicy(getSecurityPolicyRequest: requests.GetSecurityPolicyRequest): Promise<responses.GetSecurityPolicyResponse>;
    /**
     * Gets a security policy deployment by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityPolicyDeploymentRequest
     * @return GetSecurityPolicyDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityPolicyDeployment.ts.html |here} to see how to use GetSecurityPolicyDeployment API.
     */
    getSecurityPolicyDeployment(getSecurityPolicyDeploymentRequest: requests.GetSecurityPolicyDeploymentRequest): Promise<responses.GetSecurityPolicyDeploymentResponse>;
    /**
     * Gets a security policy entity states by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityPolicyEntryStateRequest
     * @return GetSecurityPolicyEntryStateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityPolicyEntryState.ts.html |here} to see how to use GetSecurityPolicyEntryState API.
     */
    getSecurityPolicyEntryState(getSecurityPolicyEntryStateRequest: requests.GetSecurityPolicyEntryStateRequest): Promise<responses.GetSecurityPolicyEntryStateResponse>;
    /**
     * Gets a security policy report by the specified OCID of the security policy report resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityPolicyReportRequest
     * @return GetSecurityPolicyReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSecurityPolicyReport.ts.html |here} to see how to use GetSecurityPolicyReport API.
     */
    getSecurityPolicyReport(getSecurityPolicyReportRequest: requests.GetSecurityPolicyReportRequest): Promise<responses.GetSecurityPolicyReportResponse>;
    /**
     * Gets the details of the specified sensitive column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSensitiveColumnRequest
     * @return GetSensitiveColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSensitiveColumn.ts.html |here} to see how to use GetSensitiveColumn API.
     */
    getSensitiveColumn(getSensitiveColumnRequest: requests.GetSensitiveColumnRequest): Promise<responses.GetSensitiveColumnResponse>;
    /**
     * Gets the details of the specified sensitive data model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSensitiveDataModelRequest
     * @return GetSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSensitiveDataModel.ts.html |here} to see how to use GetSensitiveDataModel API.
     */
    getSensitiveDataModel(getSensitiveDataModelRequest: requests.GetSensitiveDataModelRequest): Promise<responses.GetSensitiveDataModelResponse>;
    /**
     * Gets the details of the specified sensitive type.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSensitiveTypeRequest
     * @return GetSensitiveTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSensitiveType.ts.html |here} to see how to use GetSensitiveType API.
     */
    getSensitiveType(getSensitiveTypeRequest: requests.GetSensitiveTypeRequest): Promise<responses.GetSensitiveTypeResponse>;
    /**
     * Gets the details of the specified sensitive type group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSensitiveTypeGroupRequest
     * @return GetSensitiveTypeGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSensitiveTypeGroup.ts.html |here} to see how to use GetSensitiveTypeGroup API.
     */
    getSensitiveTypeGroup(getSensitiveTypeGroupRequest: requests.GetSensitiveTypeGroupRequest): Promise<responses.GetSensitiveTypeGroupResponse>;
    /**
     * Gets the details of the specified sensitive types export by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSensitiveTypesExportRequest
     * @return GetSensitiveTypesExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSensitiveTypesExport.ts.html |here} to see how to use GetSensitiveTypesExport API.
     */
    getSensitiveTypesExport(getSensitiveTypesExportRequest: requests.GetSensitiveTypesExportRequest): Promise<responses.GetSensitiveTypesExportResponse>;
    /**
     * Gets a SQL collection by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSqlCollectionRequest
     * @return GetSqlCollectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSqlCollection.ts.html |here} to see how to use GetSqlCollection API.
     */
    getSqlCollection(getSqlCollectionRequest: requests.GetSqlCollectionRequest): Promise<responses.GetSqlCollectionResponse>;
    /**
     * Gets a SQL firewall allowed SQL by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSqlFirewallAllowedSqlRequest
     * @return GetSqlFirewallAllowedSqlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSqlFirewallAllowedSql.ts.html |here} to see how to use GetSqlFirewallAllowedSql API.
     */
    getSqlFirewallAllowedSql(getSqlFirewallAllowedSqlRequest: requests.GetSqlFirewallAllowedSqlRequest): Promise<responses.GetSqlFirewallAllowedSqlResponse>;
    /**
     * Gets a SQL Firewall policy by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSqlFirewallPolicyRequest
     * @return GetSqlFirewallPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetSqlFirewallPolicy.ts.html |here} to see how to use GetSqlFirewallPolicy API.
     */
    getSqlFirewallPolicy(getSqlFirewallPolicyRequest: requests.GetSqlFirewallPolicyRequest): Promise<responses.GetSqlFirewallPolicyResponse>;
    /**
     * Gets the details of target-alert policy association by its ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTargetAlertPolicyAssociationRequest
     * @return GetTargetAlertPolicyAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetTargetAlertPolicyAssociation.ts.html |here} to see how to use GetTargetAlertPolicyAssociation API.
     */
    getTargetAlertPolicyAssociation(getTargetAlertPolicyAssociationRequest: requests.GetTargetAlertPolicyAssociationRequest): Promise<responses.GetTargetAlertPolicyAssociationResponse>;
    /**
     * Returns the details of the specified Data Safe target database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTargetDatabaseRequest
     * @return GetTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetTargetDatabase.ts.html |here} to see how to use GetTargetDatabase API.
     */
    getTargetDatabase(getTargetDatabaseRequest: requests.GetTargetDatabaseRequest): Promise<responses.GetTargetDatabaseResponse>;
    /**
     * Gets a user assessment by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetUserAssessmentRequest
     * @return GetUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetUserAssessment.ts.html |here} to see how to use GetUserAssessment API.
     */
    getUserAssessment(getUserAssessmentRequest: requests.GetUserAssessmentRequest): Promise<responses.GetUserAssessmentResponse>;
    /**
     * Gets the details of the comparison report for the user assessments submitted for comparison.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetUserAssessmentComparisonRequest
     * @return GetUserAssessmentComparisonResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetUserAssessmentComparison.ts.html |here} to see how to use GetUserAssessmentComparison API.
     */
    getUserAssessmentComparison(getUserAssessmentComparisonRequest: requests.GetUserAssessmentComparisonRequest): Promise<responses.GetUserAssessmentComparisonResponse>;
    /**
     * Gets the details of the specified work request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Returns the aggregation details of the alerts.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAlertAnalyticsRequest
     * @return ListAlertAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAlertAnalytics.ts.html |here} to see how to use ListAlertAnalytics API.
     */
    listAlertAnalytics(listAlertAnalyticsRequest: requests.ListAlertAnalyticsRequest): Promise<responses.ListAlertAnalyticsResponse>;
    /**
     * Gets a list of all alert policies.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAlertPoliciesRequest
     * @return ListAlertPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAlertPolicies.ts.html |here} to see how to use ListAlertPolicies API.
     */
    listAlertPolicies(listAlertPoliciesRequest: requests.ListAlertPoliciesRequest): Promise<responses.ListAlertPoliciesResponse>;
    /**
     * Lists the rules of the specified alert policy. The alert policy is said to be satisfied when all rules in the policy evaulate to true.
     * If there are three rules: rule1,rule2 and rule3, the policy is satisfied if rule1 AND rule2 AND rule3 is True.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAlertPolicyRulesRequest
     * @return ListAlertPolicyRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAlertPolicyRules.ts.html |here} to see how to use ListAlertPolicyRules API.
     */
    listAlertPolicyRules(listAlertPolicyRulesRequest: requests.ListAlertPolicyRulesRequest): Promise<responses.ListAlertPolicyRulesResponse>;
    /**
     * Gets a list of all alerts.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAlertsRequest
     * @return ListAlertsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAlerts.ts.html |here} to see how to use ListAlerts API.
     */
    listAlerts(listAlertsRequest: requests.ListAlertsRequest): Promise<responses.ListAlertsResponse>;
    /**
     * Returns the list of audit archive retrieval.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAuditArchiveRetrievalsRequest
     * @return ListAuditArchiveRetrievalsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditArchiveRetrievals.ts.html |here} to see how to use ListAuditArchiveRetrievals API.
     */
    listAuditArchiveRetrievals(listAuditArchiveRetrievalsRequest: requests.ListAuditArchiveRetrievalsRequest): Promise<responses.ListAuditArchiveRetrievalsResponse>;
    /**
       * By default the ListAuditEventAnalytics operation will return all of the summary columns. To filter for a specific summary column, specify
  * it in the `summaryField` query parameter.
  * <p>
  **Example:**
  * /auditEventAnalytics?summaryField=targetName&summaryField=userName&summaryField=clientHostname
  * &summaryField=dmls&summaryField=privilegeChanges&summaryField=ddls&summaryField=loginFailure&summaryField=loginSuccess
  * &summaryField=allRecord&scimQuery=(auditEventTime ge \"2021-06-13T23:49:14\")
  * <p>
  /auditEventAnalytics?timeStarted=2022-08-18T11:02:26.000Z&timeEnded=2022-08-24T11:02:26.000Z
  * This will give number of events grouped by periods. Period can be 1 day, 1 week, etc.
  * <p>
  /auditEventAnalytics?summaryField=targetName&groupBy=targetName
  * This will give the number of events group by targetName. Only targetName summary column would be returned.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditEventAnalyticsRequest
       * @return ListAuditEventAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditEventAnalytics.ts.html |here} to see how to use ListAuditEventAnalytics API.
       */
    listAuditEventAnalytics(listAuditEventAnalyticsRequest: requests.ListAuditEventAnalyticsRequest): Promise<responses.ListAuditEventAnalyticsResponse>;
    /**
       * The ListAuditEvents operation returns specified `compartmentId` audit Events only.
  * The list does not include any audit Events associated with the `subcompartments` of the specified `compartmentId`.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListAuditEvents on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditEventsRequest
       * @return ListAuditEventsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditEvents.ts.html |here} to see how to use ListAuditEvents API.
       */
    listAuditEvents(listAuditEventsRequest: requests.ListAuditEventsRequest): Promise<responses.ListAuditEventsResponse>;
    /**
       * Retrieves a list of all audited targets with their corresponding provisioned audit policies, and their provisioning conditions.
  * <p>
  The ListAuditPolicies operation returns only the audit policies in the specified `compartmentId`.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListAuditPolicies on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditPoliciesRequest
       * @return ListAuditPoliciesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditPolicies.ts.html |here} to see how to use ListAuditPolicies API.
       */
    listAuditPolicies(listAuditPoliciesRequest: requests.ListAuditPoliciesRequest): Promise<responses.ListAuditPoliciesResponse>;
    /**
       * Gets a list of aggregated audit policy details on the target databases. A audit policy aggregation
  * helps understand the overall state of policies provisioned on targets.
  * It is especially useful to create dashboards or to support analytics.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform SummarizedAuditPolicyInfo on the specified
  * `compartmentId` and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  * <p>
  **Example:** ListAuditPolicyAnalytics?groupBy=auditPolicyCategory
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditPolicyAnalyticsRequest
       * @return ListAuditPolicyAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditPolicyAnalytics.ts.html |here} to see how to use ListAuditPolicyAnalytics API.
       */
    listAuditPolicyAnalytics(listAuditPolicyAnalyticsRequest: requests.ListAuditPolicyAnalyticsRequest): Promise<responses.ListAuditPolicyAnalyticsResponse>;
    /**
       * Gets a list of audit profile aggregated details . A audit profile  aggregation helps understand the overall  state of audit profile profiles.
  * As an example, it helps understand how many audit profiles have paid usage. It is especially useful to create dashboards or to support analytics.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform AuditProfileAnalytics on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditProfileAnalyticsRequest
       * @return ListAuditProfileAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditProfileAnalytics.ts.html |here} to see how to use ListAuditProfileAnalytics API.
       */
    listAuditProfileAnalytics(listAuditProfileAnalyticsRequest: requests.ListAuditProfileAnalyticsRequest): Promise<responses.ListAuditProfileAnalyticsResponse>;
    /**
       * Gets a list of all audit profiles.
  * <p>
  The ListAuditProfiles operation returns only the audit profiles in the specified `compartmentId`.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListAuditProfiles on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditProfilesRequest
       * @return ListAuditProfilesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditProfiles.ts.html |here} to see how to use ListAuditProfiles API.
       */
    listAuditProfiles(listAuditProfilesRequest: requests.ListAuditProfilesRequest): Promise<responses.ListAuditProfilesResponse>;
    /**
       * Gets a list of audit trail aggregated details . A audit trail aggregation helps understand the overall  state of trails.
  * As an example, it helps understand how many trails are running or stopped. It is especially useful to create dashboards or to support analytics.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform AuditTrailAnalytics on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditTrailAnalyticsRequest
       * @return ListAuditTrailAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditTrailAnalytics.ts.html |here} to see how to use ListAuditTrailAnalytics API.
       */
    listAuditTrailAnalytics(listAuditTrailAnalyticsRequest: requests.ListAuditTrailAnalyticsRequest): Promise<responses.ListAuditTrailAnalyticsResponse>;
    /**
       * Gets a list of all audit trails.
  * The ListAuditTrails operation returns only the audit trails in the specified `compartmentId`.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListAuditTrails on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAuditTrailsRequest
       * @return ListAuditTrailsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAuditTrails.ts.html |here} to see how to use ListAuditTrails API.
       */
    listAuditTrails(listAuditTrailsRequest: requests.ListAuditTrailsRequest): Promise<responses.ListAuditTrailsResponse>;
    /**
     * Retrieves a list of audit trails, and associated audit event volume for each trail up to defined start date.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAvailableAuditVolumesRequest
     * @return ListAvailableAuditVolumesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListAvailableAuditVolumes.ts.html |here} to see how to use ListAvailableAuditVolumes API.
     */
    listAvailableAuditVolumes(listAvailableAuditVolumesRequest: requests.ListAvailableAuditVolumesRequest): Promise<responses.ListAvailableAuditVolumesResponse>;
    /**
     * Gets a list of all collected audit volume data points.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCollectedAuditVolumesRequest
     * @return ListCollectedAuditVolumesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListCollectedAuditVolumes.ts.html |here} to see how to use ListCollectedAuditVolumes API.
     */
    listCollectedAuditVolumes(listCollectedAuditVolumesRequest: requests.ListCollectedAuditVolumesRequest): Promise<responses.ListCollectedAuditVolumesResponse>;
    /**
     * Returns a list of column metadata objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListColumnsRequest
     * @return ListColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListColumns.ts.html |here} to see how to use ListColumns API.
     */
    listColumns(listColumnsRequest: requests.ListColumnsRequest): Promise<responses.ListColumnsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listColumnsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ColumnSummary objects
     * contained in responses from the listColumns operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllColumns(request: requests.ListColumnsRequest): AsyncIterableIterator<model.ColumnSummary>;
    /**
     * NOTE: This function is deprecated in favor of listColumnsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listColumns operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllColumnsResponses(request: requests.ListColumnsRequest): AsyncIterableIterator<responses.ListColumnsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ColumnSummary objects
     * contained in responses from the listColumns operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listColumnsRecordIterator(request: requests.ListColumnsRequest): AsyncIterableIterator<model.ColumnSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listColumns operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listColumnsResponseIterator(request: requests.ListColumnsRequest): AsyncIterableIterator<responses.ListColumnsResponse>;
    /**
     * Gets a list of Data Safe private endpoints.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDataSafePrivateEndpointsRequest
     * @return ListDataSafePrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDataSafePrivateEndpoints.ts.html |here} to see how to use ListDataSafePrivateEndpoints API.
     */
    listDataSafePrivateEndpoints(listDataSafePrivateEndpointsRequest: requests.ListDataSafePrivateEndpointsRequest): Promise<responses.ListDataSafePrivateEndpointsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listDataSafePrivateEndpointsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.DataSafePrivateEndpointSummary objects
     * contained in responses from the listDataSafePrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDataSafePrivateEndpoints(request: requests.ListDataSafePrivateEndpointsRequest): AsyncIterableIterator<model.DataSafePrivateEndpointSummary>;
    /**
     * NOTE: This function is deprecated in favor of listDataSafePrivateEndpointsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listDataSafePrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDataSafePrivateEndpointsResponses(request: requests.ListDataSafePrivateEndpointsRequest): AsyncIterableIterator<responses.ListDataSafePrivateEndpointsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.DataSafePrivateEndpointSummary objects
     * contained in responses from the listDataSafePrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDataSafePrivateEndpointsRecordIterator(request: requests.ListDataSafePrivateEndpointsRequest): AsyncIterableIterator<model.DataSafePrivateEndpointSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDataSafePrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDataSafePrivateEndpointsResponseIterator(request: requests.ListDataSafePrivateEndpointsRequest): AsyncIterableIterator<responses.ListDataSafePrivateEndpointsResponse>;
    /**
       * Retrieves a list of all database security configurations in Data Safe.
  * <p>
  The ListDatabaseSecurityConfigs operation returns only the database security configurations in the specified `compartmentId`.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListDatabaseSecurityConfigs on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListDatabaseSecurityConfigsRequest
       * @return ListDatabaseSecurityConfigsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDatabaseSecurityConfigs.ts.html |here} to see how to use ListDatabaseSecurityConfigs API.
       */
    listDatabaseSecurityConfigs(listDatabaseSecurityConfigsRequest: requests.ListDatabaseSecurityConfigsRequest): Promise<responses.ListDatabaseSecurityConfigsResponse>;
    /**
       * Retrieves a list of all database table access entries in Data Safe.
  * <p>
  The ListDatabaseTableAccessEntries operation returns only the database table access reports for the specified security policy report.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListDatabaseTableAccessEntriesRequest
       * @return ListDatabaseTableAccessEntriesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDatabaseTableAccessEntries.ts.html |here} to see how to use ListDatabaseTableAccessEntries API.
       */
    listDatabaseTableAccessEntries(listDatabaseTableAccessEntriesRequest: requests.ListDatabaseTableAccessEntriesRequest): Promise<responses.ListDatabaseTableAccessEntriesResponse>;
    /**
       * Retrieves a list of all database view access entries in Data Safe.
  * <p>
  The ListDatabaseViewAccessEntries operation returns only the database view access objects for the specified security policy report.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListDatabaseViewAccessEntriesRequest
       * @return ListDatabaseViewAccessEntriesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDatabaseViewAccessEntries.ts.html |here} to see how to use ListDatabaseViewAccessEntries API.
       */
    listDatabaseViewAccessEntries(listDatabaseViewAccessEntriesRequest: requests.ListDatabaseViewAccessEntriesRequest): Promise<responses.ListDatabaseViewAccessEntriesResponse>;
    /**
     * Gets a list of columns of a SDM masking policy difference resource based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDifferenceColumnsRequest
     * @return ListDifferenceColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDifferenceColumns.ts.html |here} to see how to use ListDifferenceColumns API.
     */
    listDifferenceColumns(listDifferenceColumnsRequest: requests.ListDifferenceColumnsRequest): Promise<responses.ListDifferenceColumnsResponse>;
    /**
     * Gets consolidated discovery analytics data based on the specified query parameters.
     * If CompartmentIdInSubtreeQueryParam is specified as true, the behaviour
     * is equivalent to accessLevel \"ACCESSIBLE\" by default.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDiscoveryAnalyticsRequest
     * @return ListDiscoveryAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDiscoveryAnalytics.ts.html |here} to see how to use ListDiscoveryAnalytics API.
     */
    listDiscoveryAnalytics(listDiscoveryAnalyticsRequest: requests.ListDiscoveryAnalyticsRequest): Promise<responses.ListDiscoveryAnalyticsResponse>;
    /**
     * Gets a list of discovery results based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDiscoveryJobResultsRequest
     * @return ListDiscoveryJobResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDiscoveryJobResults.ts.html |here} to see how to use ListDiscoveryJobResults API.
     */
    listDiscoveryJobResults(listDiscoveryJobResultsRequest: requests.ListDiscoveryJobResultsRequest): Promise<responses.ListDiscoveryJobResultsResponse>;
    /**
     * Gets a list of incremental discovery jobs based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDiscoveryJobsRequest
     * @return ListDiscoveryJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListDiscoveryJobs.ts.html |here} to see how to use ListDiscoveryJobs API.
     */
    listDiscoveryJobs(listDiscoveryJobsRequest: requests.ListDiscoveryJobsRequest): Promise<responses.ListDiscoveryJobsResponse>;
    /**
       * Gets a list of findings aggregated details in the specified compartment. This provides information about the overall state
  * of security assessment findings. You can use groupBy to get the count of findings under a certain risk level and with a certain findingKey,
  * and as well as get the list of the targets that match the condition.
  * This data is especially useful content for the statistic chart or to support analytics.
  * <p>
  When you perform the ListFindingAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
  * parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
  * permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
  * root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
  * compartmentId, then \"Not Authorized\" is returned.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListFindingAnalyticsRequest
       * @return ListFindingAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListFindingAnalytics.ts.html |here} to see how to use ListFindingAnalytics API.
       */
    listFindingAnalytics(listFindingAnalyticsRequest: requests.ListFindingAnalyticsRequest): Promise<responses.ListFindingAnalyticsResponse>;
    /**
     * List all the findings from all the targets in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListFindingsRequest
     * @return ListFindingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListFindings.ts.html |here} to see how to use ListFindings API.
     */
    listFindings(listFindingsRequest: requests.ListFindingsRequest): Promise<responses.ListFindingsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listFindingsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.FindingSummary objects
     * contained in responses from the listFindings operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFindings(request: requests.ListFindingsRequest): AsyncIterableIterator<model.FindingSummary>;
    /**
     * NOTE: This function is deprecated in favor of listFindingsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listFindings operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFindingsResponses(request: requests.ListFindingsRequest): AsyncIterableIterator<responses.ListFindingsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.FindingSummary objects
     * contained in responses from the listFindings operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listFindingsRecordIterator(request: requests.ListFindingsRequest): AsyncIterableIterator<model.FindingSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listFindings operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listFindingsResponseIterator(request: requests.ListFindingsRequest): AsyncIterableIterator<responses.ListFindingsResponse>;
    /**
     * List all changes made by user to risk level of findings of the specified assessment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListFindingsChangeAuditLogsRequest
     * @return ListFindingsChangeAuditLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListFindingsChangeAuditLogs.ts.html |here} to see how to use ListFindingsChangeAuditLogs API.
     */
    listFindingsChangeAuditLogs(listFindingsChangeAuditLogsRequest: requests.ListFindingsChangeAuditLogsRequest): Promise<responses.ListFindingsChangeAuditLogsResponse>;
    /**
     * Gets a list of grants for a particular user in the specified user assessment. A user grant contains details such as the
     * privilege name, type, category, and depth level. The depth level indicates how deep in the hierarchy of roles granted to
     * roles a privilege grant is. The userKey in this operation is a system-generated identifier. Perform the operation ListUsers
     * to get the userKey for a particular user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListGrantsRequest
     * @return ListGrantsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListGrants.ts.html |here} to see how to use ListGrants API.
     */
    listGrants(listGrantsRequest: requests.ListGrantsRequest): Promise<responses.ListGrantsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listGrantsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.GrantSummary objects
     * contained in responses from the listGrants operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllGrants(request: requests.ListGrantsRequest): AsyncIterableIterator<model.GrantSummary>;
    /**
     * NOTE: This function is deprecated in favor of listGrantsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listGrants operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllGrantsResponses(request: requests.ListGrantsRequest): AsyncIterableIterator<responses.ListGrantsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.GrantSummary objects
     * contained in responses from the listGrants operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listGrantsRecordIterator(request: requests.ListGrantsRequest): AsyncIterableIterator<model.GrantSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listGrants operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listGrantsResponseIterator(request: requests.ListGrantsRequest): AsyncIterableIterator<responses.ListGrantsResponse>;
    /**
     * Gets the list of sensitive type Ids present in the specified sensitive type group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListGroupedSensitiveTypesRequest
     * @return ListGroupedSensitiveTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListGroupedSensitiveTypes.ts.html |here} to see how to use ListGroupedSensitiveTypes API.
     */
    listGroupedSensitiveTypes(listGroupedSensitiveTypesRequest: requests.ListGroupedSensitiveTypesRequest): Promise<responses.ListGroupedSensitiveTypesResponse>;
    /**
     * Gets a list of library masking formats based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListLibraryMaskingFormatsRequest
     * @return ListLibraryMaskingFormatsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListLibraryMaskingFormats.ts.html |here} to see how to use ListLibraryMaskingFormats API.
     */
    listLibraryMaskingFormats(listLibraryMaskingFormatsRequest: requests.ListLibraryMaskingFormatsRequest): Promise<responses.ListLibraryMaskingFormatsResponse>;
    /**
     * Gets a list of masked columns present in the specified masking report and based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskedColumnsRequest
     * @return ListMaskedColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskedColumns.ts.html |here} to see how to use ListMaskedColumns API.
     */
    listMaskedColumns(listMaskedColumnsRequest: requests.ListMaskedColumnsRequest): Promise<responses.ListMaskedColumnsResponse>;
    /**
     * Gets consolidated masking analytics data based on the specified query parameters.
     * If CompartmentIdInSubtreeQueryParam is specified as true, the behaviour
     * is equivalent to accessLevel \"ACCESSIBLE\" by default.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingAnalyticsRequest
     * @return ListMaskingAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingAnalytics.ts.html |here} to see how to use ListMaskingAnalytics API.
     */
    listMaskingAnalytics(listMaskingAnalyticsRequest: requests.ListMaskingAnalyticsRequest): Promise<responses.ListMaskingAnalyticsResponse>;
    /**
     * Gets a list of masking columns present in the specified masking policy and based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingColumnsRequest
     * @return ListMaskingColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingColumns.ts.html |here} to see how to use ListMaskingColumns API.
     */
    listMaskingColumns(listMaskingColumnsRequest: requests.ListMaskingColumnsRequest): Promise<responses.ListMaskingColumnsResponse>;
    /**
     * Gets a list of masking errors in a masking run based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingErrorsRequest
     * @return ListMaskingErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingErrors.ts.html |here} to see how to use ListMaskingErrors API.
     */
    listMaskingErrors(listMaskingErrorsRequest: requests.ListMaskingErrorsRequest): Promise<responses.ListMaskingErrorsResponse>;
    /**
     * Gets a list of masking objects present in the specified masking policy and based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingObjectsRequest
     * @return ListMaskingObjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingObjects.ts.html |here} to see how to use ListMaskingObjects API.
     */
    listMaskingObjects(listMaskingObjectsRequest: requests.ListMaskingObjectsRequest): Promise<responses.ListMaskingObjectsResponse>;
    /**
     * Gets a list of masking policies based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingPoliciesRequest
     * @return ListMaskingPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingPolicies.ts.html |here} to see how to use ListMaskingPolicies API.
     */
    listMaskingPolicies(listMaskingPoliciesRequest: requests.ListMaskingPoliciesRequest): Promise<responses.ListMaskingPoliciesResponse>;
    /**
     * Gets a list of errors and warnings from a masking policy health check.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingPolicyHealthReportLogsRequest
     * @return ListMaskingPolicyHealthReportLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingPolicyHealthReportLogs.ts.html |here} to see how to use ListMaskingPolicyHealthReportLogs API.
     */
    listMaskingPolicyHealthReportLogs(listMaskingPolicyHealthReportLogsRequest: requests.ListMaskingPolicyHealthReportLogsRequest): Promise<responses.ListMaskingPolicyHealthReportLogsResponse>;
    /**
     * Gets a list of masking policy health reports based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingPolicyHealthReportsRequest
     * @return ListMaskingPolicyHealthReportsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingPolicyHealthReports.ts.html |here} to see how to use ListMaskingPolicyHealthReports API.
     */
    listMaskingPolicyHealthReports(listMaskingPolicyHealthReportsRequest: requests.ListMaskingPolicyHealthReportsRequest): Promise<responses.ListMaskingPolicyHealthReportsResponse>;
    /**
     * Gets a list of referential relations present in the specified masking policy based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingPolicyReferentialRelationsRequest
     * @return ListMaskingPolicyReferentialRelationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingPolicyReferentialRelations.ts.html |here} to see how to use ListMaskingPolicyReferentialRelations API.
     */
    listMaskingPolicyReferentialRelations(listMaskingPolicyReferentialRelationsRequest: requests.ListMaskingPolicyReferentialRelationsRequest): Promise<responses.ListMaskingPolicyReferentialRelationsResponse>;
    /**
     * Gets a list of masking reports based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingReportsRequest
     * @return ListMaskingReportsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingReports.ts.html |here} to see how to use ListMaskingReports API.
     */
    listMaskingReports(listMaskingReportsRequest: requests.ListMaskingReportsRequest): Promise<responses.ListMaskingReportsResponse>;
    /**
     * Gets a list of masking schemas present in the specified masking policy and based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMaskingSchemasRequest
     * @return ListMaskingSchemasResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListMaskingSchemas.ts.html |here} to see how to use ListMaskingSchemas API.
     */
    listMaskingSchemas(listMaskingSchemasRequest: requests.ListMaskingSchemasRequest): Promise<responses.ListMaskingSchemasResponse>;
    /**
     * Gets a list of on-premises connectors.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOnPremConnectorsRequest
     * @return ListOnPremConnectorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListOnPremConnectors.ts.html |here} to see how to use ListOnPremConnectors API.
     */
    listOnPremConnectors(listOnPremConnectorsRequest: requests.ListOnPremConnectorsRequest): Promise<responses.ListOnPremConnectorsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listOnPremConnectorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.OnPremConnectorSummary objects
     * contained in responses from the listOnPremConnectors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOnPremConnectors(request: requests.ListOnPremConnectorsRequest): AsyncIterableIterator<model.OnPremConnectorSummary>;
    /**
     * NOTE: This function is deprecated in favor of listOnPremConnectorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listOnPremConnectors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOnPremConnectorsResponses(request: requests.ListOnPremConnectorsRequest): AsyncIterableIterator<responses.ListOnPremConnectorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.OnPremConnectorSummary objects
     * contained in responses from the listOnPremConnectors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOnPremConnectorsRecordIterator(request: requests.ListOnPremConnectorsRequest): AsyncIterableIterator<model.OnPremConnectorSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listOnPremConnectors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOnPremConnectorsResponseIterator(request: requests.ListOnPremConnectorsRequest): AsyncIterableIterator<responses.ListOnPremConnectorsResponse>;
    /**
       * Gets a list of count of the users with password expiry dates in next 30 days, between next 30-90 days, and beyond 90 days based on specified user assessment.
  * It internally uses the aforementioned userAnalytics api.
  * <p>
  When you perform the ListPasswordExpiryDateAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
  * parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has READ
  * permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
  * root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
  * compartmentId, then \"Not Authorized\" is returned.
  * <p>
  To use ListPasswordExpiryDateAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
  * set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListPasswordExpiryDateAnalyticsRequest
       * @return ListPasswordExpiryDateAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListPasswordExpiryDateAnalytics.ts.html |here} to see how to use ListPasswordExpiryDateAnalytics API.
       */
    listPasswordExpiryDateAnalytics(listPasswordExpiryDateAnalyticsRequest: requests.ListPasswordExpiryDateAnalyticsRequest): Promise<responses.ListPasswordExpiryDateAnalyticsResponse>;
    /**
     * Lists all the peer target databases under the primary target database identified by the OCID passed as path parameter.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPeerTargetDatabasesRequest
     * @return ListPeerTargetDatabasesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListPeerTargetDatabases.ts.html |here} to see how to use ListPeerTargetDatabases API.
     */
    listPeerTargetDatabases(listPeerTargetDatabasesRequest: requests.ListPeerTargetDatabasesRequest): Promise<responses.ListPeerTargetDatabasesResponse>;
    /**
       * Gets a list of aggregated user profile details in the specified compartment. This provides information about the
  * overall profiles available. For example, the user profile details include how many users have the profile assigned
  * and do how many use password verification function. This data is especially useful content for dashboards or to support analytics.
  * <p>
  When you perform the ListProfileAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
  * parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
  * permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
  * root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
  * compartmentId, then \"Not Authorized\" is returned.
  * <p>
  The parameter compartmentIdInSubtree applies when you perform ListProfileAnalytics on the compartmentId passed and when it is
  * set to true, the entire hierarchy of compartments can be returned.
  * <p>
  To use ListProfileAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
  * set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListProfileAnalyticsRequest
       * @return ListProfileAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListProfileAnalytics.ts.html |here} to see how to use ListProfileAnalytics API.
       */
    listProfileAnalytics(listProfileAnalyticsRequest: requests.ListProfileAnalyticsRequest): Promise<responses.ListProfileAnalyticsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listProfileAnalyticsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ProfileAggregation objects
     * contained in responses from the listProfileAnalytics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllProfileAnalytics(request: requests.ListProfileAnalyticsRequest): AsyncIterableIterator<model.ProfileAggregation>;
    /**
     * NOTE: This function is deprecated in favor of listProfileAnalyticsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listProfileAnalytics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllProfileAnalyticsResponses(request: requests.ListProfileAnalyticsRequest): AsyncIterableIterator<responses.ListProfileAnalyticsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ProfileAggregation objects
     * contained in responses from the listProfileAnalytics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listProfileAnalyticsRecordIterator(request: requests.ListProfileAnalyticsRequest): AsyncIterableIterator<model.ProfileAggregation>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listProfileAnalytics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listProfileAnalyticsResponseIterator(request: requests.ListProfileAnalyticsRequest): AsyncIterableIterator<responses.ListProfileAnalyticsResponse>;
    /**
       * Gets a list of user profiles containing the profile details along with the target id and user counts.
  * <p>
  The ListProfiles operation returns only the profiles belonging to a certain target. If compartment type user assessment
  * id is provided, then profile information for all the targets belonging to the pertaining compartment is returned.
  * The list does not include any subcompartments of the compartment under consideration.
  * <p>
  The parameter 'accessLevel' specifies whether to return only those compartments for which the requestor has
  * INSPECT permissions on at least one resource directly or indirectly (ACCESSIBLE) (the resource can be in a
  * subcompartment) or to return Not Authorized if Principal doesn't have access to even one of the child compartments.
  * This is valid only when 'compartmentIdInSubtree' is set to 'true'.
  * <p>
  The parameter 'compartmentIdInSubtree' applies when you perform ListUserProfiles on the 'compartmentId' belonging
  * to the assessmentId passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment), set the parameter
  * 'compartmentIdInSubtree' to true and 'accessLevel' to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListProfileSummariesRequest
       * @return ListProfileSummariesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListProfileSummaries.ts.html |here} to see how to use ListProfileSummaries API.
       */
    listProfileSummaries(listProfileSummariesRequest: requests.ListProfileSummariesRequest): Promise<responses.ListProfileSummariesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listProfileSummariesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ProfileSummary objects
     * contained in responses from the listProfileSummaries operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllProfileSummaries(request: requests.ListProfileSummariesRequest): AsyncIterableIterator<model.ProfileSummary>;
    /**
     * NOTE: This function is deprecated in favor of listProfileSummariesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listProfileSummaries operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllProfileSummariesResponses(request: requests.ListProfileSummariesRequest): AsyncIterableIterator<responses.ListProfileSummariesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ProfileSummary objects
     * contained in responses from the listProfileSummaries operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listProfileSummariesRecordIterator(request: requests.ListProfileSummariesRequest): AsyncIterableIterator<model.ProfileSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listProfileSummaries operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listProfileSummariesResponseIterator(request: requests.ListProfileSummariesRequest): AsyncIterableIterator<responses.ListProfileSummariesResponse>;
    /**
     * Gets a list of referential relations present in the specified sensitive data model based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListReferentialRelationsRequest
     * @return ListReferentialRelationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListReferentialRelations.ts.html |here} to see how to use ListReferentialRelations API.
     */
    listReferentialRelations(listReferentialRelationsRequest: requests.ListReferentialRelationsRequest): Promise<responses.ListReferentialRelationsResponse>;
    /**
     * Gets a list of report definitions.
     * The ListReportDefinitions operation returns only the report definitions in the specified `compartmentId`.
     * It also returns the seeded report definitions which are available to all the compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListReportDefinitionsRequest
     * @return ListReportDefinitionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListReportDefinitions.ts.html |here} to see how to use ListReportDefinitions API.
     */
    listReportDefinitions(listReportDefinitionsRequest: requests.ListReportDefinitionsRequest): Promise<responses.ListReportDefinitionsResponse>;
    /**
     * Gets a list of all the reports in the compartment. It contains information such as report generation time.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListReportsRequest
     * @return ListReportsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListReports.ts.html |here} to see how to use ListReports API.
     */
    listReports(listReportsRequest: requests.ListReportsRequest): Promise<responses.ListReportsResponse>;
    /**
       * Retrieves a list of all role grant paths for a particular user.
  * <p>
  The ListRoleGrantPaths operation returns only the role grant paths for the specified security policy report.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListRoleGrantPathsRequest
       * @return ListRoleGrantPathsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListRoleGrantPaths.ts.html |here} to see how to use ListRoleGrantPaths API.
       */
    listRoleGrantPaths(listRoleGrantPathsRequest: requests.ListRoleGrantPathsRequest): Promise<responses.ListRoleGrantPathsResponse>;
    /**
     * Returns a list of role metadata objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRolesRequest
     * @return ListRolesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListRoles.ts.html |here} to see how to use ListRoles API.
     */
    listRoles(listRolesRequest: requests.ListRolesRequest): Promise<responses.ListRolesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listRolesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.RoleSummary objects
     * contained in responses from the listRoles operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRoles(request: requests.ListRolesRequest): AsyncIterableIterator<model.RoleSummary>;
    /**
     * NOTE: This function is deprecated in favor of listRolesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listRoles operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRolesResponses(request: requests.ListRolesRequest): AsyncIterableIterator<responses.ListRolesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.RoleSummary objects
     * contained in responses from the listRoles operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRolesRecordIterator(request: requests.ListRolesRequest): AsyncIterableIterator<model.RoleSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listRoles operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRolesResponseIterator(request: requests.ListRolesRequest): AsyncIterableIterator<responses.ListRolesResponse>;
    /**
     * Returns list of schema.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSchemasRequest
     * @return ListSchemasResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSchemas.ts.html |here} to see how to use ListSchemas API.
     */
    listSchemas(listSchemasRequest: requests.ListSchemasRequest): Promise<responses.ListSchemasResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSchemasRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SchemaSummary objects
     * contained in responses from the listSchemas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSchemas(request: requests.ListSchemasRequest): AsyncIterableIterator<model.SchemaSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSchemasResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSchemas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSchemasResponses(request: requests.ListSchemasRequest): AsyncIterableIterator<responses.ListSchemasResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SchemaSummary objects
     * contained in responses from the listSchemas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSchemasRecordIterator(request: requests.ListSchemasRequest): AsyncIterableIterator<model.SchemaSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSchemas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSchemasResponseIterator(request: requests.ListSchemasRequest): AsyncIterableIterator<responses.ListSchemasResponse>;
    /**
     * Gets a list of SDM and masking policy difference resources based on the specified query parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSdmMaskingPolicyDifferencesRequest
     * @return ListSdmMaskingPolicyDifferencesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSdmMaskingPolicyDifferences.ts.html |here} to see how to use ListSdmMaskingPolicyDifferences API.
     */
    listSdmMaskingPolicyDifferences(listSdmMaskingPolicyDifferencesRequest: requests.ListSdmMaskingPolicyDifferencesRequest): Promise<responses.ListSdmMaskingPolicyDifferencesResponse>;
    /**
       * Gets a list of security assessments.
  * <p>
  The ListSecurityAssessments operation returns only the assessments in the specified `compartmentId`.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListSecurityAssessments on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSecurityAssessmentsRequest
       * @return ListSecurityAssessmentsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityAssessments.ts.html |here} to see how to use ListSecurityAssessments API.
       */
    listSecurityAssessments(listSecurityAssessmentsRequest: requests.ListSecurityAssessmentsRequest): Promise<responses.ListSecurityAssessmentsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAssessmentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAssessmentSummary objects
     * contained in responses from the listSecurityAssessments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAssessments(request: requests.ListSecurityAssessmentsRequest): AsyncIterableIterator<model.SecurityAssessmentSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAssessmentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAssessments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAssessmentsResponses(request: requests.ListSecurityAssessmentsRequest): AsyncIterableIterator<responses.ListSecurityAssessmentsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAssessmentSummary objects
     * contained in responses from the listSecurityAssessments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAssessmentsRecordIterator(request: requests.ListSecurityAssessmentsRequest): AsyncIterableIterator<model.SecurityAssessmentSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAssessments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAssessmentsResponseIterator(request: requests.ListSecurityAssessmentsRequest): AsyncIterableIterator<responses.ListSecurityAssessmentsResponse>;
    /**
       * Gets a list of Database security feature usage aggregated details in the specified compartment. This provides information about the
  * overall security controls, by returning the counting number of the target databases using the security features.
  * <p>
  When you perform the ListSecurityFeatureAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
  * parameter accessLevel is set to ACCESSIBLE, then the operation returns statistics from the compartments in which the requestor has INSPECT
  * permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
  * root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
  * compartmentId, then \"Not Authorized\" is returned.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSecurityFeatureAnalyticsRequest
       * @return ListSecurityFeatureAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityFeatureAnalytics.ts.html |here} to see how to use ListSecurityFeatureAnalytics API.
       */
    listSecurityFeatureAnalytics(listSecurityFeatureAnalyticsRequest: requests.ListSecurityFeatureAnalyticsRequest): Promise<responses.ListSecurityFeatureAnalyticsResponse>;
    /**
     * Lists the usage of Database security features for a given compartment or a target level, based on the filters provided.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityFeaturesRequest
     * @return ListSecurityFeaturesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityFeatures.ts.html |here} to see how to use ListSecurityFeatures API.
     */
    listSecurityFeatures(listSecurityFeaturesRequest: requests.ListSecurityFeaturesRequest): Promise<responses.ListSecurityFeaturesResponse>;
    /**
       * Retrieves a list of all security policies in Data Safe.
  * <p>
  The ListSecurityPolicies operation returns only the security policies in the specified `compartmentId`.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicies on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSecurityPoliciesRequest
       * @return ListSecurityPoliciesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityPolicies.ts.html |here} to see how to use ListSecurityPolicies API.
       */
    listSecurityPolicies(listSecurityPoliciesRequest: requests.ListSecurityPoliciesRequest): Promise<responses.ListSecurityPoliciesResponse>;
    /**
       * Retrieves a list of all security policy deployments in Data Safe.
  * <p>
  The ListSecurityPolicyDeployments operation returns only the security policy deployments in the specified `compartmentId`.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicyDeployments on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSecurityPolicyDeploymentsRequest
       * @return ListSecurityPolicyDeploymentsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityPolicyDeployments.ts.html |here} to see how to use ListSecurityPolicyDeployments API.
       */
    listSecurityPolicyDeployments(listSecurityPolicyDeploymentsRequest: requests.ListSecurityPolicyDeploymentsRequest): Promise<responses.ListSecurityPolicyDeploymentsResponse>;
    /**
       * Retrieves a list of all security policy entry states in Data Safe.
  * <p>
  The ListSecurityPolicyEntryStates operation returns only the security policy entry states for the specified security policy entry.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSecurityPolicyEntryStatesRequest
       * @return ListSecurityPolicyEntryStatesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityPolicyEntryStates.ts.html |here} to see how to use ListSecurityPolicyEntryStates API.
       */
    listSecurityPolicyEntryStates(listSecurityPolicyEntryStatesRequest: requests.ListSecurityPolicyEntryStatesRequest): Promise<responses.ListSecurityPolicyEntryStatesResponse>;
    /**
       * Retrieves a list of all security policy reports in Data Safe.
  * <p>
  The ListSecurityPolicyReports operation returns only the security policy reports in the specified `compartmentId`.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListSecurityPolicyReports on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSecurityPolicyReportsRequest
       * @return ListSecurityPolicyReportsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSecurityPolicyReports.ts.html |here} to see how to use ListSecurityPolicyReports API.
       */
    listSecurityPolicyReports(listSecurityPolicyReportsRequest: requests.ListSecurityPolicyReportsRequest): Promise<responses.ListSecurityPolicyReportsResponse>;
    /**
       * Gets consolidated sensitive columns analytics data based on the specified query parameters.
  * <p>
  When you perform the ListSensitiveColumnAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
  * parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
  * permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
  * root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
  * compartmentId, then \"Not Authorized\" is returned.
  * <p>
  To use ListSensitiveColumnAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
  * set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSensitiveColumnAnalyticsRequest
       * @return ListSensitiveColumnAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveColumnAnalytics.ts.html |here} to see how to use ListSensitiveColumnAnalytics API.
       */
    listSensitiveColumnAnalytics(listSensitiveColumnAnalyticsRequest: requests.ListSensitiveColumnAnalyticsRequest): Promise<responses.ListSensitiveColumnAnalyticsResponse>;
    /**
     * Gets a list of sensitive columns present in the specified sensitive data model based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveColumnsRequest
     * @return ListSensitiveColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveColumns.ts.html |here} to see how to use ListSensitiveColumns API.
     */
    listSensitiveColumns(listSensitiveColumnsRequest: requests.ListSensitiveColumnsRequest): Promise<responses.ListSensitiveColumnsResponse>;
    /**
     * Gets a list of sensitive type Ids present in the specified sensitive data model.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveDataModelSensitiveTypesRequest
     * @return ListSensitiveDataModelSensitiveTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveDataModelSensitiveTypes.ts.html |here} to see how to use ListSensitiveDataModelSensitiveTypes API.
     */
    listSensitiveDataModelSensitiveTypes(listSensitiveDataModelSensitiveTypesRequest: requests.ListSensitiveDataModelSensitiveTypesRequest): Promise<responses.ListSensitiveDataModelSensitiveTypesResponse>;
    /**
     * Gets a list of sensitive data models based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveDataModelsRequest
     * @return ListSensitiveDataModelsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveDataModels.ts.html |here} to see how to use ListSensitiveDataModels API.
     */
    listSensitiveDataModels(listSensitiveDataModelsRequest: requests.ListSensitiveDataModelsRequest): Promise<responses.ListSensitiveDataModelsResponse>;
    /**
     * Gets a list of sensitive objects present in the specified sensitive data model based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveObjectsRequest
     * @return ListSensitiveObjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveObjects.ts.html |here} to see how to use ListSensitiveObjects API.
     */
    listSensitiveObjects(listSensitiveObjectsRequest: requests.ListSensitiveObjectsRequest): Promise<responses.ListSensitiveObjectsResponse>;
    /**
     * Gets a list of sensitive schemas present in the specified sensitive data model based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveSchemasRequest
     * @return ListSensitiveSchemasResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveSchemas.ts.html |here} to see how to use ListSensitiveSchemas API.
     */
    listSensitiveSchemas(listSensitiveSchemasRequest: requests.ListSensitiveSchemasRequest): Promise<responses.ListSensitiveSchemasResponse>;
    /**
     * Gets a list of sensitive type groups based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveTypeGroupsRequest
     * @return ListSensitiveTypeGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveTypeGroups.ts.html |here} to see how to use ListSensitiveTypeGroups API.
     */
    listSensitiveTypeGroups(listSensitiveTypeGroupsRequest: requests.ListSensitiveTypeGroupsRequest): Promise<responses.ListSensitiveTypeGroupsResponse>;
    /**
     * Gets a list of sensitive types based on the specified query parameters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveTypesRequest
     * @return ListSensitiveTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveTypes.ts.html |here} to see how to use ListSensitiveTypes API.
     */
    listSensitiveTypes(listSensitiveTypesRequest: requests.ListSensitiveTypesRequest): Promise<responses.ListSensitiveTypesResponse>;
    /**
     * Retrieves a list of all sensitive types export in Data Safe based on the specified query parameters.
     * The ListSensitiveTypesExports operation returns only the sensitive types export in the specified `compartmentId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSensitiveTypesExportsRequest
     * @return ListSensitiveTypesExportsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSensitiveTypesExports.ts.html |here} to see how to use ListSensitiveTypesExports API.
     */
    listSensitiveTypesExports(listSensitiveTypesExportsRequest: requests.ListSensitiveTypesExportsRequest): Promise<responses.ListSensitiveTypesExportsResponse>;
    /**
       * Retrieves a list of all SQL collection analytics in Data Safe.
  * <p>
  The ListSqlCollectionAnalytics operation returns only the analytics for the SQL collections in the specified `compartmentId`.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListSqlCollections on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSqlCollectionAnalyticsRequest
       * @return ListSqlCollectionAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlCollectionAnalytics.ts.html |here} to see how to use ListSqlCollectionAnalytics API.
       */
    listSqlCollectionAnalytics(listSqlCollectionAnalyticsRequest: requests.ListSqlCollectionAnalyticsRequest): Promise<responses.ListSqlCollectionAnalyticsResponse>;
    /**
     * Retrieves a list of the SQL collection log analytics.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlCollectionLogInsightsRequest
     * @return ListSqlCollectionLogInsightsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlCollectionLogInsights.ts.html |here} to see how to use ListSqlCollectionLogInsights API.
     */
    listSqlCollectionLogInsights(listSqlCollectionLogInsightsRequest: requests.ListSqlCollectionLogInsightsRequest): Promise<responses.ListSqlCollectionLogInsightsResponse>;
    /**
       * Retrieves a list of all SQL collections in Data Safe.
  * <p>
  The ListSqlCollections operation returns only the SQL collections in the specified `compartmentId`.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListSqlCollections on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSqlCollectionsRequest
       * @return ListSqlCollectionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlCollections.ts.html |here} to see how to use ListSqlCollections API.
       */
    listSqlCollections(listSqlCollectionsRequest: requests.ListSqlCollectionsRequest): Promise<responses.ListSqlCollectionsResponse>;
    /**
       * Returns the aggregation details of all SQL Firewall allowed SQL statements.
  * <p>
  The ListSqlFirewallAllowedSqlAnalytics operation returns the aggregates of the SQL Firewall allowed SQL statements in the specified `compartmentId`.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallAllowedSqlAnalytics on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSqlFirewallAllowedSqlAnalyticsRequest
       * @return ListSqlFirewallAllowedSqlAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallAllowedSqlAnalytics.ts.html |here} to see how to use ListSqlFirewallAllowedSqlAnalytics API.
       */
    listSqlFirewallAllowedSqlAnalytics(listSqlFirewallAllowedSqlAnalyticsRequest: requests.ListSqlFirewallAllowedSqlAnalyticsRequest): Promise<responses.ListSqlFirewallAllowedSqlAnalyticsResponse>;
    /**
       * Retrieves a list of all SQL Firewall allowed SQL statements.
  * <p>
  The ListSqlFirewallAllowedSqls operation returns only the SQL Firewall allowed SQL statements in the specified `compartmentId`.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallPolicies on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSqlFirewallAllowedSqlsRequest
       * @return ListSqlFirewallAllowedSqlsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallAllowedSqls.ts.html |here} to see how to use ListSqlFirewallAllowedSqls API.
       */
    listSqlFirewallAllowedSqls(listSqlFirewallAllowedSqlsRequest: requests.ListSqlFirewallAllowedSqlsRequest): Promise<responses.ListSqlFirewallAllowedSqlsResponse>;
    /**
       * Retrieves a list of all SQL Firewall policies.
  * <p>
  The ListSqlFirewallPolicies operation returns only the SQL Firewall policies in the specified `compartmentId`.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallPolicies on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSqlFirewallPoliciesRequest
       * @return ListSqlFirewallPoliciesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallPolicies.ts.html |here} to see how to use ListSqlFirewallPolicies API.
       */
    listSqlFirewallPolicies(listSqlFirewallPoliciesRequest: requests.ListSqlFirewallPoliciesRequest): Promise<responses.ListSqlFirewallPoliciesResponse>;
    /**
       * Gets a list of aggregated SQL Firewall policy details.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform SummarizedSqlFirewallPolicyInfo on the specified
  * `compartmentId` and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListSqlFirewallPolicyAnalyticsRequest
       * @return ListSqlFirewallPolicyAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallPolicyAnalytics.ts.html |here} to see how to use ListSqlFirewallPolicyAnalytics API.
       */
    listSqlFirewallPolicyAnalytics(listSqlFirewallPolicyAnalyticsRequest: requests.ListSqlFirewallPolicyAnalyticsRequest): Promise<responses.ListSqlFirewallPolicyAnalyticsResponse>;
    /**
     * Returns the aggregation details of the SQL Firewall violations.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlFirewallViolationAnalyticsRequest
     * @return ListSqlFirewallViolationAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallViolationAnalytics.ts.html |here} to see how to use ListSqlFirewallViolationAnalytics API.
     */
    listSqlFirewallViolationAnalytics(listSqlFirewallViolationAnalyticsRequest: requests.ListSqlFirewallViolationAnalyticsRequest): Promise<responses.ListSqlFirewallViolationAnalyticsResponse>;
    /**
     * Gets a list of all the SQL Firewall violations captured by the firewall.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlFirewallViolationsRequest
     * @return ListSqlFirewallViolationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListSqlFirewallViolations.ts.html |here} to see how to use ListSqlFirewallViolations API.
     */
    listSqlFirewallViolations(listSqlFirewallViolationsRequest: requests.ListSqlFirewallViolationsRequest): Promise<responses.ListSqlFirewallViolationsResponse>;
    /**
     * Returns a list of table metadata objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTablesRequest
     * @return ListTablesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListTables.ts.html |here} to see how to use ListTables API.
     */
    listTables(listTablesRequest: requests.ListTablesRequest): Promise<responses.ListTablesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listTablesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TableSummary objects
     * contained in responses from the listTables operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTables(request: requests.ListTablesRequest): AsyncIterableIterator<model.TableSummary>;
    /**
     * NOTE: This function is deprecated in favor of listTablesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTables operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTablesResponses(request: requests.ListTablesRequest): AsyncIterableIterator<responses.ListTablesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.TableSummary objects
     * contained in responses from the listTables operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTablesRecordIterator(request: requests.ListTablesRequest): AsyncIterableIterator<model.TableSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTables operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTablesResponseIterator(request: requests.ListTablesRequest): AsyncIterableIterator<responses.ListTablesResponse>;
    /**
     * Gets a list of all target-alert policy associations.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTargetAlertPolicyAssociationsRequest
     * @return ListTargetAlertPolicyAssociationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListTargetAlertPolicyAssociations.ts.html |here} to see how to use ListTargetAlertPolicyAssociations API.
     */
    listTargetAlertPolicyAssociations(listTargetAlertPolicyAssociationsRequest: requests.ListTargetAlertPolicyAssociationsRequest): Promise<responses.ListTargetAlertPolicyAssociationsResponse>;
    /**
     * Returns the list of registered target databases in Data Safe.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTargetDatabasesRequest
     * @return ListTargetDatabasesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListTargetDatabases.ts.html |here} to see how to use ListTargetDatabases API.
     */
    listTargetDatabases(listTargetDatabasesRequest: requests.ListTargetDatabasesRequest): Promise<responses.ListTargetDatabasesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listTargetDatabasesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TargetDatabaseSummary objects
     * contained in responses from the listTargetDatabases operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTargetDatabases(request: requests.ListTargetDatabasesRequest): AsyncIterableIterator<model.TargetDatabaseSummary>;
    /**
     * NOTE: This function is deprecated in favor of listTargetDatabasesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTargetDatabases operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTargetDatabasesResponses(request: requests.ListTargetDatabasesRequest): AsyncIterableIterator<responses.ListTargetDatabasesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.TargetDatabaseSummary objects
     * contained in responses from the listTargetDatabases operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTargetDatabasesRecordIterator(request: requests.ListTargetDatabasesRequest): AsyncIterableIterator<model.TargetDatabaseSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTargetDatabases operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTargetDatabasesResponseIterator(request: requests.ListTargetDatabasesRequest): AsyncIterableIterator<responses.ListTargetDatabasesResponse>;
    /**
     * Gets a list of aggregated user access analytics in the specified target in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListUserAccessAnalyticsRequest
     * @return ListUserAccessAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListUserAccessAnalytics.ts.html |here} to see how to use ListUserAccessAnalytics API.
     */
    listUserAccessAnalytics(listUserAccessAnalyticsRequest: requests.ListUserAccessAnalyticsRequest): Promise<responses.ListUserAccessAnalyticsResponse>;
    /**
       * Gets a list of aggregated user details from the specified user assessment. This provides information about the overall state.
  * of database user security.  For example, the user details include how many users have the DBA role and how many users are in
  * the critical category. This data is especially useful content for dashboards or to support analytics.
  * <p>
  When you perform the ListUserAnalytics operation, if the parameter compartmentIdInSubtree is set to \"true,\" and if the
  * parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has READ
  * permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
  * root compartment and the requestor does not have access to at least one subcompartment of the compartment specified by
  * compartmentId, then \"Not Authorized\" is returned.
  * <p>
  The parameter compartmentIdInSubtree applies when you perform ListUserAnalytics on the compartmentId passed and when it is
  * set to true, the entire hierarchy of compartments can be returned.
  * <p>
  To use ListUserAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
  * set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListUserAnalyticsRequest
       * @return ListUserAnalyticsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListUserAnalytics.ts.html |here} to see how to use ListUserAnalytics API.
       */
    listUserAnalytics(listUserAnalyticsRequest: requests.ListUserAnalyticsRequest): Promise<responses.ListUserAnalyticsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listUserAnalyticsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.UserAggregation objects
     * contained in responses from the listUserAnalytics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserAnalytics(request: requests.ListUserAnalyticsRequest): AsyncIterableIterator<model.UserAggregation>;
    /**
     * NOTE: This function is deprecated in favor of listUserAnalyticsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUserAnalytics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserAnalyticsResponses(request: requests.ListUserAnalyticsRequest): AsyncIterableIterator<responses.ListUserAnalyticsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.UserAggregation objects
     * contained in responses from the listUserAnalytics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserAnalyticsRecordIterator(request: requests.ListUserAnalyticsRequest): AsyncIterableIterator<model.UserAggregation>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUserAnalytics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserAnalyticsResponseIterator(request: requests.ListUserAnalyticsRequest): AsyncIterableIterator<responses.ListUserAnalyticsResponse>;
    /**
       * Gets a list of user assessments.
  * <p>
  The ListUserAssessments operation returns only the assessments in the specified `compartmentId`.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListUserAssessments on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListUserAssessmentsRequest
       * @return ListUserAssessmentsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListUserAssessments.ts.html |here} to see how to use ListUserAssessments API.
       */
    listUserAssessments(listUserAssessmentsRequest: requests.ListUserAssessmentsRequest): Promise<responses.ListUserAssessmentsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listUserAssessmentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.UserAssessmentSummary objects
     * contained in responses from the listUserAssessments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserAssessments(request: requests.ListUserAssessmentsRequest): AsyncIterableIterator<model.UserAssessmentSummary>;
    /**
     * NOTE: This function is deprecated in favor of listUserAssessmentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUserAssessments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUserAssessmentsResponses(request: requests.ListUserAssessmentsRequest): AsyncIterableIterator<responses.ListUserAssessmentsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.UserAssessmentSummary objects
     * contained in responses from the listUserAssessments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserAssessmentsRecordIterator(request: requests.ListUserAssessmentsRequest): AsyncIterableIterator<model.UserAssessmentSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUserAssessments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUserAssessmentsResponseIterator(request: requests.ListUserAssessmentsRequest): AsyncIterableIterator<responses.ListUserAssessmentsResponse>;
    /**
     * Gets a list of users of the specified user assessment. The result contains the database user details for each user, such
     * as user type, account status, last login time, user creation time, authentication type, user profile, and the date and time
     * of the latest password change. It also contains the user category derived from these user details as well as privileges
     * granted to each user.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListUsersRequest
     * @return ListUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListUsers.ts.html |here} to see how to use ListUsers API.
     */
    listUsers(listUsersRequest: requests.ListUsersRequest): Promise<responses.ListUsersResponse>;
    /**
     * NOTE: This function is deprecated in favor of listUsersRecordIterator function.
     * Creates a new async iterator which will iterate over the models.UserSummary objects
     * contained in responses from the listUsers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUsers(request: requests.ListUsersRequest): AsyncIterableIterator<model.UserSummary>;
    /**
     * NOTE: This function is deprecated in favor of listUsersResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllUsersResponses(request: requests.ListUsersRequest): AsyncIterableIterator<responses.ListUsersResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.UserSummary objects
     * contained in responses from the listUsers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUsersRecordIterator(request: requests.ListUsersRequest): AsyncIterableIterator<model.UserSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listUsers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listUsersResponseIterator(request: requests.ListUsersRequest): AsyncIterableIterator<responses.ListUsersResponse>;
    /**
     * Gets a list of errors for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<model.WorkRequestError>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsRecordIterator(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<model.WorkRequestError>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsResponseIterator(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse>;
    /**
     * Gets a list of log entries for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<model.WorkRequestLogEntry>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<responses.ListWorkRequestLogsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsRecordIterator(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<model.WorkRequestLogEntry>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsResponseIterator(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<responses.ListWorkRequestLogsResponse>;
    /**
     * Gets a list of work requests.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<model.WorkRequestSummary>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsRecordIterator(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<model.WorkRequestSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsResponseIterator(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
    /**
     * Masks data using the specified masking policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param MaskDataRequest
     * @return MaskDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/MaskData.ts.html |here} to see how to use MaskData API.
     */
    maskData(maskDataRequest: requests.MaskDataRequest): Promise<responses.MaskDataResponse>;
    /**
     * Modifies Global Settings in Data Safe in the tenancy and region.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ModifyGlobalSettingsRequest
     * @return ModifyGlobalSettingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ModifyGlobalSettings.ts.html |here} to see how to use ModifyGlobalSettings API.
     */
    modifyGlobalSettings(modifyGlobalSettingsRequest: requests.ModifyGlobalSettingsRequest): Promise<responses.ModifyGlobalSettingsResponse>;
    /**
     * Updates the status of one or more alert specified by the alert IDs.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchAlertsRequest
     * @return PatchAlertsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchAlerts.ts.html |here} to see how to use PatchAlerts API.
     */
    patchAlerts(patchAlertsRequest: requests.PatchAlertsRequest): Promise<responses.PatchAlertsResponse>;
    /**
     * Patches one or more discovery results. You can use this operation to set the plannedAction attribute before using
     * ApplyDiscoveryJobResults to process the results based on this attribute.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchDiscoveryJobResultsRequest
     * @return PatchDiscoveryJobResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchDiscoveryJobResults.ts.html |here} to see how to use PatchDiscoveryJobResults API.
     */
    patchDiscoveryJobResults(patchDiscoveryJobResultsRequest: requests.PatchDiscoveryJobResultsRequest): Promise<responses.PatchDiscoveryJobResultsResponse>;
    /**
     * Patches one or more sensitive types in a sensitive type group. You can use this operation to add or remove
     * sensitive type ids in a sensitive type group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchGroupedSensitiveTypesRequest
     * @return PatchGroupedSensitiveTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchGroupedSensitiveTypes.ts.html |here} to see how to use PatchGroupedSensitiveTypes API.
     */
    patchGroupedSensitiveTypes(patchGroupedSensitiveTypesRequest: requests.PatchGroupedSensitiveTypesRequest): Promise<responses.PatchGroupedSensitiveTypesResponse>;
    /**
     * Patches one or more columns in the specified masking policy. Use it to create, or update
     * masking columns. To create masking columns, use CreateMaskingColumnDetails as the patch
     * value. And to update masking columns, use UpdateMaskingColumnDetails as the patch value.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchMaskingColumnsRequest
     * @return PatchMaskingColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchMaskingColumns.ts.html |here} to see how to use PatchMaskingColumns API.
     */
    patchMaskingColumns(patchMaskingColumnsRequest: requests.PatchMaskingColumnsRequest): Promise<responses.PatchMaskingColumnsResponse>;
    /**
     * Patches one or more SDM masking policy difference columns. You can use this operation to set the plannedAction attribute before using
     * ApplySdmMaskingPolicyDifference to process the difference based on this attribute.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchSdmMaskingPolicyDifferenceColumnsRequest
     * @return PatchSdmMaskingPolicyDifferenceColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchSdmMaskingPolicyDifferenceColumns.ts.html |here} to see how to use PatchSdmMaskingPolicyDifferenceColumns API.
     */
    patchSdmMaskingPolicyDifferenceColumns(patchSdmMaskingPolicyDifferenceColumnsRequest: requests.PatchSdmMaskingPolicyDifferenceColumnsRequest): Promise<responses.PatchSdmMaskingPolicyDifferenceColumnsResponse>;
    /**
     * Patches one or more columns in the specified sensitive data model. Use it to create, update, or delete sensitive columns.
     * To create sensitive columns, use CreateSensitiveColumnDetails as the patch value. And to update sensitive columns,
     * use UpdateSensitiveColumnDetails as the patch value.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchSensitiveColumnsRequest
     * @return PatchSensitiveColumnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchSensitiveColumns.ts.html |here} to see how to use PatchSensitiveColumns API.
     */
    patchSensitiveColumns(patchSensitiveColumnsRequest: requests.PatchSensitiveColumnsRequest): Promise<responses.PatchSensitiveColumnsResponse>;
    /**
     * Delete multiple allowed sqls. You can use this operation to delete one or more allowed sqls.
     * Create and update of multiple allowed sqls is not supported.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchSqlFirewallAllowedSqlRequest
     * @return PatchSqlFirewallAllowedSqlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchSqlFirewallAllowedSql.ts.html |here} to see how to use PatchSqlFirewallAllowedSql API.
     */
    patchSqlFirewallAllowedSql(patchSqlFirewallAllowedSqlRequest: requests.PatchSqlFirewallAllowedSqlRequest): Promise<responses.PatchSqlFirewallAllowedSqlResponse>;
    /**
     * Creates new target-alert policy associations that will be applied on the target database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchTargetAlertPolicyAssociationRequest
     * @return PatchTargetAlertPolicyAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PatchTargetAlertPolicyAssociation.ts.html |here} to see how to use PatchTargetAlertPolicyAssociation API.
     */
    patchTargetAlertPolicyAssociation(patchTargetAlertPolicyAssociationRequest: requests.PatchTargetAlertPolicyAssociationRequest): Promise<responses.PatchTargetAlertPolicyAssociationResponse>;
    /**
     * Provision audit policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ProvisionAuditPolicyRequest
     * @return ProvisionAuditPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ProvisionAuditPolicy.ts.html |here} to see how to use ProvisionAuditPolicy API.
     */
    provisionAuditPolicy(provisionAuditPolicyRequest: requests.ProvisionAuditPolicyRequest): Promise<responses.ProvisionAuditPolicyResponse>;
    /**
     * Purge the SQL collection logs for the specified SqlCollection.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PurgeSqlCollectionLogsRequest
     * @return PurgeSqlCollectionLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/PurgeSqlCollectionLogs.ts.html |here} to see how to use PurgeSqlCollectionLogs API.
     */
    purgeSqlCollectionLogs(purgeSqlCollectionLogsRequest: requests.PurgeSqlCollectionLogsRequest): Promise<responses.PurgeSqlCollectionLogsResponse>;
    /**
     * Refreshes the specified database security configuration.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RefreshDatabaseSecurityConfigurationRequest
     * @return RefreshDatabaseSecurityConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshDatabaseSecurityConfiguration.ts.html |here} to see how to use RefreshDatabaseSecurityConfiguration API.
     */
    refreshDatabaseSecurityConfiguration(refreshDatabaseSecurityConfigurationRequest: requests.RefreshDatabaseSecurityConfigurationRequest): Promise<responses.RefreshDatabaseSecurityConfigurationResponse>;
    /**
     * Runs a security assessment, refreshes the latest assessment, and saves it for future reference.
     * The assessment runs with a securityAssessmentId of type LATEST. Before you start, first call the ListSecurityAssessments operation with filter \"type = latest\" to get the security assessment id for the target's latest assessment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RefreshSecurityAssessmentRequest
     * @return RefreshSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshSecurityAssessment.ts.html |here} to see how to use RefreshSecurityAssessment API.
     */
    refreshSecurityAssessment(refreshSecurityAssessmentRequest: requests.RefreshSecurityAssessmentRequest): Promise<responses.RefreshSecurityAssessmentResponse>;
    /**
     * Refresh the specified SQL collection Log Insights.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RefreshSqlCollectionLogInsightsRequest
     * @return RefreshSqlCollectionLogInsightsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshSqlCollectionLogInsights.ts.html |here} to see how to use RefreshSqlCollectionLogInsights API.
     */
    refreshSqlCollectionLogInsights(refreshSqlCollectionLogInsightsRequest: requests.RefreshSqlCollectionLogInsightsRequest): Promise<responses.RefreshSqlCollectionLogInsightsResponse>;
    /**
     * Refreshes the Data Safe target database to update it's state.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RefreshTargetDatabaseRequest
     * @return RefreshTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshTargetDatabase.ts.html |here} to see how to use RefreshTargetDatabase API.
     */
    refreshTargetDatabase(refreshTargetDatabaseRequest: requests.RefreshTargetDatabaseRequest): Promise<responses.RefreshTargetDatabaseResponse>;
    /**
     * Refreshes the latest assessment and saves it for future reference. This operation runs with a userAssessmentId of type LATEST.
     * Before you start, first call the ListUserAssessments operation with filter \"type = latest\" to get the user assessment ID for
     * the target's latest assessment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RefreshUserAssessmentRequest
     * @return RefreshUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RefreshUserAssessment.ts.html |here} to see how to use RefreshUserAssessment API.
     */
    refreshUserAssessment(refreshUserAssessmentRequest: requests.RefreshUserAssessmentRequest): Promise<responses.RefreshUserAssessmentResponse>;
    /**
     * Deletes the schedule of a .xls or .pdf report.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveScheduleReportRequest
     * @return RemoveScheduleReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RemoveScheduleReport.ts.html |here} to see how to use RemoveScheduleReport API.
     */
    removeScheduleReport(removeScheduleReportRequest: requests.RemoveScheduleReportRequest): Promise<responses.RemoveScheduleReportResponse>;
    /**
     * Resumes the specified audit trail once it got stopped.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ResumeAuditTrailRequest
     * @return ResumeAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ResumeAuditTrail.ts.html |here} to see how to use ResumeAuditTrail API.
     */
    resumeAuditTrail(resumeAuditTrailRequest: requests.ResumeAuditTrailRequest): Promise<responses.ResumeAuditTrailResponse>;
    /**
     * Resume the given work request. Issuing a resume does not guarantee of immediate resume of the work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ResumeWorkRequestRequest
     * @return ResumeWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ResumeWorkRequest.ts.html |here} to see how to use ResumeWorkRequest API.
     */
    resumeWorkRequest(resumeWorkRequestRequest: requests.ResumeWorkRequestRequest): Promise<responses.ResumeWorkRequestResponse>;
    /**
     * Retrieves the audit policy details from the source target database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RetrieveAuditPoliciesRequest
     * @return RetrieveAuditPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/RetrieveAuditPolicies.ts.html |here} to see how to use RetrieveAuditPolicies API.
     */
    retrieveAuditPolicies(retrieveAuditPoliciesRequest: requests.RetrieveAuditPoliciesRequest): Promise<responses.RetrieveAuditPoliciesResponse>;
    /**
     * Schedules a .xls or .pdf report based on parameters and report definition.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ScheduleReportRequest
     * @return ScheduleReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ScheduleReport.ts.html |here} to see how to use ScheduleReport API.
     */
    scheduleReport(scheduleReportRequest: requests.ScheduleReportRequest): Promise<responses.ScheduleReportResponse>;
    /**
     * Sets the saved security assessment as the baseline in the compartment where the the specified assessment resides. The security assessment needs to be of type 'SAVED'.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SetSecurityAssessmentBaselineRequest
     * @return SetSecurityAssessmentBaselineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/SetSecurityAssessmentBaseline.ts.html |here} to see how to use SetSecurityAssessmentBaseline API.
     */
    setSecurityAssessmentBaseline(setSecurityAssessmentBaselineRequest: requests.SetSecurityAssessmentBaselineRequest): Promise<responses.SetSecurityAssessmentBaselineResponse>;
    /**
     * Sets the saved user assessment as the baseline in the compartment where the specified assessment resides. The user assessment needs to be of type 'SAVED'.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SetUserAssessmentBaselineRequest
     * @return SetUserAssessmentBaselineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/SetUserAssessmentBaseline.ts.html |here} to see how to use SetUserAssessmentBaseline API.
     */
    setUserAssessmentBaseline(setUserAssessmentBaselineRequest: requests.SetUserAssessmentBaselineRequest): Promise<responses.SetUserAssessmentBaselineResponse>;
    /**
     * Starts collection of audit records on the specified audit trail.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StartAuditTrailRequest
     * @return StartAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/StartAuditTrail.ts.html |here} to see how to use StartAuditTrail API.
     */
    startAuditTrail(startAuditTrailRequest: requests.StartAuditTrailRequest): Promise<responses.StartAuditTrailResponse>;
    /**
     * Start the specified SQL collection.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StartSqlCollectionRequest
     * @return StartSqlCollectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/StartSqlCollection.ts.html |here} to see how to use StartSqlCollection API.
     */
    startSqlCollection(startSqlCollectionRequest: requests.StartSqlCollectionRequest): Promise<responses.StartSqlCollectionResponse>;
    /**
     * Stops the specified audit trail.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StopAuditTrailRequest
     * @return StopAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/StopAuditTrail.ts.html |here} to see how to use StopAuditTrail API.
     */
    stopAuditTrail(stopAuditTrailRequest: requests.StopAuditTrailRequest): Promise<responses.StopAuditTrailResponse>;
    /**
     * Stops the specified SQL collection.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StopSqlCollectionRequest
     * @return StopSqlCollectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/StopSqlCollection.ts.html |here} to see how to use StopSqlCollection API.
     */
    stopSqlCollection(stopSqlCollectionRequest: requests.StopSqlCollectionRequest): Promise<responses.StopSqlCollectionResponse>;
    /**
     * Suspend the given work request. Issuing a suspend does not guarantee of a immediate suspend of the work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SuspendWorkRequestRequest
     * @return SuspendWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/SuspendWorkRequest.ts.html |here} to see how to use SuspendWorkRequest API.
     */
    suspendWorkRequest(suspendWorkRequestRequest: requests.SuspendWorkRequestRequest): Promise<responses.SuspendWorkRequestResponse>;
    /**
     * Removes the baseline setting for the saved security assessment associated with the targetId passed via body.
     * If no body or empty body is passed then the baseline settings of all the saved security assessments pertaining to the baseline assessment OCID provided in the path will be removed.
     * Sets the if-match parameter to the value of the etag from a previous GET or POST response for that resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UnsetSecurityAssessmentBaselineRequest
     * @return UnsetSecurityAssessmentBaselineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UnsetSecurityAssessmentBaseline.ts.html |here} to see how to use UnsetSecurityAssessmentBaseline API.
     */
    unsetSecurityAssessmentBaseline(unsetSecurityAssessmentBaselineRequest: requests.UnsetSecurityAssessmentBaselineRequest): Promise<responses.UnsetSecurityAssessmentBaselineResponse>;
    /**
     * Removes the baseline setting for the saved user assessment associated with the targetId passed via body.
     * If no body or empty body is passed then the baseline settings of all the saved user assessments pertaining to the baseline assessment OCID provided in the path will be removed.
     * Sets the if-match parameter to the value of the etag from a previous GET or POST response for that resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UnsetUserAssessmentBaselineRequest
     * @return UnsetUserAssessmentBaselineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UnsetUserAssessmentBaseline.ts.html |here} to see how to use UnsetUserAssessmentBaseline API.
     */
    unsetUserAssessmentBaseline(unsetUserAssessmentBaselineRequest: requests.UnsetUserAssessmentBaselineRequest): Promise<responses.UnsetUserAssessmentBaselineResponse>;
    /**
     * Updates the status of the specified alert.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAlertRequest
     * @return UpdateAlertResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAlert.ts.html |here} to see how to use UpdateAlert API.
     */
    updateAlert(updateAlertRequest: requests.UpdateAlertRequest): Promise<responses.UpdateAlertResponse>;
    /**
     * Updates the specified alert policy .
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAlertPolicyRequest
     * @return UpdateAlertPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAlertPolicy.ts.html |here} to see how to use UpdateAlertPolicy API.
     */
    updateAlertPolicy(updateAlertPolicyRequest: requests.UpdateAlertPolicyRequest): Promise<responses.UpdateAlertPolicyResponse>;
    /**
     * Updates the specified alert policy rule.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAlertPolicyRuleRequest
     * @return UpdateAlertPolicyRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAlertPolicyRule.ts.html |here} to see how to use UpdateAlertPolicyRule API.
     */
    updateAlertPolicyRule(updateAlertPolicyRuleRequest: requests.UpdateAlertPolicyRuleRequest): Promise<responses.UpdateAlertPolicyRuleResponse>;
    /**
     * Updates the audit archive retrieval.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuditArchiveRetrievalRequest
     * @return UpdateAuditArchiveRetrievalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAuditArchiveRetrieval.ts.html |here} to see how to use UpdateAuditArchiveRetrieval API.
     */
    updateAuditArchiveRetrieval(updateAuditArchiveRetrievalRequest: requests.UpdateAuditArchiveRetrievalRequest): Promise<responses.UpdateAuditArchiveRetrievalResponse>;
    /**
     * Updates the audit policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuditPolicyRequest
     * @return UpdateAuditPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAuditPolicy.ts.html |here} to see how to use UpdateAuditPolicy API.
     */
    updateAuditPolicy(updateAuditPolicyRequest: requests.UpdateAuditPolicyRequest): Promise<responses.UpdateAuditPolicyResponse>;
    /**
     * Updates one or more attributes of the specified audit profile.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuditProfileRequest
     * @return UpdateAuditProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAuditProfile.ts.html |here} to see how to use UpdateAuditProfile API.
     */
    updateAuditProfile(updateAuditProfileRequest: requests.UpdateAuditProfileRequest): Promise<responses.UpdateAuditProfileResponse>;
    /**
     * Updates one or more attributes of the specified audit trail.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAuditTrailRequest
     * @return UpdateAuditTrailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateAuditTrail.ts.html |here} to see how to use UpdateAuditTrail API.
     */
    updateAuditTrail(updateAuditTrailRequest: requests.UpdateAuditTrailRequest): Promise<responses.UpdateAuditTrailResponse>;
    /**
     * Updates one or more attributes of the specified Data Safe private endpoint.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDataSafePrivateEndpointRequest
     * @return UpdateDataSafePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateDataSafePrivateEndpoint.ts.html |here} to see how to use UpdateDataSafePrivateEndpoint API.
     */
    updateDataSafePrivateEndpoint(updateDataSafePrivateEndpointRequest: requests.UpdateDataSafePrivateEndpointRequest): Promise<responses.UpdateDataSafePrivateEndpointResponse>;
    /**
     * Updates the database security configuration.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDatabaseSecurityConfigRequest
     * @return UpdateDatabaseSecurityConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateDatabaseSecurityConfig.ts.html |here} to see how to use UpdateDatabaseSecurityConfig API.
     */
    updateDatabaseSecurityConfig(updateDatabaseSecurityConfigRequest: requests.UpdateDatabaseSecurityConfigRequest): Promise<responses.UpdateDatabaseSecurityConfigResponse>;
    /**
     * Updates one or more attributes of the specified finding.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateFindingRequest
     * @return UpdateFindingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateFinding.ts.html |here} to see how to use UpdateFinding API.
     */
    updateFinding(updateFindingRequest: requests.UpdateFindingRequest): Promise<responses.UpdateFindingResponse>;
    /**
     * Updates one or more attributes of the specified library masking format. Note that updating the formatEntries attribute replaces all the existing masking format entries with the specified format entries.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateLibraryMaskingFormatRequest
     * @return UpdateLibraryMaskingFormatResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateLibraryMaskingFormat.ts.html |here} to see how to use UpdateLibraryMaskingFormat API.
     */
    updateLibraryMaskingFormat(updateLibraryMaskingFormatRequest: requests.UpdateLibraryMaskingFormatRequest): Promise<responses.UpdateLibraryMaskingFormatResponse>;
    /**
     * Updates one or more attributes of the specified masking column. Note that updating the maskingFormats
     * attribute replaces the currently assigned masking formats with the specified masking formats.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMaskingColumnRequest
     * @return UpdateMaskingColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateMaskingColumn.ts.html |here} to see how to use UpdateMaskingColumn API.
     */
    updateMaskingColumn(updateMaskingColumnRequest: requests.UpdateMaskingColumnRequest): Promise<responses.UpdateMaskingColumnResponse>;
    /**
     * Updates one or more attributes of the specified masking policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMaskingPolicyRequest
     * @return UpdateMaskingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateMaskingPolicy.ts.html |here} to see how to use UpdateMaskingPolicy API.
     */
    updateMaskingPolicy(updateMaskingPolicyRequest: requests.UpdateMaskingPolicyRequest): Promise<responses.UpdateMaskingPolicyResponse>;
    /**
     * Updates one or more attributes of the specified on-premises connector.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOnPremConnectorRequest
     * @return UpdateOnPremConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateOnPremConnector.ts.html |here} to see how to use UpdateOnPremConnector API.
     */
    updateOnPremConnector(updateOnPremConnectorRequest: requests.UpdateOnPremConnectorRequest): Promise<responses.UpdateOnPremConnectorResponse>;
    /**
     * Updates the wallet for the specified on-premises connector to a new version.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOnPremConnectorWalletRequest
     * @return UpdateOnPremConnectorWalletResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateOnPremConnectorWallet.ts.html |here} to see how to use UpdateOnPremConnectorWallet API.
     */
    updateOnPremConnectorWallet(updateOnPremConnectorWalletRequest: requests.UpdateOnPremConnectorWalletRequest): Promise<responses.UpdateOnPremConnectorWalletResponse>;
    /**
     * Updates one or more attributes of the specified Data Safe peer target database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdatePeerTargetDatabaseRequest
     * @return UpdatePeerTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdatePeerTargetDatabase.ts.html |here} to see how to use UpdatePeerTargetDatabase API.
     */
    updatePeerTargetDatabase(updatePeerTargetDatabaseRequest: requests.UpdatePeerTargetDatabaseRequest): Promise<responses.UpdatePeerTargetDatabaseResponse>;
    /**
     * Updates the specified report. Only tags can be updated.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateReportRequest
     * @return UpdateReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateReport.ts.html |here} to see how to use UpdateReport API.
     */
    updateReport(updateReportRequest: requests.UpdateReportRequest): Promise<responses.UpdateReportResponse>;
    /**
     * Updates the specified report definition. Only user created report definition can be updated. Seeded report definitions need to be saved as new report definition first.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateReportDefinitionRequest
     * @return UpdateReportDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateReportDefinition.ts.html |here} to see how to use UpdateReportDefinition API.
     */
    updateReportDefinition(updateReportDefinitionRequest: requests.UpdateReportDefinitionRequest): Promise<responses.UpdateReportDefinitionResponse>;
    /**
     * Updates one or more attributes of the specified sdm masking policy difference.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSdmMaskingPolicyDifferenceRequest
     * @return UpdateSdmMaskingPolicyDifferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSdmMaskingPolicyDifference.ts.html |here} to see how to use UpdateSdmMaskingPolicyDifference API.
     */
    updateSdmMaskingPolicyDifference(updateSdmMaskingPolicyDifferenceRequest: requests.UpdateSdmMaskingPolicyDifferenceRequest): Promise<responses.UpdateSdmMaskingPolicyDifferenceResponse>;
    /**
     * Updates one or more attributes of the specified security assessment. This operation allows to update the security assessment displayName, description, or schedule.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSecurityAssessmentRequest
     * @return UpdateSecurityAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSecurityAssessment.ts.html |here} to see how to use UpdateSecurityAssessment API.
     */
    updateSecurityAssessment(updateSecurityAssessmentRequest: requests.UpdateSecurityAssessmentRequest): Promise<responses.UpdateSecurityAssessmentResponse>;
    /**
     * Updates the security policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSecurityPolicyRequest
     * @return UpdateSecurityPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSecurityPolicy.ts.html |here} to see how to use UpdateSecurityPolicy API.
     */
    updateSecurityPolicy(updateSecurityPolicyRequest: requests.UpdateSecurityPolicyRequest): Promise<responses.UpdateSecurityPolicyResponse>;
    /**
     * Updates the security policy deployment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSecurityPolicyDeploymentRequest
     * @return UpdateSecurityPolicyDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSecurityPolicyDeployment.ts.html |here} to see how to use UpdateSecurityPolicyDeployment API.
     */
    updateSecurityPolicyDeployment(updateSecurityPolicyDeploymentRequest: requests.UpdateSecurityPolicyDeploymentRequest): Promise<responses.UpdateSecurityPolicyDeploymentResponse>;
    /**
     * Updates one or more attributes of the specified sensitive column.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSensitiveColumnRequest
     * @return UpdateSensitiveColumnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSensitiveColumn.ts.html |here} to see how to use UpdateSensitiveColumn API.
     */
    updateSensitiveColumn(updateSensitiveColumnRequest: requests.UpdateSensitiveColumnRequest): Promise<responses.UpdateSensitiveColumnResponse>;
    /**
     * Updates one or more attributes of the specified sensitive data model. Note that updating any attribute of a sensitive
     * data model does not perform data discovery.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSensitiveDataModelRequest
     * @return UpdateSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSensitiveDataModel.ts.html |here} to see how to use UpdateSensitiveDataModel API.
     */
    updateSensitiveDataModel(updateSensitiveDataModelRequest: requests.UpdateSensitiveDataModelRequest): Promise<responses.UpdateSensitiveDataModelResponse>;
    /**
     * Updates one or more attributes of the specified sensitive type.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSensitiveTypeRequest
     * @return UpdateSensitiveTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSensitiveType.ts.html |here} to see how to use UpdateSensitiveType API.
     */
    updateSensitiveType(updateSensitiveTypeRequest: requests.UpdateSensitiveTypeRequest): Promise<responses.UpdateSensitiveTypeResponse>;
    /**
     * Updates one or more attributes of the specified sensitive type group.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSensitiveTypeGroupRequest
     * @return UpdateSensitiveTypeGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSensitiveTypeGroup.ts.html |here} to see how to use UpdateSensitiveTypeGroup API.
     */
    updateSensitiveTypeGroup(updateSensitiveTypeGroupRequest: requests.UpdateSensitiveTypeGroupRequest): Promise<responses.UpdateSensitiveTypeGroupResponse>;
    /**
     * Updates one or more attributes of the specified sensitive types export.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSensitiveTypesExportRequest
     * @return UpdateSensitiveTypesExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSensitiveTypesExport.ts.html |here} to see how to use UpdateSensitiveTypesExport API.
     */
    updateSensitiveTypesExport(updateSensitiveTypesExportRequest: requests.UpdateSensitiveTypesExportRequest): Promise<responses.UpdateSensitiveTypesExportResponse>;
    /**
     * Updates the SQL collection.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSqlCollectionRequest
     * @return UpdateSqlCollectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSqlCollection.ts.html |here} to see how to use UpdateSqlCollection API.
     */
    updateSqlCollection(updateSqlCollectionRequest: requests.UpdateSqlCollectionRequest): Promise<responses.UpdateSqlCollectionResponse>;
    /**
     * Updates the SQL Firewall policy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSqlFirewallPolicyRequest
     * @return UpdateSqlFirewallPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateSqlFirewallPolicy.ts.html |here} to see how to use UpdateSqlFirewallPolicy API.
     */
    updateSqlFirewallPolicy(updateSqlFirewallPolicyRequest: requests.UpdateSqlFirewallPolicyRequest): Promise<responses.UpdateSqlFirewallPolicyResponse>;
    /**
     * Updates the specified target-alert policy association.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateTargetAlertPolicyAssociationRequest
     * @return UpdateTargetAlertPolicyAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateTargetAlertPolicyAssociation.ts.html |here} to see how to use UpdateTargetAlertPolicyAssociation API.
     */
    updateTargetAlertPolicyAssociation(updateTargetAlertPolicyAssociationRequest: requests.UpdateTargetAlertPolicyAssociationRequest): Promise<responses.UpdateTargetAlertPolicyAssociationResponse>;
    /**
     * Updates one or more attributes of the specified Data Safe target database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateTargetDatabaseRequest
     * @return UpdateTargetDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateTargetDatabase.ts.html |here} to see how to use UpdateTargetDatabase API.
     */
    updateTargetDatabase(updateTargetDatabaseRequest: requests.UpdateTargetDatabaseRequest): Promise<responses.UpdateTargetDatabaseResponse>;
    /**
     * Updates one or more attributes of the specified user assessment. This operation allows to update the user assessment displayName, description, or schedule.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateUserAssessmentRequest
     * @return UpdateUserAssessmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UpdateUserAssessment.ts.html |here} to see how to use UpdateUserAssessment API.
     */
    updateUserAssessment(updateUserAssessmentRequest: requests.UpdateUserAssessmentRequest): Promise<responses.UpdateUserAssessmentResponse>;
    /**
     * Uploads a masking policy file (also called template) to update the specified masking policy.
     * To create a new masking policy using a file, first use the CreateMaskingPolicy operation
     * to create an empty masking policy and then use this endpoint to upload the masking policy file.
     * Note that the upload operation replaces the content of the specified masking policy,
     * including all the existing columns and masking formats, with the content of the file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UploadMaskingPolicyRequest
     * @return UploadMaskingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UploadMaskingPolicy.ts.html |here} to see how to use UploadMaskingPolicy API.
     */
    uploadMaskingPolicy(uploadMaskingPolicyRequest: requests.UploadMaskingPolicyRequest): Promise<responses.UploadMaskingPolicyResponse>;
    /**
     * Uploads a sensitive data model file (also called template) to update the specified sensitive data model. To create
     * a new sensitive data model using a file, first use the CreateSensitiveDataModel operation to create an empty data model
     * and then use this endpoint to upload the data model file. Note that the upload operation replaces the content of the
     * specified sensitive data model, including all the existing columns and their relationships, with the content of the file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UploadSensitiveDataModelRequest
     * @return UploadSensitiveDataModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/UploadSensitiveDataModel.ts.html |here} to see how to use UploadSensitiveDataModel API.
     */
    uploadSensitiveDataModel(uploadSensitiveDataModelRequest: requests.UploadSensitiveDataModelRequest): Promise<responses.UploadSensitiveDataModelResponse>;
}
export {};
