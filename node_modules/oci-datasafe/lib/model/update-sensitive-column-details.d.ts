/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * Details to update a sensitive column in a sensitive data model.
 */
export interface UpdateSensitiveColumnDetails {
    /**
     * The data type of the sensitive column.
     */
    "dataType"?: string;
    /**
     * The status of the sensitive column. VALID means the column is considered sensitive. INVALID means the column
     * is not considered sensitive. Tracking invalid columns in a sensitive data model helps ensure that an incremental
     * data discovery job does not identify these columns as sensitive.
     *
     */
    "status"?: UpdateSensitiveColumnDetails.Status;
    /**
     * The OCID of the sensitive type to be associated with the sensitive column.
     */
    "sensitiveTypeId"?: string;
    /**
     * Unique keys identifying the columns that are parents of the sensitive column. At present, it accepts only one
     * parent column key. This attribute can be used to establish relationship between columns in a sensitive data model.
     * Note that the parent column must be added to the sensitive data model before its key can be specified here.
     * If this attribute is provided, the appDefinedChildColumnKeys or dbDefinedChildColumnKeys attribute of the
     * parent column is automatically updated to reflect the relationship.
     *
     */
    "parentColumnKeys"?: Array<string>;
    /**
     * The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive
     * column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary.
     * APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
     *
     */
    "relationType"?: UpdateSensitiveColumnDetails.RelationType;
    /**
     * Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
     * This attribute can be used to establish relationship between columns in a sensitive data model. Note that the
     * child columns must be added to the sensitive data model before their keys can be specified here. If this attribute
     * is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     *
     */
    "appDefinedChildColumnKeys"?: Array<string>;
    /**
     * Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
     * This attribute can be used to establish relationship between columns in a sensitive data model. Note that the
     * child columns must be added to the sensitive data model before their keys can be specified here. If this attribute
     * is provided, the parentColumnKeys and relationType attributes of the child columns are automatically updated to reflect the relationship.
     *
     */
    "dbDefinedChildColumnKeys"?: Array<string>;
}
export declare namespace UpdateSensitiveColumnDetails {
    enum Status {
        Valid = "VALID",
        Invalid = "INVALID"
    }
    enum RelationType {
        None = "NONE",
        AppDefined = "APP_DEFINED",
        DbDefined = "DB_DEFINED"
    }
    function getJsonObj(obj: UpdateSensitiveColumnDetails): object;
    function getDeserializedJsonObj(obj: UpdateSensitiveColumnDetails): object;
}
