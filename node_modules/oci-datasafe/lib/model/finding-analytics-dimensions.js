"use strict";
/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindingAnalyticsDimensions = void 0;
var FindingAnalyticsDimensions;
(function (FindingAnalyticsDimensions) {
    let TopFindingStatus;
    (function (TopFindingStatus) {
        TopFindingStatus["Risk"] = "RISK";
        TopFindingStatus["Evaluate"] = "EVALUATE";
        TopFindingStatus["Advisory"] = "ADVISORY";
        TopFindingStatus["Pass"] = "PASS";
        TopFindingStatus["Deferred"] = "DEFERRED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        TopFindingStatus["UnknownValue"] = "UNKNOWN_VALUE";
    })(TopFindingStatus = FindingAnalyticsDimensions.TopFindingStatus || (FindingAnalyticsDimensions.TopFindingStatus = {}));
    let Severity;
    (function (Severity) {
        Severity["High"] = "HIGH";
        Severity["Medium"] = "MEDIUM";
        Severity["Low"] = "LOW";
        Severity["Evaluate"] = "EVALUATE";
        Severity["Advisory"] = "ADVISORY";
        Severity["Pass"] = "PASS";
        Severity["Deferred"] = "DEFERRED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Severity["UnknownValue"] = "UNKNOWN_VALUE";
    })(Severity = FindingAnalyticsDimensions.Severity || (FindingAnalyticsDimensions.Severity = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    FindingAnalyticsDimensions.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    FindingAnalyticsDimensions.getDeserializedJsonObj = getDeserializedJsonObj;
})(FindingAnalyticsDimensions = exports.FindingAnalyticsDimensions || (exports.FindingAnalyticsDimensions = {}));
//# sourceMappingURL=finding-analytics-dimensions.js.map