/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DataSafeClient } from "./client";
export declare class DataSafeWaiter {
    private client;
    private readonly config?;
    constructor(client: DataSafeClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAlert till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAlertResponse
     */
    forAlert(request: serviceRequests.GetAlertRequest, ...targetStates: models.AlertLifecycleState[]): Promise<serviceResponses.GetAlertResponse>;
    /**
     * Waits forAlertPolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAlertPolicyResponse | null (null in case of 404 response)
     */
    forAlertPolicy(request: serviceRequests.GetAlertPolicyRequest, ...targetStates: models.AlertPolicyLifecycleState[]): Promise<serviceResponses.GetAlertPolicyResponse | null>;
    /**
     * Waits forAlertPolicyRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAlertPolicyRuleResponse
     */
    forAlertPolicyRule(request: serviceRequests.GetAlertPolicyRuleRequest, ...targetStates: models.AlertPolicyRuleLifecycleState[]): Promise<serviceResponses.GetAlertPolicyRuleResponse>;
    /**
     * Waits forAuditArchiveRetrieval till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAuditArchiveRetrievalResponse | null (null in case of 404 response)
     */
    forAuditArchiveRetrieval(request: serviceRequests.GetAuditArchiveRetrievalRequest, ...targetStates: models.AuditArchiveRetrievalLifecycleState[]): Promise<serviceResponses.GetAuditArchiveRetrievalResponse | null>;
    /**
     * Waits forAuditPolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAuditPolicyResponse | null (null in case of 404 response)
     */
    forAuditPolicy(request: serviceRequests.GetAuditPolicyRequest, ...targetStates: models.AuditPolicyLifecycleState[]): Promise<serviceResponses.GetAuditPolicyResponse | null>;
    /**
     * Waits forAuditProfile till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAuditProfileResponse | null (null in case of 404 response)
     */
    forAuditProfile(request: serviceRequests.GetAuditProfileRequest, ...targetStates: models.AuditProfileLifecycleState[]): Promise<serviceResponses.GetAuditProfileResponse | null>;
    /**
     * Waits forAuditTrail till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAuditTrailResponse
     */
    forAuditTrail(request: serviceRequests.GetAuditTrailRequest, ...targetStates: models.AuditTrailLifecycleState[]): Promise<serviceResponses.GetAuditTrailResponse>;
    /**
     * Waits forDataSafeConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataSafeConfigurationResponse | null (null in case of 404 response)
     */
    forDataSafeConfiguration(request: serviceRequests.GetDataSafeConfigurationRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDataSafeConfigurationResponse | null>;
    /**
     * Waits forDataSafePrivateEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataSafePrivateEndpointResponse | null (null in case of 404 response)
     */
    forDataSafePrivateEndpoint(request: serviceRequests.GetDataSafePrivateEndpointRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDataSafePrivateEndpointResponse | null>;
    /**
     * Waits forDatabaseSecurityConfig till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDatabaseSecurityConfigResponse | null (null in case of 404 response)
     */
    forDatabaseSecurityConfig(request: serviceRequests.GetDatabaseSecurityConfigRequest, ...targetStates: models.DatabaseSecurityConfigLifecycleState[]): Promise<serviceResponses.GetDatabaseSecurityConfigResponse | null>;
    /**
     * Waits forDiscoveryJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDiscoveryJobResponse | null (null in case of 404 response)
     */
    forDiscoveryJob(request: serviceRequests.GetDiscoveryJobRequest, ...targetStates: models.DiscoveryLifecycleState[]): Promise<serviceResponses.GetDiscoveryJobResponse | null>;
    /**
     * Waits forLibraryMaskingFormat till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLibraryMaskingFormatResponse | null (null in case of 404 response)
     */
    forLibraryMaskingFormat(request: serviceRequests.GetLibraryMaskingFormatRequest, ...targetStates: models.MaskingLifecycleState[]): Promise<serviceResponses.GetLibraryMaskingFormatResponse | null>;
    /**
     * Waits forMaskingColumn till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMaskingColumnResponse
     */
    forMaskingColumn(request: serviceRequests.GetMaskingColumnRequest, ...targetStates: models.MaskingColumnLifecycleState[]): Promise<serviceResponses.GetMaskingColumnResponse>;
    /**
     * Waits forMaskingPolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMaskingPolicyResponse | null (null in case of 404 response)
     */
    forMaskingPolicy(request: serviceRequests.GetMaskingPolicyRequest, ...targetStates: models.MaskingLifecycleState[]): Promise<serviceResponses.GetMaskingPolicyResponse | null>;
    /**
     * Waits forMaskingPolicyHealthReport till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMaskingPolicyHealthReportResponse
     */
    forMaskingPolicyHealthReport(request: serviceRequests.GetMaskingPolicyHealthReportRequest, ...targetStates: models.MaskingPolicyHealthReport.LifecycleState[]): Promise<serviceResponses.GetMaskingPolicyHealthReportResponse>;
    /**
     * Waits forMaskingReport till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMaskingReportResponse | null (null in case of 404 response)
     */
    forMaskingReport(request: serviceRequests.GetMaskingReportRequest, ...targetStates: models.MaskingLifecycleState[]): Promise<serviceResponses.GetMaskingReportResponse | null>;
    /**
     * Waits forOnPremConnector till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOnPremConnectorResponse | null (null in case of 404 response)
     */
    forOnPremConnector(request: serviceRequests.GetOnPremConnectorRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetOnPremConnectorResponse | null>;
    /**
     * Waits forPeerTargetDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPeerTargetDatabaseResponse | null (null in case of 404 response)
     */
    forPeerTargetDatabase(request: serviceRequests.GetPeerTargetDatabaseRequest, ...targetStates: models.TargetDatabaseLifecycleState[]): Promise<serviceResponses.GetPeerTargetDatabaseResponse | null>;
    /**
     * Waits forReferentialRelation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetReferentialRelationResponse
     */
    forReferentialRelation(request: serviceRequests.GetReferentialRelationRequest, ...targetStates: models.ReferentialRelationLifecycleState[]): Promise<serviceResponses.GetReferentialRelationResponse>;
    /**
     * Waits forReport till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetReportResponse
     */
    forReport(request: serviceRequests.GetReportRequest, ...targetStates: models.ReportLifecycleState[]): Promise<serviceResponses.GetReportResponse>;
    /**
     * Waits forReportDefinition till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetReportDefinitionResponse | null (null in case of 404 response)
     */
    forReportDefinition(request: serviceRequests.GetReportDefinitionRequest, ...targetStates: models.ReportDefinitionLifecycleState[]): Promise<serviceResponses.GetReportDefinitionResponse | null>;
    /**
     * Waits forSdmMaskingPolicyDifference till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSdmMaskingPolicyDifferenceResponse | null (null in case of 404 response)
     */
    forSdmMaskingPolicyDifference(request: serviceRequests.GetSdmMaskingPolicyDifferenceRequest, ...targetStates: models.SdmMaskingPolicyDifference.LifecycleState[]): Promise<serviceResponses.GetSdmMaskingPolicyDifferenceResponse | null>;
    /**
     * Waits forSecurityAssessment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSecurityAssessmentResponse | null (null in case of 404 response)
     */
    forSecurityAssessment(request: serviceRequests.GetSecurityAssessmentRequest, ...targetStates: models.SecurityAssessmentLifecycleState[]): Promise<serviceResponses.GetSecurityAssessmentResponse | null>;
    /**
     * Waits forSecurityAssessmentComparison till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSecurityAssessmentComparisonResponse
     */
    forSecurityAssessmentComparison(request: serviceRequests.GetSecurityAssessmentComparisonRequest, ...targetStates: models.SecurityAssessmentComparison.LifecycleState[]): Promise<serviceResponses.GetSecurityAssessmentComparisonResponse>;
    /**
     * Waits forSecurityPolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSecurityPolicyResponse | null (null in case of 404 response)
     */
    forSecurityPolicy(request: serviceRequests.GetSecurityPolicyRequest, ...targetStates: models.SecurityPolicyLifecycleState[]): Promise<serviceResponses.GetSecurityPolicyResponse | null>;
    /**
     * Waits forSecurityPolicyDeployment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSecurityPolicyDeploymentResponse | null (null in case of 404 response)
     */
    forSecurityPolicyDeployment(request: serviceRequests.GetSecurityPolicyDeploymentRequest, ...targetStates: models.SecurityPolicyDeploymentLifecycleState[]): Promise<serviceResponses.GetSecurityPolicyDeploymentResponse | null>;
    /**
     * Waits forSecurityPolicyReport till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSecurityPolicyReportResponse | null (null in case of 404 response)
     */
    forSecurityPolicyReport(request: serviceRequests.GetSecurityPolicyReportRequest, ...targetStates: models.SecurityPolicyReportLifecycleState[]): Promise<serviceResponses.GetSecurityPolicyReportResponse | null>;
    /**
     * Waits forSensitiveColumn till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSensitiveColumnResponse
     */
    forSensitiveColumn(request: serviceRequests.GetSensitiveColumnRequest, ...targetStates: models.SensitiveColumnLifecycleState[]): Promise<serviceResponses.GetSensitiveColumnResponse>;
    /**
     * Waits forSensitiveDataModel till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSensitiveDataModelResponse | null (null in case of 404 response)
     */
    forSensitiveDataModel(request: serviceRequests.GetSensitiveDataModelRequest, ...targetStates: models.DiscoveryLifecycleState[]): Promise<serviceResponses.GetSensitiveDataModelResponse | null>;
    /**
     * Waits forSensitiveType till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSensitiveTypeResponse | null (null in case of 404 response)
     */
    forSensitiveType(request: serviceRequests.GetSensitiveTypeRequest, ...targetStates: models.DiscoveryLifecycleState[]): Promise<serviceResponses.GetSensitiveTypeResponse | null>;
    /**
     * Waits forSensitiveTypeGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSensitiveTypeGroupResponse | null (null in case of 404 response)
     */
    forSensitiveTypeGroup(request: serviceRequests.GetSensitiveTypeGroupRequest, ...targetStates: models.SensitiveTypeGroupLifecycleState[]): Promise<serviceResponses.GetSensitiveTypeGroupResponse | null>;
    /**
     * Waits forSensitiveTypesExport till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSensitiveTypesExportResponse | null (null in case of 404 response)
     */
    forSensitiveTypesExport(request: serviceRequests.GetSensitiveTypesExportRequest, ...targetStates: models.SensitiveTypesExportLifecycleState[]): Promise<serviceResponses.GetSensitiveTypesExportResponse | null>;
    /**
     * Waits forSqlCollection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSqlCollectionResponse | null (null in case of 404 response)
     */
    forSqlCollection(request: serviceRequests.GetSqlCollectionRequest, ...targetStates: models.SqlCollectionLifecycleState[]): Promise<serviceResponses.GetSqlCollectionResponse | null>;
    /**
     * Waits forSqlFirewallAllowedSql till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSqlFirewallAllowedSqlResponse | null (null in case of 404 response)
     */
    forSqlFirewallAllowedSql(request: serviceRequests.GetSqlFirewallAllowedSqlRequest, ...targetStates: models.SqlFirewallAllowedSqlLifecycleState[]): Promise<serviceResponses.GetSqlFirewallAllowedSqlResponse | null>;
    /**
     * Waits forSqlFirewallPolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSqlFirewallPolicyResponse | null (null in case of 404 response)
     */
    forSqlFirewallPolicy(request: serviceRequests.GetSqlFirewallPolicyRequest, ...targetStates: models.SqlFirewallPolicyLifecycleState[]): Promise<serviceResponses.GetSqlFirewallPolicyResponse | null>;
    /**
     * Waits forTargetAlertPolicyAssociation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTargetAlertPolicyAssociationResponse | null (null in case of 404 response)
     */
    forTargetAlertPolicyAssociation(request: serviceRequests.GetTargetAlertPolicyAssociationRequest, ...targetStates: models.AlertPolicyLifecycleState[]): Promise<serviceResponses.GetTargetAlertPolicyAssociationResponse | null>;
    /**
     * Waits forTargetDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTargetDatabaseResponse | null (null in case of 404 response)
     */
    forTargetDatabase(request: serviceRequests.GetTargetDatabaseRequest, ...targetStates: models.TargetDatabaseLifecycleState[]): Promise<serviceResponses.GetTargetDatabaseResponse | null>;
    /**
     * Waits forUserAssessment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetUserAssessmentResponse | null (null in case of 404 response)
     */
    forUserAssessment(request: serviceRequests.GetUserAssessmentRequest, ...targetStates: models.UserAssessmentLifecycleState[]): Promise<serviceResponses.GetUserAssessmentResponse | null>;
    /**
     * Waits forUserAssessmentComparison till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetUserAssessmentComparisonResponse
     */
    forUserAssessmentComparison(request: serviceRequests.GetUserAssessmentComparisonRequest, ...targetStates: models.UserAssessmentComparison.LifecycleState[]): Promise<serviceResponses.GetUserAssessmentComparisonResponse>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
