/**
 *
 *
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
/**
 * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datasafe/ListProfileSummaries.ts.html |here} to see how to use ListProfileSummariesRequest.
 */
export interface ListProfileSummariesRequest extends common.BaseRequest {
    /**
     * The OCID of the user assessment.
     */
    "userAssessmentId": string;
    /**
     * A filter to return only resources that match the specified compartment OCID.
     */
    "compartmentId": string;
    /**
     * Default is false.
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
     *
     */
    "compartmentIdInSubtree"?: boolean;
    /**
     * Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED.
     * Setting this to ACCESSIBLE returns only those compartments for which the
     * user has INSPECT permissions directly or indirectly (permissions can be on a
     * resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
     *
     */
    "accessLevel"?: ListProfileSummariesRequest.AccessLevel;
    /**
     * A filter to return only items related to a specific target OCID.
     */
    "targetId"?: string;
    /**
     * For list pagination. The maximum number of items to return per page in a paginated \"List\" call. For details about how pagination works, see [List Pagination](https://docs.oracle.com/iaas/en-us/iaas/Content/API/Concepts/usingapi.htm#nine).
     */
    "limit"?: number;
    /**
     * For list pagination. The page token representing the page at which to start retrieving results. It is usually retrieved from a previous \"List\" call. For details about how pagination works, see [List Pagination](https://docs.oracle.com/iaas/en-us/iaas/Content/API/Concepts/usingapi.htm#nine).
     */
    "page"?: string;
    /**
     * A filter to return only items that match the specified profile name.
     */
    "profileName"?: string;
    /**
     * An optional filter to return the user created profiles.
     */
    "isUserCreated"?: boolean;
    /**
     * An optional filter to filter the profiles based on password verification function.
     */
    "passwordVerificationFunction"?: string;
    /**
     * An optional filter to return the profiles having user count greater than or equal to the provided value.
     *
     */
    "userCountGreaterThanOrEqual"?: string;
    /**
     * An optional filter to return the profiles having user count less than the provided value.
     *
     */
    "userCountLessThan"?: string;
    /**
     * An optional filter to return the profiles having allow failed login attempts number greater than or equal to the provided value.
     * String value is used for accommodating the \"UNLIMITED\" and \"DEFAULT\" values.
     *
     */
    "failedLoginAttemptsGreaterThanOrEqual"?: string;
    /**
     * An optional filter to return the profiles having failed login attempts number less than the provided value.
     * String value is used for accommodating the \"UNLIMITED\" and \"DEFAULT\" values.
     *
     */
    "failedLoginAttemptsLessThan"?: string;
    /**
     * An optional filter to return the profiles permitting the user to spawn multiple sessions having count.
     * greater than or equal to the provided value. String value is used for accommodating the \"UNLIMITED\" and \"DEFAULT\" values.
     *
     */
    "sessionsPerUserGreaterThanOrEqual"?: string;
    /**
     * An optional filter to return the profiles permitting the user to spawn multiple sessions having count less than
     * the provided value. String value is used for accommodating the \"UNLIMITED\" and \"DEFAULT\" values.
     *
     */
    "sessionsPerUserLessThan"?: string;
    /**
     * An optional filter to return the profiles allowing inactive account time in days greater than or equal to the provided value.
     * String value is used for accommodating the \"UNLIMITED\" and \"DEFAULT\" values.
     *
     */
    "inactiveAccountTimeGreaterThanOrEqual"?: string;
    /**
     * An optional filter to return the profiles  allowing inactive account time in days less than the provided value.
     * String value is used for accommodating the \"UNLIMITED\" and \"DEFAULT\" values.
     *
     */
    "inactiveAccountTimeLessThan"?: string;
    /**
     * An optional filter to return the profiles having password lock number greater than or equal to the provided value.
     * String value is used for accommodating the \"UNLIMITED\" and \"DEFAULT\" values.
     *
     */
    "passwordLockTimeGreaterThanOrEqual"?: string;
    /**
     * An optional filter to return the profiles having password lock number less than the provided value.
     * String value is used for accommodating the \"UNLIMITED\" and \"DEFAULT\" values.
     *
     */
    "passwordLockTimeLessThan"?: string;
    /**
     * The field to sort by. You can specify only one sort order (sortOrder). The default order is targetId ASC.
     *
     */
    "sortBy"?: ListProfileSummariesRequest.SortBy;
    /**
     * The sort order to use, either ascending (ASC) or descending (DESC).
     */
    "sortOrder"?: ListProfileSummariesRequest.SortOrder;
    /**
     * Unique identifier for the request.
     */
    "opcRequestId"?: string;
}
export declare namespace ListProfileSummariesRequest {
    enum AccessLevel {
        Restricted = "RESTRICTED",
        Accessible = "ACCESSIBLE"
    }
    enum SortBy {
        ProfileName = "profileName",
        TargetId = "targetId",
        IsUserCreated = "isUserCreated",
        PasswordVerificationFunction = "passwordVerificationFunction",
        UserCount = "userCount",
        SessionsPerUser = "sessionsPerUser",
        InactiveAccountTime = "inactiveAccountTime",
        PasswordLockTime = "passwordLockTime",
        FailedLoginAttempts = "failedLoginAttempts"
    }
    enum SortOrder {
        Asc = "ASC",
        Desc = "DESC"
    }
}
