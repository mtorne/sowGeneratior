"use strict";
/**
 * Full Stack Disaster Recovery API
 * Use the Full Stack Disaster Recovery (DR) API to manage disaster recovery for business applications.
Full Stack DR is an OCI disaster recovery orchestration and management service that provides comprehensive disaster
recovery capabilities for all layers of an application stack, including infrastructure, middleware, database,
and application.

 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrPlanStepType = void 0;
/**
 * The types of steps in a DR plan.
 * - COMPUTE_INSTANCE_STOP_PRECHECK - A precheck step for validating a compute instance stop.
 * - COMPUTE_INSTANCE_LAUNCH_PRECHECK - A precheck step for validating a compute instance launch.
 * - COMPUTE_INSTANCE_TERMINATE_PRECHECK - A precheck step for validating a compute instance termination.
 * - COMPUTE_INSTANCE_REMOVE_PRECHECK - A precheck step for validating a compute instance removal.
 * - VOLUME_GROUP_RESTORE_SWITCHOVER_PRECHECK - A precheck step for validating a volume group restoration during a switchover.
 * - VOLUME_GROUP_RESTORE_FAILOVER_PRECHECK - A precheck step for validating a volume group restoration during a failover.
 * - DATABASE_SWITCHOVER_PRECHECK - A precheck step for validating the database during a switchover.
 * - DATABASE_FAILOVER_PRECHECK - A precheck step for validating the database during a failover.
 * - AUTONOMOUS_DATABASE_SWITCHOVER_PRECHECK - A precheck step for validating an autonomous database during a switchover.
 * - AUTONOMOUS_DATABASE_FAILOVER_PRECHECK - A precheck step for validating an autonomous database during a failover.
 * - AUTONOMOUS_CONTAINER_DATABASE_SWITCHOVER_PRECHECK - A precheck step for validating an autonomous container database during a switchover.
 * - AUTONOMOUS_CONTAINER_DATABASE_FAILOVER_PRECHECK - A precheck step for validating an autonomous container database during a failover.
 * - AUTONOMOUS_CONTAINER_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK - A precheck step for validating the conversion of an autonomous container database to a snapshot at standby for a start drill.
 * - AUTONOMOUS_CONTAINER_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK - A precheck step for validating the conversion of an autonomous container database to a physical instance at standby for a stop drill.
 * - AUTONOMOUS_CONTAINER_DATABASE_SWITCHOVER - A DR plan step to perform an autonomous container database switchover.
 * - AUTONOMOUS_CONTAINER_DATABASE_FAILOVER - A DR plan step to perform an autonomous container database failover.
 * - AUTONOMOUS_CONTAINER_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY - A DR plan step to convert an autonomous container database to a snapshot at standby during a start drill.
 * - AUTONOMOUS_CONTAINER_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY - A DR plan step to convert an autonomous container database to a physical instance at standby during a stop drill.
 * - AUTONOMOUS_DATABASE_START_DRILL_CREATE_CLONE_STANDBY_PRECHECK - A precheck step for validating the creation of an autonomous database clone at standby during a start drill.
 * - AUTONOMOUS_DATABASE_STOP_DRILL_DELETE_CLONE_STANDBY_PRECHECK - A precheck step for validating the deletion of an autonomous database clone at standby during a stop drill.
 * - AUTONOMOUS_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK - A precheck step for validating the conversion of an autonomous database to snapshot at standby during a start drill.
 * - AUTONOMOUS_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK - A precheck step for validating the conversion of an autonomous database to a physical instance at standby during a start drill.
 * - AUTONOMOUS_DATABASE_START_DRILL_CREATE_CLONE_STANDBY - A DR plan step to create an autonomous database clone at standby during a start drill.
 * - AUTONOMOUS_DATABASE_STOP_DRILL_DELETE_CLONE_STANDBY - A DR plan step to delete an autonomous database clone at standby during a stop drill.
 * - AUTONOMOUS_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY - A DR plan step to convert an autonomous database to a snapshot at standby during a start drill.
 * - AUTONOMOUS_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY - A DR plan step to convert an autonomous database to a physical instance at standby during a stop drill.
 * - DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK - A precheck step for validating the conversion of a database to a snapshot at standby during a start drill.
 * - DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK - A precheck step for validating the conversion of a database to a physical instance at standby during a stop drill.
 * - DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY - A DR plan step to convert a database to a snapshot at standby during a start drill.
 * - DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY - A DR plan step to convert a database to a physical instance at standby during a stop drill.
 * - USER_DEFINED_PRECHECK - A precheck step for validating a user-defined step.
 * - COMPUTE_INSTANCE_LAUNCH - A DR plan step to launch a compute instance.
 * - COMPUTE_INSTANCE_STOP - A DR plan step to stop a compute instance.
 * - COMPUTE_INSTANCE_TERMINATE - A DR plan step to terminate a compute instance.
 * - COMPUTE_INSTANCE_REMOVE - A DR plan step to remove a compute instance.
 * - DATABASE_SWITCHOVER - A DR plan step to perform a database switchover.
 * - DATABASE_FAILOVER - A DR plan step to perform a database failover.
 * - AUTONOMOUS_DATABASE_SWITCHOVER - A DR plan step to perform an autonomous database switchover.
 * - AUTONOMOUS_DATABASE_FAILOVER - A DR plan step to perform an autonomous database failover.
 * - VOLUME_GROUP_RESTORE_SWITCHOVER - A DR plan step to perform a volume group restoration during a switchover.
 * - VOLUME_GROUP_RESTORE_FAILOVER - A DR plan step to perform a volume group restoration during a failover.
 * - VOLUME_GROUP_REVERSE - A DR plan step to reverse a volume group.
 * - VOLUME_GROUP_DELETE - A DR plan step to delete a volume group.
 * - VOLUME_GROUP_REMOVE - A DR plan step to remove a volume group.
 * - VOLUME_GROUP_TERMINATE - A DR plan step to terminate a volume group.
 * - USER_DEFINED - User-defined step
 * - USER_DEFINED_CUSTOM_PRECHECK - User-defined custom precheck step.
 * - VOLUME_GROUP_RESTORE_START_DRILL_PRECHECK - A precheck step for validating a volume group restoration during a start drill.
 * - VOLUME_GROUP_REMOVE_PRECHECK - A precheck step for validating a volume group removal.
 * - VOLUME_GROUP_TERMINATE_PRECHECK - A precheck step for validating a volume group termination.
 * - VOLUME_GROUP_RESTORE_START_DRILL - A DR plan step for volume group restoration during a start drill.
 * - AUTONOMOUS_DATABASE_CREATE_CLONE_PRECHECK - A precheck step for validating the creation of an autonomous database clone.
 * - AUTONOMOUS_DATABASE_DELETE_CLONE_PRECHECK - A precheck step for validating the deletion of an autonomous database clone.
 * - LOAD_BALANCER_UPDATE_PRIMARY_BACKEND_SET_PRECHECK - A precheck step for validating the update of primary load balancer backend set.
 * - LOAD_BALANCER_UPDATE_STANDBY_BACKEND_SET_PRECHECK - A precheck step for validating the update of standby load balancer backend set.
 * - FILE_SYSTEM_SWITCHOVER_PRECHECK - A precheck step for validating a file system during a switchover.
 * - FILE_SYSTEM_FAILOVER_PRECHECK - A precheck step for validating a file system during a failover.
 * - FILE_SYSTEM_START_DRILL_PRECHECK - A precheck step for validating a file system during a start drill.
 * - FILE_SYSTEM_STOP_DRILL_PRECHECK - A precheck step for validating a file system during a stop drill.
 * - FILE_SYSTEM_REMOVE_PRECHECK - A precheck step for validating a file system removal.
 * - FILE_SYSTEM_TERMINATE_PRECHECK - A precheck step for validating a file system termination.
 * - FILE_SYSTEM_MOUNT_PRECHECK - A precheck step for validating a file system to be mounted.
 * - FILE_SYSTEM_UNMOUNT_PRECHECK - A precheck step for validating a file system to be unmounted.
 * - COMPUTE_INSTANCE_START_PRECHECK - A precheck step for validating the start of a compute instance.
 * - COMPUTE_INSTANCE_ATTACH_BLOCK_VOLUMES_PRECHECK - A precheck step for validating the attachment of block volumes to a compute instance.
 * - COMPUTE_INSTANCE_DETACH_BLOCK_VOLUMES_PRECHECK - A precheck step for validating the detachment of block volumes from a compute instance.
 * - COMPUTE_INSTANCE_MOUNT_BLOCK_VOLUMES_PRECHECK - A precheck step for validating the mounting of block volumes on a compute instance.
 * - COMPUTE_INSTANCE_UNMOUNT_BLOCK_VOLUMES_PRECHECK - A precheck step for validating the unmounting of block volumes from a compute instance.
 * - COMPUTE_CAPACITY_RESERVATION_START_DRILL_PRECHECK - A precheck step for validating a compute capacity reservation during a start drill.
 * - COMPUTE_CAPACITY_AVAILABILITY_START_DRILL_PRECHECK - A precheck step for validating a compute capacity availability during a start drill .
 * - AUTONOMOUS_DATABASE_CREATE_CLONE - A DR plan step to create an autonomous database clone.
 * - AUTONOMOUS_DATABASE_DELETE_CLONE - A DR plan step to delete an autonomous database clone.
 * - LOAD_BALANCER_UPDATE_PRIMARY_BACKEND_SET - A DR plan step to update a primary load balancer backend set.
 * - LOAD_BALANCER_UPDATE_STANDBY_BACKEND_SET - A DR plan step to update a standby load balancer backend set.
 * - FILE_SYSTEM_SWITCHOVER - A DR plan step to perform a file system switchover.
 * - FILE_SYSTEM_FAILOVER - A DR plan step to perform a file system failover.
 * - FILE_SYSTEM_REMOVE - A DR plan step to remove a file system.
 * - FILE_SYSTEM_REVERSE - A DR plan step to reverse replication in a file system.
 * - FILE_SYSTEM_TERMINATE - A DR plan step to terminate a file system.
 * - FILE_SYSTEM_START_DRILL - A DR plan step to perform a start drill operation for a file system.
 * - FILE_SYSTEM_STOP_DRILL - A DR plan step to perform a stop drill operation for a file system.
 * - COMPUTE_INSTANCE_START - A DR plan step to start a compute instance.
 * - COMPUTE_INSTANCE_ATTACH_BLOCK_VOLUMES - A DR plan step to attach block volumes to a compute instance.
 * - COMPUTE_INSTANCE_DETACH_BLOCK_VOLUMES - A DR plan step to detach block volumes from a compute instance.
 * - FILE_SYSTEM_MOUNT - A DR plan step to mount a file system.
 * - FILE_SYSTEM_UNMOUNT - A DR plan step to unmount a file system.
 * - COMPUTE_CAPACITY_RESERVATION_SWITCHOVER_PRECHECK - A precheck step for validating a compute capacity reservation during a switchover.
 * - COMPUTE_CAPACITY_RESERVATION_FAILOVER_PRECHECK - A precheck step for validating a capacity reservation during a failover.
 * - COMPUTE_CAPACITY_AVAILABILITY_SWITCHOVER_PRECHECK - A precheck step for validating a compute capacity availability during a switchover.
 * - COMPUTE_CAPACITY_AVAILABILITY_FAILOVER_PRECHECK - A precheck step for validating a compute capacity availability during a failover.
 * - OKE_CLUSTER_SWITCHOVER_CLEANUP_PRIMARY_PRECHECK - A precheck step for validating clean up of an OKE cluster in the primary region during a switchover.
 * - OKE_CLUSTER_SWITCHOVER_RESTORE_STANDBY_PRECHECK - A precheck step for validating restoration of an OKE cluster in the standby region during a switchover.
 * - OKE_CLUSTER_FAILOVER_RESTORE_STANDBY_PRECHECK - A precheck step for validating restoration of an OKE cluster in the standby region during a failover.
 * - OKE_CLUSTER_STOP_DRILL_CLEANUP_STANDBY_PRECHECK - A precheck step for validating clean up of an OKE cluster in the standby region during a stop drill.
 * - OKE_CLUSTER_START_DRILL_RESTORE_STANDBY_PRECHECK - A precheck step for validating restoration of an OKE cluster in the standby region during a start drill.
 * - OKE_CLUSTER_SWITCHOVER_CLEANUP_PRIMARY - A DR plan step to clean up an OKE cluster in the primary region during a switchover.
 * - OKE_CLUSTER_SWITCHOVER_SCALE_UP_STANDBY - A DR plan step to scale up the node pool of an OKE cluster in the standby during a switchover.
 * - OKE_CLUSTER_SWITCHOVER_RESTORE_STANDBY - A DR plan step to restore an OKE cluster in the standby region during a switchover.
 * - OKE_CLUSTER_SWITCHOVER_REVERSE_BACKUP_STANDBY - A DR plan step to reverse an OKE cluster backup in the standby during a switchover.
 * - OKE_CLUSTER_SWITCHOVER_SCALE_DOWN_PRIMARY - A DR plan step to scale down the node pool of an OKE cluster in the primary during a switchover.
 * - OKE_CLUSTER_FAILOVER_RESTORE_STANDBY - A DR plan step to restore an OKE cluster in the standby region during a failover.
 * - OKE_CLUSTER_FAILOVER_SCALE_UP_STANDBY - A DR plan step to scale up the node pool of an OKE cluster in the standby region during a failover.
 * - OKE_CLUSTER_START_DRILL_RESTORE_STANDBY - A DR plan step to restore an OKE cluster in the standby region during a start drill.
 * - OKE_CLUSTER_START_DRILL_SCALE_UP_STANDBY - A DR plan step to scale up the node pool of an OKE cluster in the standby region during a start drill.
 * - OKE_CLUSTER_STOP_DRILL_CLEANUP_STANDBY - A DR plan step to clean up an OKE cluster in the standby region during a stop drill.
 * - OKE_CLUSTER_STOP_DRILL_SCALE_DOWN_STANDBY - A DR plan step to scale down the node pool of an OKE cluster in the standby region during a stop drill.
 * - OBJECT_STORAGE_BUCKET_SWITCHOVER_DELETE_REPLICATION_PRIMARY_PRECHECK - A precheck step for validating the deletion of an object storage bucket replication in the primary region during a switchover.
 * - OBJECT_STORAGE_BUCKET_SWITCHOVER_SETUP_REVERSE_REPLICATION_STANDBY_PRECHECK - A precheck step for validating an object storage bucket reverse replication set up in the standby region during a switchover.
 * - OBJECT_STORAGE_BUCKET_FAILOVER_DELETE_REPLICATION_STANDBY_PRECHECK - A precheck step for validating the deletion of an object storage bucket replication in the standby region during a failover.
 * - OBJECT_STORAGE_BUCKET_FAILOVER_SETUP_REVERSE_REPLICATION_STANDBY_PRECHECK - A precheck step for validating an object storage bucket reverse replication set up in the standby region during a failover.
 * - OBJECT_STORAGE_BUCKET_SWITCHOVER_DELETE_REPLICATION_PRIMARY - A DR plan step to delete an object storage bucket replication in the primary region during a switchover.
 * - OBJECT_STORAGE_BUCKET_SWITCHOVER_SETUP_REVERSE_REPLICATION_STANDBY - A DR plan step to set up an object storage bucket reverse replication in the standby region during a switchover.
 * - OBJECT_STORAGE_BUCKET_FAILOVER_DELETE_REPLICATION_STANDBY - A DR plan step to delete an object storage bucket replication in the standby region during a failover.
 * - OBJECT_STORAGE_BUCKET_FAILOVER_SETUP_REVERSE_REPLICATION_STANDBY - A DR plan step to set up an object storage bucket reverse replication in the standby region during a failover.
 *
 **/
var DrPlanStepType;
(function (DrPlanStepType) {
    DrPlanStepType["ComputeInstanceStopPrecheck"] = "COMPUTE_INSTANCE_STOP_PRECHECK";
    DrPlanStepType["ComputeInstanceLaunchPrecheck"] = "COMPUTE_INSTANCE_LAUNCH_PRECHECK";
    DrPlanStepType["ComputeInstanceTerminatePrecheck"] = "COMPUTE_INSTANCE_TERMINATE_PRECHECK";
    DrPlanStepType["ComputeInstanceRemovePrecheck"] = "COMPUTE_INSTANCE_REMOVE_PRECHECK";
    DrPlanStepType["VolumeGroupRestoreSwitchoverPrecheck"] = "VOLUME_GROUP_RESTORE_SWITCHOVER_PRECHECK";
    DrPlanStepType["VolumeGroupRestoreFailoverPrecheck"] = "VOLUME_GROUP_RESTORE_FAILOVER_PRECHECK";
    DrPlanStepType["DatabaseSwitchoverPrecheck"] = "DATABASE_SWITCHOVER_PRECHECK";
    DrPlanStepType["DatabaseFailoverPrecheck"] = "DATABASE_FAILOVER_PRECHECK";
    DrPlanStepType["AutonomousDatabaseSwitchoverPrecheck"] = "AUTONOMOUS_DATABASE_SWITCHOVER_PRECHECK";
    DrPlanStepType["AutonomousDatabaseFailoverPrecheck"] = "AUTONOMOUS_DATABASE_FAILOVER_PRECHECK";
    DrPlanStepType["AutonomousContainerDatabaseSwitchoverPrecheck"] = "AUTONOMOUS_CONTAINER_DATABASE_SWITCHOVER_PRECHECK";
    DrPlanStepType["AutonomousContainerDatabaseFailoverPrecheck"] = "AUTONOMOUS_CONTAINER_DATABASE_FAILOVER_PRECHECK";
    DrPlanStepType["AutonomousContainerDatabaseStartDrillConvertToSnapshotStandbyPrecheck"] = "AUTONOMOUS_CONTAINER_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK";
    DrPlanStepType["AutonomousContainerDatabaseStopDrillConvertToPhysicalStandbyPrecheck"] = "AUTONOMOUS_CONTAINER_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK";
    DrPlanStepType["AutonomousContainerDatabaseSwitchover"] = "AUTONOMOUS_CONTAINER_DATABASE_SWITCHOVER";
    DrPlanStepType["AutonomousContainerDatabaseFailover"] = "AUTONOMOUS_CONTAINER_DATABASE_FAILOVER";
    DrPlanStepType["AutonomousContainerDatabaseStartDrillConvertToSnapshotStandby"] = "AUTONOMOUS_CONTAINER_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY";
    DrPlanStepType["AutonomousContainerDatabaseStopDrillConvertToPhysicalStandby"] = "AUTONOMOUS_CONTAINER_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY";
    DrPlanStepType["AutonomousDatabaseStartDrillCreateCloneStandbyPrecheck"] = "AUTONOMOUS_DATABASE_START_DRILL_CREATE_CLONE_STANDBY_PRECHECK";
    DrPlanStepType["AutonomousDatabaseStopDrillDeleteCloneStandbyPrecheck"] = "AUTONOMOUS_DATABASE_STOP_DRILL_DELETE_CLONE_STANDBY_PRECHECK";
    DrPlanStepType["AutonomousDatabaseStartDrillConvertToSnapshotStandbyPrecheck"] = "AUTONOMOUS_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK";
    DrPlanStepType["AutonomousDatabaseStopDrillConvertToPhysicalStandbyPrecheck"] = "AUTONOMOUS_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK";
    DrPlanStepType["AutonomousDatabaseStartDrillCreateCloneStandby"] = "AUTONOMOUS_DATABASE_START_DRILL_CREATE_CLONE_STANDBY";
    DrPlanStepType["AutonomousDatabaseStopDrillDeleteCloneStandby"] = "AUTONOMOUS_DATABASE_STOP_DRILL_DELETE_CLONE_STANDBY";
    DrPlanStepType["AutonomousDatabaseStartDrillConvertToSnapshotStandby"] = "AUTONOMOUS_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY";
    DrPlanStepType["AutonomousDatabaseStopDrillConvertToPhysicalStandby"] = "AUTONOMOUS_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY";
    DrPlanStepType["DatabaseStartDrillConvertToSnapshotStandbyPrecheck"] = "DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK";
    DrPlanStepType["DatabaseStopDrillConvertToPhysicalStandbyPrecheck"] = "DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK";
    DrPlanStepType["DatabaseStartDrillConvertToSnapshotStandby"] = "DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY";
    DrPlanStepType["DatabaseStopDrillConvertToPhysicalStandby"] = "DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY";
    DrPlanStepType["UserDefinedPrecheck"] = "USER_DEFINED_PRECHECK";
    DrPlanStepType["ComputeInstanceLaunch"] = "COMPUTE_INSTANCE_LAUNCH";
    DrPlanStepType["ComputeInstanceStop"] = "COMPUTE_INSTANCE_STOP";
    DrPlanStepType["ComputeInstanceTerminate"] = "COMPUTE_INSTANCE_TERMINATE";
    DrPlanStepType["ComputeInstanceRemove"] = "COMPUTE_INSTANCE_REMOVE";
    DrPlanStepType["DatabaseSwitchover"] = "DATABASE_SWITCHOVER";
    DrPlanStepType["DatabaseFailover"] = "DATABASE_FAILOVER";
    DrPlanStepType["AutonomousDatabaseSwitchover"] = "AUTONOMOUS_DATABASE_SWITCHOVER";
    DrPlanStepType["AutonomousDatabaseFailover"] = "AUTONOMOUS_DATABASE_FAILOVER";
    DrPlanStepType["VolumeGroupRestoreSwitchover"] = "VOLUME_GROUP_RESTORE_SWITCHOVER";
    DrPlanStepType["VolumeGroupRestoreFailover"] = "VOLUME_GROUP_RESTORE_FAILOVER";
    DrPlanStepType["VolumeGroupReverse"] = "VOLUME_GROUP_REVERSE";
    DrPlanStepType["VolumeGroupDelete"] = "VOLUME_GROUP_DELETE";
    DrPlanStepType["VolumeGroupRemove"] = "VOLUME_GROUP_REMOVE";
    DrPlanStepType["VolumeGroupTerminate"] = "VOLUME_GROUP_TERMINATE";
    DrPlanStepType["UserDefined"] = "USER_DEFINED";
    DrPlanStepType["UserDefinedCustomPrecheck"] = "USER_DEFINED_CUSTOM_PRECHECK";
    DrPlanStepType["VolumeGroupRestoreStartDrillPrecheck"] = "VOLUME_GROUP_RESTORE_START_DRILL_PRECHECK";
    DrPlanStepType["VolumeGroupRemovePrecheck"] = "VOLUME_GROUP_REMOVE_PRECHECK";
    DrPlanStepType["VolumeGroupTerminatePrecheck"] = "VOLUME_GROUP_TERMINATE_PRECHECK";
    DrPlanStepType["VolumeGroupRestoreStartDrill"] = "VOLUME_GROUP_RESTORE_START_DRILL";
    DrPlanStepType["AutonomousDatabaseCreateClonePrecheck"] = "AUTONOMOUS_DATABASE_CREATE_CLONE_PRECHECK";
    DrPlanStepType["AutonomousDatabaseDeleteClonePrecheck"] = "AUTONOMOUS_DATABASE_DELETE_CLONE_PRECHECK";
    DrPlanStepType["LoadBalancerUpdatePrimaryBackendSetPrecheck"] = "LOAD_BALANCER_UPDATE_PRIMARY_BACKEND_SET_PRECHECK";
    DrPlanStepType["LoadBalancerUpdateStandbyBackendSetPrecheck"] = "LOAD_BALANCER_UPDATE_STANDBY_BACKEND_SET_PRECHECK";
    DrPlanStepType["FileSystemSwitchoverPrecheck"] = "FILE_SYSTEM_SWITCHOVER_PRECHECK";
    DrPlanStepType["FileSystemFailoverPrecheck"] = "FILE_SYSTEM_FAILOVER_PRECHECK";
    DrPlanStepType["FileSystemStartDrillPrecheck"] = "FILE_SYSTEM_START_DRILL_PRECHECK";
    DrPlanStepType["FileSystemStopDrillPrecheck"] = "FILE_SYSTEM_STOP_DRILL_PRECHECK";
    DrPlanStepType["FileSystemRemovePrecheck"] = "FILE_SYSTEM_REMOVE_PRECHECK";
    DrPlanStepType["FileSystemTerminatePrecheck"] = "FILE_SYSTEM_TERMINATE_PRECHECK";
    DrPlanStepType["FileSystemMountPrecheck"] = "FILE_SYSTEM_MOUNT_PRECHECK";
    DrPlanStepType["FileSystemUnmountPrecheck"] = "FILE_SYSTEM_UNMOUNT_PRECHECK";
    DrPlanStepType["ComputeInstanceStartPrecheck"] = "COMPUTE_INSTANCE_START_PRECHECK";
    DrPlanStepType["ComputeInstanceAttachBlockVolumesPrecheck"] = "COMPUTE_INSTANCE_ATTACH_BLOCK_VOLUMES_PRECHECK";
    DrPlanStepType["ComputeInstanceDetachBlockVolumesPrecheck"] = "COMPUTE_INSTANCE_DETACH_BLOCK_VOLUMES_PRECHECK";
    DrPlanStepType["ComputeInstanceMountBlockVolumesPrecheck"] = "COMPUTE_INSTANCE_MOUNT_BLOCK_VOLUMES_PRECHECK";
    DrPlanStepType["ComputeInstanceUnmountBlockVolumesPrecheck"] = "COMPUTE_INSTANCE_UNMOUNT_BLOCK_VOLUMES_PRECHECK";
    DrPlanStepType["ComputeCapacityReservationStartDrillPrecheck"] = "COMPUTE_CAPACITY_RESERVATION_START_DRILL_PRECHECK";
    DrPlanStepType["ComputeCapacityAvailabilityStartDrillPrecheck"] = "COMPUTE_CAPACITY_AVAILABILITY_START_DRILL_PRECHECK";
    DrPlanStepType["AutonomousDatabaseCreateClone"] = "AUTONOMOUS_DATABASE_CREATE_CLONE";
    DrPlanStepType["AutonomousDatabaseDeleteClone"] = "AUTONOMOUS_DATABASE_DELETE_CLONE";
    DrPlanStepType["LoadBalancerUpdatePrimaryBackendSet"] = "LOAD_BALANCER_UPDATE_PRIMARY_BACKEND_SET";
    DrPlanStepType["LoadBalancerUpdateStandbyBackendSet"] = "LOAD_BALANCER_UPDATE_STANDBY_BACKEND_SET";
    DrPlanStepType["FileSystemSwitchover"] = "FILE_SYSTEM_SWITCHOVER";
    DrPlanStepType["FileSystemFailover"] = "FILE_SYSTEM_FAILOVER";
    DrPlanStepType["FileSystemRemove"] = "FILE_SYSTEM_REMOVE";
    DrPlanStepType["FileSystemReverse"] = "FILE_SYSTEM_REVERSE";
    DrPlanStepType["FileSystemTerminate"] = "FILE_SYSTEM_TERMINATE";
    DrPlanStepType["FileSystemStartDrill"] = "FILE_SYSTEM_START_DRILL";
    DrPlanStepType["FileSystemStopDrill"] = "FILE_SYSTEM_STOP_DRILL";
    DrPlanStepType["ComputeInstanceStart"] = "COMPUTE_INSTANCE_START";
    DrPlanStepType["ComputeInstanceAttachBlockVolumes"] = "COMPUTE_INSTANCE_ATTACH_BLOCK_VOLUMES";
    DrPlanStepType["ComputeInstanceDetachBlockVolumes"] = "COMPUTE_INSTANCE_DETACH_BLOCK_VOLUMES";
    DrPlanStepType["FileSystemMount"] = "FILE_SYSTEM_MOUNT";
    DrPlanStepType["FileSystemUnmount"] = "FILE_SYSTEM_UNMOUNT";
    DrPlanStepType["ComputeCapacityReservationSwitchoverPrecheck"] = "COMPUTE_CAPACITY_RESERVATION_SWITCHOVER_PRECHECK";
    DrPlanStepType["ComputeCapacityReservationFailoverPrecheck"] = "COMPUTE_CAPACITY_RESERVATION_FAILOVER_PRECHECK";
    DrPlanStepType["ComputeCapacityAvailabilitySwitchoverPrecheck"] = "COMPUTE_CAPACITY_AVAILABILITY_SWITCHOVER_PRECHECK";
    DrPlanStepType["ComputeCapacityAvailabilityFailoverPrecheck"] = "COMPUTE_CAPACITY_AVAILABILITY_FAILOVER_PRECHECK";
    DrPlanStepType["OkeClusterSwitchoverCleanupPrimaryPrecheck"] = "OKE_CLUSTER_SWITCHOVER_CLEANUP_PRIMARY_PRECHECK";
    DrPlanStepType["OkeClusterSwitchoverRestoreStandbyPrecheck"] = "OKE_CLUSTER_SWITCHOVER_RESTORE_STANDBY_PRECHECK";
    DrPlanStepType["OkeClusterFailoverRestoreStandbyPrecheck"] = "OKE_CLUSTER_FAILOVER_RESTORE_STANDBY_PRECHECK";
    DrPlanStepType["OkeClusterStopDrillCleanupStandbyPrecheck"] = "OKE_CLUSTER_STOP_DRILL_CLEANUP_STANDBY_PRECHECK";
    DrPlanStepType["OkeClusterStartDrillRestoreStandbyPrecheck"] = "OKE_CLUSTER_START_DRILL_RESTORE_STANDBY_PRECHECK";
    DrPlanStepType["OkeClusterSwitchoverCleanupPrimary"] = "OKE_CLUSTER_SWITCHOVER_CLEANUP_PRIMARY";
    DrPlanStepType["OkeClusterSwitchoverScaleUpStandby"] = "OKE_CLUSTER_SWITCHOVER_SCALE_UP_STANDBY";
    DrPlanStepType["OkeClusterSwitchoverRestoreStandby"] = "OKE_CLUSTER_SWITCHOVER_RESTORE_STANDBY";
    DrPlanStepType["OkeClusterSwitchoverReverseBackupStandby"] = "OKE_CLUSTER_SWITCHOVER_REVERSE_BACKUP_STANDBY";
    DrPlanStepType["OkeClusterSwitchoverScaleDownPrimary"] = "OKE_CLUSTER_SWITCHOVER_SCALE_DOWN_PRIMARY";
    DrPlanStepType["OkeClusterFailoverRestoreStandby"] = "OKE_CLUSTER_FAILOVER_RESTORE_STANDBY";
    DrPlanStepType["OkeClusterFailoverScaleUpStandby"] = "OKE_CLUSTER_FAILOVER_SCALE_UP_STANDBY";
    DrPlanStepType["OkeClusterStartDrillRestoreStandby"] = "OKE_CLUSTER_START_DRILL_RESTORE_STANDBY";
    DrPlanStepType["OkeClusterStartDrillScaleUpStandby"] = "OKE_CLUSTER_START_DRILL_SCALE_UP_STANDBY";
    DrPlanStepType["OkeClusterStopDrillCleanupStandby"] = "OKE_CLUSTER_STOP_DRILL_CLEANUP_STANDBY";
    DrPlanStepType["OkeClusterStopDrillScaleDownStandby"] = "OKE_CLUSTER_STOP_DRILL_SCALE_DOWN_STANDBY";
    DrPlanStepType["ObjectStorageBucketSwitchoverDeleteReplicationPrimaryPrecheck"] = "OBJECT_STORAGE_BUCKET_SWITCHOVER_DELETE_REPLICATION_PRIMARY_PRECHECK";
    DrPlanStepType["ObjectStorageBucketSwitchoverSetupReverseReplicationStandbyPrecheck"] = "OBJECT_STORAGE_BUCKET_SWITCHOVER_SETUP_REVERSE_REPLICATION_STANDBY_PRECHECK";
    DrPlanStepType["ObjectStorageBucketFailoverDeleteReplicationStandbyPrecheck"] = "OBJECT_STORAGE_BUCKET_FAILOVER_DELETE_REPLICATION_STANDBY_PRECHECK";
    DrPlanStepType["ObjectStorageBucketFailoverSetupReverseReplicationStandbyPrecheck"] = "OBJECT_STORAGE_BUCKET_FAILOVER_SETUP_REVERSE_REPLICATION_STANDBY_PRECHECK";
    DrPlanStepType["ObjectStorageBucketSwitchoverDeleteReplicationPrimary"] = "OBJECT_STORAGE_BUCKET_SWITCHOVER_DELETE_REPLICATION_PRIMARY";
    DrPlanStepType["ObjectStorageBucketSwitchoverSetupReverseReplicationStandby"] = "OBJECT_STORAGE_BUCKET_SWITCHOVER_SETUP_REVERSE_REPLICATION_STANDBY";
    DrPlanStepType["ObjectStorageBucketFailoverDeleteReplicationStandby"] = "OBJECT_STORAGE_BUCKET_FAILOVER_DELETE_REPLICATION_STANDBY";
    DrPlanStepType["ObjectStorageBucketFailoverSetupReverseReplicationStandby"] = "OBJECT_STORAGE_BUCKET_FAILOVER_SETUP_REVERSE_REPLICATION_STANDBY";
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    DrPlanStepType["UnknownValue"] = "UNKNOWN_VALUE";
})(DrPlanStepType = exports.DrPlanStepType || (exports.DrPlanStepType = {}));
(function (DrPlanStepType) {
    function getJsonObj(obj) {
        return obj;
    }
    DrPlanStepType.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        return obj;
    }
    DrPlanStepType.getDeserializedJsonObj = getDeserializedJsonObj;
})(DrPlanStepType = exports.DrPlanStepType || (exports.DrPlanStepType = {}));
//# sourceMappingURL=dr-plan-step-type.js.map