"use strict";
/**
 * Full Stack Disaster Recovery API
 * Use the Full Stack Disaster Recovery (DR) API to manage disaster recovery for business applications.
Full Stack DR is an OCI disaster recovery orchestration and management service that provides comprehensive disaster
recovery capabilities for all layers of an application stack, including infrastructure, middleware, database,
and application.

 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrProtectionGroupMember = void 0;
const model = __importStar(require("../model"));
const common = require("oci-common");
var DrProtectionGroupMember;
(function (DrProtectionGroupMember) {
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "memberType" in obj && obj.memberType) {
            switch (obj.memberType) {
                case "VOLUME_GROUP":
                    return model.DrProtectionGroupMemberVolumeGroup.getJsonObj(jsonObj, true);
                case "NETWORK_LOAD_BALANCER":
                    return model.DrProtectionGroupMemberNetworkLoadBalancer.getJsonObj(jsonObj, true);
                case "OBJECT_STORAGE_BUCKET":
                    return model.DrProtectionGroupMemberObjectStorageBucket.getJsonObj(jsonObj, true);
                case "FILE_SYSTEM":
                    return model.DrProtectionGroupMemberFileSystem.getJsonObj(jsonObj, true);
                case "COMPUTE_INSTANCE_MOVABLE":
                    return model.DrProtectionGroupMemberComputeInstanceMovable.getJsonObj(jsonObj, true);
                case "AUTONOMOUS_DATABASE":
                    return model.DrProtectionGroupMemberAutonomousDatabase.getJsonObj(jsonObj, true);
                case "LOAD_BALANCER":
                    return model.DrProtectionGroupMemberLoadBalancer.getJsonObj(jsonObj, true);
                case "COMPUTE_INSTANCE":
                    return model.DrProtectionGroupMemberComputeInstance.getJsonObj(jsonObj, true);
                case "COMPUTE_INSTANCE_NON_MOVABLE":
                    return model.DrProtectionGroupMemberComputeInstanceNonMovable.getJsonObj(jsonObj, true);
                case "AUTONOMOUS_CONTAINER_DATABASE":
                    return model.DrProtectionGroupMemberAutonomousContainerDatabase.getJsonObj(jsonObj, true);
                case "DATABASE":
                    return model.DrProtectionGroupMemberDatabase.getJsonObj(jsonObj, true);
                case "OKE_CLUSTER":
                    return model.DrProtectionGroupMemberOkeCluster.getJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.memberType}`);
            }
        }
        return jsonObj;
    }
    DrProtectionGroupMember.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "memberType" in obj && obj.memberType) {
            switch (obj.memberType) {
                case "VOLUME_GROUP":
                    return model.DrProtectionGroupMemberVolumeGroup.getDeserializedJsonObj(jsonObj, true);
                case "NETWORK_LOAD_BALANCER":
                    return model.DrProtectionGroupMemberNetworkLoadBalancer.getDeserializedJsonObj(jsonObj, true);
                case "OBJECT_STORAGE_BUCKET":
                    return model.DrProtectionGroupMemberObjectStorageBucket.getDeserializedJsonObj(jsonObj, true);
                case "FILE_SYSTEM":
                    return model.DrProtectionGroupMemberFileSystem.getDeserializedJsonObj(jsonObj, true);
                case "COMPUTE_INSTANCE_MOVABLE":
                    return model.DrProtectionGroupMemberComputeInstanceMovable.getDeserializedJsonObj(jsonObj, true);
                case "AUTONOMOUS_DATABASE":
                    return model.DrProtectionGroupMemberAutonomousDatabase.getDeserializedJsonObj(jsonObj, true);
                case "LOAD_BALANCER":
                    return model.DrProtectionGroupMemberLoadBalancer.getDeserializedJsonObj(jsonObj, true);
                case "COMPUTE_INSTANCE":
                    return model.DrProtectionGroupMemberComputeInstance.getDeserializedJsonObj(jsonObj, true);
                case "COMPUTE_INSTANCE_NON_MOVABLE":
                    return model.DrProtectionGroupMemberComputeInstanceNonMovable.getDeserializedJsonObj(jsonObj, true);
                case "AUTONOMOUS_CONTAINER_DATABASE":
                    return model.DrProtectionGroupMemberAutonomousContainerDatabase.getDeserializedJsonObj(jsonObj, true);
                case "DATABASE":
                    return model.DrProtectionGroupMemberDatabase.getDeserializedJsonObj(jsonObj, true);
                case "OKE_CLUSTER":
                    return model.DrProtectionGroupMemberOkeCluster.getDeserializedJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.memberType}`);
            }
        }
        return jsonObj;
    }
    DrProtectionGroupMember.getDeserializedJsonObj = getDeserializedJsonObj;
})(DrProtectionGroupMember = exports.DrProtectionGroupMember || (exports.DrProtectionGroupMember = {}));
//# sourceMappingURL=dr-protection-group-member.js.map