/**
 * Vision API
 * Using Vision, you can upload images to detect and classify objects in them. If you have lots of images, you can process them in batch using asynchronous API endpoints. Vision's features are thematically split between Document AI for document-centric images, and Image Analysis for object and scene-based images. Pretrained models and custom models are supported.
 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The job details for a batch document analysis.
 */
export interface DocumentJob {
    /**
     * The job id.
     */
    "id": string;
    /**
     * The OCID of the compartment that starts the job.
     */
    "compartmentId": string;
    /**
     * The document job display name.
     */
    "displayName"?: string;
    /**
     * The list of requested document analysis types.
     */
    "features": Array<model.DocumentFeature>;
    /**
     * The document language, abbreviated according to ISO 639-2.
     */
    "language"?: model.DocumentLanguage;
    /**
     * The type of document.
     */
    "documentType"?: model.DocumentType;
    "inputLocation"?: model.ObjectListInlineInputLocation;
    /**
     * The job acceptance time.
     */
    "timeAccepted": Date;
    /**
     * The job start time.
     */
    "timeStarted"?: Date;
    /**
     * The job finish time.
     */
    "timeFinished"?: Date;
    /**
     * How much progress the operation has made, compared to the total amount of work to be performed. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "percentComplete"?: number;
    "outputLocation": model.OutputLocation;
    /**
     * The current state of the batch document job.
     */
    "lifecycleState": DocumentJob.LifecycleState;
    /**
     * Whether or not to generate a ZIP file containing the results.
     */
    "isZipOutputEnabled"?: boolean;
    /**
     * The detailed status of FAILED state.
     */
    "lifecycleDetails"?: DocumentJob.LifecycleDetails;
}
export declare namespace DocumentJob {
    enum LifecycleState {
        Succeeded = "SUCCEEDED",
        Failed = "FAILED",
        Accepted = "ACCEPTED",
        Canceled = "CANCELED",
        InProgress = "IN_PROGRESS",
        Canceling = "CANCELING",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum LifecycleDetails {
        PartiallySucceeded = "PARTIALLY_SUCCEEDED",
        CompletelyFailed = "COMPLETELY_FAILED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: DocumentJob): object;
    function getDeserializedJsonObj(obj: DocumentJob): object;
}
