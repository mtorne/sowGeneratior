"use strict";
/**
 * Vision API
 * Using Vision, you can upload images to detect and classify objects in them. If you have lots of images, you can process them in batch using asynchronous API endpoints. Vision's features are thematically split between Document AI for document-centric images, and Image Analysis for object and scene-based images. Pretrained models and custom models are supported.
 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageFeature = void 0;
const model = __importStar(require("../model"));
const common = require("oci-common");
var ImageFeature;
(function (ImageFeature) {
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "featureType" in obj && obj.featureType) {
            switch (obj.featureType) {
                case "TEXT_DETECTION":
                    return model.ImageTextDetectionFeature.getJsonObj(jsonObj, true);
                case "FACE_DETECTION":
                    return model.FaceDetectionFeature.getJsonObj(jsonObj, true);
                case "OBJECT_DETECTION":
                    return model.ImageObjectDetectionFeature.getJsonObj(jsonObj, true);
                case "IMAGE_CLASSIFICATION":
                    return model.ImageClassificationFeature.getJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.featureType}`);
            }
        }
        return jsonObj;
    }
    ImageFeature.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "featureType" in obj && obj.featureType) {
            switch (obj.featureType) {
                case "TEXT_DETECTION":
                    return model.ImageTextDetectionFeature.getDeserializedJsonObj(jsonObj, true);
                case "FACE_DETECTION":
                    return model.FaceDetectionFeature.getDeserializedJsonObj(jsonObj, true);
                case "OBJECT_DETECTION":
                    return model.ImageObjectDetectionFeature.getDeserializedJsonObj(jsonObj, true);
                case "IMAGE_CLASSIFICATION":
                    return model.ImageClassificationFeature.getDeserializedJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.featureType}`);
            }
        }
        return jsonObj;
    }
    ImageFeature.getDeserializedJsonObj = getDeserializedJsonObj;
})(ImageFeature = exports.ImageFeature || (exports.ImageFeature = {}));
//# sourceMappingURL=image-feature.js.map