/**
 * Vision API
 * Using Vision, you can upload images to detect and classify objects in them. If you have lots of images, you can process them in batch using asynchronous API endpoints. Vision's features are thematically split between Document AI for document-centric images, and Image Analysis for object and scene-based images. Pretrained models and custom models are supported.
 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Machine-learned Model.
 */
export interface Model {
    /**
     * A unique identifier that is immutable after creation.
     */
    "id": string;
    /**
     * A human-friendly name for the model, which can be changed.
     */
    "displayName"?: string;
    /**
     * An optional description of the model.
     */
    "description"?: string;
    /**
     * The compartment identifier.
     */
    "compartmentId": string;
    /**
     * What type of Vision model this is.
     */
    "modelType": Model.ModelType;
    /**
     * Set to true when experimenting with a new model type or dataset, so model training is quick, with a predefined low number of passes through the training data.
     */
    "isQuickMode"?: boolean;
    /**
     * The maximum model training duration in hours, expressed as a decimal fraction. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "maxTrainingDurationInHours"?: number;
    /**
     * The total hours actually used for model training. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "trainedDurationInHours"?: number;
    "trainingDataset": model.DataScienceLabelingDataset | model.ObjectStorageDataset;
    "testingDataset"?: model.DataScienceLabelingDataset | model.ObjectStorageDataset;
    "validationDataset"?: model.DataScienceLabelingDataset | model.ObjectStorageDataset;
    /**
     * The version of the model.
     */
    "modelVersion": string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project that contains the model.
     */
    "projectId": string;
    /**
     * When the model was created, as an RFC3339 datetime string.
     */
    "timeCreated": Date;
    /**
     * When the model was updated, as an RFC3339 datetime string.
     */
    "timeUpdated"?: Date;
    /**
     * The current state of the model.
     */
    "lifecycleState": Model.LifecycleState;
    /**
     * A message describing the current state in more detail, that can provide actionable information if training failed.
     */
    "lifecycleDetails"?: string;
    /**
     * The precision of the trained model. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "precision"?: number;
    /**
     * Recall of the trained model. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "recall"?: number;
    /**
     * The mean average precision of the trained model. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "averagePrecision"?: number;
    /**
     * The intersection over the union threshold used for calculating precision and recall. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "confidenceThreshold"?: number;
    /**
     * The number of images in the dataset used to train, validate, and test the model. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "totalImageCount"?: number;
    /**
     * The number of images set aside for evaluating model performance metrics after training. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "testImageCount"?: number;
    /**
     * The complete set of per-label metrics for successfully trained models.
     */
    "metrics"?: string;
    /**
     * A simple key-value pair that is applied without any predefined name, type, or scope. It exists for cross-compatibility only.
     * For example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * For example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * For example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace Model {
    enum ModelType {
        ImageClassification = "IMAGE_CLASSIFICATION",
        ObjectDetection = "OBJECT_DETECTION",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum LifecycleState {
        Creating = "CREATING",
        Updating = "UPDATING",
        Active = "ACTIVE",
        Deleting = "DELETING",
        Deleted = "DELETED",
        Failed = "FAILED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: Model): object;
    function getDeserializedJsonObj(obj: Model): object;
}
