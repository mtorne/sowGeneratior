/**
 * Vision API
 * Using Vision, you can upload images to detect and classify objects in them. If you have lots of images, you can process them in batch using asynchronous API endpoints. Vision's features are thematically split between Document AI for document-centric images, and Image Analysis for object and scene-based images. Pretrained models and custom models are supported.
 * OpenAPI spec version: 20220125
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { AIServiceVisionClient } from "./client";
export declare class AIServiceVisionWaiter {
    private client;
    private readonly config?;
    constructor(client: AIServiceVisionClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forDocumentJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDocumentJobResponse
     */
    forDocumentJob(request: serviceRequests.GetDocumentJobRequest, ...targetStates: models.DocumentJob.LifecycleState[]): Promise<serviceResponses.GetDocumentJobResponse>;
    /**
     * Waits forImageJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetImageJobResponse
     */
    forImageJob(request: serviceRequests.GetImageJobRequest, ...targetStates: models.ImageJob.LifecycleState[]): Promise<serviceResponses.GetImageJobResponse>;
    /**
     * Waits forModel till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetModelResponse | null (null in case of 404 response)
     */
    forModel(request: serviceRequests.GetModelRequest, ...targetStates: models.Model.LifecycleState[]): Promise<serviceResponses.GetModelResponse | null>;
    /**
     * Waits forProject till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetProjectResponse | null (null in case of 404 response)
     */
    forProject(request: serviceRequests.GetProjectRequest, ...targetStates: models.Project.LifecycleState[]): Promise<serviceResponses.GetProjectResponse | null>;
    /**
     * Waits forVideoJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVideoJobResponse
     */
    forVideoJob(request: serviceRequests.GetVideoJobRequest, ...targetStates: models.VideoJob.LifecycleState[]): Promise<serviceResponses.GetVideoJobResponse>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
