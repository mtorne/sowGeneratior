/**
 * Network Monitoring API
 * Use the Network Monitoring API to troubleshoot routing and security issues for resources such as virtual cloud networks (VCNs) and compute instances. For more information, see the console
documentation for the [Network Path Analyzer](https://docs.oracle.com/iaas/Content/Network/Concepts/path_analyzer.htm) tool.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * Deprecated. For tunnel information, instead see {@link IPSecConnectionTunnel}.
 *
 */
export interface TunnelStatus {
    /**
      * The IP address of Oracle's VPN headend.
  * <p>
  Example: {@code 203.0.113.50}
  *
      */
    "ipAddress": string;
    /**
     * The tunnel's current state.
     */
    "lifecycleState"?: TunnelStatus.LifecycleState;
    /**
      * The date and time the IPSec connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
  * <p>
  Example: {@code 2016-08-25T21:10:29.600Z}
  *
      */
    "timeCreated"?: Date;
    /**
      * When the state of the tunnel last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
  * <p>
  Example: {@code 2016-08-25T21:10:29.600Z}
  *
      */
    "timeStateModified"?: Date;
}
export declare namespace TunnelStatus {
    enum LifecycleState {
        Up = "UP",
        Down = "DOWN",
        DownForMaintenance = "DOWN_FOR_MAINTENANCE",
        PartialUp = "PARTIAL_UP",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: TunnelStatus): object;
    function getDeserializedJsonObj(obj: TunnelStatus): object;
}
