"use strict";
/**
 * Network Monitoring API
 * Use the Network Monitoring API to troubleshoot routing and security issues for resources such as virtual cloud networks (VCNs) and compute instances. For more information, see the console
documentation for the [Network Path Analyzer](https://docs.oracle.com/iaas/Content/Network/Concepts/path_analyzer.htm) tool.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangeVirtualCircuitCompartmentDetails = exports.ChangeVcnCompartmentDetails = exports.ChangeSubnetCompartmentDetails = exports.ChangeServiceGatewayCompartmentDetails = exports.ChangeSecurityListCompartmentDetails = exports.ChangeRouteTableCompartmentDetails = exports.ChangeRemotePeeringConnectionCompartmentDetails = exports.ChangePublicIpPoolCompartmentDetails = exports.ChangePublicIpCompartmentDetails = exports.ChangePathAnalyzerTestCompartmentDetails = exports.ChangeNetworkSecurityGroupCompartmentDetails = exports.ChangeNatGatewayCompartmentDetails = exports.ChangeLocalPeeringGatewayCompartmentDetails = exports.ChangeInternetGatewayCompartmentDetails = exports.ChangeIPSecConnectionCompartmentDetails = exports.ChangeDrgCompartmentDetails = exports.ChangeDhcpOptionsCompartmentDetails = exports.ChangeCrossConnectGroupCompartmentDetails = exports.ChangeCrossConnectCompartmentDetails = exports.ChangeCpeCompartmentDetails = exports.ChangeCaptureFilterCompartmentDetails = exports.ChangeByoipRangeCompartmentDetails = exports.CaptureFilter = exports.Byoipv6CidrDetails = exports.ByoipRangeVcnIpv6AllocationSummary = exports.ByoipRangeSummary = exports.ByoipRangeCollection = exports.ByoipRange = exports.ByoipAllocatedRangeSummary = exports.ByoipAllocatedRangeCollection = exports.BulkDeleteVirtualCircuitPublicPrefixesDetails = exports.BulkAddVirtualCircuitPublicPrefixesDetails = exports.BgpSessionInfo = exports.AllowedSecurityConfiguration = exports.AllowedSecurityActionDetails = exports.AllowedPhaseTwoParameters = exports.AllowedPhaseOneParameters = exports.AllowedIkeIPSecParameters = exports.AddedNetworkSecurityGroupSecurityRules = exports.AddVcnIpv6CidrDetails = exports.AddVcnCidrDetails = exports.AddSubnetIpv6CidrDetails = exports.AddSecurityRuleDetails = exports.AddPublicIpPoolCapacityDetails = exports.AddNetworkSecurityGroupSecurityRulesDetails = exports.AddDrgRouteRulesDetails = exports.AddDrgRouteRuleDetails = exports.AddDrgRouteDistributionStatementsDetails = exports.AddDrgRouteDistributionStatementDetails = exports.ActionType = void 0;
exports.CrossConnectLocation = exports.CrossConnectGroup = exports.CrossConnect = exports.CreateVtapDetails = exports.CreateVnicDetails = exports.CreateVlanDetails = exports.CreateVirtualCircuitPublicPrefixDetails = exports.CreateVirtualCircuitDetails = exports.CreateVcnDetails = exports.CreateSubnetDetails = exports.CreateServiceGatewayDetails = exports.CreateSecurityListDetails = exports.CreateRouteTableDetails = exports.CreateRemotePeeringConnectionDetails = exports.CreatePublicIpPoolDetails = exports.CreatePublicIpDetails = exports.CreatePrivateIpDetails = exports.CreatePathAnalyzerTestDetails = exports.CreateNetworkSecurityGroupDetails = exports.CreateNatGatewayDetails = exports.CreateMacsecProperties = exports.CreateMacsecKey = exports.CreateLocalPeeringGatewayDetails = exports.CreateIpv6Details = exports.CreateInternetGatewayDetails = exports.CreateIPSecTunnelEncryptionDomainDetails = exports.CreateIPSecTunnelBgpSessionDetails = exports.CreateIPSecConnectionTunnelDetails = exports.CreateIPSecConnectionDetails = exports.CreateDrgRouteTableDetails = exports.CreateDrgRouteDistributionDetails = exports.CreateDrgDetails = exports.CreateDrgAttachmentDetails = exports.CreateDhcpDetails = exports.CreateCrossConnectGroupDetails = exports.CreateCrossConnectDetails = exports.CreateCpeDetails = exports.CreateCaptureFilterDetails = exports.CreateByoipRangeDetails = exports.CpeDeviceShapeSummary = exports.CpeDeviceShapeDetail = exports.CpeDeviceInfo = exports.CpeDeviceConfigQuestion = exports.CpeDeviceConfigAnswer = exports.Cpe = exports.ConnectRemotePeeringConnectionsDetails = exports.ConnectLocalPeeringGatewaysDetails = exports.CompartmentInternal = exports.ChangeVtapCompartmentDetails = exports.ChangeVlanCompartmentDetails = void 0;
exports.MacsecEncryptionCipher = exports.LocalPeeringGateway = exports.LetterOfAuthority = exports.Ipv6 = exports.InternetGateway = exports.IngressSecurityRule = exports.IcmpOptions = exports.IPSecConnectionTunnelSharedSecret = exports.IPSecConnectionTunnelErrorDetails = exports.IPSecConnectionTunnel = exports.IPSecConnectionDeviceStatus = exports.IPSecConnectionDeviceConfig = exports.IPSecConnection = exports.GetPublicIpByPrivateIpIdDetails = exports.GetPublicIpByIpAddressDetails = exports.GetPathAnalysisDetails = exports.ForwardedRoutingConfiguration = exports.ForwardedRoutingActionDetails = exports.FlowLogCaptureFilterRuleDetails = exports.FastConnectProviderServiceKey = exports.FastConnectProviderService = exports.Endpoint = exports.EncryptionDomainConfig = exports.EgressTrafficSpec = exports.EgressSecurityRule = exports.DrgRouteTable = exports.DrgRouteRule = exports.DrgRouteDistributionStatement = exports.DrgRouteDistributionMatchCriteria = exports.DrgRouteDistribution = exports.DrgRedundancyStatus = exports.DrgAttachmentNetworkUpdateDetails = exports.DrgAttachmentNetworkDetails = exports.DrgAttachmentNetworkCreateDetails = exports.DrgAttachmentInfo = exports.DrgAttachment = exports.Drg = exports.DpdConfig = exports.DhcpOptions = exports.DhcpOption = exports.DeniedSecurityActionDetails = exports.DeleteVirtualCircuitPublicPrefixDetails = exports.DefaultPhaseTwoParameters = exports.DefaultPhaseOneParameters = exports.DefaultDrgRouteTables = exports.CrossConnectStatus = exports.CrossConnectPortSpeedShape = exports.CrossConnectMappingDetailsCollection = exports.CrossConnectMappingDetails = exports.CrossConnectMapping = void 0;
exports.TrafficNode = exports.TopologyRoutesToRelationshipDetails = exports.TopologyEntityRelationship = exports.TopologyAssociatedWithRelationshipDetails = exports.Topology = exports.TcpOptions = exports.Subnet = exports.SortOrder = exports.ServiceIdResponseDetails = exports.ServiceIdRequestDetails = exports.ServiceGateway = exports.Service = exports.SecurityRule = exports.SecurityList = exports.SecurityAction = exports.RoutingAction = exports.RouteTable = exports.RouteRule = exports.RemoveVcnIpv6CidrDetails = exports.RemoveVcnCidrDetails = exports.RemoveSubnetIpv6CidrDetails = exports.RemovePublicIpPoolCapacityDetails = exports.RemoveNetworkSecurityGroupSecurityRulesDetails = exports.RemoveDrgRouteRulesDetails = exports.RemoveDrgRouteDistributionStatementsDetails = exports.RemotePeeringConnection = exports.QueryOptions = exports.PublicIpPoolSummary = exports.PublicIpPoolCollection = exports.PublicIpPool = exports.PublicIp = exports.ProtocolParameters = exports.PrivateIp = exports.PortRange = exports.PhaseTwoConfigDetails = exports.PhaseOneConfigDetails = exports.PathAnalyzerTestSummary = exports.PathAnalyzerTestCollection = exports.PathAnalyzerTest = exports.Path = exports.OperationType = exports.OperationStatus = exports.NoRouteRoutingActionDetails = exports.NetworkSecurityGroupVnic = exports.NetworkSecurityGroup = exports.NatGateway = exports.ModifyVcnCidrDetails = exports.MacsecState = exports.MacsecProperties = exports.MacsecKey = void 0;
exports.UpdateVirtualCircuitDetails = exports.UpdateVcnDetails = exports.UpdateTunnelCpeDeviceConfigDetails = exports.UpdateSubnetDetails = exports.UpdateServiceGatewayDetails = exports.UpdateSecurityRuleDetails = exports.UpdateSecurityListDetails = exports.UpdateRouteTableDetails = exports.UpdateRemotePeeringConnectionDetails = exports.UpdatePublicIpPoolDetails = exports.UpdatePublicIpDetails = exports.UpdatePrivateIpDetails = exports.UpdatePathAnalyzerTestDetails = exports.UpdateNetworkSecurityGroupSecurityRulesDetails = exports.UpdateNetworkSecurityGroupDetails = exports.UpdateNatGatewayDetails = exports.UpdateMacsecProperties = exports.UpdateMacsecKey = exports.UpdateLocalPeeringGatewayDetails = exports.UpdateIpv6Details = exports.UpdateInternetGatewayDetails = exports.UpdateIPSecTunnelEncryptionDomainDetails = exports.UpdateIPSecTunnelBgpSessionDetails = exports.UpdateIPSecConnectionTunnelSharedSecretDetails = exports.UpdateIPSecConnectionTunnelDetails = exports.UpdateIPSecConnectionDetails = exports.UpdateDrgRouteTableDetails = exports.UpdateDrgRouteRulesDetails = exports.UpdateDrgRouteRuleDetails = exports.UpdateDrgRouteDistributionStatementsDetails = exports.UpdateDrgRouteDistributionStatementDetails = exports.UpdateDrgRouteDistributionDetails = exports.UpdateDrgDetails = exports.UpdateDrgAttachmentDetails = exports.UpdateDhcpDetails = exports.UpdateCrossConnectGroupDetails = exports.UpdateCrossConnectDetails = exports.UpdateCpeDetails = exports.UpdateCaptureFilterDetails = exports.UpdateByoipRangeDetails = exports.UdpOptions = exports.TunnelStatus = exports.TunnelSecurityAssociationSummary = exports.TunnelRouteSummary = exports.TunnelPhaseTwoDetails = exports.TunnelPhaseOneDetails = exports.TunnelCpeDeviceConfig = exports.TunnelConfig = exports.TrafficRoute = exports.TrafficProtocolParameters = void 0;
exports.NetworkLoadBalancerListenerEndpoint = exports.NetworkLoadBalancerEndpoint = exports.LoopBackDrgAttachmentNetworkDetails = exports.LoadBalancerListenerEndpoint = exports.LoadBalancerEndpoint = exports.IpsecTunnelDrgAttachmentNetworkDetails = exports.IpAddressEndpoint = exports.IngressSecurityListConfiguration = exports.IndeterminateRoutingAction = exports.IcmpTrafficProtocolParameters = exports.IcmpProtocolParameters = exports.ForwardedRoutingAction = exports.EgressSecurityListConfiguration = exports.DrgRoutingConfiguration = exports.DrgAttachmentTypeDrgRouteDistributionMatchCriteria = exports.DrgAttachmentMatchAllDrgRouteDistributionMatchCriteria = exports.DrgAttachmentIdDrgRouteDistributionMatchCriteria = exports.DhcpSearchDomainOption = exports.DhcpDnsOption = exports.DeniedSecurityAction = exports.ComputeInstanceEndpoint = exports.AllowedSecurityAction = exports.AdhocGetPathAnalysisDetails = exports.AccessDeniedTrafficNode = exports.WorkRequestSummaryCollection = exports.WorkRequestSummary = exports.WorkRequestResultCollection = exports.WorkRequestResult = exports.WorkRequestResource = exports.WorkRequestLogEntryCollection = exports.WorkRequestLogEntry = exports.WorkRequestErrorCollection = exports.WorkRequestError = exports.WorkRequest = exports.VtapCaptureFilterRuleDetails = exports.Vtap = exports.Vnic = exports.Vlan = exports.VirtualCircuitPublicPrefix = exports.VirtualCircuitIpMtu = exports.VirtualCircuitBandwidthShape = exports.VirtualCircuitAssociatedTunnelDetails = exports.VirtualCircuit = exports.VcnDnsResolverAssociation = exports.Vcn = exports.UpgradeStatus = exports.UpdatedNetworkSecurityGroupSecurityRules = exports.UpdateVtapDetails = exports.UpdateVnicDetails = exports.UpdateVlanDetails = void 0;
exports.VnicEndpoint = exports.VlanEndpoint = exports.VisibleTrafficNode = exports.VirtualCircuitDrgAttachmentNetworkDetails = exports.VcnTopology = exports.VcnRoutingConfiguration = exports.VcnDrgAttachmentNetworkUpdateDetails = exports.VcnDrgAttachmentNetworkDetails = exports.VcnDrgAttachmentNetworkCreateDetails = exports.UdpTrafficProtocolParameters = exports.UdpProtocolParameters = exports.TopologyRoutesToEntityRelationship = exports.TopologyContainsEntityRelationship = exports.TopologyAssociatedWithEntityRelationship = exports.TcpTrafficProtocolParameters = exports.TcpProtocolParameters = exports.SubnetTopology = exports.SubnetEndpoint = exports.StatefulNsgConfiguration = exports.StatefulIngressSecurityListConfiguration = exports.StatefulEgressSecurityListConfiguration = exports.RemotePeeringConnectionDrgAttachmentNetworkDetails = exports.PersistedGetPathAnalysisDetails = exports.PathTopology = exports.PathAnalysisWorkRequestResult = exports.OnPremEndpoint = exports.NsgConfiguration = exports.NoRouteRoutingAction = exports.NetworkingTopology = void 0;
const ActionType = __importStar(require("./action-type"));
exports.ActionType = ActionType.ActionType;
const AddDrgRouteDistributionStatementDetails = __importStar(require("./add-drg-route-distribution-statement-details"));
exports.AddDrgRouteDistributionStatementDetails = AddDrgRouteDistributionStatementDetails.AddDrgRouteDistributionStatementDetails;
const AddDrgRouteDistributionStatementsDetails = __importStar(require("./add-drg-route-distribution-statements-details"));
exports.AddDrgRouteDistributionStatementsDetails = AddDrgRouteDistributionStatementsDetails.AddDrgRouteDistributionStatementsDetails;
const AddDrgRouteRuleDetails = __importStar(require("./add-drg-route-rule-details"));
exports.AddDrgRouteRuleDetails = AddDrgRouteRuleDetails.AddDrgRouteRuleDetails;
const AddDrgRouteRulesDetails = __importStar(require("./add-drg-route-rules-details"));
exports.AddDrgRouteRulesDetails = AddDrgRouteRulesDetails.AddDrgRouteRulesDetails;
const AddNetworkSecurityGroupSecurityRulesDetails = __importStar(require("./add-network-security-group-security-rules-details"));
exports.AddNetworkSecurityGroupSecurityRulesDetails = AddNetworkSecurityGroupSecurityRulesDetails.AddNetworkSecurityGroupSecurityRulesDetails;
const AddPublicIpPoolCapacityDetails = __importStar(require("./add-public-ip-pool-capacity-details"));
exports.AddPublicIpPoolCapacityDetails = AddPublicIpPoolCapacityDetails.AddPublicIpPoolCapacityDetails;
const AddSecurityRuleDetails = __importStar(require("./add-security-rule-details"));
exports.AddSecurityRuleDetails = AddSecurityRuleDetails.AddSecurityRuleDetails;
const AddSubnetIpv6CidrDetails = __importStar(require("./add-subnet-ipv6-cidr-details"));
exports.AddSubnetIpv6CidrDetails = AddSubnetIpv6CidrDetails.AddSubnetIpv6CidrDetails;
const AddVcnCidrDetails = __importStar(require("./add-vcn-cidr-details"));
exports.AddVcnCidrDetails = AddVcnCidrDetails.AddVcnCidrDetails;
const AddVcnIpv6CidrDetails = __importStar(require("./add-vcn-ipv6-cidr-details"));
exports.AddVcnIpv6CidrDetails = AddVcnIpv6CidrDetails.AddVcnIpv6CidrDetails;
const AddedNetworkSecurityGroupSecurityRules = __importStar(require("./added-network-security-group-security-rules"));
exports.AddedNetworkSecurityGroupSecurityRules = AddedNetworkSecurityGroupSecurityRules.AddedNetworkSecurityGroupSecurityRules;
const AllowedIkeIPSecParameters = __importStar(require("./allowed-ike-ip-sec-parameters"));
exports.AllowedIkeIPSecParameters = AllowedIkeIPSecParameters.AllowedIkeIPSecParameters;
const AllowedPhaseOneParameters = __importStar(require("./allowed-phase-one-parameters"));
exports.AllowedPhaseOneParameters = AllowedPhaseOneParameters.AllowedPhaseOneParameters;
const AllowedPhaseTwoParameters = __importStar(require("./allowed-phase-two-parameters"));
exports.AllowedPhaseTwoParameters = AllowedPhaseTwoParameters.AllowedPhaseTwoParameters;
const AllowedSecurityActionDetails = __importStar(require("./allowed-security-action-details"));
exports.AllowedSecurityActionDetails = AllowedSecurityActionDetails.AllowedSecurityActionDetails;
const AllowedSecurityConfiguration = __importStar(require("./allowed-security-configuration"));
exports.AllowedSecurityConfiguration = AllowedSecurityConfiguration.AllowedSecurityConfiguration;
const BgpSessionInfo = __importStar(require("./bgp-session-info"));
exports.BgpSessionInfo = BgpSessionInfo.BgpSessionInfo;
const BulkAddVirtualCircuitPublicPrefixesDetails = __importStar(require("./bulk-add-virtual-circuit-public-prefixes-details"));
exports.BulkAddVirtualCircuitPublicPrefixesDetails = BulkAddVirtualCircuitPublicPrefixesDetails.BulkAddVirtualCircuitPublicPrefixesDetails;
const BulkDeleteVirtualCircuitPublicPrefixesDetails = __importStar(require("./bulk-delete-virtual-circuit-public-prefixes-details"));
exports.BulkDeleteVirtualCircuitPublicPrefixesDetails = BulkDeleteVirtualCircuitPublicPrefixesDetails.BulkDeleteVirtualCircuitPublicPrefixesDetails;
const ByoipAllocatedRangeCollection = __importStar(require("./byoip-allocated-range-collection"));
exports.ByoipAllocatedRangeCollection = ByoipAllocatedRangeCollection.ByoipAllocatedRangeCollection;
const ByoipAllocatedRangeSummary = __importStar(require("./byoip-allocated-range-summary"));
exports.ByoipAllocatedRangeSummary = ByoipAllocatedRangeSummary.ByoipAllocatedRangeSummary;
const ByoipRange = __importStar(require("./byoip-range"));
exports.ByoipRange = ByoipRange.ByoipRange;
const ByoipRangeCollection = __importStar(require("./byoip-range-collection"));
exports.ByoipRangeCollection = ByoipRangeCollection.ByoipRangeCollection;
const ByoipRangeSummary = __importStar(require("./byoip-range-summary"));
exports.ByoipRangeSummary = ByoipRangeSummary.ByoipRangeSummary;
const ByoipRangeVcnIpv6AllocationSummary = __importStar(require("./byoip-range-vcn-ipv6-allocation-summary"));
exports.ByoipRangeVcnIpv6AllocationSummary = ByoipRangeVcnIpv6AllocationSummary.ByoipRangeVcnIpv6AllocationSummary;
const Byoipv6CidrDetails = __importStar(require("./byoipv6-cidr-details"));
exports.Byoipv6CidrDetails = Byoipv6CidrDetails.Byoipv6CidrDetails;
const CaptureFilter = __importStar(require("./capture-filter"));
exports.CaptureFilter = CaptureFilter.CaptureFilter;
const ChangeByoipRangeCompartmentDetails = __importStar(require("./change-byoip-range-compartment-details"));
exports.ChangeByoipRangeCompartmentDetails = ChangeByoipRangeCompartmentDetails.ChangeByoipRangeCompartmentDetails;
const ChangeCaptureFilterCompartmentDetails = __importStar(require("./change-capture-filter-compartment-details"));
exports.ChangeCaptureFilterCompartmentDetails = ChangeCaptureFilterCompartmentDetails.ChangeCaptureFilterCompartmentDetails;
const ChangeCpeCompartmentDetails = __importStar(require("./change-cpe-compartment-details"));
exports.ChangeCpeCompartmentDetails = ChangeCpeCompartmentDetails.ChangeCpeCompartmentDetails;
const ChangeCrossConnectCompartmentDetails = __importStar(require("./change-cross-connect-compartment-details"));
exports.ChangeCrossConnectCompartmentDetails = ChangeCrossConnectCompartmentDetails.ChangeCrossConnectCompartmentDetails;
const ChangeCrossConnectGroupCompartmentDetails = __importStar(require("./change-cross-connect-group-compartment-details"));
exports.ChangeCrossConnectGroupCompartmentDetails = ChangeCrossConnectGroupCompartmentDetails.ChangeCrossConnectGroupCompartmentDetails;
const ChangeDhcpOptionsCompartmentDetails = __importStar(require("./change-dhcp-options-compartment-details"));
exports.ChangeDhcpOptionsCompartmentDetails = ChangeDhcpOptionsCompartmentDetails.ChangeDhcpOptionsCompartmentDetails;
const ChangeDrgCompartmentDetails = __importStar(require("./change-drg-compartment-details"));
exports.ChangeDrgCompartmentDetails = ChangeDrgCompartmentDetails.ChangeDrgCompartmentDetails;
const ChangeIPSecConnectionCompartmentDetails = __importStar(require("./change-ip-sec-connection-compartment-details"));
exports.ChangeIPSecConnectionCompartmentDetails = ChangeIPSecConnectionCompartmentDetails.ChangeIPSecConnectionCompartmentDetails;
const ChangeInternetGatewayCompartmentDetails = __importStar(require("./change-internet-gateway-compartment-details"));
exports.ChangeInternetGatewayCompartmentDetails = ChangeInternetGatewayCompartmentDetails.ChangeInternetGatewayCompartmentDetails;
const ChangeLocalPeeringGatewayCompartmentDetails = __importStar(require("./change-local-peering-gateway-compartment-details"));
exports.ChangeLocalPeeringGatewayCompartmentDetails = ChangeLocalPeeringGatewayCompartmentDetails.ChangeLocalPeeringGatewayCompartmentDetails;
const ChangeNatGatewayCompartmentDetails = __importStar(require("./change-nat-gateway-compartment-details"));
exports.ChangeNatGatewayCompartmentDetails = ChangeNatGatewayCompartmentDetails.ChangeNatGatewayCompartmentDetails;
const ChangeNetworkSecurityGroupCompartmentDetails = __importStar(require("./change-network-security-group-compartment-details"));
exports.ChangeNetworkSecurityGroupCompartmentDetails = ChangeNetworkSecurityGroupCompartmentDetails.ChangeNetworkSecurityGroupCompartmentDetails;
const ChangePathAnalyzerTestCompartmentDetails = __importStar(require("./change-path-analyzer-test-compartment-details"));
exports.ChangePathAnalyzerTestCompartmentDetails = ChangePathAnalyzerTestCompartmentDetails.ChangePathAnalyzerTestCompartmentDetails;
const ChangePublicIpCompartmentDetails = __importStar(require("./change-public-ip-compartment-details"));
exports.ChangePublicIpCompartmentDetails = ChangePublicIpCompartmentDetails.ChangePublicIpCompartmentDetails;
const ChangePublicIpPoolCompartmentDetails = __importStar(require("./change-public-ip-pool-compartment-details"));
exports.ChangePublicIpPoolCompartmentDetails = ChangePublicIpPoolCompartmentDetails.ChangePublicIpPoolCompartmentDetails;
const ChangeRemotePeeringConnectionCompartmentDetails = __importStar(require("./change-remote-peering-connection-compartment-details"));
exports.ChangeRemotePeeringConnectionCompartmentDetails = ChangeRemotePeeringConnectionCompartmentDetails.ChangeRemotePeeringConnectionCompartmentDetails;
const ChangeRouteTableCompartmentDetails = __importStar(require("./change-route-table-compartment-details"));
exports.ChangeRouteTableCompartmentDetails = ChangeRouteTableCompartmentDetails.ChangeRouteTableCompartmentDetails;
const ChangeSecurityListCompartmentDetails = __importStar(require("./change-security-list-compartment-details"));
exports.ChangeSecurityListCompartmentDetails = ChangeSecurityListCompartmentDetails.ChangeSecurityListCompartmentDetails;
const ChangeServiceGatewayCompartmentDetails = __importStar(require("./change-service-gateway-compartment-details"));
exports.ChangeServiceGatewayCompartmentDetails = ChangeServiceGatewayCompartmentDetails.ChangeServiceGatewayCompartmentDetails;
const ChangeSubnetCompartmentDetails = __importStar(require("./change-subnet-compartment-details"));
exports.ChangeSubnetCompartmentDetails = ChangeSubnetCompartmentDetails.ChangeSubnetCompartmentDetails;
const ChangeVcnCompartmentDetails = __importStar(require("./change-vcn-compartment-details"));
exports.ChangeVcnCompartmentDetails = ChangeVcnCompartmentDetails.ChangeVcnCompartmentDetails;
const ChangeVirtualCircuitCompartmentDetails = __importStar(require("./change-virtual-circuit-compartment-details"));
exports.ChangeVirtualCircuitCompartmentDetails = ChangeVirtualCircuitCompartmentDetails.ChangeVirtualCircuitCompartmentDetails;
const ChangeVlanCompartmentDetails = __importStar(require("./change-vlan-compartment-details"));
exports.ChangeVlanCompartmentDetails = ChangeVlanCompartmentDetails.ChangeVlanCompartmentDetails;
const ChangeVtapCompartmentDetails = __importStar(require("./change-vtap-compartment-details"));
exports.ChangeVtapCompartmentDetails = ChangeVtapCompartmentDetails.ChangeVtapCompartmentDetails;
const CompartmentInternal = __importStar(require("./compartment-internal"));
exports.CompartmentInternal = CompartmentInternal.CompartmentInternal;
const ConnectLocalPeeringGatewaysDetails = __importStar(require("./connect-local-peering-gateways-details"));
exports.ConnectLocalPeeringGatewaysDetails = ConnectLocalPeeringGatewaysDetails.ConnectLocalPeeringGatewaysDetails;
const ConnectRemotePeeringConnectionsDetails = __importStar(require("./connect-remote-peering-connections-details"));
exports.ConnectRemotePeeringConnectionsDetails = ConnectRemotePeeringConnectionsDetails.ConnectRemotePeeringConnectionsDetails;
const Cpe = __importStar(require("./cpe"));
exports.Cpe = Cpe.Cpe;
const CpeDeviceConfigAnswer = __importStar(require("./cpe-device-config-answer"));
exports.CpeDeviceConfigAnswer = CpeDeviceConfigAnswer.CpeDeviceConfigAnswer;
const CpeDeviceConfigQuestion = __importStar(require("./cpe-device-config-question"));
exports.CpeDeviceConfigQuestion = CpeDeviceConfigQuestion.CpeDeviceConfigQuestion;
const CpeDeviceInfo = __importStar(require("./cpe-device-info"));
exports.CpeDeviceInfo = CpeDeviceInfo.CpeDeviceInfo;
const CpeDeviceShapeDetail = __importStar(require("./cpe-device-shape-detail"));
exports.CpeDeviceShapeDetail = CpeDeviceShapeDetail.CpeDeviceShapeDetail;
const CpeDeviceShapeSummary = __importStar(require("./cpe-device-shape-summary"));
exports.CpeDeviceShapeSummary = CpeDeviceShapeSummary.CpeDeviceShapeSummary;
const CreateByoipRangeDetails = __importStar(require("./create-byoip-range-details"));
exports.CreateByoipRangeDetails = CreateByoipRangeDetails.CreateByoipRangeDetails;
const CreateCaptureFilterDetails = __importStar(require("./create-capture-filter-details"));
exports.CreateCaptureFilterDetails = CreateCaptureFilterDetails.CreateCaptureFilterDetails;
const CreateCpeDetails = __importStar(require("./create-cpe-details"));
exports.CreateCpeDetails = CreateCpeDetails.CreateCpeDetails;
const CreateCrossConnectDetails = __importStar(require("./create-cross-connect-details"));
exports.CreateCrossConnectDetails = CreateCrossConnectDetails.CreateCrossConnectDetails;
const CreateCrossConnectGroupDetails = __importStar(require("./create-cross-connect-group-details"));
exports.CreateCrossConnectGroupDetails = CreateCrossConnectGroupDetails.CreateCrossConnectGroupDetails;
const CreateDhcpDetails = __importStar(require("./create-dhcp-details"));
exports.CreateDhcpDetails = CreateDhcpDetails.CreateDhcpDetails;
const CreateDrgAttachmentDetails = __importStar(require("./create-drg-attachment-details"));
exports.CreateDrgAttachmentDetails = CreateDrgAttachmentDetails.CreateDrgAttachmentDetails;
const CreateDrgDetails = __importStar(require("./create-drg-details"));
exports.CreateDrgDetails = CreateDrgDetails.CreateDrgDetails;
const CreateDrgRouteDistributionDetails = __importStar(require("./create-drg-route-distribution-details"));
exports.CreateDrgRouteDistributionDetails = CreateDrgRouteDistributionDetails.CreateDrgRouteDistributionDetails;
const CreateDrgRouteTableDetails = __importStar(require("./create-drg-route-table-details"));
exports.CreateDrgRouteTableDetails = CreateDrgRouteTableDetails.CreateDrgRouteTableDetails;
const CreateIPSecConnectionDetails = __importStar(require("./create-ip-sec-connection-details"));
exports.CreateIPSecConnectionDetails = CreateIPSecConnectionDetails.CreateIPSecConnectionDetails;
const CreateIPSecConnectionTunnelDetails = __importStar(require("./create-ip-sec-connection-tunnel-details"));
exports.CreateIPSecConnectionTunnelDetails = CreateIPSecConnectionTunnelDetails.CreateIPSecConnectionTunnelDetails;
const CreateIPSecTunnelBgpSessionDetails = __importStar(require("./create-ip-sec-tunnel-bgp-session-details"));
exports.CreateIPSecTunnelBgpSessionDetails = CreateIPSecTunnelBgpSessionDetails.CreateIPSecTunnelBgpSessionDetails;
const CreateIPSecTunnelEncryptionDomainDetails = __importStar(require("./create-ip-sec-tunnel-encryption-domain-details"));
exports.CreateIPSecTunnelEncryptionDomainDetails = CreateIPSecTunnelEncryptionDomainDetails.CreateIPSecTunnelEncryptionDomainDetails;
const CreateInternetGatewayDetails = __importStar(require("./create-internet-gateway-details"));
exports.CreateInternetGatewayDetails = CreateInternetGatewayDetails.CreateInternetGatewayDetails;
const CreateIpv6Details = __importStar(require("./create-ipv6-details"));
exports.CreateIpv6Details = CreateIpv6Details.CreateIpv6Details;
const CreateLocalPeeringGatewayDetails = __importStar(require("./create-local-peering-gateway-details"));
exports.CreateLocalPeeringGatewayDetails = CreateLocalPeeringGatewayDetails.CreateLocalPeeringGatewayDetails;
const CreateMacsecKey = __importStar(require("./create-macsec-key"));
exports.CreateMacsecKey = CreateMacsecKey.CreateMacsecKey;
const CreateMacsecProperties = __importStar(require("./create-macsec-properties"));
exports.CreateMacsecProperties = CreateMacsecProperties.CreateMacsecProperties;
const CreateNatGatewayDetails = __importStar(require("./create-nat-gateway-details"));
exports.CreateNatGatewayDetails = CreateNatGatewayDetails.CreateNatGatewayDetails;
const CreateNetworkSecurityGroupDetails = __importStar(require("./create-network-security-group-details"));
exports.CreateNetworkSecurityGroupDetails = CreateNetworkSecurityGroupDetails.CreateNetworkSecurityGroupDetails;
const CreatePathAnalyzerTestDetails = __importStar(require("./create-path-analyzer-test-details"));
exports.CreatePathAnalyzerTestDetails = CreatePathAnalyzerTestDetails.CreatePathAnalyzerTestDetails;
const CreatePrivateIpDetails = __importStar(require("./create-private-ip-details"));
exports.CreatePrivateIpDetails = CreatePrivateIpDetails.CreatePrivateIpDetails;
const CreatePublicIpDetails = __importStar(require("./create-public-ip-details"));
exports.CreatePublicIpDetails = CreatePublicIpDetails.CreatePublicIpDetails;
const CreatePublicIpPoolDetails = __importStar(require("./create-public-ip-pool-details"));
exports.CreatePublicIpPoolDetails = CreatePublicIpPoolDetails.CreatePublicIpPoolDetails;
const CreateRemotePeeringConnectionDetails = __importStar(require("./create-remote-peering-connection-details"));
exports.CreateRemotePeeringConnectionDetails = CreateRemotePeeringConnectionDetails.CreateRemotePeeringConnectionDetails;
const CreateRouteTableDetails = __importStar(require("./create-route-table-details"));
exports.CreateRouteTableDetails = CreateRouteTableDetails.CreateRouteTableDetails;
const CreateSecurityListDetails = __importStar(require("./create-security-list-details"));
exports.CreateSecurityListDetails = CreateSecurityListDetails.CreateSecurityListDetails;
const CreateServiceGatewayDetails = __importStar(require("./create-service-gateway-details"));
exports.CreateServiceGatewayDetails = CreateServiceGatewayDetails.CreateServiceGatewayDetails;
const CreateSubnetDetails = __importStar(require("./create-subnet-details"));
exports.CreateSubnetDetails = CreateSubnetDetails.CreateSubnetDetails;
const CreateVcnDetails = __importStar(require("./create-vcn-details"));
exports.CreateVcnDetails = CreateVcnDetails.CreateVcnDetails;
const CreateVirtualCircuitDetails = __importStar(require("./create-virtual-circuit-details"));
exports.CreateVirtualCircuitDetails = CreateVirtualCircuitDetails.CreateVirtualCircuitDetails;
const CreateVirtualCircuitPublicPrefixDetails = __importStar(require("./create-virtual-circuit-public-prefix-details"));
exports.CreateVirtualCircuitPublicPrefixDetails = CreateVirtualCircuitPublicPrefixDetails.CreateVirtualCircuitPublicPrefixDetails;
const CreateVlanDetails = __importStar(require("./create-vlan-details"));
exports.CreateVlanDetails = CreateVlanDetails.CreateVlanDetails;
const CreateVnicDetails = __importStar(require("./create-vnic-details"));
exports.CreateVnicDetails = CreateVnicDetails.CreateVnicDetails;
const CreateVtapDetails = __importStar(require("./create-vtap-details"));
exports.CreateVtapDetails = CreateVtapDetails.CreateVtapDetails;
const CrossConnect = __importStar(require("./cross-connect"));
exports.CrossConnect = CrossConnect.CrossConnect;
const CrossConnectGroup = __importStar(require("./cross-connect-group"));
exports.CrossConnectGroup = CrossConnectGroup.CrossConnectGroup;
const CrossConnectLocation = __importStar(require("./cross-connect-location"));
exports.CrossConnectLocation = CrossConnectLocation.CrossConnectLocation;
const CrossConnectMapping = __importStar(require("./cross-connect-mapping"));
exports.CrossConnectMapping = CrossConnectMapping.CrossConnectMapping;
const CrossConnectMappingDetails = __importStar(require("./cross-connect-mapping-details"));
exports.CrossConnectMappingDetails = CrossConnectMappingDetails.CrossConnectMappingDetails;
const CrossConnectMappingDetailsCollection = __importStar(require("./cross-connect-mapping-details-collection"));
exports.CrossConnectMappingDetailsCollection = CrossConnectMappingDetailsCollection.CrossConnectMappingDetailsCollection;
const CrossConnectPortSpeedShape = __importStar(require("./cross-connect-port-speed-shape"));
exports.CrossConnectPortSpeedShape = CrossConnectPortSpeedShape.CrossConnectPortSpeedShape;
const CrossConnectStatus = __importStar(require("./cross-connect-status"));
exports.CrossConnectStatus = CrossConnectStatus.CrossConnectStatus;
const DefaultDrgRouteTables = __importStar(require("./default-drg-route-tables"));
exports.DefaultDrgRouteTables = DefaultDrgRouteTables.DefaultDrgRouteTables;
const DefaultPhaseOneParameters = __importStar(require("./default-phase-one-parameters"));
exports.DefaultPhaseOneParameters = DefaultPhaseOneParameters.DefaultPhaseOneParameters;
const DefaultPhaseTwoParameters = __importStar(require("./default-phase-two-parameters"));
exports.DefaultPhaseTwoParameters = DefaultPhaseTwoParameters.DefaultPhaseTwoParameters;
const DeleteVirtualCircuitPublicPrefixDetails = __importStar(require("./delete-virtual-circuit-public-prefix-details"));
exports.DeleteVirtualCircuitPublicPrefixDetails = DeleteVirtualCircuitPublicPrefixDetails.DeleteVirtualCircuitPublicPrefixDetails;
const DeniedSecurityActionDetails = __importStar(require("./denied-security-action-details"));
exports.DeniedSecurityActionDetails = DeniedSecurityActionDetails.DeniedSecurityActionDetails;
const DhcpOption = __importStar(require("./dhcp-option"));
exports.DhcpOption = DhcpOption.DhcpOption;
const DhcpOptions = __importStar(require("./dhcp-options"));
exports.DhcpOptions = DhcpOptions.DhcpOptions;
const DpdConfig = __importStar(require("./dpd-config"));
exports.DpdConfig = DpdConfig.DpdConfig;
const Drg = __importStar(require("./drg"));
exports.Drg = Drg.Drg;
const DrgAttachment = __importStar(require("./drg-attachment"));
exports.DrgAttachment = DrgAttachment.DrgAttachment;
const DrgAttachmentInfo = __importStar(require("./drg-attachment-info"));
exports.DrgAttachmentInfo = DrgAttachmentInfo.DrgAttachmentInfo;
const DrgAttachmentNetworkCreateDetails = __importStar(require("./drg-attachment-network-create-details"));
exports.DrgAttachmentNetworkCreateDetails = DrgAttachmentNetworkCreateDetails.DrgAttachmentNetworkCreateDetails;
const DrgAttachmentNetworkDetails = __importStar(require("./drg-attachment-network-details"));
exports.DrgAttachmentNetworkDetails = DrgAttachmentNetworkDetails.DrgAttachmentNetworkDetails;
const DrgAttachmentNetworkUpdateDetails = __importStar(require("./drg-attachment-network-update-details"));
exports.DrgAttachmentNetworkUpdateDetails = DrgAttachmentNetworkUpdateDetails.DrgAttachmentNetworkUpdateDetails;
const DrgRedundancyStatus = __importStar(require("./drg-redundancy-status"));
exports.DrgRedundancyStatus = DrgRedundancyStatus.DrgRedundancyStatus;
const DrgRouteDistribution = __importStar(require("./drg-route-distribution"));
exports.DrgRouteDistribution = DrgRouteDistribution.DrgRouteDistribution;
const DrgRouteDistributionMatchCriteria = __importStar(require("./drg-route-distribution-match-criteria"));
exports.DrgRouteDistributionMatchCriteria = DrgRouteDistributionMatchCriteria.DrgRouteDistributionMatchCriteria;
const DrgRouteDistributionStatement = __importStar(require("./drg-route-distribution-statement"));
exports.DrgRouteDistributionStatement = DrgRouteDistributionStatement.DrgRouteDistributionStatement;
const DrgRouteRule = __importStar(require("./drg-route-rule"));
exports.DrgRouteRule = DrgRouteRule.DrgRouteRule;
const DrgRouteTable = __importStar(require("./drg-route-table"));
exports.DrgRouteTable = DrgRouteTable.DrgRouteTable;
const EgressSecurityRule = __importStar(require("./egress-security-rule"));
exports.EgressSecurityRule = EgressSecurityRule.EgressSecurityRule;
const EgressTrafficSpec = __importStar(require("./egress-traffic-spec"));
exports.EgressTrafficSpec = EgressTrafficSpec.EgressTrafficSpec;
const EncryptionDomainConfig = __importStar(require("./encryption-domain-config"));
exports.EncryptionDomainConfig = EncryptionDomainConfig.EncryptionDomainConfig;
const Endpoint = __importStar(require("./endpoint"));
exports.Endpoint = Endpoint.Endpoint;
const FastConnectProviderService = __importStar(require("./fast-connect-provider-service"));
exports.FastConnectProviderService = FastConnectProviderService.FastConnectProviderService;
const FastConnectProviderServiceKey = __importStar(require("./fast-connect-provider-service-key"));
exports.FastConnectProviderServiceKey = FastConnectProviderServiceKey.FastConnectProviderServiceKey;
const FlowLogCaptureFilterRuleDetails = __importStar(require("./flow-log-capture-filter-rule-details"));
exports.FlowLogCaptureFilterRuleDetails = FlowLogCaptureFilterRuleDetails.FlowLogCaptureFilterRuleDetails;
const ForwardedRoutingActionDetails = __importStar(require("./forwarded-routing-action-details"));
exports.ForwardedRoutingActionDetails = ForwardedRoutingActionDetails.ForwardedRoutingActionDetails;
const ForwardedRoutingConfiguration = __importStar(require("./forwarded-routing-configuration"));
exports.ForwardedRoutingConfiguration = ForwardedRoutingConfiguration.ForwardedRoutingConfiguration;
const GetPathAnalysisDetails = __importStar(require("./get-path-analysis-details"));
exports.GetPathAnalysisDetails = GetPathAnalysisDetails.GetPathAnalysisDetails;
const GetPublicIpByIpAddressDetails = __importStar(require("./get-public-ip-by-ip-address-details"));
exports.GetPublicIpByIpAddressDetails = GetPublicIpByIpAddressDetails.GetPublicIpByIpAddressDetails;
const GetPublicIpByPrivateIpIdDetails = __importStar(require("./get-public-ip-by-private-ip-id-details"));
exports.GetPublicIpByPrivateIpIdDetails = GetPublicIpByPrivateIpIdDetails.GetPublicIpByPrivateIpIdDetails;
const IPSecConnection = __importStar(require("./i-psec-connection"));
exports.IPSecConnection = IPSecConnection.IPSecConnection;
const IPSecConnectionDeviceConfig = __importStar(require("./i-psec-connection-device-config"));
exports.IPSecConnectionDeviceConfig = IPSecConnectionDeviceConfig.IPSecConnectionDeviceConfig;
const IPSecConnectionDeviceStatus = __importStar(require("./i-psec-connection-device-status"));
exports.IPSecConnectionDeviceStatus = IPSecConnectionDeviceStatus.IPSecConnectionDeviceStatus;
const IPSecConnectionTunnel = __importStar(require("./i-psec-connection-tunnel"));
exports.IPSecConnectionTunnel = IPSecConnectionTunnel.IPSecConnectionTunnel;
const IPSecConnectionTunnelErrorDetails = __importStar(require("./i-psec-connection-tunnel-error-details"));
exports.IPSecConnectionTunnelErrorDetails = IPSecConnectionTunnelErrorDetails.IPSecConnectionTunnelErrorDetails;
const IPSecConnectionTunnelSharedSecret = __importStar(require("./i-psec-connection-tunnel-shared-secret"));
exports.IPSecConnectionTunnelSharedSecret = IPSecConnectionTunnelSharedSecret.IPSecConnectionTunnelSharedSecret;
const IcmpOptions = __importStar(require("./icmp-options"));
exports.IcmpOptions = IcmpOptions.IcmpOptions;
const IngressSecurityRule = __importStar(require("./ingress-security-rule"));
exports.IngressSecurityRule = IngressSecurityRule.IngressSecurityRule;
const InternetGateway = __importStar(require("./internet-gateway"));
exports.InternetGateway = InternetGateway.InternetGateway;
const Ipv6 = __importStar(require("./ipv6"));
exports.Ipv6 = Ipv6.Ipv6;
const LetterOfAuthority = __importStar(require("./letter-of-authority"));
exports.LetterOfAuthority = LetterOfAuthority.LetterOfAuthority;
const LocalPeeringGateway = __importStar(require("./local-peering-gateway"));
exports.LocalPeeringGateway = LocalPeeringGateway.LocalPeeringGateway;
const MacsecEncryptionCipher = __importStar(require("./macsec-encryption-cipher"));
exports.MacsecEncryptionCipher = MacsecEncryptionCipher.MacsecEncryptionCipher;
const MacsecKey = __importStar(require("./macsec-key"));
exports.MacsecKey = MacsecKey.MacsecKey;
const MacsecProperties = __importStar(require("./macsec-properties"));
exports.MacsecProperties = MacsecProperties.MacsecProperties;
const MacsecState = __importStar(require("./macsec-state"));
exports.MacsecState = MacsecState.MacsecState;
const ModifyVcnCidrDetails = __importStar(require("./modify-vcn-cidr-details"));
exports.ModifyVcnCidrDetails = ModifyVcnCidrDetails.ModifyVcnCidrDetails;
const NatGateway = __importStar(require("./nat-gateway"));
exports.NatGateway = NatGateway.NatGateway;
const NetworkSecurityGroup = __importStar(require("./network-security-group"));
exports.NetworkSecurityGroup = NetworkSecurityGroup.NetworkSecurityGroup;
const NetworkSecurityGroupVnic = __importStar(require("./network-security-group-vnic"));
exports.NetworkSecurityGroupVnic = NetworkSecurityGroupVnic.NetworkSecurityGroupVnic;
const NoRouteRoutingActionDetails = __importStar(require("./no-route-routing-action-details"));
exports.NoRouteRoutingActionDetails = NoRouteRoutingActionDetails.NoRouteRoutingActionDetails;
const OperationStatus = __importStar(require("./operation-status"));
exports.OperationStatus = OperationStatus.OperationStatus;
const OperationType = __importStar(require("./operation-type"));
exports.OperationType = OperationType.OperationType;
const Path = __importStar(require("./path"));
exports.Path = Path.Path;
const PathAnalyzerTest = __importStar(require("./path-analyzer-test"));
exports.PathAnalyzerTest = PathAnalyzerTest.PathAnalyzerTest;
const PathAnalyzerTestCollection = __importStar(require("./path-analyzer-test-collection"));
exports.PathAnalyzerTestCollection = PathAnalyzerTestCollection.PathAnalyzerTestCollection;
const PathAnalyzerTestSummary = __importStar(require("./path-analyzer-test-summary"));
exports.PathAnalyzerTestSummary = PathAnalyzerTestSummary.PathAnalyzerTestSummary;
const PhaseOneConfigDetails = __importStar(require("./phase-one-config-details"));
exports.PhaseOneConfigDetails = PhaseOneConfigDetails.PhaseOneConfigDetails;
const PhaseTwoConfigDetails = __importStar(require("./phase-two-config-details"));
exports.PhaseTwoConfigDetails = PhaseTwoConfigDetails.PhaseTwoConfigDetails;
const PortRange = __importStar(require("./port-range"));
exports.PortRange = PortRange.PortRange;
const PrivateIp = __importStar(require("./private-ip"));
exports.PrivateIp = PrivateIp.PrivateIp;
const ProtocolParameters = __importStar(require("./protocol-parameters"));
exports.ProtocolParameters = ProtocolParameters.ProtocolParameters;
const PublicIp = __importStar(require("./public-ip"));
exports.PublicIp = PublicIp.PublicIp;
const PublicIpPool = __importStar(require("./public-ip-pool"));
exports.PublicIpPool = PublicIpPool.PublicIpPool;
const PublicIpPoolCollection = __importStar(require("./public-ip-pool-collection"));
exports.PublicIpPoolCollection = PublicIpPoolCollection.PublicIpPoolCollection;
const PublicIpPoolSummary = __importStar(require("./public-ip-pool-summary"));
exports.PublicIpPoolSummary = PublicIpPoolSummary.PublicIpPoolSummary;
const QueryOptions = __importStar(require("./query-options"));
exports.QueryOptions = QueryOptions.QueryOptions;
const RemotePeeringConnection = __importStar(require("./remote-peering-connection"));
exports.RemotePeeringConnection = RemotePeeringConnection.RemotePeeringConnection;
const RemoveDrgRouteDistributionStatementsDetails = __importStar(require("./remove-drg-route-distribution-statements-details"));
exports.RemoveDrgRouteDistributionStatementsDetails = RemoveDrgRouteDistributionStatementsDetails.RemoveDrgRouteDistributionStatementsDetails;
const RemoveDrgRouteRulesDetails = __importStar(require("./remove-drg-route-rules-details"));
exports.RemoveDrgRouteRulesDetails = RemoveDrgRouteRulesDetails.RemoveDrgRouteRulesDetails;
const RemoveNetworkSecurityGroupSecurityRulesDetails = __importStar(require("./remove-network-security-group-security-rules-details"));
exports.RemoveNetworkSecurityGroupSecurityRulesDetails = RemoveNetworkSecurityGroupSecurityRulesDetails.RemoveNetworkSecurityGroupSecurityRulesDetails;
const RemovePublicIpPoolCapacityDetails = __importStar(require("./remove-public-ip-pool-capacity-details"));
exports.RemovePublicIpPoolCapacityDetails = RemovePublicIpPoolCapacityDetails.RemovePublicIpPoolCapacityDetails;
const RemoveSubnetIpv6CidrDetails = __importStar(require("./remove-subnet-ipv6-cidr-details"));
exports.RemoveSubnetIpv6CidrDetails = RemoveSubnetIpv6CidrDetails.RemoveSubnetIpv6CidrDetails;
const RemoveVcnCidrDetails = __importStar(require("./remove-vcn-cidr-details"));
exports.RemoveVcnCidrDetails = RemoveVcnCidrDetails.RemoveVcnCidrDetails;
const RemoveVcnIpv6CidrDetails = __importStar(require("./remove-vcn-ipv6-cidr-details"));
exports.RemoveVcnIpv6CidrDetails = RemoveVcnIpv6CidrDetails.RemoveVcnIpv6CidrDetails;
const RouteRule = __importStar(require("./route-rule"));
exports.RouteRule = RouteRule.RouteRule;
const RouteTable = __importStar(require("./route-table"));
exports.RouteTable = RouteTable.RouteTable;
const RoutingAction = __importStar(require("./routing-action"));
exports.RoutingAction = RoutingAction.RoutingAction;
const SecurityAction = __importStar(require("./security-action"));
exports.SecurityAction = SecurityAction.SecurityAction;
const SecurityList = __importStar(require("./security-list"));
exports.SecurityList = SecurityList.SecurityList;
const SecurityRule = __importStar(require("./security-rule"));
exports.SecurityRule = SecurityRule.SecurityRule;
const Service = __importStar(require("./service"));
exports.Service = Service.Service;
const ServiceGateway = __importStar(require("./service-gateway"));
exports.ServiceGateway = ServiceGateway.ServiceGateway;
const ServiceIdRequestDetails = __importStar(require("./service-id-request-details"));
exports.ServiceIdRequestDetails = ServiceIdRequestDetails.ServiceIdRequestDetails;
const ServiceIdResponseDetails = __importStar(require("./service-id-response-details"));
exports.ServiceIdResponseDetails = ServiceIdResponseDetails.ServiceIdResponseDetails;
const SortOrder = __importStar(require("./sort-order"));
exports.SortOrder = SortOrder.SortOrder;
const Subnet = __importStar(require("./subnet"));
exports.Subnet = Subnet.Subnet;
const TcpOptions = __importStar(require("./tcp-options"));
exports.TcpOptions = TcpOptions.TcpOptions;
const Topology = __importStar(require("./topology"));
exports.Topology = Topology.Topology;
const TopologyAssociatedWithRelationshipDetails = __importStar(require("./topology-associated-with-relationship-details"));
exports.TopologyAssociatedWithRelationshipDetails = TopologyAssociatedWithRelationshipDetails.TopologyAssociatedWithRelationshipDetails;
const TopologyEntityRelationship = __importStar(require("./topology-entity-relationship"));
exports.TopologyEntityRelationship = TopologyEntityRelationship.TopologyEntityRelationship;
const TopologyRoutesToRelationshipDetails = __importStar(require("./topology-routes-to-relationship-details"));
exports.TopologyRoutesToRelationshipDetails = TopologyRoutesToRelationshipDetails.TopologyRoutesToRelationshipDetails;
const TrafficNode = __importStar(require("./traffic-node"));
exports.TrafficNode = TrafficNode.TrafficNode;
const TrafficProtocolParameters = __importStar(require("./traffic-protocol-parameters"));
exports.TrafficProtocolParameters = TrafficProtocolParameters.TrafficProtocolParameters;
const TrafficRoute = __importStar(require("./traffic-route"));
exports.TrafficRoute = TrafficRoute.TrafficRoute;
const TunnelConfig = __importStar(require("./tunnel-config"));
exports.TunnelConfig = TunnelConfig.TunnelConfig;
const TunnelCpeDeviceConfig = __importStar(require("./tunnel-cpe-device-config"));
exports.TunnelCpeDeviceConfig = TunnelCpeDeviceConfig.TunnelCpeDeviceConfig;
const TunnelPhaseOneDetails = __importStar(require("./tunnel-phase-one-details"));
exports.TunnelPhaseOneDetails = TunnelPhaseOneDetails.TunnelPhaseOneDetails;
const TunnelPhaseTwoDetails = __importStar(require("./tunnel-phase-two-details"));
exports.TunnelPhaseTwoDetails = TunnelPhaseTwoDetails.TunnelPhaseTwoDetails;
const TunnelRouteSummary = __importStar(require("./tunnel-route-summary"));
exports.TunnelRouteSummary = TunnelRouteSummary.TunnelRouteSummary;
const TunnelSecurityAssociationSummary = __importStar(require("./tunnel-security-association-summary"));
exports.TunnelSecurityAssociationSummary = TunnelSecurityAssociationSummary.TunnelSecurityAssociationSummary;
const TunnelStatus = __importStar(require("./tunnel-status"));
exports.TunnelStatus = TunnelStatus.TunnelStatus;
const UdpOptions = __importStar(require("./udp-options"));
exports.UdpOptions = UdpOptions.UdpOptions;
const UpdateByoipRangeDetails = __importStar(require("./update-byoip-range-details"));
exports.UpdateByoipRangeDetails = UpdateByoipRangeDetails.UpdateByoipRangeDetails;
const UpdateCaptureFilterDetails = __importStar(require("./update-capture-filter-details"));
exports.UpdateCaptureFilterDetails = UpdateCaptureFilterDetails.UpdateCaptureFilterDetails;
const UpdateCpeDetails = __importStar(require("./update-cpe-details"));
exports.UpdateCpeDetails = UpdateCpeDetails.UpdateCpeDetails;
const UpdateCrossConnectDetails = __importStar(require("./update-cross-connect-details"));
exports.UpdateCrossConnectDetails = UpdateCrossConnectDetails.UpdateCrossConnectDetails;
const UpdateCrossConnectGroupDetails = __importStar(require("./update-cross-connect-group-details"));
exports.UpdateCrossConnectGroupDetails = UpdateCrossConnectGroupDetails.UpdateCrossConnectGroupDetails;
const UpdateDhcpDetails = __importStar(require("./update-dhcp-details"));
exports.UpdateDhcpDetails = UpdateDhcpDetails.UpdateDhcpDetails;
const UpdateDrgAttachmentDetails = __importStar(require("./update-drg-attachment-details"));
exports.UpdateDrgAttachmentDetails = UpdateDrgAttachmentDetails.UpdateDrgAttachmentDetails;
const UpdateDrgDetails = __importStar(require("./update-drg-details"));
exports.UpdateDrgDetails = UpdateDrgDetails.UpdateDrgDetails;
const UpdateDrgRouteDistributionDetails = __importStar(require("./update-drg-route-distribution-details"));
exports.UpdateDrgRouteDistributionDetails = UpdateDrgRouteDistributionDetails.UpdateDrgRouteDistributionDetails;
const UpdateDrgRouteDistributionStatementDetails = __importStar(require("./update-drg-route-distribution-statement-details"));
exports.UpdateDrgRouteDistributionStatementDetails = UpdateDrgRouteDistributionStatementDetails.UpdateDrgRouteDistributionStatementDetails;
const UpdateDrgRouteDistributionStatementsDetails = __importStar(require("./update-drg-route-distribution-statements-details"));
exports.UpdateDrgRouteDistributionStatementsDetails = UpdateDrgRouteDistributionStatementsDetails.UpdateDrgRouteDistributionStatementsDetails;
const UpdateDrgRouteRuleDetails = __importStar(require("./update-drg-route-rule-details"));
exports.UpdateDrgRouteRuleDetails = UpdateDrgRouteRuleDetails.UpdateDrgRouteRuleDetails;
const UpdateDrgRouteRulesDetails = __importStar(require("./update-drg-route-rules-details"));
exports.UpdateDrgRouteRulesDetails = UpdateDrgRouteRulesDetails.UpdateDrgRouteRulesDetails;
const UpdateDrgRouteTableDetails = __importStar(require("./update-drg-route-table-details"));
exports.UpdateDrgRouteTableDetails = UpdateDrgRouteTableDetails.UpdateDrgRouteTableDetails;
const UpdateIPSecConnectionDetails = __importStar(require("./update-ip-sec-connection-details"));
exports.UpdateIPSecConnectionDetails = UpdateIPSecConnectionDetails.UpdateIPSecConnectionDetails;
const UpdateIPSecConnectionTunnelDetails = __importStar(require("./update-ip-sec-connection-tunnel-details"));
exports.UpdateIPSecConnectionTunnelDetails = UpdateIPSecConnectionTunnelDetails.UpdateIPSecConnectionTunnelDetails;
const UpdateIPSecConnectionTunnelSharedSecretDetails = __importStar(require("./update-ip-sec-connection-tunnel-shared-secret-details"));
exports.UpdateIPSecConnectionTunnelSharedSecretDetails = UpdateIPSecConnectionTunnelSharedSecretDetails.UpdateIPSecConnectionTunnelSharedSecretDetails;
const UpdateIPSecTunnelBgpSessionDetails = __importStar(require("./update-ip-sec-tunnel-bgp-session-details"));
exports.UpdateIPSecTunnelBgpSessionDetails = UpdateIPSecTunnelBgpSessionDetails.UpdateIPSecTunnelBgpSessionDetails;
const UpdateIPSecTunnelEncryptionDomainDetails = __importStar(require("./update-ip-sec-tunnel-encryption-domain-details"));
exports.UpdateIPSecTunnelEncryptionDomainDetails = UpdateIPSecTunnelEncryptionDomainDetails.UpdateIPSecTunnelEncryptionDomainDetails;
const UpdateInternetGatewayDetails = __importStar(require("./update-internet-gateway-details"));
exports.UpdateInternetGatewayDetails = UpdateInternetGatewayDetails.UpdateInternetGatewayDetails;
const UpdateIpv6Details = __importStar(require("./update-ipv6-details"));
exports.UpdateIpv6Details = UpdateIpv6Details.UpdateIpv6Details;
const UpdateLocalPeeringGatewayDetails = __importStar(require("./update-local-peering-gateway-details"));
exports.UpdateLocalPeeringGatewayDetails = UpdateLocalPeeringGatewayDetails.UpdateLocalPeeringGatewayDetails;
const UpdateMacsecKey = __importStar(require("./update-macsec-key"));
exports.UpdateMacsecKey = UpdateMacsecKey.UpdateMacsecKey;
const UpdateMacsecProperties = __importStar(require("./update-macsec-properties"));
exports.UpdateMacsecProperties = UpdateMacsecProperties.UpdateMacsecProperties;
const UpdateNatGatewayDetails = __importStar(require("./update-nat-gateway-details"));
exports.UpdateNatGatewayDetails = UpdateNatGatewayDetails.UpdateNatGatewayDetails;
const UpdateNetworkSecurityGroupDetails = __importStar(require("./update-network-security-group-details"));
exports.UpdateNetworkSecurityGroupDetails = UpdateNetworkSecurityGroupDetails.UpdateNetworkSecurityGroupDetails;
const UpdateNetworkSecurityGroupSecurityRulesDetails = __importStar(require("./update-network-security-group-security-rules-details"));
exports.UpdateNetworkSecurityGroupSecurityRulesDetails = UpdateNetworkSecurityGroupSecurityRulesDetails.UpdateNetworkSecurityGroupSecurityRulesDetails;
const UpdatePathAnalyzerTestDetails = __importStar(require("./update-path-analyzer-test-details"));
exports.UpdatePathAnalyzerTestDetails = UpdatePathAnalyzerTestDetails.UpdatePathAnalyzerTestDetails;
const UpdatePrivateIpDetails = __importStar(require("./update-private-ip-details"));
exports.UpdatePrivateIpDetails = UpdatePrivateIpDetails.UpdatePrivateIpDetails;
const UpdatePublicIpDetails = __importStar(require("./update-public-ip-details"));
exports.UpdatePublicIpDetails = UpdatePublicIpDetails.UpdatePublicIpDetails;
const UpdatePublicIpPoolDetails = __importStar(require("./update-public-ip-pool-details"));
exports.UpdatePublicIpPoolDetails = UpdatePublicIpPoolDetails.UpdatePublicIpPoolDetails;
const UpdateRemotePeeringConnectionDetails = __importStar(require("./update-remote-peering-connection-details"));
exports.UpdateRemotePeeringConnectionDetails = UpdateRemotePeeringConnectionDetails.UpdateRemotePeeringConnectionDetails;
const UpdateRouteTableDetails = __importStar(require("./update-route-table-details"));
exports.UpdateRouteTableDetails = UpdateRouteTableDetails.UpdateRouteTableDetails;
const UpdateSecurityListDetails = __importStar(require("./update-security-list-details"));
exports.UpdateSecurityListDetails = UpdateSecurityListDetails.UpdateSecurityListDetails;
const UpdateSecurityRuleDetails = __importStar(require("./update-security-rule-details"));
exports.UpdateSecurityRuleDetails = UpdateSecurityRuleDetails.UpdateSecurityRuleDetails;
const UpdateServiceGatewayDetails = __importStar(require("./update-service-gateway-details"));
exports.UpdateServiceGatewayDetails = UpdateServiceGatewayDetails.UpdateServiceGatewayDetails;
const UpdateSubnetDetails = __importStar(require("./update-subnet-details"));
exports.UpdateSubnetDetails = UpdateSubnetDetails.UpdateSubnetDetails;
const UpdateTunnelCpeDeviceConfigDetails = __importStar(require("./update-tunnel-cpe-device-config-details"));
exports.UpdateTunnelCpeDeviceConfigDetails = UpdateTunnelCpeDeviceConfigDetails.UpdateTunnelCpeDeviceConfigDetails;
const UpdateVcnDetails = __importStar(require("./update-vcn-details"));
exports.UpdateVcnDetails = UpdateVcnDetails.UpdateVcnDetails;
const UpdateVirtualCircuitDetails = __importStar(require("./update-virtual-circuit-details"));
exports.UpdateVirtualCircuitDetails = UpdateVirtualCircuitDetails.UpdateVirtualCircuitDetails;
const UpdateVlanDetails = __importStar(require("./update-vlan-details"));
exports.UpdateVlanDetails = UpdateVlanDetails.UpdateVlanDetails;
const UpdateVnicDetails = __importStar(require("./update-vnic-details"));
exports.UpdateVnicDetails = UpdateVnicDetails.UpdateVnicDetails;
const UpdateVtapDetails = __importStar(require("./update-vtap-details"));
exports.UpdateVtapDetails = UpdateVtapDetails.UpdateVtapDetails;
const UpdatedNetworkSecurityGroupSecurityRules = __importStar(require("./updated-network-security-group-security-rules"));
exports.UpdatedNetworkSecurityGroupSecurityRules = UpdatedNetworkSecurityGroupSecurityRules.UpdatedNetworkSecurityGroupSecurityRules;
const UpgradeStatus = __importStar(require("./upgrade-status"));
exports.UpgradeStatus = UpgradeStatus.UpgradeStatus;
const Vcn = __importStar(require("./vcn"));
exports.Vcn = Vcn.Vcn;
const VcnDnsResolverAssociation = __importStar(require("./vcn-dns-resolver-association"));
exports.VcnDnsResolverAssociation = VcnDnsResolverAssociation.VcnDnsResolverAssociation;
const VirtualCircuit = __importStar(require("./virtual-circuit"));
exports.VirtualCircuit = VirtualCircuit.VirtualCircuit;
const VirtualCircuitAssociatedTunnelDetails = __importStar(require("./virtual-circuit-associated-tunnel-details"));
exports.VirtualCircuitAssociatedTunnelDetails = VirtualCircuitAssociatedTunnelDetails.VirtualCircuitAssociatedTunnelDetails;
const VirtualCircuitBandwidthShape = __importStar(require("./virtual-circuit-bandwidth-shape"));
exports.VirtualCircuitBandwidthShape = VirtualCircuitBandwidthShape.VirtualCircuitBandwidthShape;
const VirtualCircuitIpMtu = __importStar(require("./virtual-circuit-ip-mtu"));
exports.VirtualCircuitIpMtu = VirtualCircuitIpMtu.VirtualCircuitIpMtu;
const VirtualCircuitPublicPrefix = __importStar(require("./virtual-circuit-public-prefix"));
exports.VirtualCircuitPublicPrefix = VirtualCircuitPublicPrefix.VirtualCircuitPublicPrefix;
const Vlan = __importStar(require("./vlan"));
exports.Vlan = Vlan.Vlan;
const Vnic = __importStar(require("./vnic"));
exports.Vnic = Vnic.Vnic;
const Vtap = __importStar(require("./vtap"));
exports.Vtap = Vtap.Vtap;
const VtapCaptureFilterRuleDetails = __importStar(require("./vtap-capture-filter-rule-details"));
exports.VtapCaptureFilterRuleDetails = VtapCaptureFilterRuleDetails.VtapCaptureFilterRuleDetails;
const WorkRequest = __importStar(require("./work-request"));
exports.WorkRequest = WorkRequest.WorkRequest;
const WorkRequestError = __importStar(require("./work-request-error"));
exports.WorkRequestError = WorkRequestError.WorkRequestError;
const WorkRequestErrorCollection = __importStar(require("./work-request-error-collection"));
exports.WorkRequestErrorCollection = WorkRequestErrorCollection.WorkRequestErrorCollection;
const WorkRequestLogEntry = __importStar(require("./work-request-log-entry"));
exports.WorkRequestLogEntry = WorkRequestLogEntry.WorkRequestLogEntry;
const WorkRequestLogEntryCollection = __importStar(require("./work-request-log-entry-collection"));
exports.WorkRequestLogEntryCollection = WorkRequestLogEntryCollection.WorkRequestLogEntryCollection;
const WorkRequestResource = __importStar(require("./work-request-resource"));
exports.WorkRequestResource = WorkRequestResource.WorkRequestResource;
const WorkRequestResult = __importStar(require("./work-request-result"));
exports.WorkRequestResult = WorkRequestResult.WorkRequestResult;
const WorkRequestResultCollection = __importStar(require("./work-request-result-collection"));
exports.WorkRequestResultCollection = WorkRequestResultCollection.WorkRequestResultCollection;
const WorkRequestSummary = __importStar(require("./work-request-summary"));
exports.WorkRequestSummary = WorkRequestSummary.WorkRequestSummary;
const WorkRequestSummaryCollection = __importStar(require("./work-request-summary-collection"));
exports.WorkRequestSummaryCollection = WorkRequestSummaryCollection.WorkRequestSummaryCollection;
const AccessDeniedTrafficNode = __importStar(require("./access-denied-traffic-node"));
exports.AccessDeniedTrafficNode = AccessDeniedTrafficNode.AccessDeniedTrafficNode;
const AdhocGetPathAnalysisDetails = __importStar(require("./adhoc-get-path-analysis-details"));
exports.AdhocGetPathAnalysisDetails = AdhocGetPathAnalysisDetails.AdhocGetPathAnalysisDetails;
const AllowedSecurityAction = __importStar(require("./allowed-security-action"));
exports.AllowedSecurityAction = AllowedSecurityAction.AllowedSecurityAction;
const ComputeInstanceEndpoint = __importStar(require("./compute-instance-endpoint"));
exports.ComputeInstanceEndpoint = ComputeInstanceEndpoint.ComputeInstanceEndpoint;
const DeniedSecurityAction = __importStar(require("./denied-security-action"));
exports.DeniedSecurityAction = DeniedSecurityAction.DeniedSecurityAction;
const DhcpDnsOption = __importStar(require("./dhcp-dns-option"));
exports.DhcpDnsOption = DhcpDnsOption.DhcpDnsOption;
const DhcpSearchDomainOption = __importStar(require("./dhcp-search-domain-option"));
exports.DhcpSearchDomainOption = DhcpSearchDomainOption.DhcpSearchDomainOption;
const DrgAttachmentIdDrgRouteDistributionMatchCriteria = __importStar(require("./drg-attachment-id-drg-route-distribution-match-criteria"));
exports.DrgAttachmentIdDrgRouteDistributionMatchCriteria = DrgAttachmentIdDrgRouteDistributionMatchCriteria.DrgAttachmentIdDrgRouteDistributionMatchCriteria;
const DrgAttachmentMatchAllDrgRouteDistributionMatchCriteria = __importStar(require("./drg-attachment-match-all-drg-route-distribution-match-criteria"));
exports.DrgAttachmentMatchAllDrgRouteDistributionMatchCriteria = DrgAttachmentMatchAllDrgRouteDistributionMatchCriteria.DrgAttachmentMatchAllDrgRouteDistributionMatchCriteria;
const DrgAttachmentTypeDrgRouteDistributionMatchCriteria = __importStar(require("./drg-attachment-type-drg-route-distribution-match-criteria"));
exports.DrgAttachmentTypeDrgRouteDistributionMatchCriteria = DrgAttachmentTypeDrgRouteDistributionMatchCriteria.DrgAttachmentTypeDrgRouteDistributionMatchCriteria;
const DrgRoutingConfiguration = __importStar(require("./drg-routing-configuration"));
exports.DrgRoutingConfiguration = DrgRoutingConfiguration.DrgRoutingConfiguration;
const EgressSecurityListConfiguration = __importStar(require("./egress-security-list-configuration"));
exports.EgressSecurityListConfiguration = EgressSecurityListConfiguration.EgressSecurityListConfiguration;
const ForwardedRoutingAction = __importStar(require("./forwarded-routing-action"));
exports.ForwardedRoutingAction = ForwardedRoutingAction.ForwardedRoutingAction;
const IcmpProtocolParameters = __importStar(require("./icmp-protocol-parameters"));
exports.IcmpProtocolParameters = IcmpProtocolParameters.IcmpProtocolParameters;
const IcmpTrafficProtocolParameters = __importStar(require("./icmp-traffic-protocol-parameters"));
exports.IcmpTrafficProtocolParameters = IcmpTrafficProtocolParameters.IcmpTrafficProtocolParameters;
const IndeterminateRoutingAction = __importStar(require("./indeterminate-routing-action"));
exports.IndeterminateRoutingAction = IndeterminateRoutingAction.IndeterminateRoutingAction;
const IngressSecurityListConfiguration = __importStar(require("./ingress-security-list-configuration"));
exports.IngressSecurityListConfiguration = IngressSecurityListConfiguration.IngressSecurityListConfiguration;
const IpAddressEndpoint = __importStar(require("./ip-address-endpoint"));
exports.IpAddressEndpoint = IpAddressEndpoint.IpAddressEndpoint;
const IpsecTunnelDrgAttachmentNetworkDetails = __importStar(require("./ipsec-tunnel-drg-attachment-network-details"));
exports.IpsecTunnelDrgAttachmentNetworkDetails = IpsecTunnelDrgAttachmentNetworkDetails.IpsecTunnelDrgAttachmentNetworkDetails;
const LoadBalancerEndpoint = __importStar(require("./load-balancer-endpoint"));
exports.LoadBalancerEndpoint = LoadBalancerEndpoint.LoadBalancerEndpoint;
const LoadBalancerListenerEndpoint = __importStar(require("./load-balancer-listener-endpoint"));
exports.LoadBalancerListenerEndpoint = LoadBalancerListenerEndpoint.LoadBalancerListenerEndpoint;
const LoopBackDrgAttachmentNetworkDetails = __importStar(require("./loop-back-drg-attachment-network-details"));
exports.LoopBackDrgAttachmentNetworkDetails = LoopBackDrgAttachmentNetworkDetails.LoopBackDrgAttachmentNetworkDetails;
const NetworkLoadBalancerEndpoint = __importStar(require("./network-load-balancer-endpoint"));
exports.NetworkLoadBalancerEndpoint = NetworkLoadBalancerEndpoint.NetworkLoadBalancerEndpoint;
const NetworkLoadBalancerListenerEndpoint = __importStar(require("./network-load-balancer-listener-endpoint"));
exports.NetworkLoadBalancerListenerEndpoint = NetworkLoadBalancerListenerEndpoint.NetworkLoadBalancerListenerEndpoint;
const NetworkingTopology = __importStar(require("./networking-topology"));
exports.NetworkingTopology = NetworkingTopology.NetworkingTopology;
const NoRouteRoutingAction = __importStar(require("./no-route-routing-action"));
exports.NoRouteRoutingAction = NoRouteRoutingAction.NoRouteRoutingAction;
const NsgConfiguration = __importStar(require("./nsg-configuration"));
exports.NsgConfiguration = NsgConfiguration.NsgConfiguration;
const OnPremEndpoint = __importStar(require("./on-prem-endpoint"));
exports.OnPremEndpoint = OnPremEndpoint.OnPremEndpoint;
const PathAnalysisWorkRequestResult = __importStar(require("./path-analysis-work-request-result"));
exports.PathAnalysisWorkRequestResult = PathAnalysisWorkRequestResult.PathAnalysisWorkRequestResult;
const PathTopology = __importStar(require("./path-topology"));
exports.PathTopology = PathTopology.PathTopology;
const PersistedGetPathAnalysisDetails = __importStar(require("./persisted-get-path-analysis-details"));
exports.PersistedGetPathAnalysisDetails = PersistedGetPathAnalysisDetails.PersistedGetPathAnalysisDetails;
const RemotePeeringConnectionDrgAttachmentNetworkDetails = __importStar(require("./remote-peering-connection-drg-attachment-network-details"));
exports.RemotePeeringConnectionDrgAttachmentNetworkDetails = RemotePeeringConnectionDrgAttachmentNetworkDetails.RemotePeeringConnectionDrgAttachmentNetworkDetails;
const StatefulEgressSecurityListConfiguration = __importStar(require("./stateful-egress-security-list-configuration"));
exports.StatefulEgressSecurityListConfiguration = StatefulEgressSecurityListConfiguration.StatefulEgressSecurityListConfiguration;
const StatefulIngressSecurityListConfiguration = __importStar(require("./stateful-ingress-security-list-configuration"));
exports.StatefulIngressSecurityListConfiguration = StatefulIngressSecurityListConfiguration.StatefulIngressSecurityListConfiguration;
const StatefulNsgConfiguration = __importStar(require("./stateful-nsg-configuration"));
exports.StatefulNsgConfiguration = StatefulNsgConfiguration.StatefulNsgConfiguration;
const SubnetEndpoint = __importStar(require("./subnet-endpoint"));
exports.SubnetEndpoint = SubnetEndpoint.SubnetEndpoint;
const SubnetTopology = __importStar(require("./subnet-topology"));
exports.SubnetTopology = SubnetTopology.SubnetTopology;
const TcpProtocolParameters = __importStar(require("./tcp-protocol-parameters"));
exports.TcpProtocolParameters = TcpProtocolParameters.TcpProtocolParameters;
const TcpTrafficProtocolParameters = __importStar(require("./tcp-traffic-protocol-parameters"));
exports.TcpTrafficProtocolParameters = TcpTrafficProtocolParameters.TcpTrafficProtocolParameters;
const TopologyAssociatedWithEntityRelationship = __importStar(require("./topology-associated-with-entity-relationship"));
exports.TopologyAssociatedWithEntityRelationship = TopologyAssociatedWithEntityRelationship.TopologyAssociatedWithEntityRelationship;
const TopologyContainsEntityRelationship = __importStar(require("./topology-contains-entity-relationship"));
exports.TopologyContainsEntityRelationship = TopologyContainsEntityRelationship.TopologyContainsEntityRelationship;
const TopologyRoutesToEntityRelationship = __importStar(require("./topology-routes-to-entity-relationship"));
exports.TopologyRoutesToEntityRelationship = TopologyRoutesToEntityRelationship.TopologyRoutesToEntityRelationship;
const UdpProtocolParameters = __importStar(require("./udp-protocol-parameters"));
exports.UdpProtocolParameters = UdpProtocolParameters.UdpProtocolParameters;
const UdpTrafficProtocolParameters = __importStar(require("./udp-traffic-protocol-parameters"));
exports.UdpTrafficProtocolParameters = UdpTrafficProtocolParameters.UdpTrafficProtocolParameters;
const VcnDrgAttachmentNetworkCreateDetails = __importStar(require("./vcn-drg-attachment-network-create-details"));
exports.VcnDrgAttachmentNetworkCreateDetails = VcnDrgAttachmentNetworkCreateDetails.VcnDrgAttachmentNetworkCreateDetails;
const VcnDrgAttachmentNetworkDetails = __importStar(require("./vcn-drg-attachment-network-details"));
exports.VcnDrgAttachmentNetworkDetails = VcnDrgAttachmentNetworkDetails.VcnDrgAttachmentNetworkDetails;
const VcnDrgAttachmentNetworkUpdateDetails = __importStar(require("./vcn-drg-attachment-network-update-details"));
exports.VcnDrgAttachmentNetworkUpdateDetails = VcnDrgAttachmentNetworkUpdateDetails.VcnDrgAttachmentNetworkUpdateDetails;
const VcnRoutingConfiguration = __importStar(require("./vcn-routing-configuration"));
exports.VcnRoutingConfiguration = VcnRoutingConfiguration.VcnRoutingConfiguration;
const VcnTopology = __importStar(require("./vcn-topology"));
exports.VcnTopology = VcnTopology.VcnTopology;
const VirtualCircuitDrgAttachmentNetworkDetails = __importStar(require("./virtual-circuit-drg-attachment-network-details"));
exports.VirtualCircuitDrgAttachmentNetworkDetails = VirtualCircuitDrgAttachmentNetworkDetails.VirtualCircuitDrgAttachmentNetworkDetails;
const VisibleTrafficNode = __importStar(require("./visible-traffic-node"));
exports.VisibleTrafficNode = VisibleTrafficNode.VisibleTrafficNode;
const VlanEndpoint = __importStar(require("./vlan-endpoint"));
exports.VlanEndpoint = VlanEndpoint.VlanEndpoint;
const VnicEndpoint = __importStar(require("./vnic-endpoint"));
exports.VnicEndpoint = VnicEndpoint.VnicEndpoint;
//# sourceMappingURL=index.js.map