"use strict";
/**
 * Process Automation
 * Process Automation helps you to rapidly design, automate, and manage business processes in the cloud. With the Process Automation design-time (Designer) and the runtime (Workspace) environments, you can easily create, develop, manage, test, and monitor process applications and their components.
 * OpenAPI spec version: 20210621
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpaInstance = void 0;
const model = __importStar(require("../model"));
var OpaInstance;
(function (OpaInstance) {
    let ConsumptionModel;
    (function (ConsumptionModel) {
        ConsumptionModel["Ucm"] = "UCM";
        ConsumptionModel["Gov"] = "GOV";
        ConsumptionModel["Saas"] = "SAAS";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ConsumptionModel["UnknownValue"] = "UNKNOWN_VALUE";
    })(ConsumptionModel = OpaInstance.ConsumptionModel || (OpaInstance.ConsumptionModel = {}));
    let ShapeName;
    (function (ShapeName) {
        ShapeName["Development"] = "DEVELOPMENT";
        ShapeName["Production"] = "PRODUCTION";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ShapeName["UnknownValue"] = "UNKNOWN_VALUE";
    })(ShapeName = OpaInstance.ShapeName || (OpaInstance.ShapeName = {}));
    let MeteringType;
    (function (MeteringType) {
        MeteringType["ExecutionPack"] = "EXECUTION_PACK";
        MeteringType["Users"] = "USERS";
        MeteringType["Employee"] = "EMPLOYEE";
        MeteringType["NamedUser"] = "NAMED_USER";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        MeteringType["UnknownValue"] = "UNKNOWN_VALUE";
    })(MeteringType = OpaInstance.MeteringType || (OpaInstance.MeteringType = {}));
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Creating"] = "CREATING";
        LifecycleState["Updating"] = "UPDATING";
        LifecycleState["Active"] = "ACTIVE";
        LifecycleState["Inactive"] = "INACTIVE";
        LifecycleState["Deleting"] = "DELETING";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = OpaInstance.LifecycleState || (OpaInstance.LifecycleState = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "attachments": obj.attachments
                ? obj.attachments.map(item => {
                    return model.AttachmentDetails.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    OpaInstance.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "attachments": obj.attachments
                ? obj.attachments.map(item => {
                    return model.AttachmentDetails.getDeserializedJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    OpaInstance.getDeserializedJsonObj = getDeserializedJsonObj;
})(OpaInstance = exports.OpaInstance || (exports.OpaInstance = {}));
//# sourceMappingURL=opa-instance.js.map