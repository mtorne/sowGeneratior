"use strict";
/**
 * OneSubscription APIs
 * OneSubscription APIs

 * OpenAPI spec version: 20190111
 * Contact: kuaskum_org_ww@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionClient = exports.SubscriptionApiKeys = exports.SubscribedServiceClient = exports.SubscribedServiceApiKeys = exports.RatecardClient = exports.RatecardApiKeys = exports.OrganizationSubscriptionClient = exports.OrganizationSubscriptionApiKeys = exports.InvoiceSummaryClient = exports.InvoiceSummaryApiKeys = exports.ComputedUsageClient = exports.ComputedUsageApiKeys = exports.CommitmentClient = exports.CommitmentApiKeys = exports.BillingScheduleClient = exports.BillingScheduleApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const oci_common_2 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var BillingScheduleApiKeys;
(function (BillingScheduleApiKeys) {
})(BillingScheduleApiKeys = exports.BillingScheduleApiKeys || (exports.BillingScheduleApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class BillingScheduleClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "BillingSchedule";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("onesubscription")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("onesubscription");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190111";
        if (this.logger)
            this.logger.info(`BillingScheduleClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(BillingScheduleClient.serviceEndpointTemplate, this._region, BillingScheduleClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(BillingScheduleClient.serviceEndpointTemplate, this._regionId, BillingScheduleClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(BillingScheduleClient.serviceEndpointTemplate, region, BillingScheduleClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(BillingScheduleClient.serviceEndpointTemplate, regionId, BillingScheduleClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * This list API returns all billing schedules for given subscription id and
     * for a particular Subscribed Service if provided
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListBillingSchedulesRequest
     * @return ListBillingSchedulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/ListBillingSchedules.ts.html |here} to see how to use ListBillingSchedules API.
     */
    listBillingSchedules(listBillingSchedulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BillingScheduleClient#listBillingSchedules.");
            const operationName = "listBillingSchedules";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listBillingSchedulesRequest.compartmentId,
                "subscriptionId": listBillingSchedulesRequest.subscriptionId,
                "subscribedServiceId": listBillingSchedulesRequest.subscribedServiceId,
                "limit": listBillingSchedulesRequest.limit,
                "page": listBillingSchedulesRequest.page,
                "sortOrder": listBillingSchedulesRequest.sortOrder,
                "sortBy": listBillingSchedulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listBillingSchedulesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listBillingSchedulesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/billingSchedules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.BillingScheduleSummary,
                    type: "Array<model.BillingScheduleSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listBillingSchedulesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.BillingScheduleSummary objects
     * contained in responses from the listBillingSchedules operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBillingSchedules(request) {
        return oci_common_1.paginateRecords(request, req => this.listBillingSchedules(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listBillingSchedulesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listBillingSchedules operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBillingSchedulesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listBillingSchedules(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.BillingScheduleSummary objects
     * contained in responses from the listBillingSchedules operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listBillingSchedulesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listBillingSchedules(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listBillingSchedules operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listBillingSchedulesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listBillingSchedules(req));
    }
}
exports.BillingScheduleClient = BillingScheduleClient;
BillingScheduleClient.serviceEndpointTemplate = "https://identity.{region}.oci.{secondLevelDomain}";
BillingScheduleClient.endpointServiceName = "";
var CommitmentApiKeys;
(function (CommitmentApiKeys) {
})(CommitmentApiKeys = exports.CommitmentApiKeys || (exports.CommitmentApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class CommitmentClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "Commitment";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("onesubscription")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("onesubscription");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190111";
        if (this.logger)
            this.logger.info(`CommitmentClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(CommitmentClient.serviceEndpointTemplate, this._region, CommitmentClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(CommitmentClient.serviceEndpointTemplate, this._regionId, CommitmentClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(CommitmentClient.serviceEndpointTemplate, region, CommitmentClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(CommitmentClient.serviceEndpointTemplate, regionId, CommitmentClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * This API returns the commitment details corresponding to the id provided
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetCommitmentRequest
     * @return GetCommitmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/GetCommitment.ts.html |here} to see how to use GetCommitment API.
     */
    getCommitment(getCommitmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CommitmentClient#getCommitment.");
            const operationName = "getCommitment";
            const apiReferenceLink = "";
            const pathParams = {
                "{commitmentId}": getCommitmentRequest.commitmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCommitmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCommitmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/commitments/{commitmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "commitment",
                    bodyModel: model.Commitment,
                    type: "model.Commitment",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This list API returns all commitments for a particular Subscribed Service
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListCommitmentsRequest
     * @return ListCommitmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/ListCommitments.ts.html |here} to see how to use ListCommitments API.
     */
    listCommitments(listCommitmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CommitmentClient#listCommitments.");
            const operationName = "listCommitments";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "subscribedServiceId": listCommitmentsRequest.subscribedServiceId,
                "compartmentId": listCommitmentsRequest.compartmentId,
                "limit": listCommitmentsRequest.limit,
                "page": listCommitmentsRequest.page,
                "sortOrder": listCommitmentsRequest.sortOrder,
                "sortBy": listCommitmentsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCommitmentsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCommitmentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/commitments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.CommitmentSummary,
                    type: "Array<model.CommitmentSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listCommitmentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.CommitmentSummary objects
     * contained in responses from the listCommitments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCommitments(request) {
        return oci_common_1.paginateRecords(request, req => this.listCommitments(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listCommitmentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listCommitments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCommitmentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listCommitments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.CommitmentSummary objects
     * contained in responses from the listCommitments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCommitmentsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listCommitments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCommitments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCommitmentsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listCommitments(req));
    }
}
exports.CommitmentClient = CommitmentClient;
CommitmentClient.serviceEndpointTemplate = "https://identity.{region}.oci.{secondLevelDomain}";
CommitmentClient.endpointServiceName = "";
var ComputedUsageApiKeys;
(function (ComputedUsageApiKeys) {
})(ComputedUsageApiKeys = exports.ComputedUsageApiKeys || (exports.ComputedUsageApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class ComputedUsageClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "ComputedUsage";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("onesubscription")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("onesubscription");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190111";
        if (this.logger)
            this.logger.info(`ComputedUsageClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ComputedUsageClient.serviceEndpointTemplate, this._region, ComputedUsageClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ComputedUsageClient.serviceEndpointTemplate, this._regionId, ComputedUsageClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ComputedUsageClient.serviceEndpointTemplate, region, ComputedUsageClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ComputedUsageClient.serviceEndpointTemplate, regionId, ComputedUsageClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * This is an API which returns Computed Usage corresponding to the id passed
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetComputedUsageRequest
     * @return GetComputedUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/GetComputedUsage.ts.html |here} to see how to use GetComputedUsage API.
     */
    getComputedUsage(getComputedUsageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputedUsageClient#getComputedUsage.");
            const operationName = "getComputedUsage";
            const apiReferenceLink = "";
            const pathParams = {
                "{computedUsageId}": getComputedUsageRequest.computedUsageId
            };
            const queryParams = {
                "compartmentId": getComputedUsageRequest.compartmentId,
                "fields": getComputedUsageRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getComputedUsageRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getComputedUsageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computedUsages/{computedUsageId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "computedUsage",
                    bodyModel: model.ComputedUsage,
                    type: "model.ComputedUsage",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a collection API which returns a list of aggregated computed usage details (there can be multiple Parent Products under a given SubID each of which is represented under Subscription Service Line # in SPM).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAggregatedComputedUsagesRequest
     * @return ListAggregatedComputedUsagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/ListAggregatedComputedUsages.ts.html |here} to see how to use ListAggregatedComputedUsages API.
     */
    listAggregatedComputedUsages(listAggregatedComputedUsagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputedUsageClient#listAggregatedComputedUsages.");
            const operationName = "listAggregatedComputedUsages";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAggregatedComputedUsagesRequest.compartmentId,
                "subscriptionId": listAggregatedComputedUsagesRequest.subscriptionId,
                "timeFrom": listAggregatedComputedUsagesRequest.timeFrom,
                "timeTo": listAggregatedComputedUsagesRequest.timeTo,
                "parentProduct": listAggregatedComputedUsagesRequest.parentProduct,
                "grouping": listAggregatedComputedUsagesRequest.grouping,
                "limit": listAggregatedComputedUsagesRequest.limit,
                "page": listAggregatedComputedUsagesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAggregatedComputedUsagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAggregatedComputedUsagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/aggregatedComputedUsages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.AggregatedComputedUsageSummary,
                    type: "Array<model.AggregatedComputedUsageSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listAggregatedComputedUsagesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AggregatedComputedUsageSummary objects
     * contained in responses from the listAggregatedComputedUsages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAggregatedComputedUsages(request) {
        return oci_common_1.paginateRecords(request, req => this.listAggregatedComputedUsages(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listAggregatedComputedUsagesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAggregatedComputedUsages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAggregatedComputedUsagesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAggregatedComputedUsages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.AggregatedComputedUsageSummary objects
     * contained in responses from the listAggregatedComputedUsages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAggregatedComputedUsagesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listAggregatedComputedUsages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAggregatedComputedUsages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAggregatedComputedUsagesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listAggregatedComputedUsages(req));
    }
    /**
     * This is a collection API which returns a list of Computed Usages for given filters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListComputedUsagesRequest
     * @return ListComputedUsagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/ListComputedUsages.ts.html |here} to see how to use ListComputedUsages API.
     */
    listComputedUsages(listComputedUsagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputedUsageClient#listComputedUsages.");
            const operationName = "listComputedUsages";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listComputedUsagesRequest.compartmentId,
                "subscriptionId": listComputedUsagesRequest.subscriptionId,
                "timeFrom": listComputedUsagesRequest.timeFrom,
                "timeTo": listComputedUsagesRequest.timeTo,
                "parentProduct": listComputedUsagesRequest.parentProduct,
                "computedProduct": listComputedUsagesRequest.computedProduct,
                "limit": listComputedUsagesRequest.limit,
                "page": listComputedUsagesRequest.page,
                "sortOrder": listComputedUsagesRequest.sortOrder,
                "sortBy": listComputedUsagesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listComputedUsagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listComputedUsagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computedUsages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ComputedUsageSummary,
                    type: "Array<model.ComputedUsageSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listComputedUsagesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ComputedUsageSummary objects
     * contained in responses from the listComputedUsages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputedUsages(request) {
        return oci_common_1.paginateRecords(request, req => this.listComputedUsages(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listComputedUsagesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listComputedUsages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputedUsagesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listComputedUsages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ComputedUsageSummary objects
     * contained in responses from the listComputedUsages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listComputedUsagesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listComputedUsages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listComputedUsages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listComputedUsagesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listComputedUsages(req));
    }
}
exports.ComputedUsageClient = ComputedUsageClient;
ComputedUsageClient.serviceEndpointTemplate = "https://identity.{region}.oci.{secondLevelDomain}";
ComputedUsageClient.endpointServiceName = "";
var InvoiceSummaryApiKeys;
(function (InvoiceSummaryApiKeys) {
})(InvoiceSummaryApiKeys = exports.InvoiceSummaryApiKeys || (exports.InvoiceSummaryApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class InvoiceSummaryClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "InvoiceSummary";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("onesubscription")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("onesubscription");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190111";
        if (this.logger)
            this.logger.info(`InvoiceSummaryClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(InvoiceSummaryClient.serviceEndpointTemplate, this._region, InvoiceSummaryClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(InvoiceSummaryClient.serviceEndpointTemplate, this._regionId, InvoiceSummaryClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(InvoiceSummaryClient.serviceEndpointTemplate, region, InvoiceSummaryClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(InvoiceSummaryClient.serviceEndpointTemplate, regionId, InvoiceSummaryClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * This is a collection API which returns a list of Invoiced Computed Usages for given Invoiceline id.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListInvoicelineComputedUsagesRequest
     * @return ListInvoicelineComputedUsagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/ListInvoicelineComputedUsages.ts.html |here} to see how to use ListInvoicelineComputedUsages API.
     */
    listInvoicelineComputedUsages(listInvoicelineComputedUsagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InvoiceSummaryClient#listInvoicelineComputedUsages.");
            const operationName = "listInvoicelineComputedUsages";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInvoicelineComputedUsagesRequest.compartmentId,
                "invoiceLineId": listInvoicelineComputedUsagesRequest.invoiceLineId,
                "sortOrder": listInvoicelineComputedUsagesRequest.sortOrder,
                "sortBy": listInvoicelineComputedUsagesRequest.sortBy,
                "limit": listInvoicelineComputedUsagesRequest.limit,
                "page": listInvoicelineComputedUsagesRequest.page,
                "fields": listInvoicelineComputedUsagesRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInvoicelineComputedUsagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listInvoicelineComputedUsagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/invoiceLineComputedUsages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.InvoicelineComputedUsageSummary,
                    type: "Array<model.InvoicelineComputedUsageSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listInvoicelineComputedUsagesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.InvoicelineComputedUsageSummary objects
     * contained in responses from the listInvoicelineComputedUsages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInvoicelineComputedUsages(request) {
        return oci_common_1.paginateRecords(request, req => this.listInvoicelineComputedUsages(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listInvoicelineComputedUsagesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listInvoicelineComputedUsages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInvoicelineComputedUsagesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInvoicelineComputedUsages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.InvoicelineComputedUsageSummary objects
     * contained in responses from the listInvoicelineComputedUsages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listInvoicelineComputedUsagesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listInvoicelineComputedUsages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInvoicelineComputedUsages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listInvoicelineComputedUsagesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listInvoicelineComputedUsages(req));
    }
    /**
     * This is a collection API which returns a list of Invoices for given filters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListInvoicesRequest
     * @return ListInvoicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/ListInvoices.ts.html |here} to see how to use ListInvoices API.
     */
    listInvoices(listInvoicesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InvoiceSummaryClient#listInvoices.");
            const operationName = "listInvoices";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInvoicesRequest.compartmentId,
                "arCustomerTransactionId": listInvoicesRequest.arCustomerTransactionId,
                "timeFrom": listInvoicesRequest.timeFrom,
                "timeTo": listInvoicesRequest.timeTo,
                "sortOrder": listInvoicesRequest.sortOrder,
                "sortBy": listInvoicesRequest.sortBy,
                "limit": listInvoicesRequest.limit,
                "page": listInvoicesRequest.page,
                "fields": listInvoicesRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInvoicesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listInvoicesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/invoice",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.InvoiceSummary,
                    type: "Array<model.InvoiceSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listInvoicesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.InvoiceSummary objects
     * contained in responses from the listInvoices operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInvoices(request) {
        return oci_common_1.paginateRecords(request, req => this.listInvoices(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listInvoicesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listInvoices operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInvoicesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInvoices(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.InvoiceSummary objects
     * contained in responses from the listInvoices operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listInvoicesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listInvoices(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInvoices operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listInvoicesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listInvoices(req));
    }
}
exports.InvoiceSummaryClient = InvoiceSummaryClient;
InvoiceSummaryClient.serviceEndpointTemplate = "https://identity.{region}.oci.{secondLevelDomain}";
InvoiceSummaryClient.endpointServiceName = "";
var OrganizationSubscriptionApiKeys;
(function (OrganizationSubscriptionApiKeys) {
})(OrganizationSubscriptionApiKeys = exports.OrganizationSubscriptionApiKeys || (exports.OrganizationSubscriptionApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class OrganizationSubscriptionClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "OrganizationSubscription";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("onesubscription")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("onesubscription");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190111";
        if (this.logger)
            this.logger.info(`OrganizationSubscriptionClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(OrganizationSubscriptionClient.serviceEndpointTemplate, this._region, OrganizationSubscriptionClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(OrganizationSubscriptionClient.serviceEndpointTemplate, this._regionId, OrganizationSubscriptionClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(OrganizationSubscriptionClient.serviceEndpointTemplate, region, OrganizationSubscriptionClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(OrganizationSubscriptionClient.serviceEndpointTemplate, regionId, OrganizationSubscriptionClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * API that returns data for the list of subscription ids returned from Organizations API
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListOrganizationSubscriptionsRequest
     * @return ListOrganizationSubscriptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/ListOrganizationSubscriptions.ts.html |here} to see how to use ListOrganizationSubscriptions API.
     */
    listOrganizationSubscriptions(listOrganizationSubscriptionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OrganizationSubscriptionClient#listOrganizationSubscriptions.");
            const operationName = "listOrganizationSubscriptions";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOrganizationSubscriptionsRequest.compartmentId,
                "limit": listOrganizationSubscriptionsRequest.limit,
                "page": listOrganizationSubscriptionsRequest.page,
                "sortOrder": listOrganizationSubscriptionsRequest.sortOrder,
                "sortBy": listOrganizationSubscriptionsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOrganizationSubscriptionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOrganizationSubscriptionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/organizationSubscription",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.OrganizationSubscriptionSummary,
                    type: "Array<model.OrganizationSubscriptionSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listOrganizationSubscriptionsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.OrganizationSubscriptionSummary objects
     * contained in responses from the listOrganizationSubscriptions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOrganizationSubscriptions(request) {
        return oci_common_1.paginateRecords(request, req => this.listOrganizationSubscriptions(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listOrganizationSubscriptionsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listOrganizationSubscriptions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOrganizationSubscriptionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listOrganizationSubscriptions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.OrganizationSubscriptionSummary objects
     * contained in responses from the listOrganizationSubscriptions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOrganizationSubscriptionsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listOrganizationSubscriptions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listOrganizationSubscriptions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOrganizationSubscriptionsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listOrganizationSubscriptions(req));
    }
}
exports.OrganizationSubscriptionClient = OrganizationSubscriptionClient;
OrganizationSubscriptionClient.serviceEndpointTemplate = "https://identity.{region}.oci.{secondLevelDomain}";
OrganizationSubscriptionClient.endpointServiceName = "";
var RatecardApiKeys;
(function (RatecardApiKeys) {
})(RatecardApiKeys = exports.RatecardApiKeys || (exports.RatecardApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class RatecardClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "Ratecard";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("onesubscription")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("onesubscription");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190111";
        if (this.logger)
            this.logger.info(`RatecardClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(RatecardClient.serviceEndpointTemplate, this._region, RatecardClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(RatecardClient.serviceEndpointTemplate, this._regionId, RatecardClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(RatecardClient.serviceEndpointTemplate, region, RatecardClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(RatecardClient.serviceEndpointTemplate, regionId, RatecardClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * List API that returns all ratecards for given Subscription Id and Account ID (if provided) and
     * for a particular date range
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListRateCardsRequest
     * @return ListRateCardsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/ListRateCards.ts.html |here} to see how to use ListRateCards API.
     */
    listRateCards(listRateCardsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RatecardClient#listRateCards.");
            const operationName = "listRateCards";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "subscriptionId": listRateCardsRequest.subscriptionId,
                "timeFrom": listRateCardsRequest.timeFrom,
                "timeTo": listRateCardsRequest.timeTo,
                "partNumber": listRateCardsRequest.partNumber,
                "limit": listRateCardsRequest.limit,
                "page": listRateCardsRequest.page,
                "sortOrder": listRateCardsRequest.sortOrder,
                "sortBy": listRateCardsRequest.sortBy,
                "compartmentId": listRateCardsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listRateCardsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listRateCardsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ratecards",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.RateCardSummary,
                    type: "Array<model.RateCardSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listRateCardsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.RateCardSummary objects
     * contained in responses from the listRateCards operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRateCards(request) {
        return oci_common_1.paginateRecords(request, req => this.listRateCards(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listRateCardsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listRateCards operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRateCardsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listRateCards(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.RateCardSummary objects
     * contained in responses from the listRateCards operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRateCardsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listRateCards(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listRateCards operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRateCardsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listRateCards(req));
    }
}
exports.RatecardClient = RatecardClient;
RatecardClient.serviceEndpointTemplate = "https://identity.{region}.oci.{secondLevelDomain}";
RatecardClient.endpointServiceName = "";
var SubscribedServiceApiKeys;
(function (SubscribedServiceApiKeys) {
})(SubscribedServiceApiKeys = exports.SubscribedServiceApiKeys || (exports.SubscribedServiceApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class SubscribedServiceClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "SubscribedService";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("onesubscription")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("onesubscription");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190111";
        if (this.logger)
            this.logger.info(`SubscribedServiceClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(SubscribedServiceClient.serviceEndpointTemplate, this._region, SubscribedServiceClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(SubscribedServiceClient.serviceEndpointTemplate, this._regionId, SubscribedServiceClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(SubscribedServiceClient.serviceEndpointTemplate, region, SubscribedServiceClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(SubscribedServiceClient.serviceEndpointTemplate, regionId, SubscribedServiceClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * This API returns the subscribed service details corresponding to the id provided
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSubscribedServiceRequest
     * @return GetSubscribedServiceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/GetSubscribedService.ts.html |here} to see how to use GetSubscribedService API.
     */
    getSubscribedService(getSubscribedServiceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SubscribedServiceClient#getSubscribedService.");
            const operationName = "getSubscribedService";
            const apiReferenceLink = "";
            const pathParams = {
                "{subscribedServiceId}": getSubscribedServiceRequest.subscribedServiceId
            };
            const queryParams = {
                "fields": getSubscribedServiceRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSubscribedServiceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSubscribedServiceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/subscribedServices/{subscribedServiceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "subscribedService",
                    bodyModel: model.SubscribedService,
                    type: "model.SubscribedService",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This list API returns all subscribed services for given Subscription ID
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSubscribedServicesRequest
     * @return ListSubscribedServicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/ListSubscribedServices.ts.html |here} to see how to use ListSubscribedServices API.
     */
    listSubscribedServices(listSubscribedServicesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SubscribedServiceClient#listSubscribedServices.");
            const operationName = "listSubscribedServices";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSubscribedServicesRequest.compartmentId,
                "subscriptionId": listSubscribedServicesRequest.subscriptionId,
                "orderLineId": listSubscribedServicesRequest.orderLineId,
                "status": listSubscribedServicesRequest.status,
                "limit": listSubscribedServicesRequest.limit,
                "page": listSubscribedServicesRequest.page,
                "sortOrder": listSubscribedServicesRequest.sortOrder,
                "sortBy": listSubscribedServicesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSubscribedServicesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSubscribedServicesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/subscribedServices",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SubscribedServiceSummary,
                    type: "Array<model.SubscribedServiceSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSubscribedServicesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SubscribedServiceSummary objects
     * contained in responses from the listSubscribedServices operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSubscribedServices(request) {
        return oci_common_1.paginateRecords(request, req => this.listSubscribedServices(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSubscribedServicesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSubscribedServices operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSubscribedServicesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSubscribedServices(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SubscribedServiceSummary objects
     * contained in responses from the listSubscribedServices operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSubscribedServicesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSubscribedServices(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSubscribedServices operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSubscribedServicesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSubscribedServices(req));
    }
}
exports.SubscribedServiceClient = SubscribedServiceClient;
SubscribedServiceClient.serviceEndpointTemplate = "https://identity.{region}.oci.{secondLevelDomain}";
SubscribedServiceClient.endpointServiceName = "";
var SubscriptionApiKeys;
(function (SubscriptionApiKeys) {
})(SubscriptionApiKeys = exports.SubscriptionApiKeys || (exports.SubscriptionApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class SubscriptionClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "Subscription";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("onesubscription")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("onesubscription");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190111";
        if (this.logger)
            this.logger.info(`SubscriptionClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(SubscriptionClient.serviceEndpointTemplate, this._region, SubscriptionClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(SubscriptionClient.serviceEndpointTemplate, this._regionId, SubscriptionClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(SubscriptionClient.serviceEndpointTemplate, region, SubscriptionClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(SubscriptionClient.serviceEndpointTemplate, regionId, SubscriptionClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * This list API returns all subscriptions for a given plan number or subscription id or buyer email
     * and provides additional parameters to include ratecard and commitment details.
     * This API expects exactly one of the above mentioned parameters as input. If more than one parameters are provided the API will throw
     * a 400 - invalid parameters exception and if no parameters are provided it will throw a 400 - missing parameter exception
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSubscriptionsRequest
     * @return ListSubscriptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/onesubscription/ListSubscriptions.ts.html |here} to see how to use ListSubscriptions API.
     */
    listSubscriptions(listSubscriptionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SubscriptionClient#listSubscriptions.");
            const operationName = "listSubscriptions";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSubscriptionsRequest.compartmentId,
                "planNumber": listSubscriptionsRequest.planNumber,
                "subscriptionId": listSubscriptionsRequest.subscriptionId,
                "buyerEmail": listSubscriptionsRequest.buyerEmail,
                "isCommitInfoRequired": listSubscriptionsRequest.isCommitInfoRequired,
                "limit": listSubscriptionsRequest.limit,
                "page": listSubscriptionsRequest.page,
                "sortOrder": listSubscriptionsRequest.sortOrder,
                "sortBy": listSubscriptionsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSubscriptionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSubscriptionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/subscriptions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SubscriptionSummary,
                    type: "Array<model.SubscriptionSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSubscriptionsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SubscriptionSummary objects
     * contained in responses from the listSubscriptions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSubscriptions(request) {
        return oci_common_1.paginateRecords(request, req => this.listSubscriptions(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSubscriptionsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSubscriptions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSubscriptionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSubscriptions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SubscriptionSummary objects
     * contained in responses from the listSubscriptions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSubscriptionsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSubscriptions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSubscriptions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSubscriptionsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSubscriptions(req));
    }
}
exports.SubscriptionClient = SubscriptionClient;
SubscriptionClient.serviceEndpointTemplate = "https://identity.{region}.oci.{secondLevelDomain}";
SubscriptionClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map