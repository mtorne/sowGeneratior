/**
 * Security Attribute API
 * Use the Security Attributes API to manage security attributes and security attribute namespaces. For more information, see the documentation for [Security Attributes](https://docs.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attributes.htm) and [Security Attribute Namespaces](https://docs.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
 * OpenAPI spec version: 20240815
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { SecurityAttributeWaiter } from "./securityattribute-waiter";
declare const Breaker: any;
export declare enum SecurityAttributeApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class SecurityAttributeClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": SecurityAttributeWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new SecurityAttributeWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): SecurityAttributeWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): SecurityAttributeWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Deletes the specified security attribute definitions. This operation triggers a process that removes the
     * security attributes from all resources in your tenancy. The security attributes must be within the same security attribute namespace.
     *
     * The following actions happen immediately:
     *
     * After you start this operation, the state of the tag changes to DELETING, and security attribute removal
     * from resources begins. This process can take up to 48 hours depending on the number of resources that
     * are tagged and the regions in which those resources reside.
     *
     * When all security attributes have been removed, the state changes to DELETED. You cannot restore a deleted security attribute. After the security attribute state
     * changes to DELETED, you can use the same security attribute name again.
     *
     * After you start this operation, you cannot start either the {@link #deleteSecurityAttribute(DeleteSecurityAttributeRequest) deleteSecurityAttribute} or the {@link #cascadingDeleteSecurityAttributeNamespace(CascadingDeleteSecurityAttributeNamespaceRequest) cascadingDeleteSecurityAttributeNamespace} operation until this process completes.
     *
     * In order to delete security attribute, you must first retire the security attribute. Use {@link #updateSecurityAttributeNamespace(UpdateSecurityAttributeNamespaceRequest) updateSecurityAttributeNamespace}
     * to retire a security attribute.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkDeleteSecurityAttributesRequest
     * @return BulkDeleteSecurityAttributesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/BulkDeleteSecurityAttributes.ts.html |here} to see how to use BulkDeleteSecurityAttributes API.
     */
    bulkDeleteSecurityAttributes(bulkDeleteSecurityAttributesRequest: requests.BulkDeleteSecurityAttributesRequest): Promise<responses.BulkDeleteSecurityAttributesResponse>;
    /**
       * Edits the specified list of security attributes for the selected resources.
  * This operation triggers a process that edits the attributes on all selected resources. The possible actions are:
  * <p>
    * Add a security attribute when it does not already exist on the resource.
  *   * Update the value for a security attribute when it is present on the resource.
  *   * Add a security attribute when it does not already exist on the resource or update the value when it is present on the resource.
  *   * Remove a security attribute from a resource. The security attribute is removed from the resource regardless of the value.
  * <p>
  The edits can include a combination of operations and attributes.
  * However, multiple operations cannot apply to the same attribute in the same request.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param BulkEditSecurityAttributesRequest
       * @return BulkEditSecurityAttributesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/BulkEditSecurityAttributes.ts.html |here} to see how to use BulkEditSecurityAttributes API.
       */
    bulkEditSecurityAttributes(bulkEditSecurityAttributesRequest: requests.BulkEditSecurityAttributesRequest): Promise<responses.BulkEditSecurityAttributesResponse>;
    /**
       * Deletes the specified security attribute namespace. This operation triggers a process that removes all of the security attributes
  * defined in the specified security attribute namespace from all resources in your tenancy and then deletes the security attribute namespace.
  * <p>
  After you start the delete operation:
  * <p>
    * New security attribute key definitions cannot be created under the namespace.
  *   * The state of the security attribute namespace changes to DELETING.
  *   * Security attribute removal from the resources begins.
  * <p>
  This process can take up to 48 hours depending on the number of security attributes in the namespace, the number of resources
  * that are tagged, and the locations of the regions in which those resources reside.
  * <p>
  After all security attributes are removed, the state changes to DELETED. You cannot restore a deleted security attribute namespace. After the deleted security attribute namespace
  * changes its state to DELETED, you can use the name of the deleted security attribute namespace again.
  * <p>
  After you start this operation, you cannot start either the {@link #deleteSecurityAttribute(DeleteSecurityAttributeRequest) deleteSecurityAttribute} or the {@link #bulkDeleteSecurityAttributes(BulkDeleteSecurityAttributesRequest) bulkDeleteSecurityAttributes} operation until this process completes.
  * <p>
  To delete a security attribute namespace, you must first retire it. Use {@link #updateSecurityAttributeNamespace(UpdateSecurityAttributeNamespaceRequest) updateSecurityAttributeNamespace}
  * to retire a security attribute namespace.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CascadingDeleteSecurityAttributeNamespaceRequest
       * @return CascadingDeleteSecurityAttributeNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/CascadingDeleteSecurityAttributeNamespace.ts.html |here} to see how to use CascadingDeleteSecurityAttributeNamespace API.
       */
    cascadingDeleteSecurityAttributeNamespace(cascadingDeleteSecurityAttributeNamespaceRequest: requests.CascadingDeleteSecurityAttributeNamespaceRequest): Promise<responses.CascadingDeleteSecurityAttributeNamespaceResponse>;
    /**
       * Moves the specified security attribute namespace to the specified compartment within the same tenancy.
  * <p>
  To move the security attribute namespace, you must have the manage security-attributes permission on both compartments.
  * For more information about IAM policies, see [Details for IAM](https://docs.oracle.com/iaas/Content/Identity/policyreference/iampolicyreference.htm).
  * <p>
  Moving a security attribute namespace moves all the security attributes contained in the security attribute namespace.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeSecurityAttributeNamespaceCompartmentRequest
       * @return ChangeSecurityAttributeNamespaceCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ChangeSecurityAttributeNamespaceCompartment.ts.html |here} to see how to use ChangeSecurityAttributeNamespaceCompartment API.
       */
    changeSecurityAttributeNamespaceCompartment(changeSecurityAttributeNamespaceCompartmentRequest: requests.ChangeSecurityAttributeNamespaceCompartmentRequest): Promise<responses.ChangeSecurityAttributeNamespaceCompartmentResponse>;
    /**
       * Creates a new security attribute in the specified security attribute namespace.
  * <p>
  The security attribute requires either the OCID or the name of the security attribute namespace that will contain this
  * security attribute.
  * <p>
  You must specify a *name* for the attribute, which must be unique across all attributes in the security attribute namespace
  * and cannot be changed. The only valid characters for security attribute names are:\u00A00-9, A-Z, a-z, -, _ characters.
  * Names are case insensitive. That means, for example, \"mySecurityAttribute\" and \"mysecurityattribute\" are not allowed in the same namespace.
  * If you specify a name that's already in use in the security attribute namespace, a 409 error is returned.
  * <p>
  The security attribute must have a *description*. It does not have to be unique, and you can change it with
  * {@link #updateSecurityAttribute(UpdateSecurityAttributeRequest) updateSecurityAttribute}.
  * <p>
  The security attribute must have a value type, which is specified with a validator. Security attribute can use either a
  * static value or a list of possible values. Static values are entered by a user applying the security attribute
  * to a resource. Lists are created by the user and the user must apply a value from the list. Lists
  * are validated.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateSecurityAttributeRequest
       * @return CreateSecurityAttributeResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/CreateSecurityAttribute.ts.html |here} to see how to use CreateSecurityAttribute API.
       */
    createSecurityAttribute(createSecurityAttributeRequest: requests.CreateSecurityAttributeRequest): Promise<responses.CreateSecurityAttributeResponse>;
    /**
       * Creates a new security attribute namespace in the specified compartment.
  * <p>
  You must specify the compartment ID in the request object (remember that the tenancy is simply the root
  * compartment).
  * <p>
  You must also specify a *name* for the namespace, which must be unique across all namespaces in your tenancy
  * and cannot be changed. The only valid characters for security attribute names are: \u00A00-9, A-Z, a-z, -, _ characters.
  * Names are case insensitive. That means, for example, \"myNamespace\" and \"mynamespace\" are not allowed
  * in the same tenancy. Once you created a namespace, you cannot change the name.
  * If you specify a name that's already in use in the tenancy, a 409 error is returned.
  * <p>
  You must also specify a *description* for the namespace.
  * It does not have to be unique, and you can change it with
  * {@link #updateSecurityAttributeNamespace(UpdateSecurityAttributeNamespaceRequest) updateSecurityAttributeNamespace}.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateSecurityAttributeNamespaceRequest
       * @return CreateSecurityAttributeNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/CreateSecurityAttributeNamespace.ts.html |here} to see how to use CreateSecurityAttributeNamespace API.
       */
    createSecurityAttributeNamespace(createSecurityAttributeNamespaceRequest: requests.CreateSecurityAttributeNamespaceRequest): Promise<responses.CreateSecurityAttributeNamespaceResponse>;
    /**
       * Deletes the specified security attribute. This operation triggers a process that removes the
  * security attribute from all resources in your tenancy.
  * <p>
  When you start the delete operation, the state of the security attribute changes to DELETING and security attribute removal
  * from resources begins. This can take up to 48 hours depending on the number of resources that
  * were tagged as well as the regions in which those resources reside.
  * <p>
  When all attributes have been removed, the state changes to DELETED. You cannot restore a deleted attribute. Once the deleted attribute
  * changes its state to DELETED, you can use the same security attribute name again.
  * <p>
  After you start this operation, you cannot start either the {@link #bulkDeleteSecurityAttributes(BulkDeleteSecurityAttributesRequest) bulkDeleteSecurityAttributes} or the {@link #cascadingDeleteSecurityAttributeNamespace(CascadingDeleteSecurityAttributeNamespaceRequest) cascadingDeleteSecurityAttributeNamespace} operation until this process completes.
  * <p>
  To delete a security attribute, you must first retire it. Use {@link #updateSecurityAttribute(UpdateSecurityAttributeRequest) updateSecurityAttribute}
  * to retire a security attribute.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteSecurityAttributeRequest
       * @return DeleteSecurityAttributeResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/DeleteSecurityAttribute.ts.html |here} to see how to use DeleteSecurityAttribute API.
       */
    deleteSecurityAttribute(deleteSecurityAttributeRequest: requests.DeleteSecurityAttributeRequest): Promise<responses.DeleteSecurityAttributeResponse>;
    /**
     * Deletes the specified security attribute namespace. Only an empty security attribute namespace can be deleted with this operation. To use this operation
     * to delete a security attribute namespace that contains security attributes, first delete all of its security attributes.
     * Use {@link #deleteSecurityAttribute(DeleteSecurityAttributeRequest) deleteSecurityAttribute} to delete a security attribute.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSecurityAttributeNamespaceRequest
     * @return DeleteSecurityAttributeNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/DeleteSecurityAttributeNamespace.ts.html |here} to see how to use DeleteSecurityAttributeNamespace API.
     */
    deleteSecurityAttributeNamespace(deleteSecurityAttributeNamespaceRequest: requests.DeleteSecurityAttributeNamespaceRequest): Promise<responses.DeleteSecurityAttributeNamespaceResponse>;
    /**
     * Gets the specified security attribute's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityAttributeRequest
     * @return GetSecurityAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/GetSecurityAttribute.ts.html |here} to see how to use GetSecurityAttribute API.
     */
    getSecurityAttribute(getSecurityAttributeRequest: requests.GetSecurityAttributeRequest): Promise<responses.GetSecurityAttributeResponse>;
    /**
     * Gets the specified security attribute namespace's information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityAttributeNamespaceRequest
     * @return GetSecurityAttributeNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/GetSecurityAttributeNamespace.ts.html |here} to see how to use GetSecurityAttributeNamespace API.
     */
    getSecurityAttributeNamespace(getSecurityAttributeNamespaceRequest: requests.GetSecurityAttributeNamespaceRequest): Promise<responses.GetSecurityAttributeNamespaceResponse>;
    /**
     * Gets details on a specified work request. The workRequestID is returned in the opc-work-request-id header
     * for any asynchronous operation in security attributes service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityAttributeWorkRequestRequest
     * @return GetSecurityAttributeWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/GetSecurityAttributeWorkRequest.ts.html |here} to see how to use GetSecurityAttributeWorkRequest API.
     */
    getSecurityAttributeWorkRequest(getSecurityAttributeWorkRequestRequest: requests.GetSecurityAttributeWorkRequestRequest): Promise<responses.GetSecurityAttributeWorkRequestResponse>;
    /**
     * Lists the security attribute namespaces in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityAttributeNamespacesRequest
     * @return ListSecurityAttributeNamespacesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeNamespaces.ts.html |here} to see how to use ListSecurityAttributeNamespaces API.
     */
    listSecurityAttributeNamespaces(listSecurityAttributeNamespacesRequest: requests.ListSecurityAttributeNamespacesRequest): Promise<responses.ListSecurityAttributeNamespacesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeNamespacesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAttributeNamespaceSummary objects
     * contained in responses from the listSecurityAttributeNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeNamespaces(request: requests.ListSecurityAttributeNamespacesRequest): AsyncIterableIterator<model.SecurityAttributeNamespaceSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeNamespacesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeNamespacesResponses(request: requests.ListSecurityAttributeNamespacesRequest): AsyncIterableIterator<responses.ListSecurityAttributeNamespacesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAttributeNamespaceSummary objects
     * contained in responses from the listSecurityAttributeNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeNamespacesRecordIterator(request: requests.ListSecurityAttributeNamespacesRequest): AsyncIterableIterator<model.SecurityAttributeNamespaceSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeNamespacesResponseIterator(request: requests.ListSecurityAttributeNamespacesRequest): AsyncIterableIterator<responses.ListSecurityAttributeNamespacesResponse>;
    /**
     * Gets the errors for a work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityAttributeWorkRequestErrorsRequest
     * @return ListSecurityAttributeWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeWorkRequestErrors.ts.html |here} to see how to use ListSecurityAttributeWorkRequestErrors API.
     */
    listSecurityAttributeWorkRequestErrors(listSecurityAttributeWorkRequestErrorsRequest: requests.ListSecurityAttributeWorkRequestErrorsRequest): Promise<responses.ListSecurityAttributeWorkRequestErrorsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestErrorSummary objects
     * contained in responses from the listSecurityAttributeWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequestErrors(request: requests.ListSecurityAttributeWorkRequestErrorsRequest): AsyncIterableIterator<model.SecurityAttributeWorkRequestErrorSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequestErrorsResponses(request: requests.ListSecurityAttributeWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestErrorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestErrorSummary objects
     * contained in responses from the listSecurityAttributeWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestErrorsRecordIterator(request: requests.ListSecurityAttributeWorkRequestErrorsRequest): AsyncIterableIterator<model.SecurityAttributeWorkRequestErrorSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestErrorsResponseIterator(request: requests.ListSecurityAttributeWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestErrorsResponse>;
    /**
     * Gets the logs for a work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityAttributeWorkRequestLogsRequest
     * @return ListSecurityAttributeWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeWorkRequestLogs.ts.html |here} to see how to use ListSecurityAttributeWorkRequestLogs API.
     */
    listSecurityAttributeWorkRequestLogs(listSecurityAttributeWorkRequestLogsRequest: requests.ListSecurityAttributeWorkRequestLogsRequest): Promise<responses.ListSecurityAttributeWorkRequestLogsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestLogSummary objects
     * contained in responses from the listSecurityAttributeWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequestLogs(request: requests.ListSecurityAttributeWorkRequestLogsRequest): AsyncIterableIterator<model.SecurityAttributeWorkRequestLogSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequestLogsResponses(request: requests.ListSecurityAttributeWorkRequestLogsRequest): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestLogsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestLogSummary objects
     * contained in responses from the listSecurityAttributeWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestLogsRecordIterator(request: requests.ListSecurityAttributeWorkRequestLogsRequest): AsyncIterableIterator<model.SecurityAttributeWorkRequestLogSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestLogsResponseIterator(request: requests.ListSecurityAttributeWorkRequestLogsRequest): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestLogsResponse>;
    /**
     * Lists the security attribute work requests in compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityAttributeWorkRequestsRequest
     * @return ListSecurityAttributeWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeWorkRequests.ts.html |here} to see how to use ListSecurityAttributeWorkRequests API.
     */
    listSecurityAttributeWorkRequests(listSecurityAttributeWorkRequestsRequest: requests.ListSecurityAttributeWorkRequestsRequest): Promise<responses.ListSecurityAttributeWorkRequestsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestSummary objects
     * contained in responses from the listSecurityAttributeWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequests(request: requests.ListSecurityAttributeWorkRequestsRequest): AsyncIterableIterator<model.SecurityAttributeWorkRequestSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequestsResponses(request: requests.ListSecurityAttributeWorkRequestsRequest): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestSummary objects
     * contained in responses from the listSecurityAttributeWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestsRecordIterator(request: requests.ListSecurityAttributeWorkRequestsRequest): AsyncIterableIterator<model.SecurityAttributeWorkRequestSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestsResponseIterator(request: requests.ListSecurityAttributeWorkRequestsRequest): AsyncIterableIterator<responses.ListSecurityAttributeWorkRequestsResponse>;
    /**
     * Lists the security attributes in the specified namespace.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityAttributesRequest
     * @return ListSecurityAttributesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributes.ts.html |here} to see how to use ListSecurityAttributes API.
     */
    listSecurityAttributes(listSecurityAttributesRequest: requests.ListSecurityAttributesRequest): Promise<responses.ListSecurityAttributesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAttributeSummary objects
     * contained in responses from the listSecurityAttributes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributes(request: requests.ListSecurityAttributesRequest): AsyncIterableIterator<model.SecurityAttributeSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributesResponses(request: requests.ListSecurityAttributesRequest): AsyncIterableIterator<responses.ListSecurityAttributesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAttributeSummary objects
     * contained in responses from the listSecurityAttributes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributesRecordIterator(request: requests.ListSecurityAttributesRequest): AsyncIterableIterator<model.SecurityAttributeSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributesResponseIterator(request: requests.ListSecurityAttributesRequest): AsyncIterableIterator<responses.ListSecurityAttributesResponse>;
    /**
     * Updates the specified security attribute. You can only update `description`, and `isRetired`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSecurityAttributeRequest
     * @return UpdateSecurityAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/UpdateSecurityAttribute.ts.html |here} to see how to use UpdateSecurityAttribute API.
     */
    updateSecurityAttribute(updateSecurityAttributeRequest: requests.UpdateSecurityAttributeRequest): Promise<responses.UpdateSecurityAttributeResponse>;
    /**
       * Updates the specified security attribute namespace. You can't update the namespace name.
  * <p>
  Updating `isRetired` to 'true' retires the namespace and all the security attributes in the namespace. Reactivating a
  * namespace (changing `isRetired` from 'true' to 'false') does not reactivate security attributes.
  * To reactivate the security attributes, you must reactivate each one individually *after* you reactivate the namespace,
  * using {@link #updateSecurityAttribute(UpdateSecurityAttributeRequest) updateSecurityAttribute}. For more information about retiring security attribute namespaces, see
  * [Managing Security Attribute Namespaces](https://docs.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
  * <p>
  You can't add a namespace with the same name as a retired namespace in the same tenancy.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateSecurityAttributeNamespaceRequest
       * @return UpdateSecurityAttributeNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/UpdateSecurityAttributeNamespace.ts.html |here} to see how to use UpdateSecurityAttributeNamespace API.
       */
    updateSecurityAttributeNamespace(updateSecurityAttributeNamespaceRequest: requests.UpdateSecurityAttributeNamespaceRequest): Promise<responses.UpdateSecurityAttributeNamespaceResponse>;
}
export {};
