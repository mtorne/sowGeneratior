"use strict";
/**
 * Security Attribute API
 * Use the Security Attributes API to manage security attributes and security attribute namespaces. For more information, see the documentation for [Security Attributes](https://docs.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attributes.htm) and [Security Attribute Namespaces](https://docs.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
 * OpenAPI spec version: 20240815
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityAttributeClient = exports.SecurityAttributeApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const securityattribute_waiter_1 = require("./securityattribute-waiter");
const oci_common_2 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var SecurityAttributeApiKeys;
(function (SecurityAttributeApiKeys) {
})(SecurityAttributeApiKeys = exports.SecurityAttributeApiKeys || (exports.SecurityAttributeApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class SecurityAttributeClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "SecurityAttribute";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("securityattribute")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("securityattribute");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20240815";
        if (this.logger)
            this.logger.info(`SecurityAttributeClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(SecurityAttributeClient.serviceEndpointTemplate, this._region, SecurityAttributeClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(SecurityAttributeClient.serviceEndpointTemplate, this._regionId, SecurityAttributeClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(SecurityAttributeClient.serviceEndpointTemplate, region, SecurityAttributeClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(SecurityAttributeClient.serviceEndpointTemplate, regionId, SecurityAttributeClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new SecurityAttributeWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new securityattribute_waiter_1.SecurityAttributeWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Deletes the specified security attribute definitions. This operation triggers a process that removes the
     * security attributes from all resources in your tenancy. The security attributes must be within the same security attribute namespace.
     *
     * The following actions happen immediately:
     *
     * After you start this operation, the state of the tag changes to DELETING, and security attribute removal
     * from resources begins. This process can take up to 48 hours depending on the number of resources that
     * are tagged and the regions in which those resources reside.
     *
     * When all security attributes have been removed, the state changes to DELETED. You cannot restore a deleted security attribute. After the security attribute state
     * changes to DELETED, you can use the same security attribute name again.
     *
     * After you start this operation, you cannot start either the {@link #deleteSecurityAttribute(DeleteSecurityAttributeRequest) deleteSecurityAttribute} or the {@link #cascadingDeleteSecurityAttributeNamespace(CascadingDeleteSecurityAttributeNamespaceRequest) cascadingDeleteSecurityAttributeNamespace} operation until this process completes.
     *
     * In order to delete security attribute, you must first retire the security attribute. Use {@link #updateSecurityAttributeNamespace(UpdateSecurityAttributeNamespaceRequest) updateSecurityAttributeNamespace}
     * to retire a security attribute.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkDeleteSecurityAttributesRequest
     * @return BulkDeleteSecurityAttributesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/BulkDeleteSecurityAttributes.ts.html |here} to see how to use BulkDeleteSecurityAttributes API.
     */
    bulkDeleteSecurityAttributes(bulkDeleteSecurityAttributesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#bulkDeleteSecurityAttributes.");
            const operationName = "bulkDeleteSecurityAttributes";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": bulkDeleteSecurityAttributesRequest.opcRequestId,
                "opc-retry-token": bulkDeleteSecurityAttributesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, bulkDeleteSecurityAttributesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributes/actions/bulkDelete",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(bulkDeleteSecurityAttributesRequest.bulkDeleteSecurityAttributesDetails, "BulkDeleteSecurityAttributesDetails", model.BulkDeleteSecurityAttributesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Edits the specified list of security attributes for the selected resources.
  * This operation triggers a process that edits the attributes on all selected resources. The possible actions are:
  * <p>
    * Add a security attribute when it does not already exist on the resource.
  *   * Update the value for a security attribute when it is present on the resource.
  *   * Add a security attribute when it does not already exist on the resource or update the value when it is present on the resource.
  *   * Remove a security attribute from a resource. The security attribute is removed from the resource regardless of the value.
  * <p>
  The edits can include a combination of operations and attributes.
  * However, multiple operations cannot apply to the same attribute in the same request.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param BulkEditSecurityAttributesRequest
       * @return BulkEditSecurityAttributesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/BulkEditSecurityAttributes.ts.html |here} to see how to use BulkEditSecurityAttributes API.
       */
    bulkEditSecurityAttributes(bulkEditSecurityAttributesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#bulkEditSecurityAttributes.");
            const operationName = "bulkEditSecurityAttributes";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": bulkEditSecurityAttributesRequest.opcRequestId,
                "opc-retry-token": bulkEditSecurityAttributesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, bulkEditSecurityAttributesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributes/actions/bulkEdit",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(bulkEditSecurityAttributesRequest.bulkEditSecurityAttributeDetails, "BulkEditSecurityAttributeDetails", model.BulkEditSecurityAttributeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified security attribute namespace. This operation triggers a process that removes all of the security attributes
  * defined in the specified security attribute namespace from all resources in your tenancy and then deletes the security attribute namespace.
  * <p>
  After you start the delete operation:
  * <p>
    * New security attribute key definitions cannot be created under the namespace.
  *   * The state of the security attribute namespace changes to DELETING.
  *   * Security attribute removal from the resources begins.
  * <p>
  This process can take up to 48 hours depending on the number of security attributes in the namespace, the number of resources
  * that are tagged, and the locations of the regions in which those resources reside.
  * <p>
  After all security attributes are removed, the state changes to DELETED. You cannot restore a deleted security attribute namespace. After the deleted security attribute namespace
  * changes its state to DELETED, you can use the name of the deleted security attribute namespace again.
  * <p>
  After you start this operation, you cannot start either the {@link #deleteSecurityAttribute(DeleteSecurityAttributeRequest) deleteSecurityAttribute} or the {@link #bulkDeleteSecurityAttributes(BulkDeleteSecurityAttributesRequest) bulkDeleteSecurityAttributes} operation until this process completes.
  * <p>
  To delete a security attribute namespace, you must first retire it. Use {@link #updateSecurityAttributeNamespace(UpdateSecurityAttributeNamespaceRequest) updateSecurityAttributeNamespace}
  * to retire a security attribute namespace.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CascadingDeleteSecurityAttributeNamespaceRequest
       * @return CascadingDeleteSecurityAttributeNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/CascadingDeleteSecurityAttributeNamespace.ts.html |here} to see how to use CascadingDeleteSecurityAttributeNamespace API.
       */
    cascadingDeleteSecurityAttributeNamespace(cascadingDeleteSecurityAttributeNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#cascadingDeleteSecurityAttributeNamespace.");
            const operationName = "cascadingDeleteSecurityAttributeNamespace";
            const apiReferenceLink = "";
            const pathParams = {
                "{securityAttributeNamespaceId}": cascadingDeleteSecurityAttributeNamespaceRequest.securityAttributeNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": cascadingDeleteSecurityAttributeNamespaceRequest.ifMatch,
                "opc-request-id": cascadingDeleteSecurityAttributeNamespaceRequest.opcRequestId,
                "opc-retry-token": cascadingDeleteSecurityAttributeNamespaceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cascadingDeleteSecurityAttributeNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}/actions/cascadeDelete",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves the specified security attribute namespace to the specified compartment within the same tenancy.
  * <p>
  To move the security attribute namespace, you must have the manage security-attributes permission on both compartments.
  * For more information about IAM policies, see [Details for IAM](https://docs.oracle.com/iaas/Content/Identity/policyreference/iampolicyreference.htm).
  * <p>
  Moving a security attribute namespace moves all the security attributes contained in the security attribute namespace.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeSecurityAttributeNamespaceCompartmentRequest
       * @return ChangeSecurityAttributeNamespaceCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ChangeSecurityAttributeNamespaceCompartment.ts.html |here} to see how to use ChangeSecurityAttributeNamespaceCompartment API.
       */
    changeSecurityAttributeNamespaceCompartment(changeSecurityAttributeNamespaceCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#changeSecurityAttributeNamespaceCompartment.");
            const operationName = "changeSecurityAttributeNamespaceCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{securityAttributeNamespaceId}": changeSecurityAttributeNamespaceCompartmentRequest.securityAttributeNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": changeSecurityAttributeNamespaceCompartmentRequest.opcRetryToken,
                "if-match": changeSecurityAttributeNamespaceCompartmentRequest.ifMatch,
                "opc-request-id": changeSecurityAttributeNamespaceCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeSecurityAttributeNamespaceCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeSecurityAttributeNamespaceCompartmentRequest.changeSecurityAttributeNamespaceCompartmentDetails, "ChangeSecurityAttributeNamespaceCompartmentDetails", model.ChangeSecurityAttributeNamespaceCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new security attribute in the specified security attribute namespace.
  * <p>
  The security attribute requires either the OCID or the name of the security attribute namespace that will contain this
  * security attribute.
  * <p>
  You must specify a *name* for the attribute, which must be unique across all attributes in the security attribute namespace
  * and cannot be changed. The only valid characters for security attribute names are:\u00A00-9, A-Z, a-z, -, _ characters.
  * Names are case insensitive. That means, for example, \"mySecurityAttribute\" and \"mysecurityattribute\" are not allowed in the same namespace.
  * If you specify a name that's already in use in the security attribute namespace, a 409 error is returned.
  * <p>
  The security attribute must have a *description*. It does not have to be unique, and you can change it with
  * {@link #updateSecurityAttribute(UpdateSecurityAttributeRequest) updateSecurityAttribute}.
  * <p>
  The security attribute must have a value type, which is specified with a validator. Security attribute can use either a
  * static value or a list of possible values. Static values are entered by a user applying the security attribute
  * to a resource. Lists are created by the user and the user must apply a value from the list. Lists
  * are validated.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateSecurityAttributeRequest
       * @return CreateSecurityAttributeResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/CreateSecurityAttribute.ts.html |here} to see how to use CreateSecurityAttribute API.
       */
    createSecurityAttribute(createSecurityAttributeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#createSecurityAttribute.");
            const operationName = "createSecurityAttribute";
            const apiReferenceLink = "";
            const pathParams = {
                "{securityAttributeNamespaceId}": createSecurityAttributeRequest.securityAttributeNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createSecurityAttributeRequest.opcRequestId,
                "opc-retry-token": createSecurityAttributeRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSecurityAttributeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSecurityAttributeRequest.createSecurityAttributeDetails, "CreateSecurityAttributeDetails", model.CreateSecurityAttributeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityAttribute",
                    bodyModel: model.SecurityAttribute,
                    type: "model.SecurityAttribute",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new security attribute namespace in the specified compartment.
  * <p>
  You must specify the compartment ID in the request object (remember that the tenancy is simply the root
  * compartment).
  * <p>
  You must also specify a *name* for the namespace, which must be unique across all namespaces in your tenancy
  * and cannot be changed. The only valid characters for security attribute names are: \u00A00-9, A-Z, a-z, -, _ characters.
  * Names are case insensitive. That means, for example, \"myNamespace\" and \"mynamespace\" are not allowed
  * in the same tenancy. Once you created a namespace, you cannot change the name.
  * If you specify a name that's already in use in the tenancy, a 409 error is returned.
  * <p>
  You must also specify a *description* for the namespace.
  * It does not have to be unique, and you can change it with
  * {@link #updateSecurityAttributeNamespace(UpdateSecurityAttributeNamespaceRequest) updateSecurityAttributeNamespace}.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateSecurityAttributeNamespaceRequest
       * @return CreateSecurityAttributeNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/CreateSecurityAttributeNamespace.ts.html |here} to see how to use CreateSecurityAttributeNamespace API.
       */
    createSecurityAttributeNamespace(createSecurityAttributeNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#createSecurityAttributeNamespace.");
            const operationName = "createSecurityAttributeNamespace";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSecurityAttributeNamespaceRequest.opcRetryToken,
                "opc-request-id": createSecurityAttributeNamespaceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSecurityAttributeNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSecurityAttributeNamespaceRequest.createSecurityAttributeNamespaceDetails, "CreateSecurityAttributeNamespaceDetails", model.CreateSecurityAttributeNamespaceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityAttributeNamespace",
                    bodyModel: model.SecurityAttributeNamespace,
                    type: "model.SecurityAttributeNamespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified security attribute. This operation triggers a process that removes the
  * security attribute from all resources in your tenancy.
  * <p>
  When you start the delete operation, the state of the security attribute changes to DELETING and security attribute removal
  * from resources begins. This can take up to 48 hours depending on the number of resources that
  * were tagged as well as the regions in which those resources reside.
  * <p>
  When all attributes have been removed, the state changes to DELETED. You cannot restore a deleted attribute. Once the deleted attribute
  * changes its state to DELETED, you can use the same security attribute name again.
  * <p>
  After you start this operation, you cannot start either the {@link #bulkDeleteSecurityAttributes(BulkDeleteSecurityAttributesRequest) bulkDeleteSecurityAttributes} or the {@link #cascadingDeleteSecurityAttributeNamespace(CascadingDeleteSecurityAttributeNamespaceRequest) cascadingDeleteSecurityAttributeNamespace} operation until this process completes.
  * <p>
  To delete a security attribute, you must first retire it. Use {@link #updateSecurityAttribute(UpdateSecurityAttributeRequest) updateSecurityAttribute}
  * to retire a security attribute.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteSecurityAttributeRequest
       * @return DeleteSecurityAttributeResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/DeleteSecurityAttribute.ts.html |here} to see how to use DeleteSecurityAttribute API.
       */
    deleteSecurityAttribute(deleteSecurityAttributeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#deleteSecurityAttribute.");
            const operationName = "deleteSecurityAttribute";
            const apiReferenceLink = "";
            const pathParams = {
                "{securityAttributeNamespaceId}": deleteSecurityAttributeRequest.securityAttributeNamespaceId,
                "{securityAttributeName}": deleteSecurityAttributeRequest.securityAttributeName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSecurityAttributeRequest.ifMatch,
                "opc-request-id": deleteSecurityAttributeRequest.opcRequestId,
                "opc-retry-token": deleteSecurityAttributeRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSecurityAttributeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes/{securityAttributeName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified security attribute namespace. Only an empty security attribute namespace can be deleted with this operation. To use this operation
     * to delete a security attribute namespace that contains security attributes, first delete all of its security attributes.
     * Use {@link #deleteSecurityAttribute(DeleteSecurityAttributeRequest) deleteSecurityAttribute} to delete a security attribute.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSecurityAttributeNamespaceRequest
     * @return DeleteSecurityAttributeNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/DeleteSecurityAttributeNamespace.ts.html |here} to see how to use DeleteSecurityAttributeNamespace API.
     */
    deleteSecurityAttributeNamespace(deleteSecurityAttributeNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#deleteSecurityAttributeNamespace.");
            const operationName = "deleteSecurityAttributeNamespace";
            const apiReferenceLink = "";
            const pathParams = {
                "{securityAttributeNamespaceId}": deleteSecurityAttributeNamespaceRequest.securityAttributeNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSecurityAttributeNamespaceRequest.ifMatch,
                "opc-request-id": deleteSecurityAttributeNamespaceRequest.opcRequestId,
                "opc-retry-token": deleteSecurityAttributeNamespaceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSecurityAttributeNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified security attribute's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityAttributeRequest
     * @return GetSecurityAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/GetSecurityAttribute.ts.html |here} to see how to use GetSecurityAttribute API.
     */
    getSecurityAttribute(getSecurityAttributeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#getSecurityAttribute.");
            const operationName = "getSecurityAttribute";
            const apiReferenceLink = "";
            const pathParams = {
                "{securityAttributeNamespaceId}": getSecurityAttributeRequest.securityAttributeNamespaceId,
                "{securityAttributeName}": getSecurityAttributeRequest.securityAttributeName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSecurityAttributeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSecurityAttributeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes/{securityAttributeName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityAttribute",
                    bodyModel: model.SecurityAttribute,
                    type: "model.SecurityAttribute",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified security attribute namespace's information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityAttributeNamespaceRequest
     * @return GetSecurityAttributeNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/GetSecurityAttributeNamespace.ts.html |here} to see how to use GetSecurityAttributeNamespace API.
     */
    getSecurityAttributeNamespace(getSecurityAttributeNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#getSecurityAttributeNamespace.");
            const operationName = "getSecurityAttributeNamespace";
            const apiReferenceLink = "";
            const pathParams = {
                "{securityAttributeNamespaceId}": getSecurityAttributeNamespaceRequest.securityAttributeNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSecurityAttributeNamespaceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSecurityAttributeNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityAttributeNamespace",
                    bodyModel: model.SecurityAttributeNamespace,
                    type: "model.SecurityAttributeNamespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details on a specified work request. The workRequestID is returned in the opc-work-request-id header
     * for any asynchronous operation in security attributes service.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecurityAttributeWorkRequestRequest
     * @return GetSecurityAttributeWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/GetSecurityAttributeWorkRequest.ts.html |here} to see how to use GetSecurityAttributeWorkRequest API.
     */
    getSecurityAttributeWorkRequest(getSecurityAttributeWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#getSecurityAttributeWorkRequest.");
            const operationName = "getSecurityAttributeWorkRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": getSecurityAttributeWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSecurityAttributeWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSecurityAttributeWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeWorkRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityAttributeWorkRequest",
                    bodyModel: model.SecurityAttributeWorkRequest,
                    type: "model.SecurityAttributeWorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the security attribute namespaces in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityAttributeNamespacesRequest
     * @return ListSecurityAttributeNamespacesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeNamespaces.ts.html |here} to see how to use ListSecurityAttributeNamespaces API.
     */
    listSecurityAttributeNamespaces(listSecurityAttributeNamespacesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#listSecurityAttributeNamespaces.");
            const operationName = "listSecurityAttributeNamespaces";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSecurityAttributeNamespacesRequest.compartmentId,
                "page": listSecurityAttributeNamespacesRequest.page,
                "limit": listSecurityAttributeNamespacesRequest.limit,
                "sortOrder": listSecurityAttributeNamespacesRequest.sortOrder,
                "sortBy": listSecurityAttributeNamespacesRequest.sortBy,
                "name": listSecurityAttributeNamespacesRequest.name,
                "compartmentIdInSubtree": listSecurityAttributeNamespacesRequest.compartmentIdInSubtree,
                "lifecycleState": listSecurityAttributeNamespacesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSecurityAttributeNamespacesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSecurityAttributeNamespacesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SecurityAttributeNamespaceSummary,
                    type: "Array<model.SecurityAttributeNamespaceSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeNamespacesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAttributeNamespaceSummary objects
     * contained in responses from the listSecurityAttributeNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeNamespaces(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAttributeNamespaces(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeNamespacesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeNamespacesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAttributeNamespaces(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAttributeNamespaceSummary objects
     * contained in responses from the listSecurityAttributeNamespaces operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeNamespacesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAttributeNamespaces(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeNamespaces operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeNamespacesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAttributeNamespaces(req));
    }
    /**
     * Gets the errors for a work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityAttributeWorkRequestErrorsRequest
     * @return ListSecurityAttributeWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeWorkRequestErrors.ts.html |here} to see how to use ListSecurityAttributeWorkRequestErrors API.
     */
    listSecurityAttributeWorkRequestErrors(listSecurityAttributeWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#listSecurityAttributeWorkRequestErrors.");
            const operationName = "listSecurityAttributeWorkRequestErrors";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": listSecurityAttributeWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listSecurityAttributeWorkRequestErrorsRequest.page,
                "limit": listSecurityAttributeWorkRequestErrorsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSecurityAttributeWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSecurityAttributeWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeWorkRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SecurityAttributeWorkRequestErrorSummary,
                    type: "Array<model.SecurityAttributeWorkRequestErrorSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestErrorSummary objects
     * contained in responses from the listSecurityAttributeWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequestErrors(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAttributeWorkRequestErrors(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequestErrorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAttributeWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestErrorSummary objects
     * contained in responses from the listSecurityAttributeWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestErrorsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAttributeWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestErrorsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAttributeWorkRequestErrors(req));
    }
    /**
     * Gets the logs for a work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityAttributeWorkRequestLogsRequest
     * @return ListSecurityAttributeWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeWorkRequestLogs.ts.html |here} to see how to use ListSecurityAttributeWorkRequestLogs API.
     */
    listSecurityAttributeWorkRequestLogs(listSecurityAttributeWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#listSecurityAttributeWorkRequestLogs.");
            const operationName = "listSecurityAttributeWorkRequestLogs";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": listSecurityAttributeWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listSecurityAttributeWorkRequestLogsRequest.page,
                "limit": listSecurityAttributeWorkRequestLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSecurityAttributeWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSecurityAttributeWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeWorkRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SecurityAttributeWorkRequestLogSummary,
                    type: "Array<model.SecurityAttributeWorkRequestLogSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestLogSummary objects
     * contained in responses from the listSecurityAttributeWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequestLogs(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAttributeWorkRequestLogs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequestLogsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAttributeWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestLogSummary objects
     * contained in responses from the listSecurityAttributeWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestLogsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAttributeWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestLogsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAttributeWorkRequestLogs(req));
    }
    /**
     * Lists the security attribute work requests in compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityAttributeWorkRequestsRequest
     * @return ListSecurityAttributeWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributeWorkRequests.ts.html |here} to see how to use ListSecurityAttributeWorkRequests API.
     */
    listSecurityAttributeWorkRequests(listSecurityAttributeWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#listSecurityAttributeWorkRequests.");
            const operationName = "listSecurityAttributeWorkRequests";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSecurityAttributeWorkRequestsRequest.compartmentId,
                "page": listSecurityAttributeWorkRequestsRequest.page,
                "limit": listSecurityAttributeWorkRequestsRequest.limit,
                "resourceIdentifier": listSecurityAttributeWorkRequestsRequest.resourceIdentifier
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSecurityAttributeWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSecurityAttributeWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeWorkRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SecurityAttributeWorkRequestSummary,
                    type: "Array<model.SecurityAttributeWorkRequestSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestSummary objects
     * contained in responses from the listSecurityAttributeWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAttributeWorkRequests(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributeWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributeWorkRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAttributeWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAttributeWorkRequestSummary objects
     * contained in responses from the listSecurityAttributeWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAttributeWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributeWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributeWorkRequestsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAttributeWorkRequests(req));
    }
    /**
     * Lists the security attributes in the specified namespace.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecurityAttributesRequest
     * @return ListSecurityAttributesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/ListSecurityAttributes.ts.html |here} to see how to use ListSecurityAttributes API.
     */
    listSecurityAttributes(listSecurityAttributesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#listSecurityAttributes.");
            const operationName = "listSecurityAttributes";
            const apiReferenceLink = "";
            const pathParams = {
                "{securityAttributeNamespaceId}": listSecurityAttributesRequest.securityAttributeNamespaceId
            };
            const queryParams = {
                "page": listSecurityAttributesRequest.page,
                "limit": listSecurityAttributesRequest.limit,
                "lifecycleState": listSecurityAttributesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSecurityAttributesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSecurityAttributesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SecurityAttributeSummary,
                    type: "Array<model.SecurityAttributeSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecurityAttributeSummary objects
     * contained in responses from the listSecurityAttributes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributes(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAttributes(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSecurityAttributesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityAttributesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAttributes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SecurityAttributeSummary objects
     * contained in responses from the listSecurityAttributes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityAttributes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityAttributes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecurityAttributesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityAttributes(req));
    }
    /**
     * Updates the specified security attribute. You can only update `description`, and `isRetired`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSecurityAttributeRequest
     * @return UpdateSecurityAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/UpdateSecurityAttribute.ts.html |here} to see how to use UpdateSecurityAttribute API.
     */
    updateSecurityAttribute(updateSecurityAttributeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#updateSecurityAttribute.");
            const operationName = "updateSecurityAttribute";
            const apiReferenceLink = "";
            const pathParams = {
                "{securityAttributeNamespaceId}": updateSecurityAttributeRequest.securityAttributeNamespaceId,
                "{securityAttributeName}": updateSecurityAttributeRequest.securityAttributeName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSecurityAttributeRequest.ifMatch,
                "opc-request-id": updateSecurityAttributeRequest.opcRequestId,
                "opc-retry-token": updateSecurityAttributeRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSecurityAttributeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes/{securityAttributeName}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSecurityAttributeRequest.updateSecurityAttributeDetails, "UpdateSecurityAttributeDetails", model.UpdateSecurityAttributeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityAttribute",
                    bodyModel: model.SecurityAttribute,
                    type: "model.SecurityAttribute",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified security attribute namespace. You can't update the namespace name.
  * <p>
  Updating `isRetired` to 'true' retires the namespace and all the security attributes in the namespace. Reactivating a
  * namespace (changing `isRetired` from 'true' to 'false') does not reactivate security attributes.
  * To reactivate the security attributes, you must reactivate each one individually *after* you reactivate the namespace,
  * using {@link #updateSecurityAttribute(UpdateSecurityAttributeRequest) updateSecurityAttribute}. For more information about retiring security attribute namespaces, see
  * [Managing Security Attribute Namespaces](https://docs.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
  * <p>
  You can't add a namespace with the same name as a retired namespace in the same tenancy.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateSecurityAttributeNamespaceRequest
       * @return UpdateSecurityAttributeNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/securityattribute/UpdateSecurityAttributeNamespace.ts.html |here} to see how to use UpdateSecurityAttributeNamespace API.
       */
    updateSecurityAttributeNamespace(updateSecurityAttributeNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SecurityAttributeClient#updateSecurityAttributeNamespace.");
            const operationName = "updateSecurityAttributeNamespace";
            const apiReferenceLink = "";
            const pathParams = {
                "{securityAttributeNamespaceId}": updateSecurityAttributeNamespaceRequest.securityAttributeNamespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSecurityAttributeNamespaceRequest.ifMatch,
                "opc-request-id": updateSecurityAttributeNamespaceRequest.opcRequestId,
                "opc-retry-token": updateSecurityAttributeNamespaceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSecurityAttributeNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityAttributeNamespaces/{securityAttributeNamespaceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSecurityAttributeNamespaceRequest.updateSecurityAttributeNamespaceDetails, "UpdateSecurityAttributeNamespaceDetails", model.UpdateSecurityAttributeNamespaceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityAttributeNamespace",
                    bodyModel: model.SecurityAttributeNamespace,
                    type: "model.SecurityAttributeNamespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.SecurityAttributeClient = SecurityAttributeClient;
SecurityAttributeClient.serviceEndpointTemplate = "https://security-attribute.{region}.oci.{secondLevelDomain}";
SecurityAttributeClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map