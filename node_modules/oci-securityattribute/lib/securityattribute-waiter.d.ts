/**
 * Security Attribute API
 * Use the Security Attributes API to manage security attributes and security attribute namespaces. For more information, see the documentation for [Security Attributes](https://docs.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attributes.htm) and [Security Attribute Namespaces](https://docs.oracle.com/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
 * OpenAPI spec version: 20240815
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { SecurityAttributeClient } from "./client";
export declare class SecurityAttributeWaiter {
    private client;
    private readonly config?;
    constructor(client: SecurityAttributeClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forSecurityAttribute till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSecurityAttributeResponse | null (null in case of 404 response)
     */
    forSecurityAttribute(request: serviceRequests.GetSecurityAttributeRequest, ...targetStates: models.SecurityAttribute.LifecycleState[]): Promise<serviceResponses.GetSecurityAttributeResponse | null>;
    /**
     * Waits forSecurityAttributeNamespace till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSecurityAttributeNamespaceResponse | null (null in case of 404 response)
     */
    forSecurityAttributeNamespace(request: serviceRequests.GetSecurityAttributeNamespaceRequest, ...targetStates: models.SecurityAttributeNamespace.LifecycleState[]): Promise<serviceResponses.GetSecurityAttributeNamespaceResponse | null>;
    /**
     * Waits forSecurityAttributeWorkRequest
     *
     * @param request the request to send
     * @return response returns GetSecurityAttributeWorkRequestResponse
     */
    forSecurityAttributeWorkRequest(request: serviceRequests.GetSecurityAttributeWorkRequestRequest): Promise<serviceResponses.GetSecurityAttributeWorkRequestResponse>;
}
