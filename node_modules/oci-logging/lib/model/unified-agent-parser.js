"use strict";
/**
 * Logging Management API
 * Use the Logging Management API to create, read, list, update, move and delete
log groups, log objects, log saved searches, and agent configurations.

For more information, see [Logging Overview](https://docs.oracle.com/iaas/Content/Logging/Concepts/loggingoverview.htm).

 * OpenAPI spec version: 20200531
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnifiedAgentParser = void 0;
const model = __importStar(require("../model"));
const common = require("oci-common");
var UnifiedAgentParser;
(function (UnifiedAgentParser) {
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "parserType" in obj && obj.parserType) {
            switch (obj.parserType) {
                case "MULTILINE_GROK":
                    return model.UnifiedAgentMultilineGrokParser.getJsonObj(jsonObj, true);
                case "JSON":
                    return model.UnifiedJSONParser.getJsonObj(jsonObj, true);
                case "GROK":
                    return model.UnifiedAgentGrokParser.getJsonObj(jsonObj, true);
                case "NONE":
                    return model.UnifiedAgentNoneParser.getJsonObj(jsonObj, true);
                case "SYSLOG":
                    return model.UnifiedAgentSyslogParser.getJsonObj(jsonObj, true);
                case "OPENMETRICS":
                    return model.UnifiedAgentOpenmetricsParser.getJsonObj(jsonObj, true);
                case "AUDITD":
                    return model.UnifiedAgentAuditdParser.getJsonObj(jsonObj, true);
                case "APACHE2":
                    return model.UnifiedAgentApache2Parser.getJsonObj(jsonObj, true);
                case "REGEXP":
                    return model.UnifiedAgentRegexParser.getJsonObj(jsonObj, true);
                case "MULTILINE":
                    return model.UnifiedAgentMultilineParser.getJsonObj(jsonObj, true);
                case "TSV":
                    return model.UnifiedAgentTsvParser.getJsonObj(jsonObj, true);
                case "CRI":
                    return model.UnifiedAgentCriParser.getJsonObj(jsonObj, true);
                case "APACHE_ERROR":
                    return model.UnifiedAgentApacheErrorParser.getJsonObj(jsonObj, true);
                case "MSGPACK":
                    return model.UnifiedAgentMsgpackParser.getJsonObj(jsonObj, true);
                case "CSV":
                    return model.UnifiedAgentCsvParser.getJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.parserType}`);
            }
        }
        return jsonObj;
    }
    UnifiedAgentParser.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if (obj && "parserType" in obj && obj.parserType) {
            switch (obj.parserType) {
                case "MULTILINE_GROK":
                    return model.UnifiedAgentMultilineGrokParser.getDeserializedJsonObj(jsonObj, true);
                case "JSON":
                    return model.UnifiedJSONParser.getDeserializedJsonObj(jsonObj, true);
                case "GROK":
                    return model.UnifiedAgentGrokParser.getDeserializedJsonObj(jsonObj, true);
                case "NONE":
                    return model.UnifiedAgentNoneParser.getDeserializedJsonObj(jsonObj, true);
                case "SYSLOG":
                    return model.UnifiedAgentSyslogParser.getDeserializedJsonObj(jsonObj, true);
                case "OPENMETRICS":
                    return model.UnifiedAgentOpenmetricsParser.getDeserializedJsonObj(jsonObj, true);
                case "AUDITD":
                    return model.UnifiedAgentAuditdParser.getDeserializedJsonObj(jsonObj, true);
                case "APACHE2":
                    return model.UnifiedAgentApache2Parser.getDeserializedJsonObj(jsonObj, true);
                case "REGEXP":
                    return model.UnifiedAgentRegexParser.getDeserializedJsonObj(jsonObj, true);
                case "MULTILINE":
                    return model.UnifiedAgentMultilineParser.getDeserializedJsonObj(jsonObj, true);
                case "TSV":
                    return model.UnifiedAgentTsvParser.getDeserializedJsonObj(jsonObj, true);
                case "CRI":
                    return model.UnifiedAgentCriParser.getDeserializedJsonObj(jsonObj, true);
                case "APACHE_ERROR":
                    return model.UnifiedAgentApacheErrorParser.getDeserializedJsonObj(jsonObj, true);
                case "MSGPACK":
                    return model.UnifiedAgentMsgpackParser.getDeserializedJsonObj(jsonObj, true);
                case "CSV":
                    return model.UnifiedAgentCsvParser.getDeserializedJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.parserType}`);
            }
        }
        return jsonObj;
    }
    UnifiedAgentParser.getDeserializedJsonObj = getDeserializedJsonObj;
})(UnifiedAgentParser = exports.UnifiedAgentParser || (exports.UnifiedAgentParser = {}));
//# sourceMappingURL=unified-agent-parser.js.map