/**
 * Logging Management API
 * Use the Logging Management API to create, read, list, update, move and delete
log groups, log objects, log saved searches, and agent configurations.

For more information, see [Logging Overview](https://docs.oracle.com/iaas/Content/Logging/Concepts/loggingoverview.htm).

 * OpenAPI spec version: 20200531
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * Source parser object.
 */
export interface UnifiedAgentParser {
    /**
     * Specifies the time field for the event time. If the event doesn't have this field, the current time is used.
     */
    "fieldTimeKey"?: string;
    /**
      * Specify types for converting a field into another type.
  * For example,
  *   With this configuration:
  *       <parse>
  *         @type csv
  *         keys time,host,req_id,user
  *         time_key time
  *       </parse>
  * <p>
    This incoming event:
  *     \"2013/02/28 12:00:00,192.168.0.1,111,-\"
  * <p>
    is parsed as:
  *     1362020400 (2013/02/28/ 12:00:00)
  * <p>
      record:
  *     {
  *       \"host\"   : \"192.168.0.1\",
  *       \"req_id\" : \"111\",
  *       \"user\"   : \"-\"
  *     }
  *
      */
    "types"?: {
        [key: string]: string;
    };
    /**
     * Specify the null value pattern.
     */
    "nullValuePattern"?: string;
    /**
     * If true, an empty string field is replaced with a null value.
     */
    "isNullEmptyString"?: boolean;
    /**
     * If true, use Fluent::EventTime.now(current time) as a timestamp when the time_key is specified.
     */
    "isEstimateCurrentEvent"?: boolean;
    /**
     * If true, keep the time field in the record.
     */
    "isKeepTimeKey"?: boolean;
    /**
     * Specify the timeout for parse processing. This is mainly for detecting an incorrect regexp pattern. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "timeoutInMilliseconds"?: number;
    "parserType": string;
}
export declare namespace UnifiedAgentParser {
    function getJsonObj(obj: UnifiedAgentParser): object;
    function getDeserializedJsonObj(obj: UnifiedAgentParser): object;
}
