/**
 *
 *
 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
import common = require("oci-common");
/**
 * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasemanagement/GetDatabaseFleetHealthMetrics.ts.html |here} to see how to use GetDatabaseFleetHealthMetricsRequest.
 */
export interface GetDatabaseFleetHealthMetricsRequest extends common.BaseRequest {
    /**
     * The baseline time for metrics comparison.
     */
    "compareBaselineTime": string;
    /**
     * The target time for metrics comparison.
     */
    "compareTargetTime": string;
    /**
     * The client request ID for tracing.
     */
    "opcRequestId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database Group.
     */
    "managedDatabaseGroupId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
     */
    "compartmentId"?: string;
    /**
     * The time window used for metrics comparison.
     */
    "compareType"?: model.CompareType;
    /**
     * The filter used to retrieve a specific set of metrics by passing the desired metric names with a comma separator. Note that, by default, the service returns all supported metrics.
     */
    "filterByMetricNames"?: string;
    /**
     * The filter used to filter the databases in the fleet by a specific Oracle Database type.
     */
    "filterByDatabaseType"?: string;
    /**
     * The filter used to filter the databases in the fleet by a specific Oracle Database subtype.
     */
    "filterByDatabaseSubType"?: string;
    /**
     * The page token representing the page from where the next set of paginated results
     * are retrieved. This is usually retrieved from a previous list call.
     *
     */
    "page"?: string;
    /**
     * The maximum number of records returned in the paginated response.
     */
    "limit"?: number;
    /**
     * The field to sort information by. Only one sortOrder can be used. The default sort order
     * for \u2018TIMECREATED\u2019 is descending and the default sort order for \u2018NAME\u2019 is ascending.
     * The \u2018NAME\u2019 sort order is case-sensitive.
     *
     */
    "sortBy"?: GetDatabaseFleetHealthMetricsRequest.SortBy;
    /**
     * The option to sort information in ascending (\u2018ASC\u2019) or descending (\u2018DESC\u2019) order. Ascending order is the default order.
     */
    "sortOrder"?: model.SortOrders;
    /**
     * The filter used to filter the databases in the fleet by a specific Oracle Database deployment type.
     */
    "filterByDatabaseDeploymentType"?: string;
    /**
     * The filter used to filter the databases in the fleet by a specific Oracle Database version.
     */
    "filterByDatabaseVersion"?: string;
    /**
     * A list of tag filters to apply.  Only resources with a defined tag matching the value will be returned.
     * Each item in the list has the format \"{namespace}.{tagName}.{value}\".  All inputs are case-insensitive.
     * Multiple values for the same key (i.e. same namespace and tag name) are interpreted as \"OR\".
     * Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as \"AND\".
     *
     */
    "definedTagEquals"?: Array<string>;
    /**
     * A list of tag filters to apply.  Only resources with a freeform tag matching the value will be returned.
     * The key for each tag is \"{tagName}.{value}\".  All inputs are case-insensitive.
     * Multiple values for the same tag name are interpreted as \"OR\".  Values for different tag names are interpreted as \"AND\".
     *
     */
    "freeformTagEquals"?: Array<string>;
    /**
     * A list of tag existence filters to apply.  Only resources for which the specified defined tags exist will be returned.
     * Each item in the list has the format \"{namespace}.{tagName}.true\" (for checking existence of a defined tag)
     * or \"{namespace}.true\".  All inputs are case-insensitive.
     * Currently, only existence (\"true\" at the end) is supported. Absence (\"false\" at the end) is not supported.
     * Multiple values for the same key (i.e. same namespace and tag name) are interpreted as \"OR\".
     * Values for different keys (i.e. different namespaces, different tag names, or both) are interpreted as \"AND\".
     *
     */
    "definedTagExists"?: Array<string>;
    /**
     * A list of tag existence filters to apply.  Only resources for which the specified freeform tags exist the value will be returned.
     * The key for each tag is \"{tagName}.true\".  All inputs are case-insensitive.
     * Currently, only existence (\"true\" at the end) is supported. Absence (\"false\" at the end) is not supported.
     * Multiple values for different tag names are interpreted as \"AND\".
     *
     */
    "freeformTagExists"?: Array<string>;
}
export declare namespace GetDatabaseFleetHealthMetricsRequest {
    enum SortBy {
        Timecreated = "TIMECREATED",
        Name = "NAME"
    }
}
