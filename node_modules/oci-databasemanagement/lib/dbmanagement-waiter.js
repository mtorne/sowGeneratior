"use strict";
/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbManagementWaiter = void 0;
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
class DbManagementWaiter {
    constructor(client, config) {
        this.client = client;
        this.config = config;
    }
    /**
     * Waits forDbManagementPrivateEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbManagementPrivateEndpointResponse | null (null in case of 404 response)
     */
    forDbManagementPrivateEndpoint(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDbManagementPrivateEndpoint(request), response => targetStates.includes(response.dbManagementPrivateEndpoint.lifecycleState), targetStates.includes(models.LifecycleStates.Deleted));
        });
    }
    /**
     * Waits forExternalAsm till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalAsmResponse | null (null in case of 404 response)
     */
    forExternalAsm(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalAsm(request), response => targetStates.includes(response.externalAsm.lifecycleState), targetStates.includes(models.ExternalAsm.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forExternalAsmInstance till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalAsmInstanceResponse | null (null in case of 404 response)
     */
    forExternalAsmInstance(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalAsmInstance(request), response => targetStates.includes(response.externalAsmInstance.lifecycleState), targetStates.includes(models.ExternalAsmInstance.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forExternalCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalClusterResponse | null (null in case of 404 response)
     */
    forExternalCluster(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalCluster(request), response => targetStates.includes(response.externalCluster.lifecycleState), targetStates.includes(models.ExternalCluster.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forExternalClusterInstance till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalClusterInstanceResponse | null (null in case of 404 response)
     */
    forExternalClusterInstance(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalClusterInstance(request), response => targetStates.includes(response.externalClusterInstance.lifecycleState), targetStates.includes(models.ExternalClusterInstance.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forExternalDbHome till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDbHomeResponse | null (null in case of 404 response)
     */
    forExternalDbHome(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalDbHome(request), response => targetStates.includes(response.externalDbHome.lifecycleState), targetStates.includes(models.ExternalDbHome.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forExternalDbNode till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDbNodeResponse | null (null in case of 404 response)
     */
    forExternalDbNode(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalDbNode(request), response => targetStates.includes(response.externalDbNode.lifecycleState), targetStates.includes(models.ExternalDbNode.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forExternalDbSystem till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDbSystemResponse | null (null in case of 404 response)
     */
    forExternalDbSystem(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalDbSystem(request), response => targetStates.includes(response.externalDbSystem.lifecycleState), targetStates.includes(models.ExternalDbSystem.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forExternalDbSystemConnector till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDbSystemConnectorResponse | null (null in case of 404 response)
     */
    forExternalDbSystemConnector(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalDbSystemConnector(request), response => targetStates.includes(response.externalDbSystemConnector.lifecycleState), targetStates.includes(models.ExternalDbSystemConnector.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forExternalDbSystemDiscovery till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDbSystemDiscoveryResponse | null (null in case of 404 response)
     */
    forExternalDbSystemDiscovery(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalDbSystemDiscovery(request), response => targetStates.includes(response.externalDbSystemDiscovery.lifecycleState), targetStates.includes(models.ExternalDbSystemDiscovery.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forExternalListener till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalListenerResponse | null (null in case of 404 response)
     */
    forExternalListener(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalListener(request), response => targetStates.includes(response.externalListener.lifecycleState), targetStates.includes(models.ExternalListener.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forExternalMySqlDatabaseConnector till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalMySqlDatabaseConnectorResponse | null (null in case of 404 response)
     */
    forExternalMySqlDatabaseConnector(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalMySqlDatabaseConnector(request), response => targetStates.includes(response.externalMySqlDatabaseConnector.lifecycleState), targetStates.includes(models.LifecycleStates.Deleted));
        });
    }
    /**
     * Waits forJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobResponse
     */
    forJob(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getJob(request), response => targetStates.includes(response.job.lifecycleState));
        });
    }
    /**
     * Waits forManagedDatabaseGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetManagedDatabaseGroupResponse | null (null in case of 404 response)
     */
    forManagedDatabaseGroup(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getManagedDatabaseGroup(request), response => targetStates.includes(response.managedDatabaseGroup.lifecycleState), targetStates.includes(models.LifecycleStates.Deleted));
        });
    }
    /**
     * Waits forNamedCredential till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNamedCredentialResponse | null (null in case of 404 response)
     */
    forNamedCredential(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getNamedCredential(request), response => targetStates.includes(response.namedCredential.lifecycleState), targetStates.includes(models.LifecycleStates.Deleted));
        });
    }
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getWorkRequest(request), response => (response.workRequest.timeFinished ? true : false));
        });
    }
}
exports.DbManagementWaiter = DbManagementWaiter;
//# sourceMappingURL=dbmanagement-waiter.js.map