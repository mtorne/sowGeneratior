/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DbManagementClient } from "./client";
export declare class DbManagementWaiter {
    private client;
    private readonly config?;
    constructor(client: DbManagementClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forDbManagementPrivateEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbManagementPrivateEndpointResponse | null (null in case of 404 response)
     */
    forDbManagementPrivateEndpoint(request: serviceRequests.GetDbManagementPrivateEndpointRequest, ...targetStates: models.LifecycleStates[]): Promise<serviceResponses.GetDbManagementPrivateEndpointResponse | null>;
    /**
     * Waits forExternalAsm till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalAsmResponse | null (null in case of 404 response)
     */
    forExternalAsm(request: serviceRequests.GetExternalAsmRequest, ...targetStates: models.ExternalAsm.LifecycleState[]): Promise<serviceResponses.GetExternalAsmResponse | null>;
    /**
     * Waits forExternalAsmInstance till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalAsmInstanceResponse | null (null in case of 404 response)
     */
    forExternalAsmInstance(request: serviceRequests.GetExternalAsmInstanceRequest, ...targetStates: models.ExternalAsmInstance.LifecycleState[]): Promise<serviceResponses.GetExternalAsmInstanceResponse | null>;
    /**
     * Waits forExternalCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalClusterResponse | null (null in case of 404 response)
     */
    forExternalCluster(request: serviceRequests.GetExternalClusterRequest, ...targetStates: models.ExternalCluster.LifecycleState[]): Promise<serviceResponses.GetExternalClusterResponse | null>;
    /**
     * Waits forExternalClusterInstance till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalClusterInstanceResponse | null (null in case of 404 response)
     */
    forExternalClusterInstance(request: serviceRequests.GetExternalClusterInstanceRequest, ...targetStates: models.ExternalClusterInstance.LifecycleState[]): Promise<serviceResponses.GetExternalClusterInstanceResponse | null>;
    /**
     * Waits forExternalDbHome till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDbHomeResponse | null (null in case of 404 response)
     */
    forExternalDbHome(request: serviceRequests.GetExternalDbHomeRequest, ...targetStates: models.ExternalDbHome.LifecycleState[]): Promise<serviceResponses.GetExternalDbHomeResponse | null>;
    /**
     * Waits forExternalDbNode till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDbNodeResponse | null (null in case of 404 response)
     */
    forExternalDbNode(request: serviceRequests.GetExternalDbNodeRequest, ...targetStates: models.ExternalDbNode.LifecycleState[]): Promise<serviceResponses.GetExternalDbNodeResponse | null>;
    /**
     * Waits forExternalDbSystem till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDbSystemResponse | null (null in case of 404 response)
     */
    forExternalDbSystem(request: serviceRequests.GetExternalDbSystemRequest, ...targetStates: models.ExternalDbSystem.LifecycleState[]): Promise<serviceResponses.GetExternalDbSystemResponse | null>;
    /**
     * Waits forExternalDbSystemConnector till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDbSystemConnectorResponse | null (null in case of 404 response)
     */
    forExternalDbSystemConnector(request: serviceRequests.GetExternalDbSystemConnectorRequest, ...targetStates: models.ExternalDbSystemConnector.LifecycleState[]): Promise<serviceResponses.GetExternalDbSystemConnectorResponse | null>;
    /**
     * Waits forExternalDbSystemDiscovery till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDbSystemDiscoveryResponse | null (null in case of 404 response)
     */
    forExternalDbSystemDiscovery(request: serviceRequests.GetExternalDbSystemDiscoveryRequest, ...targetStates: models.ExternalDbSystemDiscovery.LifecycleState[]): Promise<serviceResponses.GetExternalDbSystemDiscoveryResponse | null>;
    /**
     * Waits forExternalListener till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalListenerResponse | null (null in case of 404 response)
     */
    forExternalListener(request: serviceRequests.GetExternalListenerRequest, ...targetStates: models.ExternalListener.LifecycleState[]): Promise<serviceResponses.GetExternalListenerResponse | null>;
    /**
     * Waits forExternalMySqlDatabaseConnector till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalMySqlDatabaseConnectorResponse | null (null in case of 404 response)
     */
    forExternalMySqlDatabaseConnector(request: serviceRequests.GetExternalMySqlDatabaseConnectorRequest, ...targetStates: models.LifecycleStates[]): Promise<serviceResponses.GetExternalMySqlDatabaseConnectorResponse | null>;
    /**
     * Waits forJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobResponse
     */
    forJob(request: serviceRequests.GetJobRequest, ...targetStates: models.Job.LifecycleState[]): Promise<serviceResponses.GetJobResponse>;
    /**
     * Waits forManagedDatabaseGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetManagedDatabaseGroupResponse | null (null in case of 404 response)
     */
    forManagedDatabaseGroup(request: serviceRequests.GetManagedDatabaseGroupRequest, ...targetStates: models.LifecycleStates[]): Promise<serviceResponses.GetManagedDatabaseGroupResponse | null>;
    /**
     * Waits forNamedCredential till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNamedCredentialResponse | null (null in case of 404 response)
     */
    forNamedCredential(request: serviceRequests.GetNamedCredentialRequest, ...targetStates: models.LifecycleStates[]): Promise<serviceResponses.GetNamedCredentialResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
