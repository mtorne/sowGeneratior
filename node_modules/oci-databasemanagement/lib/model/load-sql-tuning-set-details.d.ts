/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The details required to load the Sql statements into the Sql tuning set.
 * It takes either credentialDetails or databaseCredential. It's recommended to provide databaseCredential
 *
 */
export interface LoadSqlTuningSetDetails {
    "credentialDetails"?: model.SqlTuningSetAdminPasswordCredentialDetails | model.SqlTuningSetAdminSecretCredentialDetails;
    "databaseCredential"?: model.DatabaseSecretCredentialDetails | model.DatabaseNamedCredentialDetails | model.DatabasePasswordCredentialDetails;
    /**
     * Flag to indicate whether to create the Sql tuning set or just display the plsql used to create Sql tuning set.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "showSqlOnly"?: number;
    /**
     * The owner of the Sql tuning set.
     */
    "owner"?: string;
    /**
     * The name of the Sql tuning set.
     */
    "name": string;
    /**
     * Specifies the loading method into the Sql tuning set.
     */
    "loadType": LoadSqlTuningSetDetails.LoadType;
    /**
     * Specifies the Sql predicate to filter the Sql from the Sql tuning set defined on attributes of the SQLSET_ROW.
     * User could use any combination of the following columns with appropriate values as Sql predicate
     * Refer to the documentation https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_SQLTUNE.html#GUID-1F4AFB03-7B29-46FC-B3F2-CB01EC36326C
     *
     */
    "basicFilter"?: string;
    /**
     * Specifies that the filter must include recursive Sql in the Sql tuning set.
     */
    "recursiveSql"?: LoadSqlTuningSetDetails.RecursiveSql;
    /**
     * Specifies a filter that picks the top n% according to the supplied ranking measure.
     * Note that this parameter applies only if one ranking measure is supplied.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "resultPercentage"?: number;
    /**
     * The top limit Sql from the filtered source, ranked by the ranking measure. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "resultLimit"?: number;
    /**
     * Specifies an ORDER BY clause on the selected Sql. User can specify upto three ranking measures.
     *
     */
    "rankingMeasure1"?: model.RankingMeasure;
    /**
     * Specifies an ORDER BY clause on the selected Sql. User can specify upto three ranking measures.
     *
     */
    "rankingMeasure2"?: model.RankingMeasure;
    /**
     * Specifies an ORDER BY clause on the selected Sql. User can specify upto three ranking measures.
     *
     */
    "rankingMeasure3"?: model.RankingMeasure;
    /**
     * Defines the total amount of time, in seconds, to execute. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "totalTimeLimit"?: number;
    /**
     * Defines the amount of time, in seconds, to pause between sampling. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "repeatInterval"?: number;
    /**
     * Specifies whether to insert new statements, update existing statements, or both.
     */
    "captureOption"?: LoadSqlTuningSetDetails.CaptureOption;
    /**
     * Specifies the capture mode. Note that this parameter is applicable only for UPDATE and MERGE capture options.
     * Capture mode can take one of the following values
     *  - MODE_REPLACE_OLD_STATS
     *      Replaces statistics when the number of executions is greater than the number stored in the Sql tuning set
     *  - MODE_ACCUMULATE_STATS
     *      Adds new values to current values for Sql that is already stored.
     *      Note that this mode detects if a statement has been aged out, so the final value for a statistics is the sum of the statistics of all cursors that statement existed under.
     *
     */
    "captureMode"?: LoadSqlTuningSetDetails.CaptureMode;
    /**
     * Specifies the list of Sql statement attributes to return in the result.
     * Note that this parameter cannot be made an enum since custom value can take a list of comma separated attribute names.
     * Attribute list can take one of the following values.
     *  TYPICAL - Specifies BASIC plus Sql plan (without row source statistics) and without object reference list (default).
     *  BASIC - Specifies all attributes (such as execution statistics and binds) except the plans. The execution context is always part of the result.
     *  ALL - Specifies all attributes.
     *  CUSTOM - Comma-separated list of the following attribute names.
     *           - EXECUTION_STATISTICS
     *           - BIND_LIST
     *           - OBJECT_LIST
     *           - SQL_PLAN
     *           - SQL_PLAN_STATISTICS
     * Usage examples:
     *   1. \"attributeList\": \"TYPICAL\"
     *   2. \"attributeList\": \"ALL\"
     *   3. \"attributeList\": \"EXECUTION_STATISTICS,OBJECT_LIST,SQL_PLAN\"
     *
     */
    "attributeList"?: string;
    /**
     * Specifies which statements are loaded into the Sql tuning set.
     * The possible values are.
     *  - INSERT (default)
     *       Adds only new statements.
     *  - UPDATE
     *       Updates existing the Sql statements and ignores any new statements.
     *  - MERGE
     *       Inserts new statements and updates the information of the existing ones.
     *
     */
    "loadOption"?: LoadSqlTuningSetDetails.LoadOption;
    /**
     * Specifies how existing Sql statements are updated.
     * This parameter is applicable only if load_option is specified with UPDATE or MERGE as an option.
     * Update option can take one of the following values.
     *    REPLACE (default) - Updates the statement using the new statistics, bind list, object list, and so on.
     *    ACCUMULATE - Combines attributes when possible (for example, statistics such as elapsed_time), otherwise replaces the existing values (for example, module and action) with the provided values.
     *    Following Sql statement attributes can be accumulated.
     *        elapsed_time
     *        buffer_gets
     *        direct_writes
     *        disk_reads
     *        row_processed
     *        fetches
     *        executions
     *        end_of_fetch_count
     *        stat_period
     *        active_stat_period
     *
     */
    "updateOption"?: LoadSqlTuningSetDetails.UpdateOption;
    /**
     * Specifies the list of Sql statement attributes to update during a merge or update.
     * Note that this parameter cannot be made an enum since custom value can take a list of comma separated attribute names.
     * Update attributes can take one of the following values.
     *    NULL (default) - Specifies the content of the input cursor except the execution context. On other terms, it is equivalent to ALL without execution contexts such as module and action.
     *    BASIC - Specifies statistics and binds only.
     *    TYPICAL - Specifies BASIC with Sql plans (without row source statistics) and without an object reference list.
     *    ALL - Specifies all attributes, including the execution context attributes such as module and action.
     *    CUSTOM - List of comma separated attribute names to update
     *        EXECUTION_CONTEXT
     *        EXECUTION_STATISTICS
     *        SQL_BINDS
     *        SQL_PLAN
     *        SQL_PLAN_STATISTICS (similar to SQL_PLAN with added row source statistics)
     * Usage examples:
     *   1. \"updateAttributes\": \"TYPICAL\"
     *   2. \"updateAttributes\": \"BASIC\"
     *   3. \"updateAttributes\": \"EXECUTION_STATISTICS,SQL_PLAN_STATISTICS,SQL_PLAN\"
     *   4. \"updateAttributes\": \"EXECUTION_STATISTICS,SQL_PLAN\"
     *
     */
    "updateAttributes"?: string;
    /**
     * Specifies when to perform the update.
     * The procedure only performs the update when the specified condition is satisfied.
     * The condition can refer to either the data source or destination.
     * The condition must use the following prefixes to refer to attributes from the source or the destination:
     * OLD  \u2014 Refers to statement attributes from the SQL tuning set (destination).
     * NEW  \u2014 Refers to statement attributes from the input statements (source).
     * NULL \u2014 No updates are performed.
     *
     */
    "updateCondition"?: LoadSqlTuningSetDetails.UpdateCondition;
    /**
     * Specifies whether to update attributes when the new value is NULL.
     * If TRUE, then the procedure does not update an attribute when the new value is NULL.
     * That is, do not override with NULL values unless intentional.
     * Possible values - true or false
     *
     */
    "isIgnoreNull"?: boolean;
    /**
     * Specifies whether to commit statements after DML.
     * If a value is provided, then the load commits after each specified number of statements is inserted.
     * If NULL is provided, then the load commits only once, at the end of the operation.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "commitRows"?: number;
    /**
     * Defines the beginning AWR snapshot (non-inclusive). Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "beginSnapshot"?: number;
    /**
     * Defines the ending AWR snapshot (inclusive). Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "endSnapshot"?: number;
    /**
     * Specifies the name of the AWR baseline period.
     * When loading the sql statements from AWR, following inputs has to be provided:
     * beginSnapshot and endSnapshot
     * OR
     * baselineName
     *
     */
    "baselineName"?: string;
}
export declare namespace LoadSqlTuningSetDetails {
    enum LoadType {
        IncrementalCursorCache = "INCREMENTAL_CURSOR_CACHE",
        CurrentCursorCache = "CURRENT_CURSOR_CACHE",
        Awr = "AWR"
    }
    enum RecursiveSql {
        HasRecursiveSql = "HAS_RECURSIVE_SQL",
        NoRecursiveSql = "NO_RECURSIVE_SQL"
    }
    enum CaptureOption {
        Insert = "INSERT",
        Update = "UPDATE",
        Merge = "MERGE"
    }
    enum CaptureMode {
        ModeReplaceOldStats = "MODE_REPLACE_OLD_STATS",
        ModeAccumulateStats = "MODE_ACCUMULATE_STATS"
    }
    enum LoadOption {
        Insert = "INSERT",
        Update = "UPDATE",
        Merge = "MERGE"
    }
    enum UpdateOption {
        Replace = "REPLACE",
        Accumulate = "ACCUMULATE"
    }
    enum UpdateCondition {
        Old = "OLD",
        New = "NEW",
        Null = "NULL"
    }
    function getJsonObj(obj: LoadSqlTuningSetDetails): object;
    function getDeserializedJsonObj(obj: LoadSqlTuningSetDetails): object;
}
