"use strict";
/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveSqlTuningSetAsDetails = void 0;
const model = __importStar(require("../model"));
var SaveSqlTuningSetAsDetails;
(function (SaveSqlTuningSetAsDetails) {
    let PlanFilter;
    (function (PlanFilter) {
        PlanFilter["LastGenerated"] = "LAST_GENERATED";
        PlanFilter["FirstGenerated"] = "FIRST_GENERATED";
        PlanFilter["LastLoaded"] = "LAST_LOADED";
        PlanFilter["FirstLoaded"] = "FIRST_LOADED";
        PlanFilter["MaxElapsedTime"] = "MAX_ELAPSED_TIME";
        PlanFilter["MaxBufferGets"] = "MAX_BUFFER_GETS";
        PlanFilter["MaxDiskReads"] = "MAX_DISK_READS";
        PlanFilter["MaxDirectWrites"] = "MAX_DIRECT_WRITES";
        PlanFilter["MaxOptimizerCost"] = "MAX_OPTIMIZER_COST";
    })(PlanFilter = SaveSqlTuningSetAsDetails.PlanFilter || (SaveSqlTuningSetAsDetails.PlanFilter = {}));
    let RecursiveSql;
    (function (RecursiveSql) {
        RecursiveSql["HasRecursiveSql"] = "HAS_RECURSIVE_SQL";
        RecursiveSql["NoRecursiveSql"] = "NO_RECURSIVE_SQL";
    })(RecursiveSql = SaveSqlTuningSetAsDetails.RecursiveSql || (SaveSqlTuningSetAsDetails.RecursiveSql = {}));
    let LoadOption;
    (function (LoadOption) {
        LoadOption["Insert"] = "INSERT";
        LoadOption["Update"] = "UPDATE";
        LoadOption["Merge"] = "MERGE";
    })(LoadOption = SaveSqlTuningSetAsDetails.LoadOption || (SaveSqlTuningSetAsDetails.LoadOption = {}));
    let UpdateOption;
    (function (UpdateOption) {
        UpdateOption["Replace"] = "REPLACE";
        UpdateOption["Accumulate"] = "ACCUMULATE";
    })(UpdateOption = SaveSqlTuningSetAsDetails.UpdateOption || (SaveSqlTuningSetAsDetails.UpdateOption = {}));
    let UpdateCondition;
    (function (UpdateCondition) {
        UpdateCondition["Old"] = "OLD";
        UpdateCondition["New"] = "NEW";
        UpdateCondition["Null"] = "NULL";
    })(UpdateCondition = SaveSqlTuningSetAsDetails.UpdateCondition || (SaveSqlTuningSetAsDetails.UpdateCondition = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "credentialDetails": obj.credentialDetails
                ? model.SqlTuningSetAdminCredentialDetails.getJsonObj(obj.credentialDetails)
                : undefined,
            "databaseCredential": obj.databaseCredential
                ? model.DatabaseCredentialDetails.getJsonObj(obj.databaseCredential)
                : undefined
        });
        return jsonObj;
    }
    SaveSqlTuningSetAsDetails.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "credentialDetails": obj.credentialDetails
                ? model.SqlTuningSetAdminCredentialDetails.getDeserializedJsonObj(obj.credentialDetails)
                : undefined,
            "databaseCredential": obj.databaseCredential
                ? model.DatabaseCredentialDetails.getDeserializedJsonObj(obj.databaseCredential)
                : undefined
        });
        return jsonObj;
    }
    SaveSqlTuningSetAsDetails.getDeserializedJsonObj = getDeserializedJsonObj;
})(SaveSqlTuningSetAsDetails = exports.SaveSqlTuningSetAsDetails || (exports.SaveSqlTuningSetAsDetails = {}));
//# sourceMappingURL=save-sql-tuning-set-as-details.js.map