/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Manages resource allocation among databases. Besides the name, at least one other property must be available.
 *
 */
export interface DatabasePlanDirective {
    /**
     * The name of a database or a profile.
     */
    "name": string;
    /**
     * The relative priority of a database in the database plan. A higher share value implies
     * higher priority and more access to the I/O resources.
     * Use either share or (level, allocation). All plan directives in a database plan
     * should use the same setting.
     * Share-based resource allocation is the recommended method for a database plan.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "share"?: number;
    /**
     * The allocation level. Valid values are from 1 to 8. Resources are allocated to level 1 first,
     * and then remaining resources are allocated to level 2, and so on.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "level"?: number;
    /**
     * The resource allocation as a percentage (0-100) within the level.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "allocation"?: number;
    /**
     * The maximum I/O utilization limit as a percentage of the available resources. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "limit"?: number;
    /**
     * Controls use of Exadata Smart Flash Cache by a database.
     * This ensures that cache space is reserved for mission-critical databases.
     * flashcache=off is invalid in a directive that contains the flashcachemin, flashcachelimit, or flashcachesize attributes.
     *
     */
    "isFlashCacheOn"?: boolean;
    /**
     * Controls use of the persistent memory (PMEM) cache by a database. This ensures that cache space
     * is reserved for mission-critical databases.
     * pmemcache=off is invalid in a directive that contains the pmemcachemin, pmemcachelimit, or pmemcachesize attributes.
     *
     */
    "isPmemCacheOn"?: boolean;
    /**
     * Controls use of Exadata Smart Flash Log by a database.
     * This ensures that Exadata Smart Flash Log is reserved for mission-critical databases.
     *
     */
    "isFlashLogOn"?: boolean;
    /**
     * Controls use of persistent memory logging (PMEM log) by a database.
     * This ensures that PMEM log is reserved for mission-critical databases.
     *
     */
    "isPmemLogOn"?: boolean;
    /**
     * Defines a soft limit for space usage in Exadata Smart Flash Cache.
     * If the cache is not full, the limit can be exceeded.
     * You specify the value for flashcachelimit in bytes. You can also use the suffixes M (megabytes),
     * G (gigabytes), or T (terabytes) to specify larger values. For example, 300M, 150G, or 1T.
     * The value for flashcachelimit must be at least 4 MB.
     * The flashcachelimit and flashcachesize attributes cannot be specified in the same directive.
     * The value for flashcachelimit cannot be smaller than flashcachemin, if it is specified.
     *
     */
    "flashCacheLimit"?: string;
    /**
     * Specifies a minimum guaranteed space allocation in Exadata Smart Flash Cache.
     * You specify the value for flashcachemin in bytes. You can also use the suffixes
     * M (megabytes), G (gigabytes), or T (terabytes) to specify larger values. For example, 300M, 150G, or 1T.
     * The value for flashcachemin must be at least 4 MB.
     * In any plan, the sum of all flashcachemin values cannot exceed the size of Exadata Smart Flash Cache.
     * If flashcachelimit is specified, then the value for flashcachemin cannot exceed flashcachelimit.
     * If flashcachesize is specified, then the value for flashcachemin cannot exceed flashcachesize.
     *
     */
    "flashCacheMin"?: string;
    /**
     * Defines a hard limit for space usage in Exadata Smart Flash Cache.
     * The limit cannot be exceeded, even if the cache is not full.
     * In an IORM plan, if the size of Exadata Smart Flash Cache can accommodate all of the flashcachemin
     * and flashcachesize allocations, then each flashcachesize definition represents a guaranteed space allocation.
     * However, starting with Oracle Exadata System Software release 19.2.0 you can use the flashcachesize
     * attribute to over-provision space in Exadata Smart Flash Cache. Consequently,
     * if the size of Exadata Smart Flash Cache cannot accommodate all of the flashcachemin and flashcachesize
     * allocations, then only flashcachemin is guaranteed.
     *
     */
    "flashCacheSize"?: string;
    /**
     * Defines a soft limit for space usage in the persistent memory (PMEM) cache.
     * If the cache is not full, the limit can be exceeded.
     * You specify the value for pmemcachelimit in bytes. You can also use the suffixes M (megabytes),
     * G (gigabytes), or T (terabytes) to specify larger values. For example, 300M, 150G, or 1T.
     * The value for pmemcachelimit must be at least 4 MB.
     * The pmemcachelimit and pmemcachesize attributes cannot be specified in the same directive.
     * The value for pmemcachelimit cannot be smaller than pmemcachemin, if it is specified.
     *
     */
    "pmemCacheLimit"?: string;
    /**
     * Specifies a minimum guaranteed space allocation in the persistent memory (PMEM) cache.
     *
     */
    "pmemCacheMin"?: string;
    /**
     * Defines a hard limit for space usage in the persistent memory (PMEM) cache.
     * The limit cannot be exceeded, even if the cache is not full.
     * In an IORM plan, if the size of the PMEM cache can accommodate all of the pmemcachemin and
     * pmemcachesize allocations, then each pmemcachesize definition represents a guaranteed space allocation.
     * However, you can use the pmemcachesize attribute to over-provision space in the PMEM cache.
     * Consequently, if the PMEM cache size cannot accommodate all of the pmemcachemin and pmemcachesize
     * allocations, then only pmemcachemin is guaranteed.
     *
     */
    "pmemCacheSize"?: string;
    /**
     * Starting with Oracle Exadata System Software release 19.1.0, you can use the asmcluster attribute to
     * distinguish between databases with the same name running in different Oracle ASM clusters.
     *
     */
    "asmCluster"?: string;
    /**
      * Enables you to create a profile or template, to ease management and configuration of resource plans
  * in environments with many databases.
  * <p>
  - type=database: Specifies a directive that applies to a specific database.
  * If type in not specified, then the directive defaults to the database type.
  * - type=profile: Specifies a directive that applies to a profile rather than a specific database.
  * <p>
    To associate a database with an IORM profile, you must set the database initialization
  *   parameter db_performance_profile to the value of the profile name. Databases that map to a profile inherit the settings specified in the profile.
  *
      */
    "type"?: model.DatabasePlanTypeEnum;
    /**
     * Enables you to specify different plan directives based on the Oracle Data Guard database role.
     *
     */
    "role"?: model.DatabasePlanRoleEnum;
}
export declare namespace DatabasePlanDirective {
    function getJsonObj(obj: DatabasePlanDirective): object;
    function getDeserializedJsonObj(obj: DatabasePlanDirective): object;
}
