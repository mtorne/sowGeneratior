/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * A step in the SQL execution plan.
 */
export interface SqlTuningTaskSqlExecutionPlanStep {
    /**
     * The numerical representation of the SQL execution plan. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "planHashValue"?: number;
    /**
     * The identification number of a step in the SQL execution plan. This is unique within the SQL execution plan.
     * This is not the [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "stepId"?: number;
    /**
     * The ID of the next step that operates on the results of this step.
     * This is not the [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "parentStepId"?: number;
    /**
     * The order of processing for steps with the same parent ID. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "position"?: number;
    /**
     * The name of the operation performed at this step.
     */
    "operation"?: string;
    /**
     * The options used for the operation performed at this step.
     */
    "options"?: string;
    /**
     * The current mode of the optimizer, such as all_rows, first_rows_n (where n = 1, 10, 100, 1000, and so on).
     */
    "optimizerMode"?: string;
    /**
     * The cost of the current operation estimated by the cost-based optimizer (CBO). Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "cost"?: number;
    /**
     * The number of rows returned by the current operation (estimated by the CBO). Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "cardinality"?: number;
    /**
     * The number of bytes returned by the current operation. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "bytes"?: number;
    /**
     * The CPU cost of the current operation. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "cpuCost"?: number;
    /**
     * The I/O cost of the current operation. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "ioCost"?: number;
    /**
     * The temporary space usage (in bytes) of the operation (sort or hash-join) as estimated by the CBO. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "tempSpace"?: number;
    /**
     * The elapsed time (in seconds) of the operation as estimated by the CBO. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "time"?: number;
    /**
     * The name of the database link used to reference the object.
     */
    "objectNode"?: string;
    /**
     * The owner of the object.
     */
    "objectOwner"?: string;
    /**
     * The name of the object.
     */
    "objectName"?: string;
    /**
     * The numbered position of the object name in the original SQL statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "objectPosition"?: number;
    /**
     * The descriptive modifier that further describes the type of object.
     */
    "objectType"?: string;
    /**
     * A step may get data from a range of partitions of a partitioned object, such as table or index,
     * based on predicates and sorting order. The partionStart is the starting partition of the range.
     * The partitionStop is the ending partition of the range.
     *
     */
    "partitionStart"?: string;
    /**
     * A step may get data from a range of partitions of a partitioned object, such as table or index,
     * based on predicates and sorting order. The partionStart is the starting partition of the range.
     * The partitionStop is the ending partition of the range.
     *
     */
    "partitionStop"?: string;
    /**
     * The ID of the step in the execution plan that has computed the pair of values of partitionStart and partitionStop.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "partitionId"?: number;
    /**
     * The place for comments that can be added to the steps of the execution plan.
     */
    "remarks"?: string;
    /**
     * Number of index columns with start and stop keys (that is, the number of columns with matching predicates).
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "numberOfSearchColumn"?: number;
    /**
     * Information about parallel execution servers and parallel queries
     */
    "other"?: string;
    /**
     * Describes the function of the SQL text in the OTHER column.
     */
    "otherTag"?: string;
    /**
     * The text string identifying the type of execution plan.
     */
    "attribute"?: string;
    /**
     * The predicates used to locate rows in an access structure. For example,
     * start or stop predicates for an index range scan.
     *
     */
    "accessPredicates"?: string;
    /**
     * The predicates used to filter rows before producing them.
     */
    "filterPredicates"?: string;
}
export declare namespace SqlTuningTaskSqlExecutionPlanStep {
    function getJsonObj(obj: SqlTuningTaskSqlExecutionPlanStep): object;
    function getDeserializedJsonObj(obj: SqlTuningTaskSqlExecutionPlanStep): object;
}
