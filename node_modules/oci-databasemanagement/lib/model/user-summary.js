"use strict";
/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserSummary = void 0;
var UserSummary;
(function (UserSummary) {
    let Status;
    (function (Status) {
        Status["Open"] = "OPEN";
        Status["Expired"] = "EXPIRED";
        Status["ExpiredGrace"] = "EXPIRED_GRACE";
        Status["Locked"] = "LOCKED";
        Status["LockedTimed"] = "LOCKED_TIMED";
        Status["ExpiredAndLocked"] = "EXPIRED_AND_LOCKED";
        Status["ExpiredGraceAndLocked"] = "EXPIRED_GRACE_AND_LOCKED";
        Status["ExpiredAndLockedTimed"] = "EXPIRED_AND_LOCKED_TIMED";
        Status["ExpiredGraceAndLockedTimed"] = "EXPIRED_GRACE_AND_LOCKED_TIMED";
        Status["OpenAndInRollover"] = "OPEN_AND_IN_ROLLOVER";
        Status["ExpiredAndInRollover"] = "EXPIRED_AND_IN_ROLLOVER";
        Status["LockedAndInRollover"] = "LOCKED_AND_IN_ROLLOVER";
        Status["ExpiredAndLockedAndInRollover"] = "EXPIRED_AND_LOCKED_AND_IN_ROLLOVER";
        Status["LockedTimedAndInRollover"] = "LOCKED_TIMED_AND_IN_ROLLOVER";
        Status["ExpiredAndLockedTimedAndInRol"] = "EXPIRED_AND_LOCKED_TIMED_AND_IN_ROL";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Status["UnknownValue"] = "UNKNOWN_VALUE";
    })(Status = UserSummary.Status || (UserSummary.Status = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    UserSummary.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    UserSummary.getDeserializedJsonObj = getDeserializedJsonObj;
})(UserSummary = exports.UserSummary || (exports.UserSummary = {}));
//# sourceMappingURL=user-summary.js.map