/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * A summary of the database parameter.
 */
export interface DatabaseParameterSummary {
    /**
     * The parameter name.
     */
    "name": string;
    /**
     * The parameter type.
     */
    "type": DatabaseParameterSummary.Type;
    /**
     * The parameter value.
     */
    "value": string;
    /**
     * The parameter value in a user-friendly format. For example, if the {@code value} property shows the value 262144 for a big integer parameter, then the {@code displayValue} property will show the value 256K.
     *
     */
    "displayValue": string;
    /**
     * The parameter number. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "number"?: number;
    /**
     * Indicates whether the parameter is set to the default value ({@code TRUE}) or the parameter value was specified in the parameter file ({@code FALSE}).
     *
     */
    "isDefault"?: boolean;
    /**
     * Indicates whether the parameter can be changed with {@code ALTER SESSION} ({@code TRUE}) or not ({@code FALSE})
     *
     */
    "isSessionModifiable"?: boolean;
    /**
     * Indicates whether the parameter can be changed with {@code ALTER SYSTEM} and when the change takes effect:
     * - IMMEDIATE: Parameter can be changed with {@code ALTER SYSTEM} regardless of the type of parameter file used to start the instance. The change takes effect immediately.
     * - DEFERRED: Parameter can be changed with {@code ALTER SYSTEM} regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
     * - FALSE: Parameter cannot be changed with {@code ALTER SYSTEM} unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
     *
     */
    "isSystemModifiable"?: DatabaseParameterSummary.IsSystemModifiable;
    /**
     * Indicates whether the parameter can be modified on a per-PDB basis ({@code TRUE}) or not ({@code FALSE}). In a non-CDB, the value of this property is {@code null}.
     *
     */
    "isPdbModifiable"?: boolean;
    /**
     * For parameters that can be changed with {@code ALTER SYSTEM}, indicates whether the value of the parameter can be different for every instance ({@code TRUE}) or whether the parameter must have the same value for all Real Application Clusters instances ({@code FALSE}). For other parameters, this is always {@code FALSE}.
     *
     */
    "isInstanceModifiable"?: boolean;
    /**
     * Indicates how the parameter was modified. If an {@code ALTER SYSTEM} was performed, the value will be {@code MODIFIED}.
     *
     */
    "isModified"?: DatabaseParameterSummary.IsModified;
    /**
     * Indicates whether Oracle adjusted the input value to a more suitable value.
     */
    "isAdjusted"?: boolean;
    /**
     * Indicates whether the parameter has been deprecated ({@code TRUE}) or not ({@code FALSE}).
     */
    "isDeprecated"?: boolean;
    /**
     * Indicates whether the parameter is a basic parameter ({@code TRUE}) or not ({@code FALSE}).
     */
    "isBasic"?: boolean;
    /**
     * The description of the parameter.
     */
    "description"?: string;
    /**
     * The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "ordinal"?: number;
    /**
     * The comments associated with the most recent update.
     */
    "updateComment"?: string;
    /**
     * The ID of the database container to which the data pertains.
     * Possible values include:
     * - {@code 0}: This value is used for data that pertain to the entire CDB. This value is also used for data in non-CDBs.
     * - {@code 1}: This value is used for data that pertain to only the root container.
     * - {@code n}: Where n is the applicable container ID for the data.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "containerId"?: number;
    /**
     * The parameter category.
     */
    "category"?: string;
    /**
     * Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases.
     * A {@code UNIQUE} parameter is one which is unique to each Oracle Real Application
     * Clusters (Oracle RAC) instance. For example, the parameter {@code INSTANCE_NUMBER}
     * must have different values in each instance. An {@code IDENTICAL} parameter must
     * have the same value for every instance. For example, the parameter
     * {@code DB_BLOCK_SIZE} must have the same value in all instances.
     *
     */
    "constraint"?: DatabaseParameterSummary.Constraint;
    /**
     * The database instance SID for which the parameter is defined.
     */
    "sid"?: string;
    /**
     * Indicates whether the parameter was specified in the server parameter file ({@code TRUE}) or not ({@code FALSE}). Applicable only when the parameter source is {@code SPFILE}.
     *
     */
    "isSpecified"?: boolean;
    /**
     * A list of allowed values for this parameter.
     */
    "allowedValues"?: Array<model.AllowedParameterValue>;
}
export declare namespace DatabaseParameterSummary {
    enum Type {
        Boolean = "BOOLEAN",
        String = "STRING",
        Integer = "INTEGER",
        Filename = "FILENAME",
        BigInteger = "BIG_INTEGER",
        Reserved = "RESERVED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum IsSystemModifiable {
        Immediate = "IMMEDIATE",
        Deferred = "DEFERRED",
        False = "FALSE",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum IsModified {
        Modified = "MODIFIED",
        False = "FALSE",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum Constraint {
        Unique = "UNIQUE",
        Identical = "IDENTICAL",
        None = "NONE",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: DatabaseParameterSummary): object;
    function getDeserializedJsonObj(obj: DatabaseParameterSummary): object;
}
