/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The details required to create a tablespace.
 * It takes either credentialDetails or databaseCredential. It's recommended to provide databaseCredential
 *
 */
export interface CreateTablespaceDetails {
    "credentialDetails"?: model.TablespaceAdminPasswordCredentialDetails | model.TablespaceAdminSecretCredentialDetails;
    "databaseCredential"?: model.DatabaseSecretCredentialDetails | model.DatabaseNamedCredentialDetails | model.DatabasePasswordCredentialDetails;
    /**
     * The name of the tablespace. It must be unique within a database.
     *
     */
    "name": string;
    /**
     * The type of tablespace.
     *
     */
    "type"?: CreateTablespaceDetails.Type;
    /**
     * Specifies whether the tablespace is a bigfile or smallfile tablespace.
     * A bigfile tablespace contains only one data file or temp file, which can contain up to approximately 4 billion (232) blocks.
     * A smallfile tablespace is a traditional Oracle tablespace, which can contain 1022 data files or temp files, each of which can contain up to approximately 4 million (222) blocks.
     *
     */
    "isBigfile"?: boolean;
    /**
     * The list of data files or temp files created for the tablespace.
     *
     */
    "dataFiles"?: Array<string>;
    /**
     * The number of data files or temp files created for the tablespace. This is for Oracle Managed Files only.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "fileCount"?: number;
    /**
     * The size of each data file or temp file.
     *
     */
    "fileSize"?: model.TablespaceStorageSize;
    /**
     * Specifies whether Oracle can reuse the data file or temp file. Reuse is only allowed when the file name is provided.
     *
     */
    "isReusable"?: boolean;
    /**
     * Specifies whether the data file or temp file can be extended automatically.
     *
     */
    "isAutoExtensible"?: boolean;
    /**
     * The size of the next increment of disk space to be allocated automatically when more extents are required.
     *
     */
    "autoExtendNextSize"?: model.TablespaceStorageSize;
    /**
     * The maximum disk space allowed for automatic extension of the data files or temp files.
     *
     */
    "autoExtendMaxSize"?: model.TablespaceStorageSize;
    /**
     * Specifies whether the disk space of the data file or temp file can be limited.
     *
     */
    "isMaxSizeUnlimited"?: boolean;
    /**
     * Block size for the tablespace.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "blockSizeInKilobytes"?: number;
    /**
     * Indicates whether the tablespace is encrypted.
     */
    "isEncrypted"?: boolean;
    /**
     * The name of the encryption algorithm to be used for tablespace encryption.
     *
     */
    "encryptionAlgorithm"?: string;
    /**
     * The default compression of data for all tables created in the tablespace.
     *
     */
    "defaultCompress"?: CreateTablespaceDetails.DefaultCompress;
    /**
     * The status of the tablespace.
     *
     */
    "status"?: CreateTablespaceDetails.Status;
    /**
     * Specifies how the extents of the tablespace should be managed.
     *
     */
    "extentManagement"?: CreateTablespaceDetails.ExtentManagement;
    /**
     * The size of the extent when the tablespace is managed with uniform extents of a specific size.
     *
     */
    "extentUniformSize"?: model.TablespaceStorageSize;
    /**
     * Specifies whether tablespace segment management should be automatic or manual.
     *
     */
    "segmentManagement"?: CreateTablespaceDetails.SegmentManagement;
    /**
     * Specifies whether the tablespace is the default tablespace.
     *
     */
    "isDefault"?: boolean;
}
export declare namespace CreateTablespaceDetails {
    enum Type {
        Permanent = "PERMANENT",
        Temporary = "TEMPORARY"
    }
    enum DefaultCompress {
        NoCompress = "NO_COMPRESS",
        BasicCompress = "BASIC_COMPRESS"
    }
    enum Status {
        ReadOnly = "READ_ONLY",
        ReadWrite = "READ_WRITE"
    }
    enum ExtentManagement {
        Autoallocate = "AUTOALLOCATE",
        Uniform = "UNIFORM"
    }
    enum SegmentManagement {
        Auto = "AUTO",
        Manual = "MANUAL"
    }
    function getJsonObj(obj: CreateTablespaceDetails): object;
    function getDeserializedJsonObj(obj: CreateTablespaceDetails): object;
}
