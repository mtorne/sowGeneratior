"use strict";
/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalExadataInfrastructureDiscovery = void 0;
const model = __importStar(require("../model"));
var ExternalExadataInfrastructureDiscovery;
(function (ExternalExadataInfrastructureDiscovery) {
    let LicenseModel;
    (function (LicenseModel) {
        LicenseModel["LicenseIncluded"] = "LICENSE_INCLUDED";
        LicenseModel["BringYourOwnLicense"] = "BRING_YOUR_OWN_LICENSE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LicenseModel["UnknownValue"] = "UNKNOWN_VALUE";
    })(LicenseModel = ExternalExadataInfrastructureDiscovery.LicenseModel || (ExternalExadataInfrastructureDiscovery.LicenseModel = {}));
    let RackSize;
    (function (RackSize) {
        RackSize["Full"] = "FULL";
        RackSize["Half"] = "HALF";
        RackSize["Quarter"] = "QUARTER";
        RackSize["Eighth"] = "EIGHTH";
        RackSize["Unknown"] = "UNKNOWN";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        RackSize["UnknownValue"] = "UNKNOWN_VALUE";
    })(RackSize = ExternalExadataInfrastructureDiscovery.RackSize || (ExternalExadataInfrastructureDiscovery.RackSize = {}));
    function getJsonObj(obj, isParentJsonObj) {
        const jsonObj = Object.assign(Object.assign({}, (isParentJsonObj
            ? obj
            : model.EntityDiscovered.getJsonObj(obj))), {
            "dbSystems": obj.dbSystems
                ? obj.dbSystems.map(item => {
                    return model.ExternalDatabaseSystemDiscoverySummary.getJsonObj(item);
                })
                : undefined,
            "storageGrid": obj.storageGrid
                ? model.ExternalStorageGridDiscoverySummary.getJsonObj(obj.storageGrid)
                : undefined,
            "storageServers": obj.storageServers
                ? obj.storageServers.map(item => {
                    return model.ExternalStorageServerDiscoverySummary.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    ExternalExadataInfrastructureDiscovery.getJsonObj = getJsonObj;
    ExternalExadataInfrastructureDiscovery.entityType = "INFRASTRUCTURE_DISCOVER";
    function getDeserializedJsonObj(obj, isParentJsonObj) {
        const jsonObj = Object.assign(Object.assign({}, (isParentJsonObj
            ? obj
            : model.EntityDiscovered.getDeserializedJsonObj(obj))), {
            "dbSystems": obj.dbSystems
                ? obj.dbSystems.map(item => {
                    return model.ExternalDatabaseSystemDiscoverySummary.getDeserializedJsonObj(item);
                })
                : undefined,
            "storageGrid": obj.storageGrid
                ? model.ExternalStorageGridDiscoverySummary.getDeserializedJsonObj(obj.storageGrid)
                : undefined,
            "storageServers": obj.storageServers
                ? obj.storageServers.map(item => {
                    return model.ExternalStorageServerDiscoverySummary.getDeserializedJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    ExternalExadataInfrastructureDiscovery.getDeserializedJsonObj = getDeserializedJsonObj;
})(ExternalExadataInfrastructureDiscovery = exports.ExternalExadataInfrastructureDiscovery || (exports.ExternalExadataInfrastructureDiscovery = {}));
//# sourceMappingURL=external-exadata-infrastructure-discovery.js.map