"use strict";
/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
var User;
(function (User) {
    let Status;
    (function (Status) {
        Status["Open"] = "OPEN";
        Status["Expired"] = "EXPIRED";
        Status["ExpiredGrace"] = "EXPIRED_GRACE";
        Status["Locked"] = "LOCKED";
        Status["LockedTimed"] = "LOCKED_TIMED";
        Status["ExpiredAndLocked"] = "EXPIRED_AND_LOCKED";
        Status["ExpiredGraceAndLocked"] = "EXPIRED_GRACE_AND_LOCKED";
        Status["ExpiredAndLockedTimed"] = "EXPIRED_AND_LOCKED_TIMED";
        Status["ExpiredGraceAndLockedTimed"] = "EXPIRED_GRACE_AND_LOCKED_TIMED";
        Status["OpenAndInRollover"] = "OPEN_AND_IN_ROLLOVER";
        Status["ExpiredAndInRollover"] = "EXPIRED_AND_IN_ROLLOVER";
        Status["LockedAndInRollover"] = "LOCKED_AND_IN_ROLLOVER";
        Status["ExpiredAndLockedAndInRollover"] = "EXPIRED_AND_LOCKED_AND_IN_ROLLOVER";
        Status["LockedTimedAndInRollover"] = "LOCKED_TIMED_AND_IN_ROLLOVER";
        Status["ExpiredAndLockedTimedAndInRol"] = "EXPIRED_AND_LOCKED_TIMED_AND_IN_ROL";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Status["UnknownValue"] = "UNKNOWN_VALUE";
    })(Status = User.Status || (User.Status = {}));
    let EditionsEnabled;
    (function (EditionsEnabled) {
        EditionsEnabled["Yes"] = "YES";
        EditionsEnabled["No"] = "NO";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        EditionsEnabled["UnknownValue"] = "UNKNOWN_VALUE";
    })(EditionsEnabled = User.EditionsEnabled || (User.EditionsEnabled = {}));
    let Authentication;
    (function (Authentication) {
        Authentication["None"] = "NONE";
        Authentication["External"] = "EXTERNAL";
        Authentication["Global"] = "GLOBAL";
        Authentication["Password"] = "PASSWORD";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Authentication["UnknownValue"] = "UNKNOWN_VALUE";
    })(Authentication = User.Authentication || (User.Authentication = {}));
    let ProxyConnect;
    (function (ProxyConnect) {
        ProxyConnect["Yes"] = "YES";
        ProxyConnect["No"] = "NO";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ProxyConnect["UnknownValue"] = "UNKNOWN_VALUE";
    })(ProxyConnect = User.ProxyConnect || (User.ProxyConnect = {}));
    let Common;
    (function (Common) {
        Common["Yes"] = "YES";
        Common["No"] = "NO";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Common["UnknownValue"] = "UNKNOWN_VALUE";
    })(Common = User.Common || (User.Common = {}));
    let OracleMaintained;
    (function (OracleMaintained) {
        OracleMaintained["Yes"] = "YES";
        OracleMaintained["No"] = "NO";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        OracleMaintained["UnknownValue"] = "UNKNOWN_VALUE";
    })(OracleMaintained = User.OracleMaintained || (User.OracleMaintained = {}));
    let Inherited;
    (function (Inherited) {
        Inherited["Yes"] = "YES";
        Inherited["No"] = "NO";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Inherited["UnknownValue"] = "UNKNOWN_VALUE";
    })(Inherited = User.Inherited || (User.Inherited = {}));
    let Implicit;
    (function (Implicit) {
        Implicit["Yes"] = "YES";
        Implicit["No"] = "NO";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Implicit["UnknownValue"] = "UNKNOWN_VALUE";
    })(Implicit = User.Implicit || (User.Implicit = {}));
    let AllShared;
    (function (AllShared) {
        AllShared["Yes"] = "YES";
        AllShared["No"] = "NO";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        AllShared["UnknownValue"] = "UNKNOWN_VALUE";
    })(AllShared = User.AllShared || (User.AllShared = {}));
    let ExternalShared;
    (function (ExternalShared) {
        ExternalShared["Yes"] = "YES";
        ExternalShared["No"] = "NO";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ExternalShared["UnknownValue"] = "UNKNOWN_VALUE";
    })(ExternalShared = User.ExternalShared || (User.ExternalShared = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    User.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    User.getDeserializedJsonObj = getDeserializedJsonObj;
})(User = exports.User || (exports.User = {}));
//# sourceMappingURL=user.js.map