"use strict";
/**
 * Database Management API
 * Use the Database Management API to monitor and manage resources such as
Oracle Databases, MySQL Databases, and External Database Systems.
For more information, see [Database Management](https://docs.oracle.com/iaas/database-management/home.htm).

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscoveredExternalDbSystemComponent = void 0;
const model = __importStar(require("../model"));
const common = require("oci-common");
var DiscoveredExternalDbSystemComponent;
(function (DiscoveredExternalDbSystemComponent) {
    let Status;
    (function (Status) {
        Status["New"] = "NEW";
        Status["Existing"] = "EXISTING";
        Status["MarkedForDeletion"] = "MARKED_FOR_DELETION";
        Status["Unknown"] = "UNKNOWN";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Status["UnknownValue"] = "UNKNOWN_VALUE";
    })(Status = DiscoveredExternalDbSystemComponent.Status || (DiscoveredExternalDbSystemComponent.Status = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "associatedComponents": obj.associatedComponents
                ? obj.associatedComponents.map(item => {
                    return model.AssociatedComponent.getJsonObj(item);
                })
                : undefined
        });
        if (obj && "componentType" in obj && obj.componentType) {
            switch (obj.componentType) {
                case "CLUSTER":
                    return model.DiscoveredExternalCluster.getJsonObj(jsonObj, true);
                case "DATABASE_HOME":
                    return model.DiscoveredExternalDbHome.getJsonObj(jsonObj, true);
                case "DATABASE":
                    return model.DiscoveredExternalDatabase.getJsonObj(jsonObj, true);
                case "PLUGGABLE_DATABASE":
                    return model.DiscoveredExternalPluggableDatabase.getJsonObj(jsonObj, true);
                case "CLUSTER_INSTANCE":
                    return model.DiscoveredExternalClusterInstance.getJsonObj(jsonObj, true);
                case "LISTENER":
                    return model.DiscoveredExternalListener.getJsonObj(jsonObj, true);
                case "DATABASE_NODE":
                    return model.DiscoveredExternalDbNode.getJsonObj(jsonObj, true);
                case "ASM":
                    return model.DiscoveredExternalAsm.getJsonObj(jsonObj, true);
                case "ASM_INSTANCE":
                    return model.DiscoveredExternalAsmInstance.getJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.componentType}`);
            }
        }
        return jsonObj;
    }
    DiscoveredExternalDbSystemComponent.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "associatedComponents": obj.associatedComponents
                ? obj.associatedComponents.map(item => {
                    return model.AssociatedComponent.getDeserializedJsonObj(item);
                })
                : undefined
        });
        if (obj && "componentType" in obj && obj.componentType) {
            switch (obj.componentType) {
                case "CLUSTER":
                    return model.DiscoveredExternalCluster.getDeserializedJsonObj(jsonObj, true);
                case "DATABASE_HOME":
                    return model.DiscoveredExternalDbHome.getDeserializedJsonObj(jsonObj, true);
                case "DATABASE":
                    return model.DiscoveredExternalDatabase.getDeserializedJsonObj(jsonObj, true);
                case "PLUGGABLE_DATABASE":
                    return model.DiscoveredExternalPluggableDatabase.getDeserializedJsonObj(jsonObj, true);
                case "CLUSTER_INSTANCE":
                    return model.DiscoveredExternalClusterInstance.getDeserializedJsonObj(jsonObj, true);
                case "LISTENER":
                    return model.DiscoveredExternalListener.getDeserializedJsonObj(jsonObj, true);
                case "DATABASE_NODE":
                    return model.DiscoveredExternalDbNode.getDeserializedJsonObj(jsonObj, true);
                case "ASM":
                    return model.DiscoveredExternalAsm.getDeserializedJsonObj(jsonObj, true);
                case "ASM_INSTANCE":
                    return model.DiscoveredExternalAsmInstance.getDeserializedJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.componentType}`);
            }
        }
        return jsonObj;
    }
    DiscoveredExternalDbSystemComponent.getDeserializedJsonObj = getDeserializedJsonObj;
})(DiscoveredExternalDbSystemComponent = exports.DiscoveredExternalDbSystemComponent || (exports.DiscoveredExternalDbSystemComponent = {}));
//# sourceMappingURL=discovered-external-db-system-component.js.map