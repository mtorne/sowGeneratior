/**
 * Stack Monitoring API
 * Stack Monitoring API.
 * OpenAPI spec version: 20210330
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { StackMonitoringClient } from "./client";
export declare class StackMonitoringWaiter {
    private client;
    private readonly config?;
    constructor(client: StackMonitoringClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAlarmCondition till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAlarmConditionResponse | null (null in case of 404 response)
     */
    forAlarmCondition(request: serviceRequests.GetAlarmConditionRequest, ...targetStates: models.AlarmConditionLifeCycleStates[]): Promise<serviceResponses.GetAlarmConditionResponse | null>;
    /**
     * Waits forBaselineableMetric till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBaselineableMetricResponse | null (null in case of 404 response)
     */
    forBaselineableMetric(request: serviceRequests.GetBaselineableMetricRequest, ...targetStates: models.BaselineableMetricLifeCycleStates[]): Promise<serviceResponses.GetBaselineableMetricResponse | null>;
    /**
     * Waits forConfig till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConfigResponse | null (null in case of 404 response)
     */
    forConfig(request: serviceRequests.GetConfigRequest, ...targetStates: models.Config.LifecycleState[]): Promise<serviceResponses.GetConfigResponse | null>;
    /**
     * Waits forDiscoveryJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDiscoveryJobResponse | null (null in case of 404 response)
     */
    forDiscoveryJob(request: serviceRequests.GetDiscoveryJobRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDiscoveryJobResponse | null>;
    /**
     * Waits forMaintenanceWindow till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMaintenanceWindowResponse | null (null in case of 404 response)
     */
    forMaintenanceWindow(request: serviceRequests.GetMaintenanceWindowRequest, ...targetStates: models.MaintenanceWindowLifecycleState[]): Promise<serviceResponses.GetMaintenanceWindowResponse | null>;
    /**
     * Waits forMetricExtension till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMetricExtensionResponse | null (null in case of 404 response)
     */
    forMetricExtension(request: serviceRequests.GetMetricExtensionRequest, ...targetStates: models.MetricExtensionLifeCycleStates[]): Promise<serviceResponses.GetMetricExtensionResponse | null>;
    /**
     * Waits forMonitoredResource till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMonitoredResourceResponse | null (null in case of 404 response)
     */
    forMonitoredResource(request: serviceRequests.GetMonitoredResourceRequest, ...targetStates: models.ResourceLifecycleState[]): Promise<serviceResponses.GetMonitoredResourceResponse | null>;
    /**
     * Waits forMonitoredResourceTask till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMonitoredResourceTaskResponse
     */
    forMonitoredResourceTask(request: serviceRequests.GetMonitoredResourceTaskRequest, ...targetStates: models.MonitoredResourceTaskLifecycleState[]): Promise<serviceResponses.GetMonitoredResourceTaskResponse>;
    /**
     * Waits forMonitoredResourceType till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMonitoredResourceTypeResponse | null (null in case of 404 response)
     */
    forMonitoredResourceType(request: serviceRequests.GetMonitoredResourceTypeRequest, ...targetStates: models.ResourceTypeLifecycleState[]): Promise<serviceResponses.GetMonitoredResourceTypeResponse | null>;
    /**
     * Waits forMonitoringTemplate till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMonitoringTemplateResponse | null (null in case of 404 response)
     */
    forMonitoringTemplate(request: serviceRequests.GetMonitoringTemplateRequest, ...targetStates: models.MonitoringTemplateLifeCycleStates[]): Promise<serviceResponses.GetMonitoringTemplateResponse | null>;
    /**
     * Waits forProcessSet till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetProcessSetResponse | null (null in case of 404 response)
     */
    forProcessSet(request: serviceRequests.GetProcessSetRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetProcessSetResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
