"use strict";
/**
 * Stack Monitoring API
 * Stack Monitoring API.
 * OpenAPI spec version: 20210330
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metric = void 0;
var Metric;
(function (Metric) {
    let DataType;
    (function (DataType) {
        DataType["String"] = "STRING";
        DataType["Number"] = "NUMBER";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        DataType["UnknownValue"] = "UNKNOWN_VALUE";
    })(DataType = Metric.DataType || (Metric.DataType = {}));
    let MetricCategory;
    (function (MetricCategory) {
        MetricCategory["Load"] = "LOAD";
        MetricCategory["Utilization"] = "UTILIZATION";
        MetricCategory["Capacity"] = "CAPACITY";
        MetricCategory["Availability"] = "AVAILABILITY";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        MetricCategory["UnknownValue"] = "UNKNOWN_VALUE";
    })(MetricCategory = Metric.MetricCategory || (Metric.MetricCategory = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    Metric.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    Metric.getDeserializedJsonObj = getDeserializedJsonObj;
})(Metric = exports.Metric || (exports.Metric = {}));
//# sourceMappingURL=metric.js.map