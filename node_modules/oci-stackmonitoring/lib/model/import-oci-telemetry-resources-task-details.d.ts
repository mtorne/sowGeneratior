/**
 * Stack Monitoring API
 * Stack Monitoring API.
 * OpenAPI spec version: 20210330
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Request details for importing resources from Telemetry like resources from OCI Native Services and prometheus.
 *
 */
export interface ImportOciTelemetryResourcesTaskDetails extends model.MonitoredResourceTaskDetails {
    /**
     * Source from where the metrics pushed to telemetry.
     * Possible values:
     *   * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from OCI Native Services.
     *   * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
     *   * OCI_TELEMETRY_TELEGRAF    - The metrics are pushed to telemetry from Telegraf receiver.
     *   * OCI_TELEMETRY_COLLECTD    - The metrics are pushed to telemetry from CollectD receiver.
     *
     */
    "source": ImportOciTelemetryResourcesTaskDetails.Source;
    /**
     * Name space to be used for OCI Native service resources discovery.
     */
    "namespace": string;
    /**
     * The resource group to use while fetching metrics from telemetry.
     * If not specified, resource group will be skipped in the list metrics request.
     *
     */
    "resourceGroup"?: string;
    /**
     * Flag to indicate whether status is calculated using metrics or
     * LifeCycleState attribute of the resource in OCI service.
     *
     */
    "shouldUseMetricsFlowForStatus"?: boolean;
    /**
     * The base URL of the OCI service to which the resource belongs to.
     * Also this property is applicable only when source is OCI_TELEMETRY_NATIVE.
     *
     */
    "serviceBaseUrl"?: string;
    /**
     * The console path prefix to use for providing service home url page navigation.
     * For example if the prefix provided is 'security/bastion/bastions', the URL used for navigation will be
     * https://<cloudhostname>/security/bastion/bastions/<resourceOcid>. If not provided, service home page link
     * will not be shown in the stack monitoring home page.
     *
     */
    "consolePathPrefix"?: string;
    /**
     * Lifecycle states of the external resource which reflects the status of the resource being up.
     *
     */
    "lifecycleStatusMappingsForUpStatus"?: Array<string>;
    /**
     * The resource name property in the metric dimensions.
     * Resources imported will be using this property value for resource name.
     *
     */
    "resourceNameMapping"?: string;
    /**
     * The external resource identifier property in the metric dimensions.
     * Resources imported will be using this property value for external id.
     *
     */
    "externalIdMapping"?: string;
    /**
     * The resource type property in the metric dimensions.
     * Resources imported will be using this property value for resource type.
     * If not specified, namespace will be used for resource type.
     *
     */
    "resourceTypeMapping"?: string;
    /**
     * The resource name filter. Resources matching with the resource name filter will be imported.
     * Regular expressions will be accepted.
     *
     */
    "resourceNameFilter"?: string;
    /**
     * The resource type filter. Resources matching with the resource type filter will be imported.
     * Regular expressions will be accepted.
     *
     */
    "resourceTypeFilter"?: string;
    /**
     * List of metrics to be used to calculate the availability of the resource.
     * Resource is considered to be up if at least one of the specified metrics is available for
     * the resource during the specified interval using the property
     * 'availabilityProxyMetricCollectionInterval'.
     * If no metrics are specified, availability will not be calculated for the resource.
     *
     */
    "availabilityProxyMetrics"?: Array<string>;
    /**
     * Metrics collection interval in seconds used when calculating the availability of the
     * resource based on metrics specified using the property 'availabilityProxyMetrics'.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "availabilityProxyMetricCollectionInterval"?: number;
    "type": string;
}
export declare namespace ImportOciTelemetryResourcesTaskDetails {
    enum Source {
        OciTelemetryNative = "OCI_TELEMETRY_NATIVE",
        OciTelemetryPrometheus = "OCI_TELEMETRY_PROMETHEUS",
        OciTelemetryTelegraf = "OCI_TELEMETRY_TELEGRAF",
        OciTelemetryCollectd = "OCI_TELEMETRY_COLLECTD",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: ImportOciTelemetryResourcesTaskDetails, isParentJsonObj?: boolean): object;
    const type = "IMPORT_OCI_TELEMETRY_RESOURCES";
    function getDeserializedJsonObj(obj: ImportOciTelemetryResourcesTaskDetails, isParentJsonObj?: boolean): object;
}
