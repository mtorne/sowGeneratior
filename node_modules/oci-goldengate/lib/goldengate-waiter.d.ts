/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { GoldenGateClient } from "./client";
export declare class GoldenGateWaiter {
    private client;
    private readonly config?;
    constructor(client: GoldenGateClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forCertificate till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCertificateResponse | null (null in case of 404 response)
     */
    forCertificate(request: serviceRequests.GetCertificateRequest, ...targetStates: models.CertificateLifecycleState[]): Promise<serviceResponses.GetCertificateResponse | null>;
    /**
     * Waits forConnection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConnectionResponse | null (null in case of 404 response)
     */
    forConnection(request: serviceRequests.GetConnectionRequest, ...targetStates: models.Connection.LifecycleState[]): Promise<serviceResponses.GetConnectionResponse | null>;
    /**
     * Waits forConnectionAssignment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConnectionAssignmentResponse
     */
    forConnectionAssignment(request: serviceRequests.GetConnectionAssignmentRequest, ...targetStates: models.ConnectionAssignment.LifecycleState[]): Promise<serviceResponses.GetConnectionAssignmentResponse>;
    /**
     * Waits forDatabaseRegistration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDatabaseRegistrationResponse | null (null in case of 404 response)
     */
    forDatabaseRegistration(request: serviceRequests.GetDatabaseRegistrationRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDatabaseRegistrationResponse | null>;
    /**
     * Waits forDeployment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDeploymentResponse | null (null in case of 404 response)
     */
    forDeployment(request: serviceRequests.GetDeploymentRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDeploymentResponse | null>;
    /**
     * Waits forDeploymentBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDeploymentBackupResponse | null (null in case of 404 response)
     */
    forDeploymentBackup(request: serviceRequests.GetDeploymentBackupRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDeploymentBackupResponse | null>;
    /**
     * Waits forDeploymentUpgrade till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDeploymentUpgradeResponse | null (null in case of 404 response)
     */
    forDeploymentUpgrade(request: serviceRequests.GetDeploymentUpgradeRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDeploymentUpgradeResponse | null>;
    /**
     * Waits forPipeline till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPipelineResponse | null (null in case of 404 response)
     */
    forPipeline(request: serviceRequests.GetPipelineRequest, ...targetStates: models.Pipeline.LifecycleState[]): Promise<serviceResponses.GetPipelineResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
