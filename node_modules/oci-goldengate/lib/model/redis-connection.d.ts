/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Represents the metadata of a Redis Database Connection.
 *
 */
export interface RedisConnection extends model.Connection {
    /**
     * The Redis technology type.
     */
    "technologyType": RedisConnection.TechnologyType;
    /**
     * Comma separated list of Redis server addresses, specified as host:port entries, where :port is optional.
     * If port is not specified, it defaults to 6379.
     * Used for establishing the initial connection to the Redis cluster.
     * Example: {@code \"server1.example.com:6379,server2.example.com:6379\"}
     *
     */
    "servers": string;
    /**
     * Security protocol for Redis
     */
    "securityProtocol": RedisConnection.SecurityProtocol;
    /**
     * Authentication type for Redis.
     */
    "authenticationType": RedisConnection.AuthenticationType;
    /**
     * The username Oracle GoldenGate uses to connect the associated system of the given technology.
     * This username must already exist and be available by the system/application to be connected to
     * and must conform to the case sensitivty requirments defined in it.
     *
     */
    "username"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Redis cluster.
     *
     */
    "redisClusterId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored.
     * The password Oracle GoldenGate uses to connect the associated system of the given technology.
     * It must conform to the specific security requirements including length, case sensitivity, and so on.
     * If secretId is used plaintext field must not be provided.
     * Note: When provided, 'password' field must not be provided.
     *
     */
    "passwordSecretId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the TrustStore file.
     * Note: When provided, 'trustStore' field must not be provided.
     *
     */
    "trustStoreSecretId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the Redis TrustStore password is stored.
     * Note: When provided, 'trustStorePassword' field must not be provided.
     *
     */
    "trustStorePasswordSecretId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the KeyStore file.
     * Note: When provided, 'keyStore' field must not be provided.
     *
     */
    "keyStoreSecretId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the Redis KeyStore password is stored.
     * Note: When provided, 'keyStorePassword' field must not be provided.
     *
     */
    "keyStorePasswordSecretId"?: string;
    "connectionType": string;
}
export declare namespace RedisConnection {
    enum TechnologyType {
        Redis = "REDIS",
        OciCacheWithRedis = "OCI_CACHE_WITH_REDIS",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum SecurityProtocol {
        Plain = "PLAIN",
        Tls = "TLS",
        Mtls = "MTLS",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum AuthenticationType {
        None = "NONE",
        Basic = "BASIC",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: RedisConnection, isParentJsonObj?: boolean): object;
    const connectionType = "REDIS";
    function getDeserializedJsonObj(obj: RedisConnection, isParentJsonObj?: boolean): object;
}
