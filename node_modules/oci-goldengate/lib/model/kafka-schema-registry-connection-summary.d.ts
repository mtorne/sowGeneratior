/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Summary of the Kafka (e.g. Confluent) Schema Registry Connection.
 *
 */
export interface KafkaSchemaRegistryConnectionSummary extends model.ConnectionSummary {
    /**
     * The Kafka (e.g. Confluent) Schema Registry technology type.
     *
     */
    "technologyType": string;
    /**
     * Kafka Schema Registry URL.
     * e.g.: 'https://server1.us.oracle.com:8081'
     *
     */
    "url": string;
    /**
     * Used authentication mechanism to access Schema Registry.
     *
     */
    "authenticationType": string;
    /**
     * The username to access Schema Registry using basic authentication.
     * This value is injected into 'schema.registry.basic.auth.user.info=user:password' configuration property.
     *
     */
    "username"?: string;
    /**
      * Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host
  * field, or make sure the host name is resolvable in the target VCN.
  * <p>
  The private IP address of the connection's endpoint in the customer's VCN, typically a
  * database endpoint or a big data endpoint (e.g. Kafka bootstrap server).
  * In case the privateIp is provided, the subnetId must also be provided.
  * In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible.
  * In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
  *
      */
    "privateIp"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the Kafka Schema Registry password is stored,
     * The password to access Schema Registry using basic authentication.
     * This value is injected into 'schema.registry.basic.auth.user.info=user:password' configuration property.
     * Note: When provided, 'password' field must not be provided.
     *
     */
    "passwordSecretId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the TrustStore file.
     * Note: When provided, 'trustStore' field must not be provided.
     *
     */
    "trustStoreSecretId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl TrustStore password is stored.
     * Note: When provided, 'trustStorePassword' field must not be provided.
     *
     */
    "trustStorePasswordSecretId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the KeyStore file.
     * Note: When provided, 'keyStore' field must not be provided.
     *
     */
    "keyStoreSecretId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl KeyStore password is stored.
     * Note: When provided, 'keyStorePassword' field must not be provided.
     *
     */
    "keyStorePasswordSecretId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Secret that stores the password for the cert inside the KeyStore.
     * In case it differs from the KeyStore password, it should be provided.
     * Note: When provided, 'sslKeyPassword' field must not be provided.
     *
     */
    "sslKeyPasswordSecretId"?: string;
    "connectionType": string;
}
export declare namespace KafkaSchemaRegistryConnectionSummary {
    function getJsonObj(obj: KafkaSchemaRegistryConnectionSummary, isParentJsonObj?: boolean): object;
    const connectionType = "KAFKA_SCHEMA_REGISTRY";
    function getDeserializedJsonObj(obj: KafkaSchemaRegistryConnectionSummary, isParentJsonObj?: boolean): object;
}
