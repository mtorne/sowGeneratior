"use strict";
/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connection = void 0;
const model = __importStar(require("../model"));
const common = require("oci-common");
var Connection;
(function (Connection) {
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Creating"] = "CREATING";
        LifecycleState["Updating"] = "UPDATING";
        LifecycleState["Active"] = "ACTIVE";
        LifecycleState["Deleting"] = "DELETING";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = Connection.LifecycleState || (Connection.LifecycleState = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "locks": obj.locks
                ? obj.locks.map(item => {
                    return model.ResourceLock.getJsonObj(item);
                })
                : undefined,
            "ingressIps": obj.ingressIps
                ? obj.ingressIps.map(item => {
                    return model.IngressIpDetails.getJsonObj(item);
                })
                : undefined
        });
        if (obj && "connectionType" in obj && obj.connectionType) {
            switch (obj.connectionType) {
                case "KAFKA":
                    return model.KafkaConnection.getJsonObj(jsonObj, true);
                case "POSTGRESQL":
                    return model.PostgresqlConnection.getJsonObj(jsonObj, true);
                case "DB2":
                    return model.Db2Connection.getJsonObj(jsonObj, true);
                case "ELASTICSEARCH":
                    return model.ElasticsearchConnection.getJsonObj(jsonObj, true);
                case "AMAZON_REDSHIFT":
                    return model.AmazonRedshiftConnection.getJsonObj(jsonObj, true);
                case "AMAZON_S3":
                    return model.AmazonS3Connection.getJsonObj(jsonObj, true);
                case "MONGODB":
                    return model.MongoDbConnection.getJsonObj(jsonObj, true);
                case "HDFS":
                    return model.HdfsConnection.getJsonObj(jsonObj, true);
                case "OCI_OBJECT_STORAGE":
                    return model.OciObjectStorageConnection.getJsonObj(jsonObj, true);
                case "MICROSOFT_SQLSERVER":
                    return model.MicrosoftSqlserverConnection.getJsonObj(jsonObj, true);
                case "ICEBERG":
                    return model.IcebergConnection.getJsonObj(jsonObj, true);
                case "GENERIC":
                    return model.GenericConnection.getJsonObj(jsonObj, true);
                case "AZURE_SYNAPSE_ANALYTICS":
                    return model.AzureSynapseConnection.getJsonObj(jsonObj, true);
                case "MICROSOFT_FABRIC":
                    return model.MicrosoftFabricConnection.getJsonObj(jsonObj, true);
                case "DATABRICKS":
                    return model.DatabricksConnection.getJsonObj(jsonObj, true);
                case "JAVA_MESSAGE_SERVICE":
                    return model.JavaMessageServiceConnection.getJsonObj(jsonObj, true);
                case "SNOWFLAKE":
                    return model.SnowflakeConnection.getJsonObj(jsonObj, true);
                case "GOLDENGATE":
                    return model.GoldenGateConnection.getJsonObj(jsonObj, true);
                case "MYSQL":
                    return model.MysqlConnection.getJsonObj(jsonObj, true);
                case "GOOGLE_BIGQUERY":
                    return model.GoogleBigQueryConnection.getJsonObj(jsonObj, true);
                case "ORACLE":
                    return model.OracleConnection.getJsonObj(jsonObj, true);
                case "AZURE_DATA_LAKE_STORAGE":
                    return model.AzureDataLakeStorageConnection.getJsonObj(jsonObj, true);
                case "GOOGLE_CLOUD_STORAGE":
                    return model.GoogleCloudStorageConnection.getJsonObj(jsonObj, true);
                case "KAFKA_SCHEMA_REGISTRY":
                    return model.KafkaSchemaRegistryConnection.getJsonObj(jsonObj, true);
                case "AMAZON_KINESIS":
                    return model.AmazonKinesisConnection.getJsonObj(jsonObj, true);
                case "ORACLE_NOSQL":
                    return model.OracleNosqlConnection.getJsonObj(jsonObj, true);
                case "REDIS":
                    return model.RedisConnection.getJsonObj(jsonObj, true);
                case "GOOGLE_PUBSUB":
                    return model.GooglePubSubConnection.getJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.connectionType}`);
            }
        }
        return jsonObj;
    }
    Connection.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "locks": obj.locks
                ? obj.locks.map(item => {
                    return model.ResourceLock.getDeserializedJsonObj(item);
                })
                : undefined,
            "ingressIps": obj.ingressIps
                ? obj.ingressIps.map(item => {
                    return model.IngressIpDetails.getDeserializedJsonObj(item);
                })
                : undefined
        });
        if (obj && "connectionType" in obj && obj.connectionType) {
            switch (obj.connectionType) {
                case "KAFKA":
                    return model.KafkaConnection.getDeserializedJsonObj(jsonObj, true);
                case "POSTGRESQL":
                    return model.PostgresqlConnection.getDeserializedJsonObj(jsonObj, true);
                case "DB2":
                    return model.Db2Connection.getDeserializedJsonObj(jsonObj, true);
                case "ELASTICSEARCH":
                    return model.ElasticsearchConnection.getDeserializedJsonObj(jsonObj, true);
                case "AMAZON_REDSHIFT":
                    return model.AmazonRedshiftConnection.getDeserializedJsonObj(jsonObj, true);
                case "AMAZON_S3":
                    return model.AmazonS3Connection.getDeserializedJsonObj(jsonObj, true);
                case "MONGODB":
                    return model.MongoDbConnection.getDeserializedJsonObj(jsonObj, true);
                case "HDFS":
                    return model.HdfsConnection.getDeserializedJsonObj(jsonObj, true);
                case "OCI_OBJECT_STORAGE":
                    return model.OciObjectStorageConnection.getDeserializedJsonObj(jsonObj, true);
                case "MICROSOFT_SQLSERVER":
                    return model.MicrosoftSqlserverConnection.getDeserializedJsonObj(jsonObj, true);
                case "ICEBERG":
                    return model.IcebergConnection.getDeserializedJsonObj(jsonObj, true);
                case "GENERIC":
                    return model.GenericConnection.getDeserializedJsonObj(jsonObj, true);
                case "AZURE_SYNAPSE_ANALYTICS":
                    return model.AzureSynapseConnection.getDeserializedJsonObj(jsonObj, true);
                case "MICROSOFT_FABRIC":
                    return model.MicrosoftFabricConnection.getDeserializedJsonObj(jsonObj, true);
                case "DATABRICKS":
                    return model.DatabricksConnection.getDeserializedJsonObj(jsonObj, true);
                case "JAVA_MESSAGE_SERVICE":
                    return model.JavaMessageServiceConnection.getDeserializedJsonObj(jsonObj, true);
                case "SNOWFLAKE":
                    return model.SnowflakeConnection.getDeserializedJsonObj(jsonObj, true);
                case "GOLDENGATE":
                    return model.GoldenGateConnection.getDeserializedJsonObj(jsonObj, true);
                case "MYSQL":
                    return model.MysqlConnection.getDeserializedJsonObj(jsonObj, true);
                case "GOOGLE_BIGQUERY":
                    return model.GoogleBigQueryConnection.getDeserializedJsonObj(jsonObj, true);
                case "ORACLE":
                    return model.OracleConnection.getDeserializedJsonObj(jsonObj, true);
                case "AZURE_DATA_LAKE_STORAGE":
                    return model.AzureDataLakeStorageConnection.getDeserializedJsonObj(jsonObj, true);
                case "GOOGLE_CLOUD_STORAGE":
                    return model.GoogleCloudStorageConnection.getDeserializedJsonObj(jsonObj, true);
                case "KAFKA_SCHEMA_REGISTRY":
                    return model.KafkaSchemaRegistryConnection.getDeserializedJsonObj(jsonObj, true);
                case "AMAZON_KINESIS":
                    return model.AmazonKinesisConnection.getDeserializedJsonObj(jsonObj, true);
                case "ORACLE_NOSQL":
                    return model.OracleNosqlConnection.getDeserializedJsonObj(jsonObj, true);
                case "REDIS":
                    return model.RedisConnection.getDeserializedJsonObj(jsonObj, true);
                case "GOOGLE_PUBSUB":
                    return model.GooglePubSubConnection.getDeserializedJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.connectionType}`);
            }
        }
        return jsonObj;
    }
    Connection.getDeserializedJsonObj = getDeserializedJsonObj;
})(Connection = exports.Connection || (exports.Connection = {}));
//# sourceMappingURL=connection.js.map