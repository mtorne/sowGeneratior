"use strict";
/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionSummary = void 0;
const model = __importStar(require("../model"));
const common = require("oci-common");
var ConnectionSummary;
(function (ConnectionSummary) {
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "ingressIps": obj.ingressIps
                ? obj.ingressIps.map(item => {
                    return model.IngressIpDetails.getJsonObj(item);
                })
                : undefined,
            "locks": obj.locks
                ? obj.locks.map(item => {
                    return model.ResourceLock.getJsonObj(item);
                })
                : undefined
        });
        if (obj && "connectionType" in obj && obj.connectionType) {
            switch (obj.connectionType) {
                case "MICROSOFT_FABRIC":
                    return model.MicrosoftFabricConnectionSummary.getJsonObj(jsonObj, true);
                case "KAFKA_SCHEMA_REGISTRY":
                    return model.KafkaSchemaRegistryConnectionSummary.getJsonObj(jsonObj, true);
                case "MICROSOFT_SQLSERVER":
                    return model.MicrosoftSqlserverConnectionSummary.getJsonObj(jsonObj, true);
                case "ORACLE_NOSQL":
                    return model.OracleNosqlConnectionSummary.getJsonObj(jsonObj, true);
                case "ORACLE":
                    return model.OracleConnectionSummary.getJsonObj(jsonObj, true);
                case "OCI_OBJECT_STORAGE":
                    return model.OciObjectStorageConnectionSummary.getJsonObj(jsonObj, true);
                case "AZURE_SYNAPSE_ANALYTICS":
                    return model.AzureSynapseConnectionSummary.getJsonObj(jsonObj, true);
                case "MONGODB":
                    return model.MongoDbConnectionSummary.getJsonObj(jsonObj, true);
                case "AMAZON_S3":
                    return model.AmazonS3ConnectionSummary.getJsonObj(jsonObj, true);
                case "MYSQL":
                    return model.MysqlConnectionSummary.getJsonObj(jsonObj, true);
                case "ELASTICSEARCH":
                    return model.ElasticsearchConnectionSummary.getJsonObj(jsonObj, true);
                case "GOOGLE_PUBSUB":
                    return model.GooglePubSubConnectionSummary.getJsonObj(jsonObj, true);
                case "GOOGLE_CLOUD_STORAGE":
                    return model.GoogleCloudStorageConnectionSummary.getJsonObj(jsonObj, true);
                case "GOLDENGATE":
                    return model.GoldenGateConnectionSummary.getJsonObj(jsonObj, true);
                case "JAVA_MESSAGE_SERVICE":
                    return model.JavaMessageServiceConnectionSummary.getJsonObj(jsonObj, true);
                case "SNOWFLAKE":
                    return model.SnowflakeConnectionSummary.getJsonObj(jsonObj, true);
                case "AMAZON_KINESIS":
                    return model.AmazonKinesisConnectionSummary.getJsonObj(jsonObj, true);
                case "REDIS":
                    return model.RedisConnectionSummary.getJsonObj(jsonObj, true);
                case "AZURE_DATA_LAKE_STORAGE":
                    return model.AzureDataLakeStorageConnectionSummary.getJsonObj(jsonObj, true);
                case "GOOGLE_BIGQUERY":
                    return model.GoogleBigQueryConnectionSummary.getJsonObj(jsonObj, true);
                case "ICEBERG":
                    return model.IcebergConnectionSummary.getJsonObj(jsonObj, true);
                case "POSTGRESQL":
                    return model.PostgresqlConnectionSummary.getJsonObj(jsonObj, true);
                case "GENERIC":
                    return model.GenericConnectionSummary.getJsonObj(jsonObj, true);
                case "KAFKA":
                    return model.KafkaConnectionSummary.getJsonObj(jsonObj, true);
                case "DB2":
                    return model.Db2ConnectionSummary.getJsonObj(jsonObj, true);
                case "AMAZON_REDSHIFT":
                    return model.AmazonRedshiftConnectionSummary.getJsonObj(jsonObj, true);
                case "DATABRICKS":
                    return model.DatabricksConnectionSummary.getJsonObj(jsonObj, true);
                case "HDFS":
                    return model.HdfsConnectionSummary.getJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.connectionType}`);
            }
        }
        return jsonObj;
    }
    ConnectionSummary.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "ingressIps": obj.ingressIps
                ? obj.ingressIps.map(item => {
                    return model.IngressIpDetails.getDeserializedJsonObj(item);
                })
                : undefined,
            "locks": obj.locks
                ? obj.locks.map(item => {
                    return model.ResourceLock.getDeserializedJsonObj(item);
                })
                : undefined
        });
        if (obj && "connectionType" in obj && obj.connectionType) {
            switch (obj.connectionType) {
                case "MICROSOFT_FABRIC":
                    return model.MicrosoftFabricConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "KAFKA_SCHEMA_REGISTRY":
                    return model.KafkaSchemaRegistryConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "MICROSOFT_SQLSERVER":
                    return model.MicrosoftSqlserverConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "ORACLE_NOSQL":
                    return model.OracleNosqlConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "ORACLE":
                    return model.OracleConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "OCI_OBJECT_STORAGE":
                    return model.OciObjectStorageConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "AZURE_SYNAPSE_ANALYTICS":
                    return model.AzureSynapseConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "MONGODB":
                    return model.MongoDbConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "AMAZON_S3":
                    return model.AmazonS3ConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "MYSQL":
                    return model.MysqlConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "ELASTICSEARCH":
                    return model.ElasticsearchConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "GOOGLE_PUBSUB":
                    return model.GooglePubSubConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "GOOGLE_CLOUD_STORAGE":
                    return model.GoogleCloudStorageConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "GOLDENGATE":
                    return model.GoldenGateConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "JAVA_MESSAGE_SERVICE":
                    return model.JavaMessageServiceConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "SNOWFLAKE":
                    return model.SnowflakeConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "AMAZON_KINESIS":
                    return model.AmazonKinesisConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "REDIS":
                    return model.RedisConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "AZURE_DATA_LAKE_STORAGE":
                    return model.AzureDataLakeStorageConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "GOOGLE_BIGQUERY":
                    return model.GoogleBigQueryConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "ICEBERG":
                    return model.IcebergConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "POSTGRESQL":
                    return model.PostgresqlConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "GENERIC":
                    return model.GenericConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "KAFKA":
                    return model.KafkaConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "DB2":
                    return model.Db2ConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "AMAZON_REDSHIFT":
                    return model.AmazonRedshiftConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "DATABRICKS":
                    return model.DatabricksConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                case "HDFS":
                    return model.HdfsConnectionSummary.getDeserializedJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.connectionType}`);
            }
        }
        return jsonObj;
    }
    ConnectionSummary.getDeserializedJsonObj = getDeserializedJsonObj;
})(ConnectionSummary = exports.ConnectionSummary || (exports.ConnectionSummary = {}));
//# sourceMappingURL=connection-summary.js.map