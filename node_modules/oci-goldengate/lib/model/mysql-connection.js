"use strict";
/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MysqlConnection = void 0;
const model = __importStar(require("../model"));
var MysqlConnection;
(function (MysqlConnection) {
    let TechnologyType;
    (function (TechnologyType) {
        TechnologyType["AmazonAuroraMysql"] = "AMAZON_AURORA_MYSQL";
        TechnologyType["AmazonRdsMariadb"] = "AMAZON_RDS_MARIADB";
        TechnologyType["AmazonRdsMysql"] = "AMAZON_RDS_MYSQL";
        TechnologyType["AzureMysql"] = "AZURE_MYSQL";
        TechnologyType["GoogleCloudSqlMysql"] = "GOOGLE_CLOUD_SQL_MYSQL";
        TechnologyType["Mariadb"] = "MARIADB";
        TechnologyType["MysqlHeatwaveOnAzure"] = "MYSQL_HEATWAVE_ON_AZURE";
        TechnologyType["MysqlHeatwaveOnAws"] = "MYSQL_HEATWAVE_ON_AWS";
        TechnologyType["MysqlServer"] = "MYSQL_SERVER";
        TechnologyType["OciMysql"] = "OCI_MYSQL";
        TechnologyType["Singlestoredb"] = "SINGLESTOREDB";
        TechnologyType["SinglestoredbCloud"] = "SINGLESTOREDB_CLOUD";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        TechnologyType["UnknownValue"] = "UNKNOWN_VALUE";
    })(TechnologyType = MysqlConnection.TechnologyType || (MysqlConnection.TechnologyType = {}));
    let SecurityProtocol;
    (function (SecurityProtocol) {
        SecurityProtocol["Plain"] = "PLAIN";
        SecurityProtocol["Tls"] = "TLS";
        SecurityProtocol["Mtls"] = "MTLS";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        SecurityProtocol["UnknownValue"] = "UNKNOWN_VALUE";
    })(SecurityProtocol = MysqlConnection.SecurityProtocol || (MysqlConnection.SecurityProtocol = {}));
    let SslMode;
    (function (SslMode) {
        SslMode["Disabled"] = "DISABLED";
        SslMode["Preferred"] = "PREFERRED";
        SslMode["Required"] = "REQUIRED";
        SslMode["VerifyCa"] = "VERIFY_CA";
        SslMode["VerifyIdentity"] = "VERIFY_IDENTITY";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        SslMode["UnknownValue"] = "UNKNOWN_VALUE";
    })(SslMode = MysqlConnection.SslMode || (MysqlConnection.SslMode = {}));
    function getJsonObj(obj, isParentJsonObj) {
        const jsonObj = Object.assign(Object.assign({}, (isParentJsonObj ? obj : model.Connection.getJsonObj(obj))), {
            "additionalAttributes": obj.additionalAttributes
                ? obj.additionalAttributes.map(item => {
                    return model.NameValuePair.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    MysqlConnection.getJsonObj = getJsonObj;
    MysqlConnection.connectionType = "MYSQL";
    function getDeserializedJsonObj(obj, isParentJsonObj) {
        const jsonObj = Object.assign(Object.assign({}, (isParentJsonObj
            ? obj
            : model.Connection.getDeserializedJsonObj(obj))), {
            "additionalAttributes": obj.additionalAttributes
                ? obj.additionalAttributes.map(item => {
                    return model.NameValuePair.getDeserializedJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    MysqlConnection.getDeserializedJsonObj = getDeserializedJsonObj;
})(MysqlConnection = exports.MysqlConnection || (exports.MysqlConnection = {}));
//# sourceMappingURL=mysql-connection.js.map