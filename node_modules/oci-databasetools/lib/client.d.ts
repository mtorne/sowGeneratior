/**
 * Database Tools
 * Use the Database Tools API to manage connections, private endpoints, and work requests in the Database Tools service.
 * OpenAPI spec version: 20201005
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { DatabaseToolsWaiter } from "./databasetools-waiter";
declare const Breaker: any;
export declare enum DatabaseToolsApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DatabaseToolsClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DatabaseToolsWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DatabaseToolsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DatabaseToolsWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DatabaseToolsWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Adds a lock to a DatabaseToolsConnection resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddDatabaseToolsConnectionLockRequest
     * @return AddDatabaseToolsConnectionLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/AddDatabaseToolsConnectionLock.ts.html |here} to see how to use AddDatabaseToolsConnectionLock API.
     */
    addDatabaseToolsConnectionLock(addDatabaseToolsConnectionLockRequest: requests.AddDatabaseToolsConnectionLockRequest): Promise<responses.AddDatabaseToolsConnectionLockResponse>;
    /**
     * Adds a lock to a DatabaseToolsPrivateEndpoint resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddDatabaseToolsPrivateEndpointLockRequest
     * @return AddDatabaseToolsPrivateEndpointLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/AddDatabaseToolsPrivateEndpointLock.ts.html |here} to see how to use AddDatabaseToolsPrivateEndpointLock API.
     */
    addDatabaseToolsPrivateEndpointLock(addDatabaseToolsPrivateEndpointLockRequest: requests.AddDatabaseToolsPrivateEndpointLockRequest): Promise<responses.AddDatabaseToolsPrivateEndpointLockResponse>;
    /**
     * Moves the specified Database Tools connection to a different compartment in the same tenancy.
     * For information about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeDatabaseToolsConnectionCompartmentRequest
     * @return ChangeDatabaseToolsConnectionCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ChangeDatabaseToolsConnectionCompartment.ts.html |here} to see how to use ChangeDatabaseToolsConnectionCompartment API.
     */
    changeDatabaseToolsConnectionCompartment(changeDatabaseToolsConnectionCompartmentRequest: requests.ChangeDatabaseToolsConnectionCompartmentRequest): Promise<responses.ChangeDatabaseToolsConnectionCompartmentResponse>;
    /**
     * Moves a Database Tools private endpoint into a different compartment in the same tenancy.
     * For information about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeDatabaseToolsPrivateEndpointCompartmentRequest
     * @return ChangeDatabaseToolsPrivateEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ChangeDatabaseToolsPrivateEndpointCompartment.ts.html |here} to see how to use ChangeDatabaseToolsPrivateEndpointCompartment API.
     */
    changeDatabaseToolsPrivateEndpointCompartment(changeDatabaseToolsPrivateEndpointCompartmentRequest: requests.ChangeDatabaseToolsPrivateEndpointCompartmentRequest): Promise<responses.ChangeDatabaseToolsPrivateEndpointCompartmentResponse>;
    /**
     * Creates a new Database Tools connection.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDatabaseToolsConnectionRequest
     * @return CreateDatabaseToolsConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/CreateDatabaseToolsConnection.ts.html |here} to see how to use CreateDatabaseToolsConnection API.
     */
    createDatabaseToolsConnection(createDatabaseToolsConnectionRequest: requests.CreateDatabaseToolsConnectionRequest): Promise<responses.CreateDatabaseToolsConnectionResponse>;
    /**
     * Creates a new Database Tools private endpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDatabaseToolsPrivateEndpointRequest
     * @return CreateDatabaseToolsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/CreateDatabaseToolsPrivateEndpoint.ts.html |here} to see how to use CreateDatabaseToolsPrivateEndpoint API.
     */
    createDatabaseToolsPrivateEndpoint(createDatabaseToolsPrivateEndpointRequest: requests.CreateDatabaseToolsPrivateEndpointRequest): Promise<responses.CreateDatabaseToolsPrivateEndpointResponse>;
    /**
     * Deletes the specified Database Tools connection resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDatabaseToolsConnectionRequest
     * @return DeleteDatabaseToolsConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/DeleteDatabaseToolsConnection.ts.html |here} to see how to use DeleteDatabaseToolsConnection API.
     */
    deleteDatabaseToolsConnection(deleteDatabaseToolsConnectionRequest: requests.DeleteDatabaseToolsConnectionRequest): Promise<responses.DeleteDatabaseToolsConnectionResponse>;
    /**
     * Deletes the specified Database Tools private endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDatabaseToolsPrivateEndpointRequest
     * @return DeleteDatabaseToolsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/DeleteDatabaseToolsPrivateEndpoint.ts.html |here} to see how to use DeleteDatabaseToolsPrivateEndpoint API.
     */
    deleteDatabaseToolsPrivateEndpoint(deleteDatabaseToolsPrivateEndpointRequest: requests.DeleteDatabaseToolsPrivateEndpointRequest): Promise<responses.DeleteDatabaseToolsPrivateEndpointResponse>;
    /**
     * Gets details of the specified Database Tools connection.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDatabaseToolsConnectionRequest
     * @return GetDatabaseToolsConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/GetDatabaseToolsConnection.ts.html |here} to see how to use GetDatabaseToolsConnection API.
     */
    getDatabaseToolsConnection(getDatabaseToolsConnectionRequest: requests.GetDatabaseToolsConnectionRequest): Promise<responses.GetDatabaseToolsConnectionResponse>;
    /**
     * Gets details for the specified Database Tools endpoint service.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDatabaseToolsEndpointServiceRequest
     * @return GetDatabaseToolsEndpointServiceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/GetDatabaseToolsEndpointService.ts.html |here} to see how to use GetDatabaseToolsEndpointService API.
     */
    getDatabaseToolsEndpointService(getDatabaseToolsEndpointServiceRequest: requests.GetDatabaseToolsEndpointServiceRequest): Promise<responses.GetDatabaseToolsEndpointServiceResponse>;
    /**
     * Gets details of a specified Database Tools private endpoint.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDatabaseToolsPrivateEndpointRequest
     * @return GetDatabaseToolsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/GetDatabaseToolsPrivateEndpoint.ts.html |here} to see how to use GetDatabaseToolsPrivateEndpoint API.
     */
    getDatabaseToolsPrivateEndpoint(getDatabaseToolsPrivateEndpointRequest: requests.GetDatabaseToolsPrivateEndpointRequest): Promise<responses.GetDatabaseToolsPrivateEndpointResponse>;
    /**
     * Gets the status of the specified work request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Returns a list of Database Tools connections.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDatabaseToolsConnectionsRequest
     * @return ListDatabaseToolsConnectionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListDatabaseToolsConnections.ts.html |here} to see how to use ListDatabaseToolsConnections API.
     */
    listDatabaseToolsConnections(listDatabaseToolsConnectionsRequest: requests.ListDatabaseToolsConnectionsRequest): Promise<responses.ListDatabaseToolsConnectionsResponse>;
    /**
     * Returns a list of Database Tools endpoint services.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDatabaseToolsEndpointServicesRequest
     * @return ListDatabaseToolsEndpointServicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListDatabaseToolsEndpointServices.ts.html |here} to see how to use ListDatabaseToolsEndpointServices API.
     */
    listDatabaseToolsEndpointServices(listDatabaseToolsEndpointServicesRequest: requests.ListDatabaseToolsEndpointServicesRequest): Promise<responses.ListDatabaseToolsEndpointServicesResponse>;
    /**
     * Returns a list of Database Tools private endpoints.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDatabaseToolsPrivateEndpointsRequest
     * @return ListDatabaseToolsPrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListDatabaseToolsPrivateEndpoints.ts.html |here} to see how to use ListDatabaseToolsPrivateEndpoints API.
     */
    listDatabaseToolsPrivateEndpoints(listDatabaseToolsPrivateEndpointsRequest: requests.ListDatabaseToolsPrivateEndpointsRequest): Promise<responses.ListDatabaseToolsPrivateEndpointsResponse>;
    /**
     * Returns a paginated list of errors for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Returns a paginated list of logs for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * Removes a lock from a DatabaseToolsConnection resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveDatabaseToolsConnectionLockRequest
     * @return RemoveDatabaseToolsConnectionLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/RemoveDatabaseToolsConnectionLock.ts.html |here} to see how to use RemoveDatabaseToolsConnectionLock API.
     */
    removeDatabaseToolsConnectionLock(removeDatabaseToolsConnectionLockRequest: requests.RemoveDatabaseToolsConnectionLockRequest): Promise<responses.RemoveDatabaseToolsConnectionLockResponse>;
    /**
     * Removes a lock from a DatabaseToolsPrivateEndpoint resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveDatabaseToolsPrivateEndpointLockRequest
     * @return RemoveDatabaseToolsPrivateEndpointLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/RemoveDatabaseToolsPrivateEndpointLock.ts.html |here} to see how to use RemoveDatabaseToolsPrivateEndpointLock API.
     */
    removeDatabaseToolsPrivateEndpointLock(removeDatabaseToolsPrivateEndpointLockRequest: requests.RemoveDatabaseToolsPrivateEndpointLockRequest): Promise<responses.RemoveDatabaseToolsPrivateEndpointLockResponse>;
    /**
     * Updates the specified Database Tools connection.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDatabaseToolsConnectionRequest
     * @return UpdateDatabaseToolsConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/UpdateDatabaseToolsConnection.ts.html |here} to see how to use UpdateDatabaseToolsConnection API.
     */
    updateDatabaseToolsConnection(updateDatabaseToolsConnectionRequest: requests.UpdateDatabaseToolsConnectionRequest): Promise<responses.UpdateDatabaseToolsConnectionResponse>;
    /**
     * Updates the specified Database Tools private endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDatabaseToolsPrivateEndpointRequest
     * @return UpdateDatabaseToolsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/UpdateDatabaseToolsPrivateEndpoint.ts.html |here} to see how to use UpdateDatabaseToolsPrivateEndpoint API.
     */
    updateDatabaseToolsPrivateEndpoint(updateDatabaseToolsPrivateEndpointRequest: requests.UpdateDatabaseToolsPrivateEndpointRequest): Promise<responses.UpdateDatabaseToolsPrivateEndpointResponse>;
    /**
     * Validates the Database Tools connection details by establishing a connection to the database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ValidateDatabaseToolsConnectionRequest
     * @return ValidateDatabaseToolsConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ValidateDatabaseToolsConnection.ts.html |here} to see how to use ValidateDatabaseToolsConnection API.
     */
    validateDatabaseToolsConnection(validateDatabaseToolsConnectionRequest: requests.ValidateDatabaseToolsConnectionRequest): Promise<responses.ValidateDatabaseToolsConnectionResponse>;
}
export {};
