"use strict";
/**
 * Database Tools
 * Use the Database Tools API to manage connections, private endpoints, and work requests in the Database Tools service.
 * OpenAPI spec version: 20201005
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseToolsClient = exports.DatabaseToolsApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const databasetools_waiter_1 = require("./databasetools-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var DatabaseToolsApiKeys;
(function (DatabaseToolsApiKeys) {
})(DatabaseToolsApiKeys = exports.DatabaseToolsApiKeys || (exports.DatabaseToolsApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class DatabaseToolsClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "DatabaseTools";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("databasetools")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("databasetools");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20201005";
        if (this.logger)
            this.logger.info(`DatabaseToolsClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DatabaseToolsClient.serviceEndpointTemplate, this._region, DatabaseToolsClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DatabaseToolsClient.serviceEndpointTemplate, this._regionId, DatabaseToolsClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DatabaseToolsClient.serviceEndpointTemplate, region, DatabaseToolsClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DatabaseToolsClient.serviceEndpointTemplate, regionId, DatabaseToolsClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new DatabaseToolsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new databasetools_waiter_1.DatabaseToolsWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Adds a lock to a DatabaseToolsConnection resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddDatabaseToolsConnectionLockRequest
     * @return AddDatabaseToolsConnectionLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/AddDatabaseToolsConnectionLock.ts.html |here} to see how to use AddDatabaseToolsConnectionLock API.
     */
    addDatabaseToolsConnectionLock(addDatabaseToolsConnectionLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#addDatabaseToolsConnectionLock.");
            const operationName = "addDatabaseToolsConnectionLock";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsConnection/AddDatabaseToolsConnectionLock";
            const pathParams = {
                "{databaseToolsConnectionId}": addDatabaseToolsConnectionLockRequest.databaseToolsConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addDatabaseToolsConnectionLockRequest.opcRequestId,
                "if-match": addDatabaseToolsConnectionLockRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addDatabaseToolsConnectionLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsConnections/{databaseToolsConnectionId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addDatabaseToolsConnectionLockRequest.addResourceLockDetails, "AddResourceLockDetails", model.AddResourceLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsConnection",
                    bodyModel: model.DatabaseToolsConnection,
                    type: "model.DatabaseToolsConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds a lock to a DatabaseToolsPrivateEndpoint resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddDatabaseToolsPrivateEndpointLockRequest
     * @return AddDatabaseToolsPrivateEndpointLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/AddDatabaseToolsPrivateEndpointLock.ts.html |here} to see how to use AddDatabaseToolsPrivateEndpointLock API.
     */
    addDatabaseToolsPrivateEndpointLock(addDatabaseToolsPrivateEndpointLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#addDatabaseToolsPrivateEndpointLock.");
            const operationName = "addDatabaseToolsPrivateEndpointLock";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsPrivateEndpoint/AddDatabaseToolsPrivateEndpointLock";
            const pathParams = {
                "{databaseToolsPrivateEndpointId}": addDatabaseToolsPrivateEndpointLockRequest.databaseToolsPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addDatabaseToolsPrivateEndpointLockRequest.opcRequestId,
                "if-match": addDatabaseToolsPrivateEndpointLockRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addDatabaseToolsPrivateEndpointLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsPrivateEndpoints/{databaseToolsPrivateEndpointId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addDatabaseToolsPrivateEndpointLockRequest.addResourceLockDetails, "AddResourceLockDetails", model.AddResourceLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsPrivateEndpoint",
                    bodyModel: model.DatabaseToolsPrivateEndpoint,
                    type: "model.DatabaseToolsPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified Database Tools connection to a different compartment in the same tenancy.
     * For information about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeDatabaseToolsConnectionCompartmentRequest
     * @return ChangeDatabaseToolsConnectionCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ChangeDatabaseToolsConnectionCompartment.ts.html |here} to see how to use ChangeDatabaseToolsConnectionCompartment API.
     */
    changeDatabaseToolsConnectionCompartment(changeDatabaseToolsConnectionCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#changeDatabaseToolsConnectionCompartment.");
            const operationName = "changeDatabaseToolsConnectionCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsConnection/ChangeDatabaseToolsConnectionCompartment";
            const pathParams = {
                "{databaseToolsConnectionId}": changeDatabaseToolsConnectionCompartmentRequest.databaseToolsConnectionId
            };
            const queryParams = {
                "isLockOverride": changeDatabaseToolsConnectionCompartmentRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeDatabaseToolsConnectionCompartmentRequest.ifMatch,
                "opc-request-id": changeDatabaseToolsConnectionCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeDatabaseToolsConnectionCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsConnections/{databaseToolsConnectionId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDatabaseToolsConnectionCompartmentRequest.changeDatabaseToolsConnectionCompartmentDetails, "ChangeDatabaseToolsConnectionCompartmentDetails", model.ChangeDatabaseToolsConnectionCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a Database Tools private endpoint into a different compartment in the same tenancy.
     * For information about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeDatabaseToolsPrivateEndpointCompartmentRequest
     * @return ChangeDatabaseToolsPrivateEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ChangeDatabaseToolsPrivateEndpointCompartment.ts.html |here} to see how to use ChangeDatabaseToolsPrivateEndpointCompartment API.
     */
    changeDatabaseToolsPrivateEndpointCompartment(changeDatabaseToolsPrivateEndpointCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#changeDatabaseToolsPrivateEndpointCompartment.");
            const operationName = "changeDatabaseToolsPrivateEndpointCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsPrivateEndpoint/ChangeDatabaseToolsPrivateEndpointCompartment";
            const pathParams = {
                "{databaseToolsPrivateEndpointId}": changeDatabaseToolsPrivateEndpointCompartmentRequest.databaseToolsPrivateEndpointId
            };
            const queryParams = {
                "isLockOverride": changeDatabaseToolsPrivateEndpointCompartmentRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeDatabaseToolsPrivateEndpointCompartmentRequest.ifMatch,
                "opc-request-id": changeDatabaseToolsPrivateEndpointCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeDatabaseToolsPrivateEndpointCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsPrivateEndpoints/{databaseToolsPrivateEndpointId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDatabaseToolsPrivateEndpointCompartmentRequest.changeDatabaseToolsPrivateEndpointCompartmentDetails, "ChangeDatabaseToolsPrivateEndpointCompartmentDetails", model.ChangeDatabaseToolsPrivateEndpointCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Database Tools connection.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDatabaseToolsConnectionRequest
     * @return CreateDatabaseToolsConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/CreateDatabaseToolsConnection.ts.html |here} to see how to use CreateDatabaseToolsConnection API.
     */
    createDatabaseToolsConnection(createDatabaseToolsConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#createDatabaseToolsConnection.");
            const operationName = "createDatabaseToolsConnection";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDatabaseToolsConnectionRequest.opcRetryToken,
                "opc-request-id": createDatabaseToolsConnectionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDatabaseToolsConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsConnections",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDatabaseToolsConnectionRequest.createDatabaseToolsConnectionDetails, "CreateDatabaseToolsConnectionDetails", model.CreateDatabaseToolsConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsConnection",
                    bodyModel: model.DatabaseToolsConnection,
                    type: "model.DatabaseToolsConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Database Tools private endpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDatabaseToolsPrivateEndpointRequest
     * @return CreateDatabaseToolsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/CreateDatabaseToolsPrivateEndpoint.ts.html |here} to see how to use CreateDatabaseToolsPrivateEndpoint API.
     */
    createDatabaseToolsPrivateEndpoint(createDatabaseToolsPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#createDatabaseToolsPrivateEndpoint.");
            const operationName = "createDatabaseToolsPrivateEndpoint";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDatabaseToolsPrivateEndpointRequest.opcRetryToken,
                "opc-request-id": createDatabaseToolsPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDatabaseToolsPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsPrivateEndpoints",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDatabaseToolsPrivateEndpointRequest.createDatabaseToolsPrivateEndpointDetails, "CreateDatabaseToolsPrivateEndpointDetails", model.CreateDatabaseToolsPrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsPrivateEndpoint",
                    bodyModel: model.DatabaseToolsPrivateEndpoint,
                    type: "model.DatabaseToolsPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified Database Tools connection resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDatabaseToolsConnectionRequest
     * @return DeleteDatabaseToolsConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/DeleteDatabaseToolsConnection.ts.html |here} to see how to use DeleteDatabaseToolsConnection API.
     */
    deleteDatabaseToolsConnection(deleteDatabaseToolsConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#deleteDatabaseToolsConnection.");
            const operationName = "deleteDatabaseToolsConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsConnection/DeleteDatabaseToolsConnection";
            const pathParams = {
                "{databaseToolsConnectionId}": deleteDatabaseToolsConnectionRequest.databaseToolsConnectionId
            };
            const queryParams = {
                "isLockOverride": deleteDatabaseToolsConnectionRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDatabaseToolsConnectionRequest.ifMatch,
                "opc-request-id": deleteDatabaseToolsConnectionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDatabaseToolsConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsConnections/{databaseToolsConnectionId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified Database Tools private endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDatabaseToolsPrivateEndpointRequest
     * @return DeleteDatabaseToolsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/DeleteDatabaseToolsPrivateEndpoint.ts.html |here} to see how to use DeleteDatabaseToolsPrivateEndpoint API.
     */
    deleteDatabaseToolsPrivateEndpoint(deleteDatabaseToolsPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#deleteDatabaseToolsPrivateEndpoint.");
            const operationName = "deleteDatabaseToolsPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsPrivateEndpoint/DeleteDatabaseToolsPrivateEndpoint";
            const pathParams = {
                "{databaseToolsPrivateEndpointId}": deleteDatabaseToolsPrivateEndpointRequest.databaseToolsPrivateEndpointId
            };
            const queryParams = {
                "isLockOverride": deleteDatabaseToolsPrivateEndpointRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDatabaseToolsPrivateEndpointRequest.ifMatch,
                "opc-request-id": deleteDatabaseToolsPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDatabaseToolsPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsPrivateEndpoints/{databaseToolsPrivateEndpointId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of the specified Database Tools connection.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDatabaseToolsConnectionRequest
     * @return GetDatabaseToolsConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/GetDatabaseToolsConnection.ts.html |here} to see how to use GetDatabaseToolsConnection API.
     */
    getDatabaseToolsConnection(getDatabaseToolsConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#getDatabaseToolsConnection.");
            const operationName = "getDatabaseToolsConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsConnection/GetDatabaseToolsConnection";
            const pathParams = {
                "{databaseToolsConnectionId}": getDatabaseToolsConnectionRequest.databaseToolsConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDatabaseToolsConnectionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDatabaseToolsConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsConnections/{databaseToolsConnectionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsConnection",
                    bodyModel: model.DatabaseToolsConnection,
                    type: "model.DatabaseToolsConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details for the specified Database Tools endpoint service.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDatabaseToolsEndpointServiceRequest
     * @return GetDatabaseToolsEndpointServiceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/GetDatabaseToolsEndpointService.ts.html |here} to see how to use GetDatabaseToolsEndpointService API.
     */
    getDatabaseToolsEndpointService(getDatabaseToolsEndpointServiceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#getDatabaseToolsEndpointService.");
            const operationName = "getDatabaseToolsEndpointService";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsEndpointService/GetDatabaseToolsEndpointService";
            const pathParams = {
                "{databaseToolsEndpointServiceId}": getDatabaseToolsEndpointServiceRequest.databaseToolsEndpointServiceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDatabaseToolsEndpointServiceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDatabaseToolsEndpointServiceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsEndpointServices/{databaseToolsEndpointServiceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsEndpointService",
                    bodyModel: model.DatabaseToolsEndpointService,
                    type: "model.DatabaseToolsEndpointService",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of a specified Database Tools private endpoint.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDatabaseToolsPrivateEndpointRequest
     * @return GetDatabaseToolsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/GetDatabaseToolsPrivateEndpoint.ts.html |here} to see how to use GetDatabaseToolsPrivateEndpoint API.
     */
    getDatabaseToolsPrivateEndpoint(getDatabaseToolsPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#getDatabaseToolsPrivateEndpoint.");
            const operationName = "getDatabaseToolsPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsPrivateEndpoint/GetDatabaseToolsPrivateEndpoint";
            const pathParams = {
                "{databaseToolsPrivateEndpointId}": getDatabaseToolsPrivateEndpointRequest.databaseToolsPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDatabaseToolsPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDatabaseToolsPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsPrivateEndpoints/{databaseToolsPrivateEndpointId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsPrivateEndpoint",
                    bodyModel: model.DatabaseToolsPrivateEndpoint,
                    type: "model.DatabaseToolsPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the specified work request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/WorkRequest/GetWorkRequest";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Database Tools connections.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDatabaseToolsConnectionsRequest
     * @return ListDatabaseToolsConnectionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListDatabaseToolsConnections.ts.html |here} to see how to use ListDatabaseToolsConnections API.
     */
    listDatabaseToolsConnections(listDatabaseToolsConnectionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#listDatabaseToolsConnections.");
            const operationName = "listDatabaseToolsConnections";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsConnection/ListDatabaseToolsConnections";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDatabaseToolsConnectionsRequest.compartmentId,
                "lifecycleState": listDatabaseToolsConnectionsRequest.lifecycleState,
                "displayName": listDatabaseToolsConnectionsRequest.displayName,
                "type": listDatabaseToolsConnectionsRequest.type,
                "runtimeSupport": listDatabaseToolsConnectionsRequest.runtimeSupport,
                "relatedResourceIdentifier": listDatabaseToolsConnectionsRequest.relatedResourceIdentifier,
                "limit": listDatabaseToolsConnectionsRequest.limit,
                "page": listDatabaseToolsConnectionsRequest.page,
                "sortOrder": listDatabaseToolsConnectionsRequest.sortOrder,
                "sortBy": listDatabaseToolsConnectionsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDatabaseToolsConnectionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDatabaseToolsConnectionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsConnections",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsConnectionCollection",
                    bodyModel: model.DatabaseToolsConnectionCollection,
                    type: "model.DatabaseToolsConnectionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Database Tools endpoint services.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDatabaseToolsEndpointServicesRequest
     * @return ListDatabaseToolsEndpointServicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListDatabaseToolsEndpointServices.ts.html |here} to see how to use ListDatabaseToolsEndpointServices API.
     */
    listDatabaseToolsEndpointServices(listDatabaseToolsEndpointServicesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#listDatabaseToolsEndpointServices.");
            const operationName = "listDatabaseToolsEndpointServices";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsEndpointService/ListDatabaseToolsEndpointServices";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDatabaseToolsEndpointServicesRequest.compartmentId,
                "limit": listDatabaseToolsEndpointServicesRequest.limit,
                "page": listDatabaseToolsEndpointServicesRequest.page,
                "sortOrder": listDatabaseToolsEndpointServicesRequest.sortOrder,
                "sortBy": listDatabaseToolsEndpointServicesRequest.sortBy,
                "lifecycleState": listDatabaseToolsEndpointServicesRequest.lifecycleState,
                "displayName": listDatabaseToolsEndpointServicesRequest.displayName,
                "name": listDatabaseToolsEndpointServicesRequest.name
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDatabaseToolsEndpointServicesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDatabaseToolsEndpointServicesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsEndpointServices",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsEndpointServiceCollection",
                    bodyModel: model.DatabaseToolsEndpointServiceCollection,
                    type: "model.DatabaseToolsEndpointServiceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Database Tools private endpoints.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDatabaseToolsPrivateEndpointsRequest
     * @return ListDatabaseToolsPrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListDatabaseToolsPrivateEndpoints.ts.html |here} to see how to use ListDatabaseToolsPrivateEndpoints API.
     */
    listDatabaseToolsPrivateEndpoints(listDatabaseToolsPrivateEndpointsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#listDatabaseToolsPrivateEndpoints.");
            const operationName = "listDatabaseToolsPrivateEndpoints";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsPrivateEndpoint/ListDatabaseToolsPrivateEndpoints";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDatabaseToolsPrivateEndpointsRequest.compartmentId,
                "subnetId": listDatabaseToolsPrivateEndpointsRequest.subnetId,
                "limit": listDatabaseToolsPrivateEndpointsRequest.limit,
                "page": listDatabaseToolsPrivateEndpointsRequest.page,
                "sortOrder": listDatabaseToolsPrivateEndpointsRequest.sortOrder,
                "sortBy": listDatabaseToolsPrivateEndpointsRequest.sortBy,
                "endpointServiceId": listDatabaseToolsPrivateEndpointsRequest.endpointServiceId,
                "lifecycleState": listDatabaseToolsPrivateEndpointsRequest.lifecycleState,
                "displayName": listDatabaseToolsPrivateEndpointsRequest.displayName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDatabaseToolsPrivateEndpointsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDatabaseToolsPrivateEndpointsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsPrivateEndpoints",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsPrivateEndpointCollection",
                    bodyModel: model.DatabaseToolsPrivateEndpointCollection,
                    type: "model.DatabaseToolsPrivateEndpointCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a paginated list of errors for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/WorkRequestError/ListWorkRequestErrors";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "sortOrder": listWorkRequestErrorsRequest.sortOrder,
                "sortBy": listWorkRequestErrorsRequest.sortBy,
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: model.WorkRequestErrorCollection,
                    type: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a paginated list of logs for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/WorkRequestLogEntry/ListWorkRequestLogs";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "sortOrder": listWorkRequestLogsRequest.sortOrder,
                "sortBy": listWorkRequestLogsRequest.sortBy,
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestLogEntryCollection",
                    bodyModel: model.WorkRequestLogEntryCollection,
                    type: "model.WorkRequestLogEntryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/WorkRequest/ListWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "resourceIdentifier": listWorkRequestsRequest.resourceIdentifier,
                "sortOrder": listWorkRequestsRequest.sortOrder,
                "sortBy": listWorkRequestsRequest.sortBy,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestCollection",
                    bodyModel: model.WorkRequestCollection,
                    type: "model.WorkRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a lock from a DatabaseToolsConnection resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveDatabaseToolsConnectionLockRequest
     * @return RemoveDatabaseToolsConnectionLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/RemoveDatabaseToolsConnectionLock.ts.html |here} to see how to use RemoveDatabaseToolsConnectionLock API.
     */
    removeDatabaseToolsConnectionLock(removeDatabaseToolsConnectionLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#removeDatabaseToolsConnectionLock.");
            const operationName = "removeDatabaseToolsConnectionLock";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsConnection/RemoveDatabaseToolsConnectionLock";
            const pathParams = {
                "{databaseToolsConnectionId}": removeDatabaseToolsConnectionLockRequest.databaseToolsConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeDatabaseToolsConnectionLockRequest.opcRequestId,
                "if-match": removeDatabaseToolsConnectionLockRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeDatabaseToolsConnectionLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsConnections/{databaseToolsConnectionId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeDatabaseToolsConnectionLockRequest.removeResourceLockDetails, "RemoveResourceLockDetails", model.RemoveResourceLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsConnection",
                    bodyModel: model.DatabaseToolsConnection,
                    type: "model.DatabaseToolsConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a lock from a DatabaseToolsPrivateEndpoint resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveDatabaseToolsPrivateEndpointLockRequest
     * @return RemoveDatabaseToolsPrivateEndpointLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/RemoveDatabaseToolsPrivateEndpointLock.ts.html |here} to see how to use RemoveDatabaseToolsPrivateEndpointLock API.
     */
    removeDatabaseToolsPrivateEndpointLock(removeDatabaseToolsPrivateEndpointLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#removeDatabaseToolsPrivateEndpointLock.");
            const operationName = "removeDatabaseToolsPrivateEndpointLock";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsPrivateEndpoint/RemoveDatabaseToolsPrivateEndpointLock";
            const pathParams = {
                "{databaseToolsPrivateEndpointId}": removeDatabaseToolsPrivateEndpointLockRequest.databaseToolsPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeDatabaseToolsPrivateEndpointLockRequest.opcRequestId,
                "if-match": removeDatabaseToolsPrivateEndpointLockRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeDatabaseToolsPrivateEndpointLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsPrivateEndpoints/{databaseToolsPrivateEndpointId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeDatabaseToolsPrivateEndpointLockRequest.removeResourceLockDetails, "RemoveResourceLockDetails", model.RemoveResourceLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseToolsPrivateEndpoint",
                    bodyModel: model.DatabaseToolsPrivateEndpoint,
                    type: "model.DatabaseToolsPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified Database Tools connection.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDatabaseToolsConnectionRequest
     * @return UpdateDatabaseToolsConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/UpdateDatabaseToolsConnection.ts.html |here} to see how to use UpdateDatabaseToolsConnection API.
     */
    updateDatabaseToolsConnection(updateDatabaseToolsConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#updateDatabaseToolsConnection.");
            const operationName = "updateDatabaseToolsConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsConnection/UpdateDatabaseToolsConnection";
            const pathParams = {
                "{databaseToolsConnectionId}": updateDatabaseToolsConnectionRequest.databaseToolsConnectionId
            };
            const queryParams = {
                "isLockOverride": updateDatabaseToolsConnectionRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDatabaseToolsConnectionRequest.ifMatch,
                "opc-request-id": updateDatabaseToolsConnectionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDatabaseToolsConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsConnections/{databaseToolsConnectionId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDatabaseToolsConnectionRequest.updateDatabaseToolsConnectionDetails, "UpdateDatabaseToolsConnectionDetails", model.UpdateDatabaseToolsConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified Database Tools private endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDatabaseToolsPrivateEndpointRequest
     * @return UpdateDatabaseToolsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/UpdateDatabaseToolsPrivateEndpoint.ts.html |here} to see how to use UpdateDatabaseToolsPrivateEndpoint API.
     */
    updateDatabaseToolsPrivateEndpoint(updateDatabaseToolsPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#updateDatabaseToolsPrivateEndpoint.");
            const operationName = "updateDatabaseToolsPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsPrivateEndpoint/UpdateDatabaseToolsPrivateEndpoint";
            const pathParams = {
                "{databaseToolsPrivateEndpointId}": updateDatabaseToolsPrivateEndpointRequest.databaseToolsPrivateEndpointId
            };
            const queryParams = {
                "isLockOverride": updateDatabaseToolsPrivateEndpointRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDatabaseToolsPrivateEndpointRequest.ifMatch,
                "opc-request-id": updateDatabaseToolsPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDatabaseToolsPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsPrivateEndpoints/{databaseToolsPrivateEndpointId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDatabaseToolsPrivateEndpointRequest.updateDatabaseToolsPrivateEndpointDetails, "UpdateDatabaseToolsPrivateEndpointDetails", model.UpdateDatabaseToolsPrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Validates the Database Tools connection details by establishing a connection to the database.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ValidateDatabaseToolsConnectionRequest
     * @return ValidateDatabaseToolsConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/databasetools/ValidateDatabaseToolsConnection.ts.html |here} to see how to use ValidateDatabaseToolsConnection API.
     */
    validateDatabaseToolsConnection(validateDatabaseToolsConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DatabaseToolsClient#validateDatabaseToolsConnection.");
            const operationName = "validateDatabaseToolsConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/database-tools/20201005/DatabaseToolsConnection/ValidateDatabaseToolsConnection";
            const pathParams = {
                "{databaseToolsConnectionId}": validateDatabaseToolsConnectionRequest.databaseToolsConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": validateDatabaseToolsConnectionRequest.ifMatch,
                "opc-request-id": validateDatabaseToolsConnectionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, validateDatabaseToolsConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseToolsConnections/{databaseToolsConnectionId}/actions/validateConnection",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(validateDatabaseToolsConnectionRequest.validateDatabaseToolsConnectionDetails, "ValidateDatabaseToolsConnectionDetails", model.ValidateDatabaseToolsConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "validateDatabaseToolsConnectionResult",
                    bodyModel: model.ValidateDatabaseToolsConnectionResult,
                    type: "model.ValidateDatabaseToolsConnectionResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DatabaseToolsClient = DatabaseToolsClient;
DatabaseToolsClient.serviceEndpointTemplate = "https://dbtools.{region}.oci.{secondLevelDomain}";
DatabaseToolsClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map