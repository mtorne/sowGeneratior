/**
 * OneSubscription API Usage Computation
 * OneSubscription API Common set of Subscription Plan Management (SPM) Usage Computation resources

 * OpenAPI spec version: 20210501
 * Contact: kuaskum_org_ww@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
declare const Breaker: any;
export declare enum ComputedUsageApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class ComputedUsageClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * This is an API which returns Computed Usage corresponding to the id passed
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetComputedUsageRequest
     * @return GetComputedUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osubusage/GetComputedUsage.ts.html |here} to see how to use GetComputedUsage API.
     */
    getComputedUsage(getComputedUsageRequest: requests.GetComputedUsageRequest): Promise<responses.GetComputedUsageResponse>;
    /**
     * This is a collection API which returns a list of aggregated computed usage details (there can be multiple Parent Products under a given SubID each of which is represented under Subscription Service Line # in SPM).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListComputedUsageAggregatedsRequest
     * @return ListComputedUsageAggregatedsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osubusage/ListComputedUsageAggregateds.ts.html |here} to see how to use ListComputedUsageAggregateds API.
     */
    listComputedUsageAggregateds(listComputedUsageAggregatedsRequest: requests.ListComputedUsageAggregatedsRequest): Promise<responses.ListComputedUsageAggregatedsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listComputedUsageAggregatedsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ComputedUsageAggregatedSummary objects
     * contained in responses from the listComputedUsageAggregateds operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputedUsageAggregateds(request: requests.ListComputedUsageAggregatedsRequest): AsyncIterableIterator<model.ComputedUsageAggregatedSummary>;
    /**
     * NOTE: This function is deprecated in favor of listComputedUsageAggregatedsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listComputedUsageAggregateds operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputedUsageAggregatedsResponses(request: requests.ListComputedUsageAggregatedsRequest): AsyncIterableIterator<responses.ListComputedUsageAggregatedsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ComputedUsageAggregatedSummary objects
     * contained in responses from the listComputedUsageAggregateds operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listComputedUsageAggregatedsRecordIterator(request: requests.ListComputedUsageAggregatedsRequest): AsyncIterableIterator<model.ComputedUsageAggregatedSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listComputedUsageAggregateds operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listComputedUsageAggregatedsResponseIterator(request: requests.ListComputedUsageAggregatedsRequest): AsyncIterableIterator<responses.ListComputedUsageAggregatedsResponse>;
    /**
     * This is a collection API which returns a list of Computed Usages for given filters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListComputedUsagesRequest
     * @return ListComputedUsagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/osubusage/ListComputedUsages.ts.html |here} to see how to use ListComputedUsages API.
     */
    listComputedUsages(listComputedUsagesRequest: requests.ListComputedUsagesRequest): Promise<responses.ListComputedUsagesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listComputedUsagesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ComputedUsageSummary objects
     * contained in responses from the listComputedUsages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputedUsages(request: requests.ListComputedUsagesRequest): AsyncIterableIterator<model.ComputedUsageSummary>;
    /**
     * NOTE: This function is deprecated in favor of listComputedUsagesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listComputedUsages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputedUsagesResponses(request: requests.ListComputedUsagesRequest): AsyncIterableIterator<responses.ListComputedUsagesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ComputedUsageSummary objects
     * contained in responses from the listComputedUsages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listComputedUsagesRecordIterator(request: requests.ListComputedUsagesRequest): AsyncIterableIterator<model.ComputedUsageSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listComputedUsages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listComputedUsagesResponseIterator(request: requests.ListComputedUsagesRequest): AsyncIterableIterator<responses.ListComputedUsagesResponse>;
}
export {};
