/**
 * Vault Secret Management API
 * Use the Secret Management API to manage secrets and secret versions. For more information, see [Managing Secrets](https://docs.oracle.com/iaas/Content/KeyManagement/Tasks/managingsecrets.htm).
 * OpenAPI spec version: 20180608
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { WorkRequestClient } from "oci-workrequests";
import { VaultsWaiter } from "./vaults-waiter";
declare const Breaker: any;
export declare enum VaultsApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class VaultsClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": VaultsWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new VaultsWaiter for resources for this service.
     *
     * @param workRequestClient The work request service client used to query for work request status
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(workRequestClient: WorkRequestClient, config?: common.WaiterConfiguration): VaultsWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): VaultsWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Cancels the pending deletion of the specified secret. Canceling
     * a scheduled deletion restores the secret's lifecycle state to what
     * it was before you scheduled the secret for deletion.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelSecretDeletionRequest
     * @return CancelSecretDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/CancelSecretDeletion.ts.html |here} to see how to use CancelSecretDeletion API.
     */
    cancelSecretDeletion(cancelSecretDeletionRequest: requests.CancelSecretDeletionRequest): Promise<responses.CancelSecretDeletionResponse>;
    /**
     * Cancels the ongoing secret rotation. The cancellation is contingent on how
     * far the rotation process has progressed. Upon cancelling a rotation, all
     * future rotations are also disabled.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelSecretRotationRequest
     * @return CancelSecretRotationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/CancelSecretRotation.ts.html |here} to see how to use CancelSecretRotation API.
     */
    cancelSecretRotation(cancelSecretRotationRequest: requests.CancelSecretRotationRequest): Promise<responses.CancelSecretRotationResponse>;
    /**
     * Cancels the scheduled deletion of a secret version.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelSecretVersionDeletionRequest
     * @return CancelSecretVersionDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/CancelSecretVersionDeletion.ts.html |here} to see how to use CancelSecretVersionDeletion API.
     */
    cancelSecretVersionDeletion(cancelSecretVersionDeletionRequest: requests.CancelSecretVersionDeletionRequest): Promise<responses.CancelSecretVersionDeletionResponse>;
    /**
       * Moves a secret into a different compartment within the same tenancy. For information about
  * moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When provided, if-match is checked against the ETag values of the secret.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ChangeSecretCompartmentRequest
       * @return ChangeSecretCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/ChangeSecretCompartment.ts.html |here} to see how to use ChangeSecretCompartment API.
       */
    changeSecretCompartment(changeSecretCompartmentRequest: requests.ChangeSecretCompartmentRequest): Promise<responses.ChangeSecretCompartmentResponse>;
    /**
       * Creates a new secret according to the details of the request.
  * <p>
  This operation is not supported by the Oracle Cloud Infrastructure Terraform Provider.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateSecretRequest
       * @return CreateSecretResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/CreateSecret.ts.html |here} to see how to use CreateSecret API.
       */
    createSecret(createSecretRequest: requests.CreateSecretRequest): Promise<responses.CreateSecretResponse>;
    /**
     * Gets information about the specified secret.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecretRequest
     * @return GetSecretResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/GetSecret.ts.html |here} to see how to use GetSecret API.
     */
    getSecret(getSecretRequest: requests.GetSecretRequest): Promise<responses.GetSecretResponse>;
    /**
     * Gets information about the specified version of a secret.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSecretVersionRequest
     * @return GetSecretVersionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/GetSecretVersion.ts.html |here} to see how to use GetSecretVersion API.
     */
    getSecretVersion(getSecretVersionRequest: requests.GetSecretVersionRequest): Promise<responses.GetSecretVersionResponse>;
    /**
     * Lists all secret versions for the specified secret.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecretVersionsRequest
     * @return ListSecretVersionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/ListSecretVersions.ts.html |here} to see how to use ListSecretVersions API.
     */
    listSecretVersions(listSecretVersionsRequest: requests.ListSecretVersionsRequest): Promise<responses.ListSecretVersionsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSecretVersionsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecretVersionSummary objects
     * contained in responses from the listSecretVersions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecretVersions(request: requests.ListSecretVersionsRequest): AsyncIterableIterator<model.SecretVersionSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSecretVersionsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecretVersions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecretVersionsResponses(request: requests.ListSecretVersionsRequest): AsyncIterableIterator<responses.ListSecretVersionsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SecretVersionSummary objects
     * contained in responses from the listSecretVersions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecretVersionsRecordIterator(request: requests.ListSecretVersionsRequest): AsyncIterableIterator<model.SecretVersionSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecretVersions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecretVersionsResponseIterator(request: requests.ListSecretVersionsRequest): AsyncIterableIterator<responses.ListSecretVersionsResponse>;
    /**
     * Lists all secrets in the specified vault and compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSecretsRequest
     * @return ListSecretsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/ListSecrets.ts.html |here} to see how to use ListSecrets API.
     */
    listSecrets(listSecretsRequest: requests.ListSecretsRequest): Promise<responses.ListSecretsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSecretsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SecretSummary objects
     * contained in responses from the listSecrets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecrets(request: requests.ListSecretsRequest): AsyncIterableIterator<model.SecretSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSecretsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSecrets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecretsResponses(request: requests.ListSecretsRequest): AsyncIterableIterator<responses.ListSecretsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SecretSummary objects
     * contained in responses from the listSecrets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecretsRecordIterator(request: requests.ListSecretsRequest): AsyncIterableIterator<model.SecretSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecrets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSecretsResponseIterator(request: requests.ListSecretsRequest): AsyncIterableIterator<responses.ListSecretsResponse>;
    /**
     * API to force rotation of an existing secret in Vault and the specified target system; expects secret to have a valid Target System Details object
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RotateSecretRequest
     * @return RotateSecretResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/RotateSecret.ts.html |here} to see how to use RotateSecret API.
     */
    rotateSecret(rotateSecretRequest: requests.RotateSecretRequest): Promise<responses.RotateSecretResponse>;
    /**
     * Schedules the deletion of the specified secret. This sets the lifecycle state of the secret
     * to `PENDING_DELETION` and then deletes it after the specified retention period ends.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ScheduleSecretDeletionRequest
     * @return ScheduleSecretDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/ScheduleSecretDeletion.ts.html |here} to see how to use ScheduleSecretDeletion API.
     */
    scheduleSecretDeletion(scheduleSecretDeletionRequest: requests.ScheduleSecretDeletionRequest): Promise<responses.ScheduleSecretDeletionResponse>;
    /**
     * Schedules the deletion of the specified secret version. This deletes it after the specified retention period ends. You can only
     * delete a secret version if the secret version rotation state is marked as `DEPRECATED`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ScheduleSecretVersionDeletionRequest
     * @return ScheduleSecretVersionDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/ScheduleSecretVersionDeletion.ts.html |here} to see how to use ScheduleSecretVersionDeletion API.
     */
    scheduleSecretVersionDeletion(scheduleSecretVersionDeletionRequest: requests.ScheduleSecretVersionDeletionRequest): Promise<responses.ScheduleSecretVersionDeletionResponse>;
    /**
       * Updates the properties of a secret. Specifically, you can update the version number of the secret to make
  * that version number the current version. You can also update a secret's description, its free-form or defined tags, rules
  * and the secret contents. Updating the secret content automatically creates a new secret version. You cannot, however, update the current secret version number, secret contents, and secret rules at the
  * same time. Furthermore, the secret must in an `ACTIVE` lifecycle state to be updated.
  * <p>
  This operation is not supported by the Oracle Cloud Infrastructure Terraform Provider.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param UpdateSecretRequest
       * @return UpdateSecretResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/vault/UpdateSecret.ts.html |here} to see how to use UpdateSecret API.
       */
    updateSecret(updateSecretRequest: requests.UpdateSecretRequest): Promise<responses.UpdateSecretResponse>;
}
export {};
