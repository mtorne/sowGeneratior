"use strict";
/**
 * Compute Cloud@Customer API
 * Use the Compute Cloud@Customer API to manage Compute Cloud@Customer infrastructures and upgrade schedules.
For more information see [Compute Cloud@Customer documentation](https://docs.oracle.com/iaas/compute-cloud-at-customer/home.htm).

 * OpenAPI spec version: 20221208
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeCloudAtCustomerClient = exports.ComputeCloudAtCustomerApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const computecloudatcustomer_waiter_1 = require("./computecloudatcustomer-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var ComputeCloudAtCustomerApiKeys;
(function (ComputeCloudAtCustomerApiKeys) {
})(ComputeCloudAtCustomerApiKeys = exports.ComputeCloudAtCustomerApiKeys || (exports.ComputeCloudAtCustomerApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class ComputeCloudAtCustomerClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "ComputeCloudAtCustomer";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("computecloudatcustomer")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("computecloudatcustomer");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20221208";
        if (this.logger)
            this.logger.info(`ComputeCloudAtCustomerClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ComputeCloudAtCustomerClient.serviceEndpointTemplate, this._region, ComputeCloudAtCustomerClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ComputeCloudAtCustomerClient.serviceEndpointTemplate, this._regionId, ComputeCloudAtCustomerClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ComputeCloudAtCustomerClient.serviceEndpointTemplate, region, ComputeCloudAtCustomerClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ComputeCloudAtCustomerClient.serviceEndpointTemplate, regionId, ComputeCloudAtCustomerClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new ComputeCloudAtCustomerWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new computecloudatcustomer_waiter_1.ComputeCloudAtCustomerWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Moves a Compute Cloud@Customer infrastructure resource from one compartment to another.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeCccInfrastructureCompartmentRequest
     * @return ChangeCccInfrastructureCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/ChangeCccInfrastructureCompartment.ts.html |here} to see how to use ChangeCccInfrastructureCompartment API.
     */
    changeCccInfrastructureCompartment(changeCccInfrastructureCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#changeCccInfrastructureCompartment.");
            const operationName = "changeCccInfrastructureCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{cccInfrastructureId}": changeCccInfrastructureCompartmentRequest.cccInfrastructureId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeCccInfrastructureCompartmentRequest.ifMatch,
                "opc-retry-token": changeCccInfrastructureCompartmentRequest.opcRetryToken,
                "opc-request-id": changeCccInfrastructureCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeCccInfrastructureCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccInfrastructures/{cccInfrastructureId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeCccInfrastructureCompartmentRequest.changeCccInfrastructureCompartmentDetails, "ChangeCccInfrastructureCompartmentDetails", model.ChangeCccInfrastructureCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a Compute Cloud@Customer upgrade schedule from one compartment to another using the
     * specified [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeCccUpgradeScheduleCompartmentRequest
     * @return ChangeCccUpgradeScheduleCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/ChangeCccUpgradeScheduleCompartment.ts.html |here} to see how to use ChangeCccUpgradeScheduleCompartment API.
     */
    changeCccUpgradeScheduleCompartment(changeCccUpgradeScheduleCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#changeCccUpgradeScheduleCompartment.");
            const operationName = "changeCccUpgradeScheduleCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{cccUpgradeScheduleId}": changeCccUpgradeScheduleCompartmentRequest.cccUpgradeScheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeCccUpgradeScheduleCompartmentRequest.ifMatch,
                "opc-retry-token": changeCccUpgradeScheduleCompartmentRequest.opcRetryToken,
                "opc-request-id": changeCccUpgradeScheduleCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeCccUpgradeScheduleCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccUpgradeSchedules/{cccUpgradeScheduleId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeCccUpgradeScheduleCompartmentRequest.changeCccUpgradeScheduleCompartmentDetails, "ChangeCccUpgradeScheduleCompartmentDetails", model.ChangeCccUpgradeScheduleCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a Compute Cloud@Customer infrastructure. Once created, Oracle Services
     * must connect the rack in the data center to this Oracle Cloud Infrastructure resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateCccInfrastructureRequest
     * @return CreateCccInfrastructureResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/CreateCccInfrastructure.ts.html |here} to see how to use CreateCccInfrastructure API.
     */
    createCccInfrastructure(createCccInfrastructureRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#createCccInfrastructure.");
            const operationName = "createCccInfrastructure";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createCccInfrastructureRequest.opcRetryToken,
                "opc-request-id": createCccInfrastructureRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createCccInfrastructureRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccInfrastructures",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCccInfrastructureRequest.createCccInfrastructureDetails, "CreateCccInfrastructureDetails", model.CreateCccInfrastructureDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cccInfrastructure",
                    bodyModel: model.CccInfrastructure,
                    type: "model.CccInfrastructure",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Compute Cloud@Customer upgrade schedule.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateCccUpgradeScheduleRequest
     * @return CreateCccUpgradeScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/CreateCccUpgradeSchedule.ts.html |here} to see how to use CreateCccUpgradeSchedule API.
     */
    createCccUpgradeSchedule(createCccUpgradeScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#createCccUpgradeSchedule.");
            const operationName = "createCccUpgradeSchedule";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createCccUpgradeScheduleRequest.opcRetryToken,
                "opc-request-id": createCccUpgradeScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createCccUpgradeScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccUpgradeSchedules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCccUpgradeScheduleRequest.createCccUpgradeScheduleDetails, "CreateCccUpgradeScheduleDetails", model.CreateCccUpgradeScheduleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cccUpgradeSchedule",
                    bodyModel: model.CccUpgradeSchedule,
                    type: "model.CccUpgradeSchedule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a Compute Cloud@Customer infrastructure resource specified by the resource
     * [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteCccInfrastructureRequest
     * @return DeleteCccInfrastructureResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/DeleteCccInfrastructure.ts.html |here} to see how to use DeleteCccInfrastructure API.
     */
    deleteCccInfrastructure(deleteCccInfrastructureRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#deleteCccInfrastructure.");
            const operationName = "deleteCccInfrastructure";
            const apiReferenceLink = "";
            const pathParams = {
                "{cccInfrastructureId}": deleteCccInfrastructureRequest.cccInfrastructureId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteCccInfrastructureRequest.ifMatch,
                "opc-request-id": deleteCccInfrastructureRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteCccInfrastructureRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccInfrastructures/{cccInfrastructureId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a Compute Cloud@Customer upgrade schedule by the specified
     * [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteCccUpgradeScheduleRequest
     * @return DeleteCccUpgradeScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/DeleteCccUpgradeSchedule.ts.html |here} to see how to use DeleteCccUpgradeSchedule API.
     */
    deleteCccUpgradeSchedule(deleteCccUpgradeScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#deleteCccUpgradeSchedule.");
            const operationName = "deleteCccUpgradeSchedule";
            const apiReferenceLink = "";
            const pathParams = {
                "{cccUpgradeScheduleId}": deleteCccUpgradeScheduleRequest.cccUpgradeScheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteCccUpgradeScheduleRequest.ifMatch,
                "opc-request-id": deleteCccUpgradeScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteCccUpgradeScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccUpgradeSchedules/{cccUpgradeScheduleId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a Compute Cloud@Customer infrastructure using the infrastructure
     * [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetCccInfrastructureRequest
     * @return GetCccInfrastructureResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/GetCccInfrastructure.ts.html |here} to see how to use GetCccInfrastructure API.
     */
    getCccInfrastructure(getCccInfrastructureRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#getCccInfrastructure.");
            const operationName = "getCccInfrastructure";
            const apiReferenceLink = "";
            const pathParams = {
                "{cccInfrastructureId}": getCccInfrastructureRequest.cccInfrastructureId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCccInfrastructureRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCccInfrastructureRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccInfrastructures/{cccInfrastructureId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cccInfrastructure",
                    bodyModel: model.CccInfrastructure,
                    type: "model.CccInfrastructure",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a Compute Cloud@Customer upgrade schedule by the specified
     * [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetCccUpgradeScheduleRequest
     * @return GetCccUpgradeScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/GetCccUpgradeSchedule.ts.html |here} to see how to use GetCccUpgradeSchedule API.
     */
    getCccUpgradeSchedule(getCccUpgradeScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#getCccUpgradeSchedule.");
            const operationName = "getCccUpgradeSchedule";
            const apiReferenceLink = "";
            const pathParams = {
                "{cccUpgradeScheduleId}": getCccUpgradeScheduleRequest.cccUpgradeScheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCccUpgradeScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCccUpgradeScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccUpgradeSchedules/{cccUpgradeScheduleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cccUpgradeSchedule",
                    bodyModel: model.CccUpgradeSchedule,
                    type: "model.CccUpgradeSchedule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Compute Cloud@Customer infrastructures.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCccInfrastructuresRequest
     * @return ListCccInfrastructuresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/ListCccInfrastructures.ts.html |here} to see how to use ListCccInfrastructures API.
     */
    listCccInfrastructures(listCccInfrastructuresRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#listCccInfrastructures.");
            const operationName = "listCccInfrastructures";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCccInfrastructuresRequest.compartmentId,
                "compartmentIdInSubtree": listCccInfrastructuresRequest.compartmentIdInSubtree,
                "accessLevel": listCccInfrastructuresRequest.accessLevel,
                "lifecycleState": listCccInfrastructuresRequest.lifecycleState,
                "displayName": listCccInfrastructuresRequest.displayName,
                "displayNameContains": listCccInfrastructuresRequest.displayNameContains,
                "cccInfrastructureId": listCccInfrastructuresRequest.cccInfrastructureId,
                "limit": listCccInfrastructuresRequest.limit,
                "page": listCccInfrastructuresRequest.page,
                "sortOrder": listCccInfrastructuresRequest.sortOrder,
                "sortBy": listCccInfrastructuresRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCccInfrastructuresRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCccInfrastructuresRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccInfrastructures",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cccInfrastructureCollection",
                    bodyModel: model.CccInfrastructureCollection,
                    type: "model.CccInfrastructureCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Compute Cloud@Customer upgrade schedules.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCccUpgradeSchedulesRequest
     * @return ListCccUpgradeSchedulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/ListCccUpgradeSchedules.ts.html |here} to see how to use ListCccUpgradeSchedules API.
     */
    listCccUpgradeSchedules(listCccUpgradeSchedulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#listCccUpgradeSchedules.");
            const operationName = "listCccUpgradeSchedules";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "cccUpgradeScheduleId": listCccUpgradeSchedulesRequest.cccUpgradeScheduleId,
                "compartmentId": listCccUpgradeSchedulesRequest.compartmentId,
                "compartmentIdInSubtree": listCccUpgradeSchedulesRequest.compartmentIdInSubtree,
                "accessLevel": listCccUpgradeSchedulesRequest.accessLevel,
                "lifecycleState": listCccUpgradeSchedulesRequest.lifecycleState,
                "displayName": listCccUpgradeSchedulesRequest.displayName,
                "displayNameContains": listCccUpgradeSchedulesRequest.displayNameContains,
                "limit": listCccUpgradeSchedulesRequest.limit,
                "page": listCccUpgradeSchedulesRequest.page,
                "sortOrder": listCccUpgradeSchedulesRequest.sortOrder,
                "sortBy": listCccUpgradeSchedulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCccUpgradeSchedulesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCccUpgradeSchedulesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccUpgradeSchedules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cccUpgradeScheduleCollection",
                    bodyModel: model.CccUpgradeScheduleCollection,
                    type: "model.CccUpgradeScheduleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates Compute Cloud@Customer infrastructure resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateCccInfrastructureRequest
     * @return UpdateCccInfrastructureResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/UpdateCccInfrastructure.ts.html |here} to see how to use UpdateCccInfrastructure API.
     */
    updateCccInfrastructure(updateCccInfrastructureRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#updateCccInfrastructure.");
            const operationName = "updateCccInfrastructure";
            const apiReferenceLink = "";
            const pathParams = {
                "{cccInfrastructureId}": updateCccInfrastructureRequest.cccInfrastructureId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateCccInfrastructureRequest.ifMatch,
                "opc-request-id": updateCccInfrastructureRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateCccInfrastructureRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccInfrastructures/{cccInfrastructureId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCccInfrastructureRequest.updateCccInfrastructureDetails, "UpdateCccInfrastructureDetails", model.UpdateCccInfrastructureDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cccInfrastructure",
                    bodyModel: model.CccInfrastructure,
                    type: "model.CccInfrastructure",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the Compute Cloud@Customer upgrade schedule.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateCccUpgradeScheduleRequest
     * @return UpdateCccUpgradeScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/computecloudatcustomer/UpdateCccUpgradeSchedule.ts.html |here} to see how to use UpdateCccUpgradeSchedule API.
     */
    updateCccUpgradeSchedule(updateCccUpgradeScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeCloudAtCustomerClient#updateCccUpgradeSchedule.");
            const operationName = "updateCccUpgradeSchedule";
            const apiReferenceLink = "";
            const pathParams = {
                "{cccUpgradeScheduleId}": updateCccUpgradeScheduleRequest.cccUpgradeScheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateCccUpgradeScheduleRequest.ifMatch,
                "opc-request-id": updateCccUpgradeScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateCccUpgradeScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cccUpgradeSchedules/{cccUpgradeScheduleId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCccUpgradeScheduleRequest.updateCccUpgradeScheduleDetails, "UpdateCccUpgradeScheduleDetails", model.UpdateCccUpgradeScheduleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cccUpgradeSchedule",
                    bodyModel: model.CccUpgradeSchedule,
                    type: "model.CccUpgradeSchedule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ComputeCloudAtCustomerClient = ComputeCloudAtCustomerClient;
ComputeCloudAtCustomerClient.serviceEndpointTemplate = "https://ccc.{region}.oci.{secondLevelDomain}";
ComputeCloudAtCustomerClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map