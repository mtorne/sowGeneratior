/**
 * Anomaly Detection API
 * OCI AI Service solutions can help Enterprise customers integrate AI into their products immediately by using our proven,
pre-trained/custom models or containers, and without a need to set up in house team of AI and ML experts.
This allows enterprises to focus on business drivers and development work rather than AI/ML operations, shortening the time to market.

 * OpenAPI spec version: 20210101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Data Source details for ATP
 */
export interface DataSourceDetailsATP extends model.DataSourceDetails {
    /**
     * wallet password Secret ID in String format
     */
    "walletPasswordSecretId"?: string;
    /**
     * atp db user name
     */
    "atpUserName"?: string;
    /**
     * atp db password Secret Id
     */
    "atpPasswordSecretId"?: string;
    /**
     * OCID of the secret containing the containers certificates of ATP wallet
     */
    "cwalletFileSecretId"?: string;
    /**
     * OCID of the secret containing the PDB'S certificates of ATP wallet
     */
    "ewalletFileSecretId"?: string;
    /**
     * OCID of the secret containing Keystore.jks file of the ATP wallet
     */
    "keyStoreFileSecretId"?: string;
    /**
     * OCID of the secret that contains jdbc properties file of ATP wallet
     */
    "ojdbcFileSecretId"?: string;
    /**
     * OCID of the secret that contains the tnsnames file of ATP wallet
     */
    "tnsnamesFileSecretId"?: string;
    /**
     * OCID of the secret containing truststore.jks file of the ATP wallet
     */
    "truststoreFileSecretId"?: string;
    /**
     * atp database name
     */
    "databaseName"?: string;
    /**
     * atp database table name
     */
    "tableName"?: string;
    "dataSourceType": string;
}
export declare namespace DataSourceDetailsATP {
    function getJsonObj(obj: DataSourceDetailsATP, isParentJsonObj?: boolean): object;
    const dataSourceType = "ORACLE_ATP";
    function getDeserializedJsonObj(obj: DataSourceDetailsATP, isParentJsonObj?: boolean): object;
}
