/**
 * Anomaly Detection API
 * OCI AI Service solutions can help Enterprise customers integrate AI into their products immediately by using our proven,
pre-trained/custom models or containers, and without a need to set up in house team of AI and ML experts.
This allows enterprises to focus on business drivers and development work rather than AI/ML operations, shortening the time to market.

 * OpenAPI spec version: 20210101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Description of Model.
 */
export interface Model {
    /**
     * The OCID of the model that is immutable on creation.
     */
    "id": string;
    /**
     * A user-friendly display name for the resource. It does not have to be unique and can be modified. Avoid entering confidential information.
     */
    "displayName": string;
    /**
     * The OCID for the model's compartment.
     */
    "compartmentId": string;
    "modelTrainingDetails": model.ModelTrainingDetails;
    "modelTrainingResults": model.ModelTrainingResults;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate with the model.
     */
    "projectId": string;
    /**
     * A short description of the Model.
     */
    "description"?: string;
    /**
     * The time the the Model was created. An RFC3339 formatted datetime string.
     */
    "timeCreated": Date;
    /**
     * The time the Model was updated. An RFC3339 formatted datetime string.
     */
    "timeUpdated"?: Date;
    /**
     * The state of the model.
     */
    "lifecycleState": Model.LifecycleState;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    "lifecycleDetails"?: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code { \"orcl-cloud\": { \"free-tier-retained\": \"true\" } }}
     *
     */
    "systemTags"?: {
        [key: string]: any;
    };
}
export declare namespace Model {
    enum LifecycleState {
        Deleting = "DELETING",
        Deleted = "DELETED",
        Failed = "FAILED",
        Creating = "CREATING",
        Active = "ACTIVE",
        Updating = "UPDATING",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: Model): object;
    function getDeserializedJsonObj(obj: Model): object;
}
