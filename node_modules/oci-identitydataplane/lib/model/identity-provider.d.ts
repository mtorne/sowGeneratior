/**
 * Identity and Access Management Data Plane API
 * APIs for managing identity data plane services. For example, use this API to create a scoped-access security token. To manage identity domains (for example, creating or deleting an identity domain) or to manage resources (for example, users and groups) within the default identity domain, see [IAM API](https://docs.oracle.com/iaas/api/#/en/identity/).
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
export interface IdentityProvider {
    /**
     * The id of the provider.
     */
    "id": string;
    /**
     * The name of the provider.
     */
    "name": string;
    /**
     * The name of the tenant.
     */
    "tenantName": string;
    /**
     * The id of the tenant.
     */
    "tenantId": string;
    /**
     * The SAML endpoint where user will be redirected.
     */
    "redirectUri": string;
    /**
     * The signing certificate of the provider.
     */
    "signingCertificate": string;
    /**
     * The type of the provider.
     */
    "protocol": IdentityProvider.Protocol;
    /**
     * The id of the service provider entity.
     */
    "serviceProviderEntityId": string;
    /**
     * Whether to force authentication.
     */
    "forceAuthentication": boolean;
    /**
     * Authentication context class refs.
     */
    "authnContextClassRefs": Array<string>;
}
export declare namespace IdentityProvider {
    enum Protocol {
        Saml2 = "SAML2",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: IdentityProvider): object;
    function getDeserializedJsonObj(obj: IdentityProvider): object;
}
