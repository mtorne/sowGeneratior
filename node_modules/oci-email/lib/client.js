"use strict";
/**
 * Email Delivery API
 * Use the Email Delivery API to do the necessary set up to send high-volume and application-generated emails through the OCI Email Delivery service.
For more information, see [Overview of the Email Delivery Service](https://docs.oracle.com/iaas/Content/Email/Concepts/overview.htm).

 **Note:** Write actions (POST, UPDATE, DELETE) may take several minutes to propagate and be reflected by the API.
 If a subsequent read request fails to reflect your changes, wait a few minutes and try again.

 * OpenAPI spec version: 20170907
 * Contact: email-dev_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailClient = exports.EmailApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const email_waiter_1 = require("./email-waiter");
const oci_common_2 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var EmailApiKeys;
(function (EmailApiKeys) {
})(EmailApiKeys = exports.EmailApiKeys || (exports.EmailApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class EmailClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "Email";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("email")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("email");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20170907";
        if (this.logger)
            this.logger.info(`EmailClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(EmailClient.serviceEndpointTemplate, this._region, EmailClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(EmailClient.serviceEndpointTemplate, this._regionId, EmailClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(EmailClient.serviceEndpointTemplate, region, EmailClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(EmailClient.serviceEndpointTemplate, regionId, EmailClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new EmailWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new email_waiter_1.EmailWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Moves an email domain into a different compartment.
     * When provided, If-Match is checked against ETag value of the resource.
     * For information about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     * <p>
     **Note:** All DKIM objects associated with this email domain will also be moved into the provided compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeEmailDomainCompartmentRequest
     * @return ChangeEmailDomainCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ChangeEmailDomainCompartment.ts.html |here} to see how to use ChangeEmailDomainCompartment API.
     */
    changeEmailDomainCompartment(changeEmailDomainCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#changeEmailDomainCompartment.");
            const operationName = "changeEmailDomainCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/ChangeEmailDomainCompartment";
            const pathParams = {
                "{emailDomainId}": changeEmailDomainCompartmentRequest.emailDomainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeEmailDomainCompartmentRequest.ifMatch,
                "opc-request-id": changeEmailDomainCompartmentRequest.opcRequestId,
                "opc-retry-token": changeEmailDomainCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeEmailDomainCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/emailDomains/{emailDomainId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeEmailDomainCompartmentRequest.changeEmailDomainCompartmentDetails, "ChangeEmailDomainCompartmentDetails", model.ChangeEmailDomainCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a sender into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeSenderCompartmentRequest
     * @return ChangeSenderCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ChangeSenderCompartment.ts.html |here} to see how to use ChangeSenderCompartment API.
     */
    changeSenderCompartment(changeSenderCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#changeSenderCompartment.");
            const operationName = "changeSenderCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/ChangeSenderCompartment";
            const pathParams = {
                "{senderId}": changeSenderCompartmentRequest.senderId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeSenderCompartmentRequest.ifMatch,
                "opc-request-id": changeSenderCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeSenderCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/senders/{senderId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeSenderCompartmentRequest.changeSenderCompartmentDetails, "ChangeSenderCompartmentDetails", model.ChangeSenderCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new DKIM for an email domain.
     * This DKIM signs all approved senders in the tenancy that are in this email domain.
     * Best security practices indicate to periodically rotate the DKIM that is doing the signing.
     * When a second DKIM is applied, all senders seamlessly pick up the new key
     * without interruption in signing.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDkimRequest
     * @return CreateDkimResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/CreateDkim.ts.html |here} to see how to use CreateDkim API.
     */
    createDkim(createDkimRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#createDkim.");
            const operationName = "createDkim";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Dkim/CreateDkim";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDkimRequest.opcRetryToken,
                "opc-request-id": createDkimRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDkimRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dkims",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDkimRequest.createDkimDetails, "CreateDkimDetails", model.CreateDkimDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dkim",
                    bodyModel: model.Dkim,
                    type: "model.Dkim",
                    responseHeaders: [
                        {
                            value: response.headers.get("Content-Location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new email domain. Avoid entering confidential information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateEmailDomainRequest
     * @return CreateEmailDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/CreateEmailDomain.ts.html |here} to see how to use CreateEmailDomain API.
     */
    createEmailDomain(createEmailDomainRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#createEmailDomain.");
            const operationName = "createEmailDomain";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/CreateEmailDomain";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createEmailDomainRequest.opcRequestId,
                "opc-retry-token": createEmailDomainRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createEmailDomainRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/emailDomains",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createEmailDomainRequest.createEmailDomainDetails, "CreateEmailDomainDetails", model.CreateEmailDomainDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "emailDomain",
                    bodyModel: model.EmailDomain,
                    type: "model.EmailDomain",
                    responseHeaders: [
                        {
                            value: response.headers.get("Content-Location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new email return path. Avoid entering confidential information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateEmailReturnPathRequest
     * @return CreateEmailReturnPathResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/CreateEmailReturnPath.ts.html |here} to see how to use CreateEmailReturnPath API.
     */
    createEmailReturnPath(createEmailReturnPathRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#createEmailReturnPath.");
            const operationName = "createEmailReturnPath";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/CreateEmailReturnPath";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createEmailReturnPathRequest.opcRequestId,
                "opc-retry-token": createEmailReturnPathRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createEmailReturnPathRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/emailReturnPaths",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createEmailReturnPathRequest.createEmailReturnPathDetails, "CreateEmailReturnPathDetails", model.CreateEmailReturnPathDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "emailReturnPath",
                    bodyModel: model.EmailReturnPath,
                    type: "model.EmailReturnPath",
                    responseHeaders: [
                        {
                            value: response.headers.get("Content-Location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a sender for a tenancy in a given compartment.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSenderRequest
     * @return CreateSenderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/CreateSender.ts.html |here} to see how to use CreateSender API.
     */
    createSender(createSenderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#createSender.");
            const operationName = "createSender";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/CreateSender";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createSenderRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSenderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/senders",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSenderRequest.createSenderDetails, "CreateSenderDetails", model.CreateSenderDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sender",
                    bodyModel: model.Sender,
                    type: "model.Sender",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds recipient email addresses to the suppression list for a tenancy.
     * Addresses added to the suppression list via the API are denoted as
     * \"MANUAL\" in the `reason` field. *Note:* All email addresses added to the
     * suppression list are normalized to include only lowercase letters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSuppressionRequest
     * @return CreateSuppressionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/CreateSuppression.ts.html |here} to see how to use CreateSuppression API.
     */
    createSuppression(createSuppressionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#createSuppression.");
            const operationName = "createSuppression";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Suppression/CreateSuppression";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createSuppressionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSuppressionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/suppressions",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSuppressionRequest.createSuppressionDetails, "CreateSuppressionDetails", model.CreateSuppressionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "suppression",
                    bodyModel: model.Suppression,
                    type: "model.Suppression",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a DKIM.
     * If this key is currently the active key for the email domain, deleting the key
     * will stop signing the domain's outgoing mail.
     * DKIM keys are left in DELETING state for about a day to allow DKIM signatures on
     * in-transit mail to be validated.
     * Consider creating a new DKIM for this domain so the signing can be rotated to it instead of deletion.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDkimRequest
     * @return DeleteDkimResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/DeleteDkim.ts.html |here} to see how to use DeleteDkim API.
     */
    deleteDkim(deleteDkimRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#deleteDkim.");
            const operationName = "deleteDkim";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Dkim/DeleteDkim";
            const pathParams = {
                "{dkimId}": deleteDkimRequest.dkimId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDkimRequest.ifMatch,
                "opc-request-id": deleteDkimRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDkimRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dkims/{dkimId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an email domain.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteEmailDomainRequest
     * @return DeleteEmailDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/DeleteEmailDomain.ts.html |here} to see how to use DeleteEmailDomain API.
     */
    deleteEmailDomain(deleteEmailDomainRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#deleteEmailDomain.");
            const operationName = "deleteEmailDomain";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/DeleteEmailDomain";
            const pathParams = {
                "{emailDomainId}": deleteEmailDomainRequest.emailDomainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteEmailDomainRequest.ifMatch,
                "opc-request-id": deleteEmailDomainRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteEmailDomainRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/emailDomains/{emailDomainId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an email return path.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteEmailReturnPathRequest
     * @return DeleteEmailReturnPathResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/DeleteEmailReturnPath.ts.html |here} to see how to use DeleteEmailReturnPath API.
     */
    deleteEmailReturnPath(deleteEmailReturnPathRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#deleteEmailReturnPath.");
            const operationName = "deleteEmailReturnPath";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/DeleteEmailReturnPath";
            const pathParams = {
                "{emailReturnPathId}": deleteEmailReturnPathRequest.emailReturnPathId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteEmailReturnPathRequest.ifMatch,
                "opc-request-id": deleteEmailReturnPathRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteEmailReturnPathRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/emailReturnPaths/{emailReturnPathId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an approved sender for a tenancy in a given compartment for a
     * provided `senderId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSenderRequest
     * @return DeleteSenderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/DeleteSender.ts.html |here} to see how to use DeleteSender API.
     */
    deleteSender(deleteSenderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#deleteSender.");
            const operationName = "deleteSender";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/DeleteSender";
            const pathParams = {
                "{senderId}": deleteSenderRequest.senderId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSenderRequest.ifMatch,
                "opc-request-id": deleteSenderRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSenderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/senders/{senderId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a suppressed recipient email address from the suppression list
     * for a tenancy in a given compartment for a provided `suppressionId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSuppressionRequest
     * @return DeleteSuppressionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/DeleteSuppression.ts.html |here} to see how to use DeleteSuppression API.
     */
    deleteSuppression(deleteSuppressionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#deleteSuppression.");
            const operationName = "deleteSuppression";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Suppression/DeleteSuppression";
            const pathParams = {
                "{suppressionId}": deleteSuppressionRequest.suppressionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteSuppressionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSuppressionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/suppressions/{suppressionId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves the specified DKIM.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDkimRequest
     * @return GetDkimResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetDkim.ts.html |here} to see how to use GetDkim API.
     */
    getDkim(getDkimRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#getDkim.");
            const operationName = "getDkim";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Dkim/GetDkim";
            const pathParams = {
                "{dkimId}": getDkimRequest.dkimId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDkimRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDkimRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dkims/{dkimId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dkim",
                    bodyModel: model.Dkim,
                    type: "model.Dkim",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns  email configuration associated with the specified compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetEmailConfigurationRequest
     * @return GetEmailConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetEmailConfiguration.ts.html |here} to see how to use GetEmailConfiguration API.
     */
    getEmailConfiguration(getEmailConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#getEmailConfiguration.");
            const operationName = "getEmailConfiguration";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Configuration/GetEmailConfiguration";
            const pathParams = {};
            const queryParams = {
                "compartmentId": getEmailConfigurationRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getEmailConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getEmailConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/configuration",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "configuration",
                    bodyModel: model.Configuration,
                    type: "model.Configuration",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves the specified email domain.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetEmailDomainRequest
     * @return GetEmailDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetEmailDomain.ts.html |here} to see how to use GetEmailDomain API.
     */
    getEmailDomain(getEmailDomainRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#getEmailDomain.");
            const operationName = "getEmailDomain";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/GetEmailDomain";
            const pathParams = {
                "{emailDomainId}": getEmailDomainRequest.emailDomainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getEmailDomainRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getEmailDomainRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/emailDomains/{emailDomainId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "emailDomain",
                    bodyModel: model.EmailDomain,
                    type: "model.EmailDomain",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves the specified email return path.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetEmailReturnPathRequest
     * @return GetEmailReturnPathResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetEmailReturnPath.ts.html |here} to see how to use GetEmailReturnPath API.
     */
    getEmailReturnPath(getEmailReturnPathRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#getEmailReturnPath.");
            const operationName = "getEmailReturnPath";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/GetEmailReturnPath";
            const pathParams = {
                "{emailReturnPathId}": getEmailReturnPathRequest.emailReturnPathId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getEmailReturnPathRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getEmailReturnPathRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/emailReturnPaths/{emailReturnPathId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "emailReturnPath",
                    bodyModel: model.EmailReturnPath,
                    type: "model.EmailReturnPath",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets an approved sender for a given `senderId`.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSenderRequest
     * @return GetSenderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetSender.ts.html |here} to see how to use GetSender API.
     */
    getSender(getSenderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#getSender.");
            const operationName = "getSender";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/GetSender";
            const pathParams = {
                "{senderId}": getSenderRequest.senderId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSenderRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSenderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/senders/{senderId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sender",
                    bodyModel: model.Sender,
                    type: "model.Sender",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of a suppressed recipient email address for a given
     * `suppressionId`. Each suppression is given a unique OCID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSuppressionRequest
     * @return GetSuppressionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetSuppression.ts.html |here} to see how to use GetSuppression API.
     */
    getSuppression(getSuppressionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#getSuppression.");
            const operationName = "getSuppression";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Suppression/GetSuppression";
            const pathParams = {
                "{suppressionId}": getSuppressionRequest.suppressionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSuppressionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSuppressionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/suppressions/{suppressionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "suppression",
                    bodyModel: model.Suppression,
                    type: "model.Suppression",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/WorkRequest/GetWorkRequest";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists DKIMs for an email domain.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDkimsRequest
     * @return ListDkimsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListDkims.ts.html |here} to see how to use ListDkims API.
     */
    listDkims(listDkimsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#listDkims.");
            const operationName = "listDkims";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Dkim/ListDkims";
            const pathParams = {};
            const queryParams = {
                "emailDomainId": listDkimsRequest.emailDomainId,
                "id": listDkimsRequest.id,
                "name": listDkimsRequest.name,
                "limit": listDkimsRequest.limit,
                "page": listDkimsRequest.page,
                "sortOrder": listDkimsRequest.sortOrder,
                "lifecycleState": listDkimsRequest.lifecycleState,
                "sortBy": listDkimsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDkimsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDkimsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dkims",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dkimCollection",
                    bodyModel: model.DkimCollection,
                    type: "model.DkimCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists email domains in the specified compartment.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListEmailDomainsRequest
     * @return ListEmailDomainsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListEmailDomains.ts.html |here} to see how to use ListEmailDomains API.
     */
    listEmailDomains(listEmailDomainsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#listEmailDomains.");
            const operationName = "listEmailDomains";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/ListEmailDomains";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listEmailDomainsRequest.compartmentId,
                "id": listEmailDomainsRequest.id,
                "name": listEmailDomainsRequest.name,
                "limit": listEmailDomainsRequest.limit,
                "page": listEmailDomainsRequest.page,
                "sortOrder": listEmailDomainsRequest.sortOrder,
                "lifecycleState": listEmailDomainsRequest.lifecycleState,
                "sortBy": listEmailDomainsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listEmailDomainsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listEmailDomainsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/emailDomains",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "emailDomainCollection",
                    bodyModel: model.EmailDomainCollection,
                    type: "model.EmailDomainCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists email return paths in the specified compartment or emaildomain.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListEmailReturnPathsRequest
     * @return ListEmailReturnPathsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListEmailReturnPaths.ts.html |here} to see how to use ListEmailReturnPaths API.
     */
    listEmailReturnPaths(listEmailReturnPathsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#listEmailReturnPaths.");
            const operationName = "listEmailReturnPaths";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/ListEmailReturnPaths";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listEmailReturnPathsRequest.compartmentId,
                "parentResourceId": listEmailReturnPathsRequest.parentResourceId,
                "id": listEmailReturnPathsRequest.id,
                "name": listEmailReturnPathsRequest.name,
                "limit": listEmailReturnPathsRequest.limit,
                "page": listEmailReturnPathsRequest.page,
                "sortOrder": listEmailReturnPathsRequest.sortOrder,
                "lifecycleState": listEmailReturnPathsRequest.lifecycleState,
                "sortBy": listEmailReturnPathsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listEmailReturnPathsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listEmailReturnPathsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/emailReturnPaths",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "emailReturnPathCollection",
                    bodyModel: model.EmailReturnPathCollection,
                    type: "model.EmailReturnPathCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a collection of approved sender email addresses and sender IDs.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSendersRequest
     * @return ListSendersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListSenders.ts.html |here} to see how to use ListSenders API.
     */
    listSenders(listSendersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#listSenders.");
            const operationName = "listSenders";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/ListSenders";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSendersRequest.compartmentId,
                "lifecycleState": listSendersRequest.lifecycleState,
                "domain": listSendersRequest.domain,
                "emailAddress": listSendersRequest.emailAddress,
                "page": listSendersRequest.page,
                "limit": listSendersRequest.limit,
                "sortBy": listSendersRequest.sortBy,
                "sortOrder": listSendersRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSendersRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSendersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/senders",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SenderSummary,
                    type: "Array<model.SenderSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSendersRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SenderSummary objects
     * contained in responses from the listSenders operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSenders(request) {
        return oci_common_1.paginateRecords(request, req => this.listSenders(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSendersResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSenders operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSendersResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSenders(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SenderSummary objects
     * contained in responses from the listSenders operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSendersRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSenders(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSenders operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSendersResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSenders(req));
    }
    /**
     * Gets a list of suppressed recipient email addresses for a user. The
     * `compartmentId` for suppressions must be a tenancy OCID. The returned list
     * is sorted by creation time in descending order.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSuppressionsRequest
     * @return ListSuppressionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListSuppressions.ts.html |here} to see how to use ListSuppressions API.
     */
    listSuppressions(listSuppressionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#listSuppressions.");
            const operationName = "listSuppressions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Suppression/ListSuppressions";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSuppressionsRequest.compartmentId,
                "emailAddress": listSuppressionsRequest.emailAddress,
                "timeCreatedGreaterThanOrEqualTo": listSuppressionsRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listSuppressionsRequest.timeCreatedLessThan,
                "page": listSuppressionsRequest.page,
                "limit": listSuppressionsRequest.limit,
                "sortBy": listSuppressionsRequest.sortBy,
                "sortOrder": listSuppressionsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSuppressionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSuppressionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/suppressions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.SuppressionSummary,
                    type: "Array<model.SuppressionSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSuppressionsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SuppressionSummary objects
     * contained in responses from the listSuppressions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSuppressions(request) {
        return oci_common_1.paginateRecords(request, req => this.listSuppressions(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSuppressionsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSuppressions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSuppressionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSuppressions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.SuppressionSummary objects
     * contained in responses from the listSuppressions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSuppressionsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSuppressions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSuppressions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSuppressionsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSuppressions(req));
    }
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/WorkRequestErrorCollection/ListWorkRequestErrors";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: model.WorkRequestErrorCollection,
                    type: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/WorkRequestLogEntryCollection/ListWorkRequestLogs";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestLogEntryCollection",
                    bodyModel: model.WorkRequestLogEntryCollection,
                    type: "model.WorkRequestLogEntryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the work requests in a compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/WorkRequestSummaryCollection/ListWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "workRequestId": listWorkRequestsRequest.workRequestId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestSummaryCollection",
                    bodyModel: model.WorkRequestSummaryCollection,
                    type: "model.WorkRequestSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Modifies a DKIM.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDkimRequest
     * @return UpdateDkimResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/UpdateDkim.ts.html |here} to see how to use UpdateDkim API.
     */
    updateDkim(updateDkimRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#updateDkim.");
            const operationName = "updateDkim";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Dkim/UpdateDkim";
            const pathParams = {
                "{dkimId}": updateDkimRequest.dkimId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDkimRequest.ifMatch,
                "opc-request-id": updateDkimRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDkimRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dkims/{dkimId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDkimRequest.updateDkimDetails, "UpdateDkimDetails", model.UpdateDkimDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Modifies an email domain.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateEmailDomainRequest
     * @return UpdateEmailDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/UpdateEmailDomain.ts.html |here} to see how to use UpdateEmailDomain API.
     */
    updateEmailDomain(updateEmailDomainRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#updateEmailDomain.");
            const operationName = "updateEmailDomain";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailDomain/UpdateEmailDomain";
            const pathParams = {
                "{emailDomainId}": updateEmailDomainRequest.emailDomainId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateEmailDomainRequest.ifMatch,
                "opc-request-id": updateEmailDomainRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateEmailDomainRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/emailDomains/{emailDomainId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateEmailDomainRequest.updateEmailDomainDetails, "UpdateEmailDomainDetails", model.UpdateEmailDomainDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Modifies an email return path.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateEmailReturnPathRequest
     * @return UpdateEmailReturnPathResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/UpdateEmailReturnPath.ts.html |here} to see how to use UpdateEmailReturnPath API.
     */
    updateEmailReturnPath(updateEmailReturnPathRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#updateEmailReturnPath.");
            const operationName = "updateEmailReturnPath";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/EmailReturnPath/UpdateEmailReturnPath";
            const pathParams = {
                "{emailReturnPathId}": updateEmailReturnPathRequest.emailReturnPathId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateEmailReturnPathRequest.ifMatch,
                "opc-request-id": updateEmailReturnPathRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateEmailReturnPathRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/emailReturnPaths/{emailReturnPathId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateEmailReturnPathRequest.updateEmailReturnPathDetails, "UpdateEmailReturnPathDetails", model.UpdateEmailReturnPathDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replaces the set of tags for a sender with the tags provided. If either freeform
     * or defined tags are omitted, the tags for that set remain the same. Each set must
     * include the full set of tags for the sender, partial updates are not permitted.
     * For more information about tagging, see [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateSenderRequest
     * @return UpdateSenderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/email/UpdateSender.ts.html |here} to see how to use UpdateSender API.
     */
    updateSender(updateSenderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation EmailClient#updateSender.");
            const operationName = "updateSender";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/emaildelivery/20170907/Sender/UpdateSender";
            const pathParams = {
                "{senderId}": updateSenderRequest.senderId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSenderRequest.ifMatch,
                "opc-request-id": updateSenderRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSenderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/senders/{senderId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSenderRequest.updateSenderDetails, "UpdateSenderDetails", model.UpdateSenderDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sender",
                    bodyModel: model.Sender,
                    type: "model.Sender",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.EmailClient = EmailClient;
EmailClient.serviceEndpointTemplate = "https://ctrl.email.{region}.oci.{secondLevelDomain}";
EmailClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map