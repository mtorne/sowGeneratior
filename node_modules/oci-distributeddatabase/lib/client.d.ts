/**
 * Globally Distributed Database
 * Use the Globally Distributed Database service APIs to create and manage the Globally distributed databases.
 * OpenAPI spec version: 20250101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { DistributedAutonomousDbServiceWaiter } from "./distributedautonomousdbservice-waiter";
import { DistributedDbPrivateEndpointServiceWaiter } from "./distributeddbprivateendpointservice-waiter";
import { DistributedDbServiceWaiter } from "./distributeddbservice-waiter";
import { DistributedDbWorkRequestServiceWaiter } from "./distributeddbworkrequestservice-waiter";
declare const Breaker: any;
export declare enum DistributedAutonomousDbServiceApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DistributedAutonomousDbServiceClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DistributedAutonomousDbServiceWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DistributedAutonomousDbServiceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DistributedAutonomousDbServiceWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DistributedAutonomousDbServiceWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Add new Global database services control(GDS CTL) node for the Globally distributed autonomous database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddDistributedAutonomousDatabaseGdsControlNodeRequest
     * @return AddDistributedAutonomousDatabaseGdsControlNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/AddDistributedAutonomousDatabaseGdsControlNode.ts.html |here} to see how to use AddDistributedAutonomousDatabaseGdsControlNode API.
     */
    addDistributedAutonomousDatabaseGdsControlNode(addDistributedAutonomousDatabaseGdsControlNodeRequest: requests.AddDistributedAutonomousDatabaseGdsControlNodeRequest): Promise<responses.AddDistributedAutonomousDatabaseGdsControlNodeResponse>;
    /**
     * Move the Globally distributed autonomous database and its dependent resources to the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDistributedAutonomousDatabaseCompartmentRequest
     * @return ChangeDistributedAutonomousDatabaseCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ChangeDistributedAutonomousDatabaseCompartment.ts.html |here} to see how to use ChangeDistributedAutonomousDatabaseCompartment API.
     */
    changeDistributedAutonomousDatabaseCompartment(changeDistributedAutonomousDatabaseCompartmentRequest: requests.ChangeDistributedAutonomousDatabaseCompartmentRequest): Promise<responses.ChangeDistributedAutonomousDatabaseCompartmentResponse>;
    /**
     * Configure new Global Service Manager(GSM aka shard manager) instances for the Globally distributed autonomous database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ConfigureDistributedAutonomousDatabaseGsmsRequest
     * @return ConfigureDistributedAutonomousDatabaseGsmsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ConfigureDistributedAutonomousDatabaseGsms.ts.html |here} to see how to use ConfigureDistributedAutonomousDatabaseGsms API.
     */
    configureDistributedAutonomousDatabaseGsms(configureDistributedAutonomousDatabaseGsmsRequest: requests.ConfigureDistributedAutonomousDatabaseGsmsRequest): Promise<responses.ConfigureDistributedAutonomousDatabaseGsmsResponse>;
    /**
     * Once all components of Globally distributed autonomous database are provisioned, and signed GSM certificates are successfully uploaded, this
     * api shall be invoked to configure sharding on the Globally distributed autonomous database. Note that this 'ConfigureSharding' API also needs to be
     * invoked after successfully adding a new shard to the Globally distributed autonomous database using PATCH api. If this API is not
     * invoked after successfully adding a new shard, then that new shard will not be a participant in sharding topology of
     * the Globally distributed autonomous database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ConfigureDistributedAutonomousDatabaseShardingRequest
     * @return ConfigureDistributedAutonomousDatabaseShardingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ConfigureDistributedAutonomousDatabaseSharding.ts.html |here} to see how to use ConfigureDistributedAutonomousDatabaseSharding API.
     */
    configureDistributedAutonomousDatabaseSharding(configureDistributedAutonomousDatabaseShardingRequest: requests.ConfigureDistributedAutonomousDatabaseShardingRequest): Promise<responses.ConfigureDistributedAutonomousDatabaseShardingResponse>;
    /**
     * Creates a Globally distributed autonomous database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDistributedAutonomousDatabaseRequest
     * @return CreateDistributedAutonomousDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/CreateDistributedAutonomousDatabase.ts.html |here} to see how to use CreateDistributedAutonomousDatabase API.
     */
    createDistributedAutonomousDatabase(createDistributedAutonomousDatabaseRequest: requests.CreateDistributedAutonomousDatabaseRequest): Promise<responses.CreateDistributedAutonomousDatabaseResponse>;
    /**
     * Terminate the given Globally distributed autonomous databases.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDistributedAutonomousDatabaseRequest
     * @return DeleteDistributedAutonomousDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/DeleteDistributedAutonomousDatabase.ts.html |here} to see how to use DeleteDistributedAutonomousDatabase API.
     */
    deleteDistributedAutonomousDatabase(deleteDistributedAutonomousDatabaseRequest: requests.DeleteDistributedAutonomousDatabaseRequest): Promise<responses.DeleteDistributedAutonomousDatabaseResponse>;
    /**
     * Generate the common certificate signing request for GSMs. Download the <globalautonomousdb-prefix>.csr file from
     * API response. Users can use this .csr file to generate the CA signed certificate, and as a next step
     * use 'uploadSignedCertificateAndGenerateWallet' API to upload the CA signed certificate to GSM, and
     * generate wallets for the GSM instances of the Globally distributed autonomous database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest
     * @return DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequest.ts.html |here} to see how to use DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequest API.
     */
    downloadDistributedAutonomousDatabaseGsmCertificateSigningRequest(downloadDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest: requests.DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest): Promise<responses.DownloadDistributedAutonomousDatabaseGsmCertificateSigningRequestResponse>;
    /**
     * Generate the certificate signing request for GSM instances of the Globally distributed autonomous database. Once certificate signing
     * request is generated, then customers can download the certificate signing request using
     * 'downloadGsmCertificateSigningRequest' api call.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest
     * @return GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequest.ts.html |here} to see how to use GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequest API.
     */
    generateDistributedAutonomousDatabaseGsmCertificateSigningRequest(generateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest: requests.GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequestRequest): Promise<responses.GenerateDistributedAutonomousDatabaseGsmCertificateSigningRequestResponse>;
    /**
     * Generate the wallet associated with Globally distributed autonomous database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateDistributedAutonomousDatabaseWalletRequest
     * @return GenerateDistributedAutonomousDatabaseWalletResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GenerateDistributedAutonomousDatabaseWallet.ts.html |here} to see how to use GenerateDistributedAutonomousDatabaseWallet API.
     */
    generateDistributedAutonomousDatabaseWallet(generateDistributedAutonomousDatabaseWalletRequest: requests.GenerateDistributedAutonomousDatabaseWalletRequest): Promise<responses.GenerateDistributedAutonomousDatabaseWalletResponse>;
    /**
     * Gets the details of the Globally distributed autonomous database identified by given id.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDistributedAutonomousDatabaseRequest
     * @return GetDistributedAutonomousDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GetDistributedAutonomousDatabase.ts.html |here} to see how to use GetDistributedAutonomousDatabase API.
     */
    getDistributedAutonomousDatabase(getDistributedAutonomousDatabaseRequest: requests.GetDistributedAutonomousDatabaseRequest): Promise<responses.GetDistributedAutonomousDatabaseResponse>;
    /**
     * List of Globally distributed autonomous databases.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDistributedAutonomousDatabasesRequest
     * @return ListDistributedAutonomousDatabasesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListDistributedAutonomousDatabases.ts.html |here} to see how to use ListDistributedAutonomousDatabases API.
     */
    listDistributedAutonomousDatabases(listDistributedAutonomousDatabasesRequest: requests.ListDistributedAutonomousDatabasesRequest): Promise<responses.ListDistributedAutonomousDatabasesResponse>;
    /**
     * Patch operation to add, remove or update shards to the Globally distributed autonomous database topology. In single patch
     * operation, multiple shards can be either added, or removed or updated. Combination of inserts, update
     * and remove in single operation is not allowed.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchDistributedAutonomousDatabaseRequest
     * @return PatchDistributedAutonomousDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/PatchDistributedAutonomousDatabase.ts.html |here} to see how to use PatchDistributedAutonomousDatabase API.
     */
    patchDistributedAutonomousDatabase(patchDistributedAutonomousDatabaseRequest: requests.PatchDistributedAutonomousDatabaseRequest): Promise<responses.PatchDistributedAutonomousDatabaseResponse>;
    /**
     * Rotate passwords for different components of the Globally distributed autonomous database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RotateDistributedAutonomousDatabasePasswordsRequest
     * @return RotateDistributedAutonomousDatabasePasswordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/RotateDistributedAutonomousDatabasePasswords.ts.html |here} to see how to use RotateDistributedAutonomousDatabasePasswords API.
     */
    rotateDistributedAutonomousDatabasePasswords(rotateDistributedAutonomousDatabasePasswordsRequest: requests.RotateDistributedAutonomousDatabasePasswordsRequest): Promise<responses.RotateDistributedAutonomousDatabasePasswordsResponse>;
    /**
     * Start the shards, catalog and GSMs of Globally distributed autonomous database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StartDistributedAutonomousDatabaseRequest
     * @return StartDistributedAutonomousDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/StartDistributedAutonomousDatabase.ts.html |here} to see how to use StartDistributedAutonomousDatabase API.
     */
    startDistributedAutonomousDatabase(startDistributedAutonomousDatabaseRequest: requests.StartDistributedAutonomousDatabaseRequest): Promise<responses.StartDistributedAutonomousDatabaseResponse>;
    /**
     * Stop the shards, catalog and GSM instances for the Globally distributed autonomous database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StopDistributedAutonomousDatabaseRequest
     * @return StopDistributedAutonomousDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/StopDistributedAutonomousDatabase.ts.html |here} to see how to use StopDistributedAutonomousDatabase API.
     */
    stopDistributedAutonomousDatabase(stopDistributedAutonomousDatabaseRequest: requests.StopDistributedAutonomousDatabaseRequest): Promise<responses.StopDistributedAutonomousDatabaseResponse>;
    /**
     * Updates the configuration of the Globally distributed autonomous database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDistributedAutonomousDatabaseRequest
     * @return UpdateDistributedAutonomousDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/UpdateDistributedAutonomousDatabase.ts.html |here} to see how to use UpdateDistributedAutonomousDatabase API.
     */
    updateDistributedAutonomousDatabase(updateDistributedAutonomousDatabaseRequest: requests.UpdateDistributedAutonomousDatabaseRequest): Promise<responses.UpdateDistributedAutonomousDatabaseResponse>;
    /**
     * Upload the CA signed certificate to the GSM instances and generate wallets for GSM instances of the
     * Globally distributed autonomous database. Customer shall provide the CA signed certificate key details by adding the certificate
     * in request body.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest
     * @return UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWallet.ts.html |here} to see how to use UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWallet API.
     */
    uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWallet(uploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest: requests.UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletRequest): Promise<responses.UploadDistributedAutonomousDatabaseSignedCertificateAndGenerateWalletResponse>;
    /**
     * Validate the network connectivity between components of the globally distributed autonomous database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ValidateDistributedAutonomousDatabaseNetworkRequest
     * @return ValidateDistributedAutonomousDatabaseNetworkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ValidateDistributedAutonomousDatabaseNetwork.ts.html |here} to see how to use ValidateDistributedAutonomousDatabaseNetwork API.
     */
    validateDistributedAutonomousDatabaseNetwork(validateDistributedAutonomousDatabaseNetworkRequest: requests.ValidateDistributedAutonomousDatabaseNetworkRequest): Promise<responses.ValidateDistributedAutonomousDatabaseNetworkResponse>;
}
export declare enum DistributedDbPrivateEndpointServiceApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DistributedDbPrivateEndpointServiceClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DistributedDbPrivateEndpointServiceWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DistributedDbPrivateEndpointServiceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DistributedDbPrivateEndpointServiceWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DistributedDbPrivateEndpointServiceWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Moves the DistributedDatabasePrivateEndpoint to the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDistributedDatabasePrivateEndpointCompartmentRequest
     * @return ChangeDistributedDatabasePrivateEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ChangeDistributedDatabasePrivateEndpointCompartment.ts.html |here} to see how to use ChangeDistributedDatabasePrivateEndpointCompartment API.
     */
    changeDistributedDatabasePrivateEndpointCompartment(changeDistributedDatabasePrivateEndpointCompartmentRequest: requests.ChangeDistributedDatabasePrivateEndpointCompartmentRequest): Promise<responses.ChangeDistributedDatabasePrivateEndpointCompartmentResponse>;
    /**
     * Creates a DistributedDatabasePrivateEndpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDistributedDatabasePrivateEndpointRequest
     * @return CreateDistributedDatabasePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/CreateDistributedDatabasePrivateEndpoint.ts.html |here} to see how to use CreateDistributedDatabasePrivateEndpoint API.
     */
    createDistributedDatabasePrivateEndpoint(createDistributedDatabasePrivateEndpointRequest: requests.CreateDistributedDatabasePrivateEndpointRequest): Promise<responses.CreateDistributedDatabasePrivateEndpointResponse>;
    /**
     * Deletes the given DistributedDatabasePrivateEndpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDistributedDatabasePrivateEndpointRequest
     * @return DeleteDistributedDatabasePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/DeleteDistributedDatabasePrivateEndpoint.ts.html |here} to see how to use DeleteDistributedDatabasePrivateEndpoint API.
     */
    deleteDistributedDatabasePrivateEndpoint(deleteDistributedDatabasePrivateEndpointRequest: requests.DeleteDistributedDatabasePrivateEndpointRequest): Promise<responses.DeleteDistributedDatabasePrivateEndpointResponse>;
    /**
     * Get the DistributedDatabasePrivateEndpoint resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDistributedDatabasePrivateEndpointRequest
     * @return GetDistributedDatabasePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GetDistributedDatabasePrivateEndpoint.ts.html |here} to see how to use GetDistributedDatabasePrivateEndpoint API.
     */
    getDistributedDatabasePrivateEndpoint(getDistributedDatabasePrivateEndpointRequest: requests.GetDistributedDatabasePrivateEndpointRequest): Promise<responses.GetDistributedDatabasePrivateEndpointResponse>;
    /**
     * List of DistributedDatabasePrivateEndpoints.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDistributedDatabasePrivateEndpointsRequest
     * @return ListDistributedDatabasePrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListDistributedDatabasePrivateEndpoints.ts.html |here} to see how to use ListDistributedDatabasePrivateEndpoints API.
     */
    listDistributedDatabasePrivateEndpoints(listDistributedDatabasePrivateEndpointsRequest: requests.ListDistributedDatabasePrivateEndpointsRequest): Promise<responses.ListDistributedDatabasePrivateEndpointsResponse>;
    /**
     * Reinstates the proxy instance associated with the DistributedDatabasePrivateEndpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ReinstateProxyInstanceRequest
     * @return ReinstateProxyInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ReinstateProxyInstance.ts.html |here} to see how to use ReinstateProxyInstance API.
     */
    reinstateProxyInstance(reinstateProxyInstanceRequest: requests.ReinstateProxyInstanceRequest): Promise<responses.ReinstateProxyInstanceResponse>;
    /**
     * Updates the configuration of DistributedDatabasePrivateEndpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDistributedDatabasePrivateEndpointRequest
     * @return UpdateDistributedDatabasePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/UpdateDistributedDatabasePrivateEndpoint.ts.html |here} to see how to use UpdateDistributedDatabasePrivateEndpoint API.
     */
    updateDistributedDatabasePrivateEndpoint(updateDistributedDatabasePrivateEndpointRequest: requests.UpdateDistributedDatabasePrivateEndpointRequest): Promise<responses.UpdateDistributedDatabasePrivateEndpointResponse>;
}
export declare enum DistributedDbServiceApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DistributedDbServiceClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DistributedDbServiceWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DistributedDbServiceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DistributedDbServiceWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DistributedDbServiceWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Add new Global database services control(GDS CTL) node for the Globally distributed database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddDistributedDatabaseGdsControlNodeRequest
     * @return AddDistributedDatabaseGdsControlNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/AddDistributedDatabaseGdsControlNode.ts.html |here} to see how to use AddDistributedDatabaseGdsControlNode API.
     */
    addDistributedDatabaseGdsControlNode(addDistributedDatabaseGdsControlNodeRequest: requests.AddDistributedDatabaseGdsControlNodeRequest): Promise<responses.AddDistributedDatabaseGdsControlNodeResponse>;
    /**
     * Move the Globally distributed database and its dependent resources to the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDistributedDatabaseCompartmentRequest
     * @return ChangeDistributedDatabaseCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ChangeDistributedDatabaseCompartment.ts.html |here} to see how to use ChangeDistributedDatabaseCompartment API.
     */
    changeDistributedDatabaseCompartment(changeDistributedDatabaseCompartmentRequest: requests.ChangeDistributedDatabaseCompartmentRequest): Promise<responses.ChangeDistributedDatabaseCompartmentResponse>;
    /**
     * Change the DbBackupConfig for the Globally distributed database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDistributedDbBackupConfigRequest
     * @return ChangeDistributedDbBackupConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ChangeDistributedDbBackupConfig.ts.html |here} to see how to use ChangeDistributedDbBackupConfig API.
     */
    changeDistributedDbBackupConfig(changeDistributedDbBackupConfigRequest: requests.ChangeDistributedDbBackupConfigRequest): Promise<responses.ChangeDistributedDbBackupConfigResponse>;
    /**
     * Configure new Global Service Manager(GSM aka shard manager) instances for the Globally distributed database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ConfigureDistributedDatabaseGsmsRequest
     * @return ConfigureDistributedDatabaseGsmsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ConfigureDistributedDatabaseGsms.ts.html |here} to see how to use ConfigureDistributedDatabaseGsms API.
     */
    configureDistributedDatabaseGsms(configureDistributedDatabaseGsmsRequest: requests.ConfigureDistributedDatabaseGsmsRequest): Promise<responses.ConfigureDistributedDatabaseGsmsResponse>;
    /**
     * Once all components of Globally distributed database are provisioned, and signed GSM certificates are successfully uploaded, this
     * api shall be invoked to configure sharding on the Globally distributed database. Note that this 'ConfigureSharding' API also needs to be
     * invoked after successfully adding a new shard to the Globally distributed database using PATCH api. If this API is not
     * invoked after successfully adding a new shard, then that new shard will not be a participant in sharding topology of
     * the Globally distributed database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ConfigureDistributedDatabaseShardingRequest
     * @return ConfigureDistributedDatabaseShardingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ConfigureDistributedDatabaseSharding.ts.html |here} to see how to use ConfigureDistributedDatabaseSharding API.
     */
    configureDistributedDatabaseSharding(configureDistributedDatabaseShardingRequest: requests.ConfigureDistributedDatabaseShardingRequest): Promise<responses.ConfigureDistributedDatabaseShardingResponse>;
    /**
     * Creates a Globally distributed database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDistributedDatabaseRequest
     * @return CreateDistributedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/CreateDistributedDatabase.ts.html |here} to see how to use CreateDistributedDatabase API.
     */
    createDistributedDatabase(createDistributedDatabaseRequest: requests.CreateDistributedDatabaseRequest): Promise<responses.CreateDistributedDatabaseResponse>;
    /**
     * Terminate the given Globally distributed databases.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDistributedDatabaseRequest
     * @return DeleteDistributedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/DeleteDistributedDatabase.ts.html |here} to see how to use DeleteDistributedDatabase API.
     */
    deleteDistributedDatabase(deleteDistributedDatabaseRequest: requests.DeleteDistributedDatabaseRequest): Promise<responses.DeleteDistributedDatabaseResponse>;
    /**
     * Generate the common certificate signing request for GSMs. Download the <globaldb-prefix>.csr file from
     * API response. Users can use this .csr file to generate the CA signed certificate, and as a next step
     * use 'uploadSignedCertificateAndGenerateWallet' API to upload the CA signed certificate to GSM, and
     * generate wallets for the GSM instances of the Globally distributed database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadDistributedDatabaseGsmCertificateSigningRequestRequest
     * @return DownloadDistributedDatabaseGsmCertificateSigningRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/DownloadDistributedDatabaseGsmCertificateSigningRequest.ts.html |here} to see how to use DownloadDistributedDatabaseGsmCertificateSigningRequest API.
     */
    downloadDistributedDatabaseGsmCertificateSigningRequest(downloadDistributedDatabaseGsmCertificateSigningRequestRequest: requests.DownloadDistributedDatabaseGsmCertificateSigningRequestRequest): Promise<responses.DownloadDistributedDatabaseGsmCertificateSigningRequestResponse>;
    /**
     * Generate the certificate signing request for GSM instances of the Globally distributed database. Once certificate signing
     * request is generated, then customers can download the certificate signing request using
     * 'downloadGsmCertificateSigningRequest' api call.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateDistributedDatabaseGsmCertificateSigningRequestRequest
     * @return GenerateDistributedDatabaseGsmCertificateSigningRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GenerateDistributedDatabaseGsmCertificateSigningRequest.ts.html |here} to see how to use GenerateDistributedDatabaseGsmCertificateSigningRequest API.
     */
    generateDistributedDatabaseGsmCertificateSigningRequest(generateDistributedDatabaseGsmCertificateSigningRequestRequest: requests.GenerateDistributedDatabaseGsmCertificateSigningRequestRequest): Promise<responses.GenerateDistributedDatabaseGsmCertificateSigningRequestResponse>;
    /**
     * Generate the wallet associated with Globally distributed database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateDistributedDatabaseWalletRequest
     * @return GenerateDistributedDatabaseWalletResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GenerateDistributedDatabaseWallet.ts.html |here} to see how to use GenerateDistributedDatabaseWallet API.
     */
    generateDistributedDatabaseWallet(generateDistributedDatabaseWalletRequest: requests.GenerateDistributedDatabaseWalletRequest): Promise<responses.GenerateDistributedDatabaseWalletResponse>;
    /**
     * Gets the details of the Globally distributed database identified by given id.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDistributedDatabaseRequest
     * @return GetDistributedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GetDistributedDatabase.ts.html |here} to see how to use GetDistributedDatabase API.
     */
    getDistributedDatabase(getDistributedDatabaseRequest: requests.GetDistributedDatabaseRequest): Promise<responses.GetDistributedDatabaseResponse>;
    /**
     * List of Globally distributed databases.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDistributedDatabasesRequest
     * @return ListDistributedDatabasesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListDistributedDatabases.ts.html |here} to see how to use ListDistributedDatabases API.
     */
    listDistributedDatabases(listDistributedDatabasesRequest: requests.ListDistributedDatabasesRequest): Promise<responses.ListDistributedDatabasesResponse>;
    /**
     * Patch operation to add, remove or update shards to the Globally distributed database topology. In single patch
     * operation, multiple shards can be either added, or removed or updated. Combination of inserts, update
     * and remove in single operation is not allowed.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchDistributedDatabaseRequest
     * @return PatchDistributedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/PatchDistributedDatabase.ts.html |here} to see how to use PatchDistributedDatabase API.
     */
    patchDistributedDatabase(patchDistributedDatabaseRequest: requests.PatchDistributedDatabaseRequest): Promise<responses.PatchDistributedDatabaseResponse>;
    /**
     * Rotate passwords for different components of the Globally distributed database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RotateDistributedDatabasePasswordsRequest
     * @return RotateDistributedDatabasePasswordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/RotateDistributedDatabasePasswords.ts.html |here} to see how to use RotateDistributedDatabasePasswords API.
     */
    rotateDistributedDatabasePasswords(rotateDistributedDatabasePasswordsRequest: requests.RotateDistributedDatabasePasswordsRequest): Promise<responses.RotateDistributedDatabasePasswordsResponse>;
    /**
     * Start the shards, catalog and GSMs of Globally distributed database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StartDistributedDatabaseRequest
     * @return StartDistributedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/StartDistributedDatabase.ts.html |here} to see how to use StartDistributedDatabase API.
     */
    startDistributedDatabase(startDistributedDatabaseRequest: requests.StartDistributedDatabaseRequest): Promise<responses.StartDistributedDatabaseResponse>;
    /**
     * Stop the shards, catalog and GSM instances for the Globally distributed database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StopDistributedDatabaseRequest
     * @return StopDistributedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/StopDistributedDatabase.ts.html |here} to see how to use StopDistributedDatabase API.
     */
    stopDistributedDatabase(stopDistributedDatabaseRequest: requests.StopDistributedDatabaseRequest): Promise<responses.StopDistributedDatabaseResponse>;
    /**
     * Updates the configuration of the Globally distributed database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDistributedDatabaseRequest
     * @return UpdateDistributedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/UpdateDistributedDatabase.ts.html |here} to see how to use UpdateDistributedDatabase API.
     */
    updateDistributedDatabase(updateDistributedDatabaseRequest: requests.UpdateDistributedDatabaseRequest): Promise<responses.UpdateDistributedDatabaseResponse>;
    /**
     * Upload the CA signed certificate to the GSM instances and generate wallets for GSM instances of the
     * Globally distributed database. Customer shall provide the CA signed certificate key details by adding the certificate
     * in request body.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest
     * @return UploadDistributedDatabaseSignedCertificateAndGenerateWalletResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/UploadDistributedDatabaseSignedCertificateAndGenerateWallet.ts.html |here} to see how to use UploadDistributedDatabaseSignedCertificateAndGenerateWallet API.
     */
    uploadDistributedDatabaseSignedCertificateAndGenerateWallet(uploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest: requests.UploadDistributedDatabaseSignedCertificateAndGenerateWalletRequest): Promise<responses.UploadDistributedDatabaseSignedCertificateAndGenerateWalletResponse>;
    /**
     * Validate the network connectivity between components of the globally distributed database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ValidateDistributedDatabaseNetworkRequest
     * @return ValidateDistributedDatabaseNetworkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ValidateDistributedDatabaseNetwork.ts.html |here} to see how to use ValidateDistributedDatabaseNetwork API.
     */
    validateDistributedDatabaseNetwork(validateDistributedDatabaseNetworkRequest: requests.ValidateDistributedDatabaseNetworkRequest): Promise<responses.ValidateDistributedDatabaseNetworkResponse>;
}
export declare enum DistributedDbWorkRequestServiceApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DistributedDbWorkRequestServiceClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DistributedDbWorkRequestServiceWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DistributedDbWorkRequestServiceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DistributedDbWorkRequestServiceWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DistributedDbWorkRequestServiceWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Gets details of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Returns a (paginated) list of errors for the work request with the given ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Returns a (paginated) list of logs for the work request with the given ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/distributeddatabase/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
}
export {};
