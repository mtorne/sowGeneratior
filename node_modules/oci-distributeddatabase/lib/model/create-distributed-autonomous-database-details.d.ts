/**
 * Globally Distributed Database
 * Use the Globally Distributed Database service APIs to create and manage the Globally distributed databases.
 * OpenAPI spec version: 20250101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Details required for creation of the Globally distributed autonomous database.
 */
export interface CreateDistributedAutonomousDatabaseDetails {
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Globally distributed autonomous database compartment.
     */
    "compartmentId": string;
    /**
     * The display name of the Globally distributed autonomous database.
     */
    "displayName": string;
    /**
     * Oracle Database version for the shards and catalog used in Globally distributed autonomous database.
     */
    "databaseVersion": string;
    /**
     * Unique name prefix for the Globally distributed autonomous databases. Only alpha-numeric values are allowed. First character
     * has to be a letter followed by any combination of letter and number.
     *
     */
    "prefix": string;
    /**
     * The collection of [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the private endpoint associated with Globally distributed autonomous database.
     */
    "privateEndpointIds": Array<string>;
    /**
     * Sharding Methods for the Globally distributed autonomous database.
     */
    "shardingMethod": CreateDistributedAutonomousDatabaseDetails.ShardingMethod;
    /**
     * Possible workload types.
     */
    "dbWorkload": CreateDistributedAutonomousDatabaseDetails.DbWorkload;
    /**
     * The character set for the database.
     */
    "characterSet": string;
    /**
     * The national character set for the database.
     */
    "ncharacterSet": string;
    /**
     * The default number of unique chunks in a shardspace. The value of chunks must be
     * greater than 2 times the size of the largest shardgroup in any shardspace.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "chunks"?: number;
    /**
     * The listener port number for the Globally distributed autonomous database. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "listenerPort": number;
    /**
     * The TLS listener port number for Globally distributed autonomous database. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "listenerPortTls"?: number;
    /**
     * Ons local port number. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "onsPortLocal": number;
    /**
     * Ons remote port number. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "onsPortRemote": number;
    /**
     * The Replication method for Globally distributed autonomous database. Use RAFT for Raft replication, and DG for
     * DataGuard. If replicationMethod is not provided, it defaults to DG.
     *
     */
    "replicationMethod"?: CreateDistributedAutonomousDatabaseDetails.ReplicationMethod;
    /**
     * The Replication factor for RAFT replication based Globally distributed autonomous database. Currently supported values are 3, 5 and 7.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "replicationFactor"?: number;
    /**
     * For RAFT replication based Globally distributed autonomous database, the value should be atleast twice the number of shards. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "replicationUnit"?: number;
    /**
     * The distributed autonomous database deployment type.
     *
     */
    "dbDeploymentType": CreateDistributedAutonomousDatabaseDetails.DbDeploymentType;
    /**
     * Collection of shards for the Globally distributed autonomous database.
     */
    "shardDetails": Array<model.CreateDistributedAutonomousDatabaseShardDetails>;
    /**
     * Collection of catalog for the Globally distributed autonomous database.
     */
    "catalogDetails": Array<model.CreateDistributedAutonomousDatabaseCatalogDetails>;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace CreateDistributedAutonomousDatabaseDetails {
    enum ShardingMethod {
        User = "USER",
        System = "SYSTEM"
    }
    enum DbWorkload {
        Oltp = "OLTP",
        Dw = "DW"
    }
    enum ReplicationMethod {
        Raft = "RAFT",
        Dg = "DG"
    }
    enum DbDeploymentType {
        AdbD = "ADB_D"
    }
    function getJsonObj(obj: CreateDistributedAutonomousDatabaseDetails): object;
    function getDeserializedJsonObj(obj: CreateDistributedAutonomousDatabaseDetails): object;
}
