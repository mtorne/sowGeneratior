"use strict";
/**
 * Globally Distributed Database
 * Use the Globally Distributed Database service APIs to create and manage the Globally distributed databases.
 * OpenAPI spec version: 20250101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationType = void 0;
/**
 * Possible operation types.
 **/
var OperationType;
(function (OperationType) {
    OperationType["CreateDistributedDb"] = "CREATE_DISTRIBUTED_DB";
    OperationType["PatchDistributedDbInsertShards"] = "PATCH_DISTRIBUTED_DB_INSERT_SHARDS";
    OperationType["PatchDistributedDbRemoveShards"] = "PATCH_DISTRIBUTED_DB_REMOVE_SHARDS";
    OperationType["PatchDistributedDbMergeCatalogShards"] = "PATCH_DISTRIBUTED_DB_MERGE_CATALOG_SHARDS";
    OperationType["DeleteDistributedDb"] = "DELETE_DISTRIBUTED_DB";
    OperationType["ChangeDistributedDbCompartment"] = "CHANGE_DISTRIBUTED_DB_COMPARTMENT";
    OperationType["ConfigureDistributedDbGsms"] = "CONFIGURE_DISTRIBUTED_DB_GSMS";
    OperationType["ConfigureDistributedDbSharding"] = "CONFIGURE_DISTRIBUTED_DB_SHARDING";
    OperationType["GenerateDistributedDbGsmCertSigningReq"] = "GENERATE_DISTRIBUTED_DB_GSM_CERT_SIGNING_REQ";
    OperationType["RotateDistributedDbPasswords"] = "ROTATE_DISTRIBUTED_DB_PASSWORDS";
    OperationType["StartDistributedDb"] = "START_DISTRIBUTED_DB";
    OperationType["StopDistributedDb"] = "STOP_DISTRIBUTED_DB";
    OperationType["StartDistributedDbShard"] = "START_DISTRIBUTED_DB_SHARD";
    OperationType["StartDistributedDbCatalog"] = "START_DISTRIBUTED_DB_CATALOG";
    OperationType["StopDistributedDbShard"] = "STOP_DISTRIBUTED_DB_SHARD";
    OperationType["StopDistributedDbCatalog"] = "STOP_DISTRIBUTED_DB_CATALOG";
    OperationType["UploadDistributedDbSignedCertAndGenerateWallet"] = "UPLOAD_DISTRIBUTED_DB_SIGNED_CERT_AND_GENERATE_WALLET";
    OperationType["CreateDistributedDbShard"] = "CREATE_DISTRIBUTED_DB_SHARD";
    OperationType["CreateDistributedDbCatalog"] = "CREATE_DISTRIBUTED_DB_CATALOG";
    OperationType["CreateDistributedDbGsm"] = "CREATE_DISTRIBUTED_DB_GSM";
    OperationType["UpdateDistributedDbCatalogShards"] = "UPDATE_DISTRIBUTED_DB_CATALOG_SHARDS";
    OperationType["ValidateNetwork"] = "VALIDATE_NETWORK";
    OperationType["ExecuteValidateNetworkTests"] = "EXECUTE_VALIDATE_NETWORK_TESTS";
    OperationType["CreatePrivateEndpoint"] = "CREATE_PRIVATE_ENDPOINT";
    OperationType["DeletePrivateEndpoint"] = "DELETE_PRIVATE_ENDPOINT";
    OperationType["ChangePrivateEndpointCompartment"] = "CHANGE_PRIVATE_ENDPOINT_COMPARTMENT";
    OperationType["ReinstateProxyInstance"] = "REINSTATE_PROXY_INSTANCE";
    OperationType["DeleteDistributedDbShard"] = "DELETE_DISTRIBUTED_DB_SHARD";
    OperationType["DeleteDistributedDbCatalog"] = "DELETE_DISTRIBUTED_DB_CATALOG";
    OperationType["DeleteDistributedDbGsm"] = "DELETE_DISTRIBUTED_DB_GSM";
    OperationType["AddGdscontrolNode"] = "ADD_GDSCONTROL_NODE";
    OperationType["ChangeDistributedDbBackupConfig"] = "CHANGE_DISTRIBUTED_DB_BACKUP_CONFIG";
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    OperationType["UnknownValue"] = "UNKNOWN_VALUE";
})(OperationType = exports.OperationType || (exports.OperationType = {}));
(function (OperationType) {
    function getJsonObj(obj) {
        return obj;
    }
    OperationType.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        return obj;
    }
    OperationType.getDeserializedJsonObj = getDeserializedJsonObj;
})(OperationType = exports.OperationType || (exports.OperationType = {}));
//# sourceMappingURL=operation-type.js.map