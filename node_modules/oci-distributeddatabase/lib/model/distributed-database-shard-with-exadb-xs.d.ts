/**
 * Globally Distributed Database
 * Use the Globally Distributed Database service APIs to create and manage the Globally distributed databases.
 * OpenAPI spec version: 20250101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Globally distributed database shard based on exadbxs.
 */
export interface DistributedDatabaseShardWithExadbXs extends model.DistributedDatabaseShard {
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
     */
    "dbHomeId"?: string;
    /**
     * The name of the shardGroup for the shard.
     */
    "shardGroup": string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VmCluster.
     */
    "vmClusterId": string;
    /**
     * The shard space name for the Globally distributed database. Shard space for existing shard cannot be changed, once shard is created.
     * Shard space name shall be used while creation of new shards.
     *
     */
    "shardSpace"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.oracle.com/iaas/Content/KeyManagement/Concepts/keyoverview.htm#concepts). This parameter and {@code kmsKeyId} are required for Customer Managed Keys.
     */
    "vaultId"?: string;
    /**
     * The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
     */
    "kmsKeyId"?: string;
    /**
     * The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions.
     *
     */
    "kmsKeyVersionId"?: string;
    /**
     * Status of shard based on exadbxs for the Globally ditributed database.
     */
    "status": DistributedDatabaseShardWithExadbXs.Status;
    /**
     * the identifier of the underlying supporting resource.
     */
    "supportingResourceId"?: string;
    /**
     * the identifier of the container database for underlying supporting resource.
     */
    "containerDatabaseId"?: string;
    /**
     * Peer details for the shard.
     */
    "peerDetails"?: Array<model.ShardPeerWithExadbXs>;
    "metadata"?: model.DistributedDbMetadata;
    "source": string;
}
export declare namespace DistributedDatabaseShardWithExadbXs {
    enum Status {
        Failed = "FAILED",
        Deleting = "DELETING",
        Deleted = "DELETED",
        Updating = "UPDATING",
        Creating = "CREATING",
        Created = "CREATED",
        ReadyForConfiguration = "READY_FOR_CONFIGURATION",
        Configured = "CONFIGURED",
        NeedsAttention = "NEEDS_ATTENTION",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: DistributedDatabaseShardWithExadbXs, isParentJsonObj?: boolean): object;
    const source = "EXADB_XS";
    function getDeserializedJsonObj(obj: DistributedDatabaseShardWithExadbXs, isParentJsonObj?: boolean): object;
}
