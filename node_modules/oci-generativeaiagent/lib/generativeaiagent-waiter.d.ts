/**
 * Generative AI Agents Management API
 * OCI Generative AI Agents is a fully managed service that combines the power of large language models (LLMs) with an intelligent retrieval system to create contextually relevant answers by searching your knowledge base, making your AI applications smart and efficient.

OCI Generative AI Agents supports several ways to onboard your data and then allows you and your customers to interact with your data using a chat interface or API.

Use the Generative AI Agents API to create and manage agents, knowledge bases, data sources, endpoints, data ingestion jobs, and work requests.

For creating and managing client chat sessions see the {@link #eNGenerative-ai-agents-clientLatest(ENGenerative-ai-agents-clientLatestRequest) eNGenerative-ai-agents-clientLatest}.

To learn more about the service, see the [Generative AI Agents documentation](https://docs.oracle.com/iaas/Content/generative-ai-agents/home.htm).

 * OpenAPI spec version: 20240531
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { GenerativeAiAgentClient } from "./client";
export declare class GenerativeAiAgentWaiter {
    private client;
    private readonly config?;
    constructor(client: GenerativeAiAgentClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAgent till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAgentResponse | null (null in case of 404 response)
     */
    forAgent(request: serviceRequests.GetAgentRequest, ...targetStates: models.Agent.LifecycleState[]): Promise<serviceResponses.GetAgentResponse | null>;
    /**
     * Waits forAgentEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAgentEndpointResponse | null (null in case of 404 response)
     */
    forAgentEndpoint(request: serviceRequests.GetAgentEndpointRequest, ...targetStates: models.AgentEndpoint.LifecycleState[]): Promise<serviceResponses.GetAgentEndpointResponse | null>;
    /**
     * Waits forDataIngestionJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataIngestionJobResponse | null (null in case of 404 response)
     */
    forDataIngestionJob(request: serviceRequests.GetDataIngestionJobRequest, ...targetStates: models.DataIngestionJob.LifecycleState[]): Promise<serviceResponses.GetDataIngestionJobResponse | null>;
    /**
     * Waits forDataSource till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataSourceResponse | null (null in case of 404 response)
     */
    forDataSource(request: serviceRequests.GetDataSourceRequest, ...targetStates: models.DataSource.LifecycleState[]): Promise<serviceResponses.GetDataSourceResponse | null>;
    /**
     * Waits forKnowledgeBase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetKnowledgeBaseResponse | null (null in case of 404 response)
     */
    forKnowledgeBase(request: serviceRequests.GetKnowledgeBaseRequest, ...targetStates: models.KnowledgeBase.LifecycleState[]): Promise<serviceResponses.GetKnowledgeBaseResponse | null>;
    /**
     * Waits forTool till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetToolResponse | null (null in case of 404 response)
     */
    forTool(request: serviceRequests.GetToolRequest, ...targetStates: models.Tool.LifecycleState[]): Promise<serviceResponses.GetToolResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
