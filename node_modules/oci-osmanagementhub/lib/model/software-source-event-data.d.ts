/**
 * OS Management Hub API
 * Use the OS Management Hub API to manage and monitor updates and patches for instances in OCI, your private data center, or 3rd-party clouds.
For more information, see [Overview of OS Management Hub](https://docs.oracle.com/iaas/osmh/doc/overview.htm).

 * OpenAPI spec version: 20220901
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Provides additional information for a software source event.
 */
export interface SoftwareSourceEventData {
    /**
     * Type of software source operation.
     */
    "operationType": SoftwareSourceEventData.OperationType;
    /**
     * Status of the software source operation.
     */
    "status": model.EventStatus;
    "additionalDetails"?: model.WorkRequestEventDataAdditionalDetails;
}
export declare namespace SoftwareSourceEventData {
    enum OperationType {
        EnableModuleStreams = "ENABLE_MODULE_STREAMS",
        DisableModuleStreams = "DISABLE_MODULE_STREAMS",
        SwitchModuleStream = "SWITCH_MODULE_STREAM",
        InstallModuleProfile = "INSTALL_MODULE_PROFILE",
        RemoveModuleProfiles = "REMOVE_MODULE_PROFILES",
        SetSoftwareSources = "SET_SOFTWARE_SOURCES",
        UpdateSoftwareSource = "UPDATE_SOFTWARE_SOURCE",
        CreateSoftwareSource = "CREATE_SOFTWARE_SOURCE",
        LifecyclePromotion = "LIFECYCLE_PROMOTION",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: SoftwareSourceEventData): object;
    function getDeserializedJsonObj(obj: SoftwareSourceEventData): object;
}
