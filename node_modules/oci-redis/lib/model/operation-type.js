"use strict";
/**
 * OCI Cache API
 * Use the OCI Cache API to create and manage clusters. A cluster is a memory-based storage solution. For more information, see [OCI Cache](https://docs.oracle.com/iaas/Content/ocicache/home.htm).
 * OpenAPI spec version: 20220315
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationType = void 0;
/**
 * Possible operation types.
 **/
var OperationType;
(function (OperationType) {
    OperationType["CreateRedisCluster"] = "CREATE_REDIS_CLUSTER";
    OperationType["UpdateRedisCluster"] = "UPDATE_REDIS_CLUSTER";
    OperationType["DeleteRedisCluster"] = "DELETE_REDIS_CLUSTER";
    OperationType["MoveRedisCluster"] = "MOVE_REDIS_CLUSTER";
    OperationType["FailoverRedisCluster"] = "FAILOVER_REDIS_CLUSTER";
    OperationType["CreateRedisConfigSet"] = "CREATE_REDIS_CONFIG_SET";
    OperationType["UpdateRedisConfigSet"] = "UPDATE_REDIS_CONFIG_SET";
    OperationType["DeleteRedisConfigSet"] = "DELETE_REDIS_CONFIG_SET";
    OperationType["MoveRedisConfigSet"] = "MOVE_REDIS_CONFIG_SET";
    OperationType["MigrateCluster"] = "MIGRATE_CLUSTER";
    OperationType["ClusterRollback"] = "CLUSTER_ROLLBACK";
    OperationType["AttachOciCacheUsers"] = "ATTACH_OCI_CACHE_USERS";
    OperationType["DetachOciCacheUsers"] = "DETACH_OCI_CACHE_USERS";
    OperationType["CreateOciCacheUser"] = "CREATE_OCI_CACHE_USER";
    OperationType["UpdateOciCacheUser"] = "UPDATE_OCI_CACHE_USER";
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    OperationType["UnknownValue"] = "UNKNOWN_VALUE";
})(OperationType = exports.OperationType || (exports.OperationType = {}));
(function (OperationType) {
    function getJsonObj(obj) {
        return obj;
    }
    OperationType.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        return obj;
    }
    OperationType.getDeserializedJsonObj = getDeserializedJsonObj;
})(OperationType = exports.OperationType || (exports.OperationType = {}));
//# sourceMappingURL=operation-type.js.map