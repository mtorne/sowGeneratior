/**
 * OCI Cache API
 * Use the OCI Cache API to create and manage clusters. A cluster is a memory-based storage solution. For more information, see [OCI Cache](https://docs.oracle.com/iaas/Content/ocicache/home.htm).
 * OpenAPI spec version: 20220315
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { OciCacheUserWaiter } from "./ocicacheuser-waiter";
import { RedisClusterWaiter } from "./rediscluster-waiter";
declare const Breaker: any;
export declare enum OciCacheUserApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class OciCacheUserClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": OciCacheUserWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new OciCacheUserWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): OciCacheUserWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): OciCacheUserWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Moves an OCI Cache User from one compartment to another within the same tenancy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeOciCacheUserCompartmentRequest
     * @return ChangeOciCacheUserCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/ChangeOciCacheUserCompartment.ts.html |here} to see how to use ChangeOciCacheUserCompartment API.
     */
    changeOciCacheUserCompartment(changeOciCacheUserCompartmentRequest: requests.ChangeOciCacheUserCompartmentRequest): Promise<responses.ChangeOciCacheUserCompartmentResponse>;
    /**
     * Creates a new OCI Cache user. OCI Cache user is required to authenticate to OCI Cache cluster.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOciCacheUserRequest
     * @return CreateOciCacheUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/CreateOciCacheUser.ts.html |here} to see how to use CreateOciCacheUser API.
     */
    createOciCacheUser(createOciCacheUserRequest: requests.CreateOciCacheUserRequest): Promise<responses.CreateOciCacheUserResponse>;
    /**
     * Deletes an existing OCI Cache User based on the OCI cache user unique ID (OCID).
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOciCacheUserRequest
     * @return DeleteOciCacheUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/DeleteOciCacheUser.ts.html |here} to see how to use DeleteOciCacheUser API.
     */
    deleteOciCacheUser(deleteOciCacheUserRequest: requests.DeleteOciCacheUserRequest): Promise<responses.DeleteOciCacheUserResponse>;
    /**
     * Get an existing OCI Cache users based on the ID (OCID).
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOciCacheUserRequest
     * @return GetOciCacheUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/GetOciCacheUser.ts.html |here} to see how to use GetOciCacheUser API.
     */
    getOciCacheUser(getOciCacheUserRequest: requests.GetOciCacheUserRequest): Promise<responses.GetOciCacheUserResponse>;
    /**
     * Gets a list of associated redis cluster for an OCI cache user.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAttachedRedisClustersRequest
     * @return ListAttachedRedisClustersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/ListAttachedRedisClusters.ts.html |here} to see how to use ListAttachedRedisClusters API.
     */
    listAttachedRedisClusters(listAttachedRedisClustersRequest: requests.ListAttachedRedisClustersRequest): Promise<responses.ListAttachedRedisClustersResponse>;
    /**
     * NOTE: This function is deprecated in favor of listAttachedRedisClustersRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AttachedOciCacheCluster objects
     * contained in responses from the listAttachedRedisClusters operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAttachedRedisClusters(request: requests.ListAttachedRedisClustersRequest): AsyncIterableIterator<model.AttachedOciCacheCluster>;
    /**
     * NOTE: This function is deprecated in favor of listAttachedRedisClustersResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAttachedRedisClusters operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAttachedRedisClustersResponses(request: requests.ListAttachedRedisClustersRequest): AsyncIterableIterator<responses.ListAttachedRedisClustersResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.AttachedOciCacheCluster objects
     * contained in responses from the listAttachedRedisClusters operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAttachedRedisClustersRecordIterator(request: requests.ListAttachedRedisClustersRequest): AsyncIterableIterator<model.AttachedOciCacheCluster>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAttachedRedisClusters operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAttachedRedisClustersResponseIterator(request: requests.ListAttachedRedisClustersRequest): AsyncIterableIterator<responses.ListAttachedRedisClustersResponse>;
    /**
     * Lists the OCI Cache users based on the supplied parameters.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOciCacheUsersRequest
     * @return ListOciCacheUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/ListOciCacheUsers.ts.html |here} to see how to use ListOciCacheUsers API.
     */
    listOciCacheUsers(listOciCacheUsersRequest: requests.ListOciCacheUsersRequest): Promise<responses.ListOciCacheUsersResponse>;
    /**
     * Update an existing OCI Cache User with new details.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOciCacheUserRequest
     * @return UpdateOciCacheUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/UpdateOciCacheUser.ts.html |here} to see how to use UpdateOciCacheUser API.
     */
    updateOciCacheUser(updateOciCacheUserRequest: requests.UpdateOciCacheUserRequest): Promise<responses.UpdateOciCacheUserResponse>;
}
export declare enum RedisClusterApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class RedisClusterClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": RedisClusterWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new RedisClusterWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): RedisClusterWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): RedisClusterWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Attach existing OCI cache users to a redis cluster.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AttachOciCacheUsersRequest
     * @return AttachOciCacheUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/AttachOciCacheUsers.ts.html |here} to see how to use AttachOciCacheUsers API.
     */
    attachOciCacheUsers(attachOciCacheUsersRequest: requests.AttachOciCacheUsersRequest): Promise<responses.AttachOciCacheUsersResponse>;
    /**
     * Cancels the specified work request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest: requests.CancelWorkRequestRequest): Promise<responses.CancelWorkRequestResponse>;
    /**
     * Moves an OCI Cache cluster into a different compartment within the same tenancy. A cluster is a memory-based storage solution. For more information, see [OCI Cache](https://docs.oracle.com/iaas/Content/ocicache/home.htm).
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeRedisClusterCompartmentRequest
     * @return ChangeRedisClusterCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/ChangeRedisClusterCompartment.ts.html |here} to see how to use ChangeRedisClusterCompartment API.
     */
    changeRedisClusterCompartment(changeRedisClusterCompartmentRequest: requests.ChangeRedisClusterCompartmentRequest): Promise<responses.ChangeRedisClusterCompartmentResponse>;
    /**
     * Creates a new OCI Cache cluster. A cluster is a memory-based storage solution. For more information, see [OCI Cache](https://docs.oracle.com/iaas/Content/ocicache/home.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateRedisClusterRequest
     * @return CreateRedisClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/CreateRedisCluster.ts.html |here} to see how to use CreateRedisCluster API.
     */
    createRedisCluster(createRedisClusterRequest: requests.CreateRedisClusterRequest): Promise<responses.CreateRedisClusterResponse>;
    /**
     * Deletes the specified OCI Cache cluster. A cluster is a memory-based storage solution. For more information, see [OCI Cache](https://docs.oracle.com/iaas/Content/ocicache/home.htm).
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteRedisClusterRequest
     * @return DeleteRedisClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/DeleteRedisCluster.ts.html |here} to see how to use DeleteRedisCluster API.
     */
    deleteRedisCluster(deleteRedisClusterRequest: requests.DeleteRedisClusterRequest): Promise<responses.DeleteRedisClusterResponse>;
    /**
     * Detach existing OCI cache users to a redis cluster.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DetachOciCacheUsersRequest
     * @return DetachOciCacheUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/DetachOciCacheUsers.ts.html |here} to see how to use DetachOciCacheUsers API.
     */
    detachOciCacheUsers(detachOciCacheUsersRequest: requests.DetachOciCacheUsersRequest): Promise<responses.DetachOciCacheUsersResponse>;
    /**
     * Retrieves the specified OCI Cache cluster. A cluster is a memory-based storage solution. For more information, see [OCI Cache](https://docs.oracle.com/iaas/Content/ocicache/home.htm).
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRedisClusterRequest
     * @return GetRedisClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/GetRedisCluster.ts.html |here} to see how to use GetRedisCluster API.
     */
    getRedisCluster(getRedisClusterRequest: requests.GetRedisClusterRequest): Promise<responses.GetRedisClusterResponse>;
    /**
     * Gets the status of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Gets a list of associated OCI cache users for a redis cluster.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAttachedOciCacheUsersRequest
     * @return ListAttachedOciCacheUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/ListAttachedOciCacheUsers.ts.html |here} to see how to use ListAttachedOciCacheUsers API.
     */
    listAttachedOciCacheUsers(listAttachedOciCacheUsersRequest: requests.ListAttachedOciCacheUsersRequest): Promise<responses.ListAttachedOciCacheUsersResponse>;
    /**
     * NOTE: This function is deprecated in favor of listAttachedOciCacheUsersRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AttachedOciCacheUser objects
     * contained in responses from the listAttachedOciCacheUsers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAttachedOciCacheUsers(request: requests.ListAttachedOciCacheUsersRequest): AsyncIterableIterator<model.AttachedOciCacheUser>;
    /**
     * NOTE: This function is deprecated in favor of listAttachedOciCacheUsersResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAttachedOciCacheUsers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAttachedOciCacheUsersResponses(request: requests.ListAttachedOciCacheUsersRequest): AsyncIterableIterator<responses.ListAttachedOciCacheUsersResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.AttachedOciCacheUser objects
     * contained in responses from the listAttachedOciCacheUsers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAttachedOciCacheUsersRecordIterator(request: requests.ListAttachedOciCacheUsersRequest): AsyncIterableIterator<model.AttachedOciCacheUser>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAttachedOciCacheUsers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAttachedOciCacheUsersResponseIterator(request: requests.ListAttachedOciCacheUsersRequest): AsyncIterableIterator<responses.ListAttachedOciCacheUsersResponse>;
    /**
     * Gets the list of all nodes in a cluster.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRedisClusterNodesRequest
     * @return ListRedisClusterNodesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/ListRedisClusterNodes.ts.html |here} to see how to use ListRedisClusterNodes API.
     */
    listRedisClusterNodes(listRedisClusterNodesRequest: requests.ListRedisClusterNodesRequest): Promise<responses.ListRedisClusterNodesResponse>;
    /**
     * Lists the OCI Cache clusters in the specified compartment. A cluster is a memory-based storage solution. For more information, see [OCI Cache](https://docs.oracle.com/iaas/Content/ocicache/home.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRedisClustersRequest
     * @return ListRedisClustersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/ListRedisClusters.ts.html |here} to see how to use ListRedisClusters API.
     */
    listRedisClusters(listRedisClustersRequest: requests.ListRedisClustersRequest): Promise<responses.ListRedisClustersResponse>;
    /**
     * Returns a list of errors for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Returns a list of logs for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * Updates the specified OCI Cache cluster. A cluster is a memory-based storage solution. For more information, see [OCI Cache](https://docs.oracle.com/iaas/Content/ocicache/home.htm).
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateRedisClusterRequest
     * @return UpdateRedisClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/UpdateRedisCluster.ts.html |here} to see how to use UpdateRedisCluster API.
     */
    updateRedisCluster(updateRedisClusterRequest: requests.UpdateRedisClusterRequest): Promise<responses.UpdateRedisClusterResponse>;
}
export declare enum RedisIdentityApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class RedisIdentityClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Generates an identity token to sign in with the specified redis user for the redis cluster
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateIdentityTokenRequest
     * @return CreateIdentityTokenResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/redis/CreateIdentityToken.ts.html |here} to see how to use CreateIdentityToken API.
     */
    createIdentityToken(createIdentityTokenRequest: requests.CreateIdentityTokenRequest): Promise<responses.CreateIdentityTokenResponse>;
}
export {};
