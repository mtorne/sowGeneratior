/**
 * ManagementDashboard API
 * API for the Management Dashboard micro-service. Use this API for dashboard and saved search metadata preservation and to perform  tasks such as creating a dashboard, creating a saved search, and obtaining a list of dashboards and saved searches in a compartment.
    

 * OpenAPI spec version: 20200901
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { DashxApisWaiter } from "./dashxapis-waiter";
declare const Breaker: any;
export declare enum DashxApisApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DashxApisClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DashxApisWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DashxApisWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DashxApisWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DashxApisWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Moves the dashboard from the existing compartment to a new compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeManagementDashboardsCompartmentRequest
     * @return ChangeManagementDashboardsCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/ChangeManagementDashboardsCompartment.ts.html |here} to see how to use ChangeManagementDashboardsCompartment API.
     */
    changeManagementDashboardsCompartment(changeManagementDashboardsCompartmentRequest: requests.ChangeManagementDashboardsCompartmentRequest): Promise<responses.ChangeManagementDashboardsCompartmentResponse>;
    /**
     * Moves the saved search from the existing compartment to a new compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeManagementSavedSearchesCompartmentRequest
     * @return ChangeManagementSavedSearchesCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/ChangeManagementSavedSearchesCompartment.ts.html |here} to see how to use ChangeManagementSavedSearchesCompartment API.
     */
    changeManagementSavedSearchesCompartment(changeManagementSavedSearchesCompartmentRequest: requests.ChangeManagementSavedSearchesCompartmentRequest): Promise<responses.ChangeManagementSavedSearchesCompartmentResponse>;
    /**
     * Creates a new dashboard. Limit for number of saved searches in a dashboard is 20.
     * Here's an example of how you can use CLI to create a dashboard. For information on the details that must be passed to CREATE, you can use the GET API to obtain the Create.json file:
     * `oci management-dashboard dashboard get --management-dashboard-id  \"ocid1.managementdashboard.oc1..dashboardId1\" --query data > Create.json.`
     * You can then modify the Create.json file by removing the `id` attribute and making other required changes, and use the `oci management-dashboard dashboard create` command.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateManagementDashboardRequest
     * @return CreateManagementDashboardResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/CreateManagementDashboard.ts.html |here} to see how to use CreateManagementDashboard API.
     */
    createManagementDashboard(createManagementDashboardRequest: requests.CreateManagementDashboardRequest): Promise<responses.CreateManagementDashboardResponse>;
    /**
     * Creates a new saved search.
     * Here's an example of how you can use CLI to create a saved search. For information on the details that must be passed to CREATE, you can use the GET API to obtain the Create.json file:
     * `oci management-dashboard saved-search get --management-saved-search-id ocid1.managementsavedsearch.oc1..savedsearchId1 --query data > Create.json`.
     * You can then modify the Create.json file by removing the `id` attribute and making other required changes, and use the `oci management-dashboard saved-search create` command.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateManagementSavedSearchRequest
     * @return CreateManagementSavedSearchResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/CreateManagementSavedSearch.ts.html |here} to see how to use CreateManagementSavedSearch API.
     */
    createManagementSavedSearch(createManagementSavedSearchRequest: requests.CreateManagementSavedSearchRequest): Promise<responses.CreateManagementSavedSearchResponse>;
    /**
     * Deletes a Dashboard by ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteManagementDashboardRequest
     * @return DeleteManagementDashboardResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/DeleteManagementDashboard.ts.html |here} to see how to use DeleteManagementDashboard API.
     */
    deleteManagementDashboard(deleteManagementDashboardRequest: requests.DeleteManagementDashboardRequest): Promise<responses.DeleteManagementDashboardResponse>;
    /**
     * Deletes a saved search by ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteManagementSavedSearchRequest
     * @return DeleteManagementSavedSearchResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/DeleteManagementSavedSearch.ts.html |here} to see how to use DeleteManagementSavedSearch API.
     */
    deleteManagementSavedSearch(deleteManagementSavedSearchRequest: requests.DeleteManagementSavedSearchRequest): Promise<responses.DeleteManagementSavedSearchResponse>;
    /**
     * Exports an array of dashboards and their saved searches. Export is designed to work with importDashboard.
     * Here's an example of how you can use CLI to export a dashboard:
     * `$oci management-dashboard dashboard export --query data --export-dashboard-id \"{\\\"dashboardIds\\\":[\\\"ocid1.managementdashboard.oc1..dashboardId1\\\"]}\"  > dashboards.json`
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ExportDashboardRequest
     * @return ExportDashboardResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/ExportDashboard.ts.html |here} to see how to use ExportDashboard API.
     */
    exportDashboard(exportDashboardRequest: requests.ExportDashboardRequest): Promise<responses.ExportDashboardResponse>;
    /**
     * Gets a dashboard and its saved searches by ID.  Deleted or unauthorized saved searches are marked by tile's state property.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagementDashboardRequest
     * @return GetManagementDashboardResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/GetManagementDashboard.ts.html |here} to see how to use GetManagementDashboard API.
     */
    getManagementDashboard(getManagementDashboardRequest: requests.GetManagementDashboardRequest): Promise<responses.GetManagementDashboardResponse>;
    /**
     * Gets a saved search by ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagementSavedSearchRequest
     * @return GetManagementSavedSearchResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/GetManagementSavedSearch.ts.html |here} to see how to use GetManagementSavedSearch API.
     */
    getManagementSavedSearch(getManagementSavedSearchRequest: requests.GetManagementSavedSearchRequest): Promise<responses.GetManagementSavedSearchResponse>;
    /**
     * Gets an OOB dashboard and its saved searches by ID.  Deleted or unauthorized saved searches are marked by tile's state property.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetOobManagementDashboardRequest
     * @return GetOobManagementDashboardResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/GetOobManagementDashboard.ts.html |here} to see how to use GetOobManagementDashboard API.
     */
    getOobManagementDashboard(getOobManagementDashboardRequest: requests.GetOobManagementDashboardRequest): Promise<responses.GetOobManagementDashboardResponse>;
    /**
     * Gets a saved search by ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetOobManagementSavedSearchRequest
     * @return GetOobManagementSavedSearchResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/GetOobManagementSavedSearch.ts.html |here} to see how to use GetOobManagementSavedSearch API.
     */
    getOobManagementSavedSearch(getOobManagementSavedSearchRequest: requests.GetOobManagementSavedSearchRequest): Promise<responses.GetOobManagementSavedSearchResponse>;
    /**
     * Imports an array of dashboards and their saved searches.
     * Here's an example of how you can use CLI to import a dashboard. For information on the details that must be passed to IMPORT, you can use the EXPORT API to obtain the Import.json file:
     * `oci management-dashboard dashboard export --query data --export-dashboard-id \"{\\\"dashboardIds\\\":[\\\"ocid1.managementdashboard.oc1..dashboardId1\\\"]}\"  > Import.json`.
     * Note that import API updates the resource if it already exists, and creates a new resource if it does not exist. To import to a different compartment, edit and change the compartmentId to the desired compartment OCID.
     * Here's an example of how you can use CLI to import:
     * `oci management-dashboard dashboard import --from-json file://Import.json`
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ImportDashboardRequest
     * @return ImportDashboardResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/ImportDashboard.ts.html |here} to see how to use ImportDashboard API.
     */
    importDashboard(importDashboardRequest: requests.ImportDashboardRequest): Promise<responses.ImportDashboardResponse>;
    /**
     * Gets the list of dashboards in a compartment with pagination.  Returned properties are the summary.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagementDashboardsRequest
     * @return ListManagementDashboardsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/ListManagementDashboards.ts.html |here} to see how to use ListManagementDashboards API.
     */
    listManagementDashboards(listManagementDashboardsRequest: requests.ListManagementDashboardsRequest): Promise<responses.ListManagementDashboardsResponse>;
    /**
     * Gets the list of saved searches in a compartment with pagination.  Returned properties are the summary.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagementSavedSearchesRequest
     * @return ListManagementSavedSearchesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/ListManagementSavedSearches.ts.html |here} to see how to use ListManagementSavedSearches API.
     */
    listManagementSavedSearches(listManagementSavedSearchesRequest: requests.ListManagementSavedSearchesRequest): Promise<responses.ListManagementSavedSearchesResponse>;
    /**
     * Gets the list of OOB dashboards with pagination.  Returned properties are the summary.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListOobManagementDashboardsRequest
     * @return ListOobManagementDashboardsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/ListOobManagementDashboards.ts.html |here} to see how to use ListOobManagementDashboards API.
     */
    listOobManagementDashboards(listOobManagementDashboardsRequest: requests.ListOobManagementDashboardsRequest): Promise<responses.ListOobManagementDashboardsResponse>;
    /**
     * Gets the list of out-of-box saved searches in a compartment with pagination.  Returned properties are the summary.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListOobManagementSavedSearchesRequest
     * @return ListOobManagementSavedSearchesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/ListOobManagementSavedSearches.ts.html |here} to see how to use ListOobManagementSavedSearches API.
     */
    listOobManagementSavedSearches(listOobManagementSavedSearchesRequest: requests.ListOobManagementSavedSearchesRequest): Promise<responses.ListOobManagementSavedSearchesResponse>;
    /**
     * Updates an existing dashboard identified by ID path parameter.  CompartmentId can be modified only by the changeCompartment API. Limit for number of saved searches in a dashboard is 20.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateManagementDashboardRequest
     * @return UpdateManagementDashboardResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/UpdateManagementDashboard.ts.html |here} to see how to use UpdateManagementDashboard API.
     */
    updateManagementDashboard(updateManagementDashboardRequest: requests.UpdateManagementDashboardRequest): Promise<responses.UpdateManagementDashboardResponse>;
    /**
     * Updates an existing saved search identified by ID path parameter.  CompartmentId can be modified only by the changeCompartment API.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateManagementSavedSearchRequest
     * @return UpdateManagementSavedSearchResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementdashboard/UpdateManagementSavedSearch.ts.html |here} to see how to use UpdateManagementSavedSearch API.
     */
    updateManagementSavedSearch(updateManagementSavedSearchRequest: requests.UpdateManagementSavedSearchRequest): Promise<responses.UpdateManagementSavedSearchResponse>;
}
export {};
