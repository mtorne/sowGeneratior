/**
 * Big Data Service API
 * REST API for Oracle Big Data Service. Use this API to build, deploy, and manage fully elastic Big Data Service clusters. Build on Hadoop, Spark and Data Science distributions, which can be fully integrated with existing enterprise data in Oracle Database and Oracle applications.

 * OpenAPI spec version: 20190531
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { BdsClient } from "./client";
export declare class BdsWaiter {
    private client;
    private readonly config?;
    constructor(client: BdsClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAutoScalingConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutoScalingConfigurationResponse | null (null in case of 404 response)
     */
    forAutoScalingConfiguration(request: serviceRequests.GetAutoScalingConfigurationRequest, ...targetStates: models.AutoScalingConfiguration.LifecycleState[]): Promise<serviceResponses.GetAutoScalingConfigurationResponse | null>;
    /**
     * Waits forBdsApiKey till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBdsApiKeyResponse | null (null in case of 404 response)
     */
    forBdsApiKey(request: serviceRequests.GetBdsApiKeyRequest, ...targetStates: models.BdsApiKey.LifecycleState[]): Promise<serviceResponses.GetBdsApiKeyResponse | null>;
    /**
     * Waits forBdsInstance till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBdsInstanceResponse | null (null in case of 404 response)
     */
    forBdsInstance(request: serviceRequests.GetBdsInstanceRequest, ...targetStates: models.BdsInstance.LifecycleState[]): Promise<serviceResponses.GetBdsInstanceResponse | null>;
    /**
     * Waits forBdsMetastoreConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBdsMetastoreConfigurationResponse | null (null in case of 404 response)
     */
    forBdsMetastoreConfiguration(request: serviceRequests.GetBdsMetastoreConfigurationRequest, ...targetStates: models.BdsMetastoreConfiguration.LifecycleState[]): Promise<serviceResponses.GetBdsMetastoreConfigurationResponse | null>;
    /**
     * Waits forIdentityConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIdentityConfigurationResponse | null (null in case of 404 response)
     */
    forIdentityConfiguration(request: serviceRequests.GetIdentityConfigurationRequest, ...targetStates: models.IdentityConfiguration.LifecycleState[]): Promise<serviceResponses.GetIdentityConfigurationResponse | null>;
    /**
     * Waits forNodeBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNodeBackupResponse | null (null in case of 404 response)
     */
    forNodeBackup(request: serviceRequests.GetNodeBackupRequest, ...targetStates: models.NodeBackup.LifecycleState[]): Promise<serviceResponses.GetNodeBackupResponse | null>;
    /**
     * Waits forNodeBackupConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNodeBackupConfigurationResponse | null (null in case of 404 response)
     */
    forNodeBackupConfiguration(request: serviceRequests.GetNodeBackupConfigurationRequest, ...targetStates: models.NodeBackupConfiguration.LifecycleState[]): Promise<serviceResponses.GetNodeBackupConfigurationResponse | null>;
    /**
     * Waits forNodeReplaceConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNodeReplaceConfigurationResponse | null (null in case of 404 response)
     */
    forNodeReplaceConfiguration(request: serviceRequests.GetNodeReplaceConfigurationRequest, ...targetStates: models.NodeReplaceConfiguration.LifecycleState[]): Promise<serviceResponses.GetNodeReplaceConfigurationResponse | null>;
    /**
     * Waits forResourcePrincipalConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResourcePrincipalConfigurationResponse | null (null in case of 404 response)
     */
    forResourcePrincipalConfiguration(request: serviceRequests.GetResourcePrincipalConfigurationRequest, ...targetStates: models.ResourcePrincipalConfiguration.LifecycleState[]): Promise<serviceResponses.GetResourcePrincipalConfigurationResponse | null>;
    /**
     * Waits forSoftwareUpdate till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSoftwareUpdateResponse
     */
    forSoftwareUpdate(request: serviceRequests.GetSoftwareUpdateRequest, ...targetStates: models.SoftwareUpdate.LifecycleState[]): Promise<serviceResponses.GetSoftwareUpdateResponse>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
