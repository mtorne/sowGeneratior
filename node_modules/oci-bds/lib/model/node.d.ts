/**
 * Big Data Service API
 * REST API for Oracle Big Data Service. Use this API to build, deploy, and manage fully elastic Big Data Service clusters. Build on Hadoop, Spark and Data Science distributions, which can be fully integrated with existing enterprise data in Oracle Database and Oracle applications.

 * OpenAPI spec version: 20190531
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Details about a node.
 */
export interface Node {
    /**
     * The OCID of the underlying Oracle Cloud Infrastructure Compute instance.
     */
    "instanceId": string;
    /**
     * The name of the node.
     */
    "displayName": string;
    /**
     * The state of the node.
     */
    "lifecycleState": Node.LifecycleState;
    /**
     * Cluster node type.
     */
    "nodeType": Node.NodeType;
    /**
     * Shape of the node.
     */
    "shape": string;
    /**
     * The list of block volumes attached to a given node.
     */
    "attachedBlockVolumes"?: Array<model.VolumeAttachmentDetail>;
    /**
     * The OCID of the subnet in which the node is to be created.
     */
    "subnetId": string;
    /**
     * IP address of the node.
     */
    "ipAddress": string;
    /**
     * The fully-qualified hostname (FQDN) of the node.
     */
    "hostname"?: string;
    /**
     * The OCID of the image from which the node was created.
     */
    "imageId"?: string;
    /**
     * The fingerprint of the SSH key used for node access.
     */
    "sshFingerprint": string;
    /**
     * The name of the availability domain in which the node is running.
     */
    "availabilityDomain": string;
    /**
     * The name of the fault domain in which the node is running.
     */
    "faultDomain": string;
    /**
     * The time the node was created, shown as an RFC 3339 formatted datetime string.
     */
    "timeCreated": Date;
    /**
     * The time the cluster was updated, shown as an RFC 3339 formatted datetime string.
     */
    "timeUpdated"?: Date;
    /**
     * The total number of OCPUs available to the node. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "ocpus"?: number;
    /**
     * The total amount of memory available to the node, in gigabytes. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "memoryInGBs"?: number;
    /**
     * The number of NVMe drives to be used for storage. A single drive has 6.8 TB available. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "nvmes"?: number;
    /**
     * The aggregate size of all local disks, in gigabytes. If the instance does not have any local disks, this field is null. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "localDisksTotalSizeInGBs"?: number;
    /**
     * The date and time the instance is expected to be stopped / started, in the format defined by RFC3339.
     */
    "timeMaintenanceRebootDue"?: Date;
    /**
     * BDS-assigned Operating System version for the node.
     */
    "osVersion"?: string;
    /**
     * Indicates if the node requires a reboot to either reflect the latest os kernel or take actions for maintenance reboot.
     */
    "isRebootRequired"?: boolean;
    /**
     * Version of the ODH (Oracle Distribution including Apache Hadoop) for the node.
     */
    "odhVersion"?: string;
    /**
     * The date and time the instance was replaced by a new vm with a node backup.
     */
    "timeReplaced"?: Date;
    /**
     * The node back id that was used for replacing the node.
     */
    "nodeBackupId"?: string;
}
export declare namespace Node {
    enum LifecycleState {
        Creating = "CREATING",
        Active = "ACTIVE",
        Inactive = "INACTIVE",
        Updating = "UPDATING",
        Deleting = "DELETING",
        Deleted = "DELETED",
        Failed = "FAILED",
        Stopped = "STOPPED",
        Stopping = "STOPPING",
        Starting = "STARTING",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum NodeType {
        Master = "MASTER",
        Edge = "EDGE",
        Utility = "UTILITY",
        Worker = "WORKER",
        ComputeOnlyWorker = "COMPUTE_ONLY_WORKER",
        KafkaBroker = "KAFKA_BROKER",
        Bursting = "BURSTING",
        CloudSql = "CLOUD_SQL",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: Node): object;
    function getDeserializedJsonObj(obj: Node): object;
}
