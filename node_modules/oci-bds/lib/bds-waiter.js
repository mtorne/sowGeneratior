"use strict";
/**
 * Big Data Service API
 * REST API for Oracle Big Data Service. Use this API to build, deploy, and manage fully elastic Big Data Service clusters. Build on Hadoop, Spark and Data Science distributions, which can be fully integrated with existing enterprise data in Oracle Database and Oracle applications.

 * OpenAPI spec version: 20190531
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BdsWaiter = void 0;
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
class BdsWaiter {
    constructor(client, config) {
        this.client = client;
        this.config = config;
    }
    /**
     * Waits forAutoScalingConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutoScalingConfigurationResponse | null (null in case of 404 response)
     */
    forAutoScalingConfiguration(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAutoScalingConfiguration(request), response => targetStates.includes(response.autoScalingConfiguration.lifecycleState), targetStates.includes(models.AutoScalingConfiguration.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forBdsApiKey till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBdsApiKeyResponse | null (null in case of 404 response)
     */
    forBdsApiKey(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getBdsApiKey(request), response => targetStates.includes(response.bdsApiKey.lifecycleState), targetStates.includes(models.BdsApiKey.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forBdsInstance till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBdsInstanceResponse | null (null in case of 404 response)
     */
    forBdsInstance(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getBdsInstance(request), response => targetStates.includes(response.bdsInstance.lifecycleState), targetStates.includes(models.BdsInstance.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forBdsMetastoreConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBdsMetastoreConfigurationResponse | null (null in case of 404 response)
     */
    forBdsMetastoreConfiguration(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getBdsMetastoreConfiguration(request), response => targetStates.includes(response.bdsMetastoreConfiguration.lifecycleState), targetStates.includes(models.BdsMetastoreConfiguration.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forIdentityConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIdentityConfigurationResponse | null (null in case of 404 response)
     */
    forIdentityConfiguration(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getIdentityConfiguration(request), response => targetStates.includes(response.identityConfiguration.lifecycleState), targetStates.includes(models.IdentityConfiguration.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forNodeBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNodeBackupResponse | null (null in case of 404 response)
     */
    forNodeBackup(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getNodeBackup(request), response => targetStates.includes(response.nodeBackup.lifecycleState), targetStates.includes(models.NodeBackup.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forNodeBackupConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNodeBackupConfigurationResponse | null (null in case of 404 response)
     */
    forNodeBackupConfiguration(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getNodeBackupConfiguration(request), response => targetStates.includes(response.nodeBackupConfiguration.lifecycleState), targetStates.includes(models.NodeBackupConfiguration.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forNodeReplaceConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNodeReplaceConfigurationResponse | null (null in case of 404 response)
     */
    forNodeReplaceConfiguration(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getNodeReplaceConfiguration(request), response => targetStates.includes(response.nodeReplaceConfiguration.lifecycleState), targetStates.includes(models.NodeReplaceConfiguration.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forResourcePrincipalConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResourcePrincipalConfigurationResponse | null (null in case of 404 response)
     */
    forResourcePrincipalConfiguration(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getResourcePrincipalConfiguration(request), response => targetStates.includes(response.resourcePrincipalConfiguration.lifecycleState), targetStates.includes(models.ResourcePrincipalConfiguration.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forSoftwareUpdate till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSoftwareUpdateResponse
     */
    forSoftwareUpdate(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getSoftwareUpdate(request), response => targetStates.includes(response.softwareUpdate.lifecycleState));
        });
    }
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getWorkRequest(request), response => (response.workRequest.timeFinished ? true : false));
        });
    }
}
exports.BdsWaiter = BdsWaiter;
//# sourceMappingURL=bds-waiter.js.map