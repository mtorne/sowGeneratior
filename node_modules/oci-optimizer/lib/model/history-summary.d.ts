/**
 * Cloud Advisor API
 * Use the Cloud Advisor API to find potential inefficiencies in your tenancy and address them.
Cloud Advisor can help you save money, improve performance, strengthen system resilience, and improve security.
For more information, see [Cloud Advisor](https://docs.oracle.com/iaas/Content/CloudAdvisor/Concepts/cloudadvisoroverview.htm).

 * OpenAPI spec version: 20200606
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The metadata associated with the recommendation history and its related resources.
 *
 */
export interface HistorySummary {
    /**
     * The unique OCID associated with the recommendation history.
     */
    "id": string;
    /**
     * The name assigned to the resource.
     */
    "name": string;
    /**
     * The kind of resource.
     */
    "resourceType": string;
    /**
     * The unique OCID associated with the category.
     */
    "categoryId": string;
    /**
     * The unique OCID associated with the recommendation.
     */
    "recommendationId": string;
    /**
     * The name assigned to the recommendation.
     */
    "recommendationName": string;
    /**
     * The unique OCID associated with the resource.
     */
    "resourceId": string;
    /**
     * The unique OCID associated with the resource action.
     */
    "resourceActionId": string;
    "action": model.Action;
    /**
     * The OCID of the compartment.
     */
    "compartmentId": string;
    /**
     * The name assigned to the compartment.
     */
    "compartmentName": string;
    /**
     * The recommendation history's current state.
     */
    "lifecycleState": model.LifecycleState;
    /**
     * The estimated cost savings, in dollars, for the resource action. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "estimatedCostSaving": number;
    /**
     * The current status of the resource action.
     */
    "status": model.Status;
    /**
      * Custom metadata key/value pairs for the resource action.
  * <p>
   **Metadata Example**
  * <p>
        \"metadata\" : {
  *          \"cpuRecommendedShape\": \"VM.Standard1.1\",
  *          \"computeMemoryUtilization\": \"26.05734124418388\",
  *          \"currentShape\": \"VM.Standard1.2\",
  *          \"instanceRecommendedShape\": \"VM.Standard1.1\",
  *          \"computeCpuUtilization\": \"7.930035319720132\",
  *          \"memoryRecommendedShape\": \"None\"
  *       }
  *
      */
    "metadata"?: {
        [key: string]: string;
    };
    /**
      * Additional metadata key/value pairs that you provide.
  * They serve the same purpose and functionality as fields in the {@code metadata} object.
  * <p>
  They are distinguished from {@code metadata} fields in that these can be nested JSON objects (whereas {@code metadata} fields are string/string maps only).
  * <p>
  For example:
  * <p>
  {@code {\"CurrentShape\": {\"name\":\"VM.Standard2.16\"}, \"RecommendedShape\": {\"name\":\"VM.Standard2.8\"}}}
  *
      */
    "extendedMetadata"?: {
        [key: string]: any;
    };
    /**
     * The date and time the recommendation history was created, in the format defined by RFC3339.
     */
    "timeCreated"?: Date;
}
export declare namespace HistorySummary {
    function getJsonObj(obj: HistorySummary): object;
    function getDeserializedJsonObj(obj: HistorySummary): object;
}
