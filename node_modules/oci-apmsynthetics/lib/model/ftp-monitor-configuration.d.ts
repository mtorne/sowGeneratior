/**
 * APM Availability Monitoring API
 * Use the APM Availability Monitoring API to query Scripts, Monitors, Dedicated Vantage Points and On-Premise Vantage Points resources. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).
 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Request configuration details for the FTP monitor type.
 */
export interface FtpMonitorConfiguration extends model.MonitorConfiguration {
    /**
     * FTP protocol type.
     */
    "ftpProtocol"?: model.FtpProtocol;
    /**
     * FTP monitor request type.
     */
    "ftpRequestType"?: model.FtpRequestType;
    /**
     * If enabled, Active mode will be used for the FTP connection. Not supported for SFTP protocol.
     */
    "isActiveMode"?: boolean;
    "ftpBasicAuthenticationDetails"?: model.BasicAuthenticationDetails;
    /**
     * Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "downloadSizeLimitInBytes"?: number;
    /**
     * File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "uploadFileSizeInBytes"?: number;
    "networkConfiguration"?: model.NetworkConfiguration;
    /**
     * Expected FTP response codes. For status code range, set values such as 2xx, 3xx.
     */
    "verifyResponseCodes"?: Array<string>;
    /**
     * Verify response content against regular expression based string.
     * If response content does not match the verifyResponseContent value, then it will be considered a failure.
     *
     */
    "verifyResponseContent"?: string;
    "configType": string;
}
export declare namespace FtpMonitorConfiguration {
    function getJsonObj(obj: FtpMonitorConfiguration, isParentJsonObj?: boolean): object;
    const configType = "FTP_CONFIG";
    function getDeserializedJsonObj(obj: FtpMonitorConfiguration, isParentJsonObj?: boolean): object;
}
