/**
 * MySQL Database Service API
 * The API for the MySQL Database Service
 * OpenAPI spec version: 20190415
 * Contact: mysql-cloud-dev_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Enables assignment of IDs on the target to anonymous transactions coming from the source. A manually defined UUID
 * is added as a prefix to the ID.
 *
 */
export interface AssignManualUuidHandling extends model.AnonymousTransactionsHandling {
    /**
     * Specifies one of the coordinates (file) at which the replica should begin
     * reading the source's log. As this value specifies the point where replication
     * starts from, it is only used once, when it starts. It is never used again,
     * unless a new UpdateChannel operation modifies it.
     *
     */
    "lastConfiguredLogFilename"?: string;
    /**
     * Specifies one of the coordinates (offset) at which the replica should begin
     * reading the source's log. As this value specifies the point where replication
     * starts from, it is only used once, when it starts. It is never used again,
     * unless a new UpdateChannel operation modifies it.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "lastConfiguredLogOffset"?: number;
    /**
     * The UUID that is used as a prefix when generating transaction identifiers for anonymous transactions
     * coming from the source. You can change the UUID later.
     *
     */
    "uuid"?: string;
    "policy": string;
}
export declare namespace AssignManualUuidHandling {
    function getJsonObj(obj: AssignManualUuidHandling, isParentJsonObj?: boolean): object;
    const policy = "ASSIGN_MANUAL_UUID";
    function getDeserializedJsonObj(obj: AssignManualUuidHandling, isParentJsonObj?: boolean): object;
}
