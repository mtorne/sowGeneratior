/**
 *
 *
 * OpenAPI spec version: 20240102
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
import common = require("oci-common");
/**
 * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dblm/ListVulnerabilityScans.ts.html |here} to see how to use ListVulnerabilityScansRequest.
 */
export interface ListVulnerabilityScansRequest extends common.BaseRequest {
    /**
     * The ID of the vulnerability scan.
     */
    "vulnerabilityScanId"?: string;
    /**
     * The ID of the compartment in which to list resources.
     */
    "compartmentId"?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    "displayName"?: string;
    /**
     * The maximum number of items to return.
     */
    "limit"?: number;
    /**
     * A token representing the position at which to start retrieving results. This must come from the {@code opc-next-page} header field of a previous response.
     */
    "page"?: string;
    /**
     * The sort order to use, either 'ASC' or 'DESC'.
     */
    "sortOrder"?: model.SortOrder;
    /**
     * The field to sort by. Only one sort order may be provided. Default order is descending.
     *
     */
    "sortBy"?: ListVulnerabilityScansRequest.SortBy;
    /**
     * The client request ID for tracing.
     */
    "opcRequestId"?: string;
    /**
     * The created greater than.
     */
    "timeCreatedGreaterThan"?: Date;
    /**
     * The time ended less than.
     */
    "timeEndedLessThan"?: Date;
    /**
     * Filter by one or more vulnerability scan status.
     * Possible values are completed, running, completed with error, aborted.
     *
     */
    "vulnerabilityScanStatus"?: Array<ListVulnerabilityScansRequest.VulnerabilityScanStatus>;
    /**
     * The scan type to use is 'CVE', 'PATCH' or 'IMAGE_PATCH'.
     */
    "vulnerabilityScanType"?: ListVulnerabilityScansRequest.VulnerabilityScanType;
}
export declare namespace ListVulnerabilityScansRequest {
    enum SortBy {
        Id = "id",
        DisplayName = "displayName",
        TimeCreated = "timeCreated",
        TimeEnded = "timeEnded"
    }
    enum VulnerabilityScanStatus {
        Completed = "COMPLETED",
        Error = "ERROR",
        Running = "RUNNING",
        Aborted = "ABORTED"
    }
    enum VulnerabilityScanType {
        Cve = "CVE",
        Patch = "PATCH",
        ImagePatch = "IMAGE_PATCH"
    }
}
