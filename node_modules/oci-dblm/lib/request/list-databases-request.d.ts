/**
 *
 *
 * OpenAPI spec version: 20240102
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
import common = require("oci-common");
/**
 * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dblm/ListDatabases.ts.html |here} to see how to use ListDatabasesRequest.
 */
export interface ListDatabasesRequest extends common.BaseRequest {
    /**
     * The ID of the compartment in which to list resources.
     */
    "compartmentId"?: string;
    /**
     * A filter to return only resources their lifecycleState matches the given lifecycleState.
     */
    "lifecycleState"?: string;
    /**
     * A filter to return only database that match the given release version.
     */
    "databaseRelease"?: string;
    /**
     * Filter by database type.
     * Possible values Single Instance or RAC.
     *
     */
    "databaseType"?: ListDatabasesRequest.DatabaseType;
    /**
     * The maximum number of items to return.
     */
    "limit"?: number;
    /**
     * A token representing the position at which to start retrieving results. This must come from the {@code opc-next-page} header field of a previous response.
     */
    "page"?: string;
    /**
     * The sort order to use, either 'ASC' or 'DESC'.
     */
    "sortOrder"?: model.SortOrder;
    /**
     * The field to sort by.
     *
     */
    "sortBy"?: ListDatabasesRequest.SortBy;
    /**
     * Subscribed image
     */
    "imageId"?: string;
    /**
     * The client request ID for tracing.
     */
    "opcRequestId"?: string;
    /**
     * A filter to return only resources that match the entire display name given.
     */
    "displayName"?: string;
    /**
     * A filter to return only database that have given patchId as additional patch (drifter from image version).
     */
    "drifterPatchId"?: number;
    /**
     * Filter databases by image compliance status.
     *
     */
    "imageCompliance"?: ListDatabasesRequest.ImageCompliance;
    /**
     * Filter by one or more severity types.
     * Possible values are critical, high, medium, low, info and none.
     *
     */
    "severityType"?: Array<model.ResourcesSeverities>;
}
export declare namespace ListDatabasesRequest {
    enum DatabaseType {
        Si = "SI",
        Rac = "RAC"
    }
    enum SortBy {
        TimeCreated = "timeCreated",
        Name = "name",
        ResourceType = "resourceType",
        Release = "release",
        SubscribedImage = "subscribedImage",
        PatchCompliance = "patchCompliance"
    }
    enum ImageCompliance {
        NotSubscribed = "NOT_SUBSCRIBED",
        NotCompliantWithImages = "NOT_COMPLIANT_WITH_IMAGES",
        AllDatabases = "ALL_DATABASES"
    }
}
