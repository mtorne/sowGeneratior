"use strict";
/**
 * DevOps API
 * Use the DevOps API to create DevOps projects, configure code repositories,  add artifacts to deploy, build and test software applications, configure  target deployment environments, and deploy software applications.  For more information, see [DevOps](https://docs.oracle.com/iaas/Content/devops/using/home.htm).
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevopsWaiter = void 0;
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
class DevopsWaiter {
    constructor(client, config) {
        this.client = client;
        this.config = config;
    }
    /**
     * Waits forBuildPipeline till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBuildPipelineResponse | null (null in case of 404 response)
     */
    forBuildPipeline(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getBuildPipeline(request), response => targetStates.includes(response.buildPipeline.lifecycleState), targetStates.includes(models.BuildPipeline.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forBuildPipelineStage till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBuildPipelineStageResponse | null (null in case of 404 response)
     */
    forBuildPipelineStage(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getBuildPipelineStage(request), response => targetStates.includes(response.buildPipelineStage.lifecycleState), targetStates.includes(models.BuildPipelineStage.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forBuildRun till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBuildRunResponse
     */
    forBuildRun(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getBuildRun(request), response => targetStates.includes(response.buildRun.lifecycleState));
        });
    }
    /**
     * Waits forConnection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConnectionResponse
     */
    forConnection(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getConnection(request), response => targetStates.includes(response.connection.lifecycleState));
        });
    }
    /**
     * Waits forDeployArtifact till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDeployArtifactResponse | null (null in case of 404 response)
     */
    forDeployArtifact(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDeployArtifact(request), response => targetStates.includes(response.deployArtifact.lifecycleState), targetStates.includes(models.DeployArtifact.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forDeployEnvironment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDeployEnvironmentResponse | null (null in case of 404 response)
     */
    forDeployEnvironment(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDeployEnvironment(request), response => targetStates.includes(response.deployEnvironment.lifecycleState), targetStates.includes(models.DeployEnvironment.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forDeployPipeline till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDeployPipelineResponse | null (null in case of 404 response)
     */
    forDeployPipeline(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDeployPipeline(request), response => targetStates.includes(response.deployPipeline.lifecycleState), targetStates.includes(models.DeployPipeline.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forDeployStage till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDeployStageResponse | null (null in case of 404 response)
     */
    forDeployStage(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDeployStage(request), response => targetStates.includes(response.deployStage.lifecycleState), targetStates.includes(models.DeployStage.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forDeployment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDeploymentResponse
     */
    forDeployment(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getDeployment(request), response => targetStates.includes(response.deployment.lifecycleState));
        });
    }
    /**
     * Waits forProject till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetProjectResponse | null (null in case of 404 response)
     */
    forProject(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getProject(request), response => targetStates.includes(response.project.lifecycleState), targetStates.includes(models.Project.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forPullRequest till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPullRequestResponse | null (null in case of 404 response)
     */
    forPullRequest(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getPullRequest(request), response => targetStates.includes(response.pullRequest.lifecycleState), targetStates.includes(models.PullRequest.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forRepository till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRepositoryResponse | null (null in case of 404 response)
     */
    forRepository(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getRepository(request), response => targetStates.includes(response.repository.lifecycleState), targetStates.includes(models.Repository.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forTrigger till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTriggerResponse
     */
    forTrigger(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getTrigger(request), response => targetStates.includes(response.trigger.lifecycleState));
        });
    }
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getWorkRequest(request), response => (response.workRequest.timeFinished ? true : false));
        });
    }
}
exports.DevopsWaiter = DevopsWaiter;
//# sourceMappingURL=devops-waiter.js.map