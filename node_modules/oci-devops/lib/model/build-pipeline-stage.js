"use strict";
/**
 * DevOps API
 * Use the DevOps API to create DevOps projects, configure code repositories,  add artifacts to deploy, build and test software applications, configure  target deployment environments, and deploy software applications.  For more information, see [DevOps](https://docs.oracle.com/iaas/Content/devops/using/home.htm).
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildPipelineStage = void 0;
const model = __importStar(require("../model"));
const common = require("oci-common");
var BuildPipelineStage;
(function (BuildPipelineStage) {
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Creating"] = "CREATING";
        LifecycleState["Updating"] = "UPDATING";
        LifecycleState["Active"] = "ACTIVE";
        LifecycleState["Deleting"] = "DELETING";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = BuildPipelineStage.LifecycleState || (BuildPipelineStage.LifecycleState = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "buildPipelineStagePredecessorCollection": obj.buildPipelineStagePredecessorCollection
                ? model.BuildPipelineStagePredecessorCollection.getJsonObj(obj.buildPipelineStagePredecessorCollection)
                : undefined
        });
        if (obj && "buildPipelineStageType" in obj && obj.buildPipelineStageType) {
            switch (obj.buildPipelineStageType) {
                case "DELIVER_ARTIFACT":
                    return model.DeliverArtifactStage.getJsonObj(jsonObj, true);
                case "WAIT":
                    return model.WaitStage.getJsonObj(jsonObj, true);
                case "TRIGGER_DEPLOYMENT_PIPELINE":
                    return model.TriggerDeploymentStage.getJsonObj(jsonObj, true);
                case "BUILD":
                    return model.BuildStage.getJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.buildPipelineStageType}`);
            }
        }
        return jsonObj;
    }
    BuildPipelineStage.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "buildPipelineStagePredecessorCollection": obj.buildPipelineStagePredecessorCollection
                ? model.BuildPipelineStagePredecessorCollection.getDeserializedJsonObj(obj.buildPipelineStagePredecessorCollection)
                : undefined
        });
        if (obj && "buildPipelineStageType" in obj && obj.buildPipelineStageType) {
            switch (obj.buildPipelineStageType) {
                case "DELIVER_ARTIFACT":
                    return model.DeliverArtifactStage.getDeserializedJsonObj(jsonObj, true);
                case "WAIT":
                    return model.WaitStage.getDeserializedJsonObj(jsonObj, true);
                case "TRIGGER_DEPLOYMENT_PIPELINE":
                    return model.TriggerDeploymentStage.getDeserializedJsonObj(jsonObj, true);
                case "BUILD":
                    return model.BuildStage.getDeserializedJsonObj(jsonObj, true);
                default:
                    if (common.LOG.logger)
                        common.LOG.logger.info(`Unknown value for: ${obj.buildPipelineStageType}`);
            }
        }
        return jsonObj;
    }
    BuildPipelineStage.getDeserializedJsonObj = getDeserializedJsonObj;
})(BuildPipelineStage = exports.BuildPipelineStage || (exports.BuildPipelineStage = {}));
//# sourceMappingURL=build-pipeline-stage.js.map