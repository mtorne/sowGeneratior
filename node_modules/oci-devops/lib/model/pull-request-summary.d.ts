/**
 * DevOps API
 * Use the DevOps API to create DevOps projects, configure code repositories,  add artifacts to deploy, build and test software applications, configure  target deployment environments, and deploy software applications.  For more information, see [DevOps](https://docs.oracle.com/iaas/Content/devops/using/home.htm).
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Summary of the Pull Request.
 */
export interface PullRequestSummary {
    /**
     * Unique identifier that is immutable on creation
     */
    "id": string;
    /**
     * Pull Request title, can be renamed
     */
    "displayName": string;
    /**
     * Compartment Identifier
     */
    "compartmentId": string;
    /**
     * Details of the pull request. Avoid entering confidential information.
     */
    "description"?: string;
    /**
     * DevOps Repository Identifier
     */
    "repositoryId": string;
    /**
     * The OCID of the forked repository that will act as the source of the changes to be included in the pull request against the parent repository.
     */
    "sourceRepositoryId"?: string;
    /**
     * The review branch which contains the changes to be reviewed.
     */
    "sourceBranch": string;
    /**
     * The destination branch against which the changes are to be reviewed.
     */
    "destinationBranch": string;
    /**
     * The source branch commit ID when the Pull Request status was last changed to merged or closed
     */
    "sourceCommitIdAtTermination"?: string;
    /**
     * The merge base commit ID when the Pull Request status was last changed to merged or closed
     */
    "mergeBaseCommitIdAtTermination"?: string;
    /**
     * The time the the Pull Request was created. An RFC3339 formatted datetime string
     */
    "timeCreated": Date;
    /**
     * The time the Pull Request was updated. An RFC3339 formatted datetime string
     */
    "timeUpdated"?: Date;
    /**
     * The current state of the Pull Request.
     */
    "lifecycleState": string;
    /**
     * The status of the Pull Request.
     */
    "lifecycleDetails": string;
    /**
     * The total number of comments on the pull request. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "totalComments": number;
    /**
     * The total number of reviewers on the pull request. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "totalReviewers": number;
    "createdBy": model.PrincipalDetails;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: {@code {\"bar-key\": \"value\"}}
     */
    "freeformTags": {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     */
    "definedTags": {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
     */
    "systemTags": {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace PullRequestSummary {
    function getJsonObj(obj: PullRequestSummary): object;
    function getDeserializedJsonObj(obj: PullRequestSummary): object;
}
