/**
 * DevOps API
 * Use the DevOps API to create DevOps projects, configure code repositories,  add artifacts to deploy, build and test software applications, configure  target deployment environments, and deploy software applications.  For more information, see [DevOps](https://docs.oracle.com/iaas/Content/devops/using/home.htm).
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Specifies the OKE cluster deployment stage using helm charts.
 */
export interface OkeHelmChartDeployStage extends model.DeployStage {
    /**
     * Kubernetes cluster environment OCID for deployment.
     */
    "okeClusterDeployEnvironmentId": string;
    /**
     * Helm chart artifact OCID.
     */
    "helmChartDeployArtifactId": string;
    /**
     * List of values.yaml file artifact OCIDs.
     */
    "valuesArtifactIds"?: Array<string>;
    /**
     * Release name of the Helm chart.
     */
    "releaseName": string;
    /**
     * Uninstall the Helm chart release on deleting the stage.
     */
    "isUninstallOnStageDelete"?: boolean;
    /**
     * List of Helm command artifact OCIDs.
     */
    "helmCommandArtifactIds"?: Array<string>;
    /**
     * The purpose of running this Helm stage
     */
    "purpose"?: OkeHelmChartDeployStage.Purpose;
    /**
     * Default namespace to be used for Kubernetes deployment when not specified in the manifest.
     */
    "namespace"?: string;
    /**
     * Time to wait for execution of a helm stage. Defaults to 300 seconds. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "timeoutInSeconds"?: number;
    "rollbackPolicy"?: model.NoDeployStageRollbackPolicy | model.AutomatedDeployStageRollbackPolicy;
    "setValues"?: model.HelmSetValueCollection;
    "setString"?: model.HelmSetValueCollection;
    /**
     * Disable pre/post upgrade hooks. Set to false by default.
     */
    "areHooksEnabled"?: boolean;
    /**
     * During upgrade, reuse the values of the last release and merge overrides from the command line. Set to false by default.
     */
    "shouldReuseValues"?: boolean;
    /**
     * During upgrade, reset the values to the ones built into the chart. It overrides shouldReuseValues. Set to false by default.
     */
    "shouldResetValues"?: boolean;
    /**
     * Force resource update through delete; or if required, recreate. Set to false by default.
     */
    "isForceEnabled"?: boolean;
    /**
     * Allow deletion of new resources created during when an upgrade fails. Set to false by default.
     */
    "shouldCleanupOnFail"?: boolean;
    /**
     * Limit the maximum number of revisions saved per release. Use 0 for no limit. Set to 10 by default Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "maxHistory"?: number;
    /**
     * If set, no CRDs are installed. By default, CRDs are installed only if they are not present already. Set to false by default.
     */
    "shouldSkipCrds"?: boolean;
    /**
     * If set, renders subchart notes along with the parent. Set to false by default.
     */
    "shouldSkipRenderSubchartNotes"?: boolean;
    /**
     * Waits until all the resources are in a ready state to mark the release as successful. Set to false by default.
     */
    "shouldNotWait"?: boolean;
    /**
     * Enables helm --debug option to stream output to tf stdout. Set to false by default.
     */
    "isDebugEnabled"?: boolean;
    "deployStageType": string;
}
export declare namespace OkeHelmChartDeployStage {
    enum Purpose {
        ExecuteHelmUpgrade = "EXECUTE_HELM_UPGRADE",
        ExecuteHelmCommand = "EXECUTE_HELM_COMMAND",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: OkeHelmChartDeployStage, isParentJsonObj?: boolean): object;
    const deployStageType = "OKE_HELM_CHART_DEPLOYMENT";
    function getDeserializedJsonObj(obj: OkeHelmChartDeployStage, isParentJsonObj?: boolean): object;
}
