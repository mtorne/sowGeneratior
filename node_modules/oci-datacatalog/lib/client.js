"use strict";
/**
 * Data Catalog API
 * Use the Data Catalog APIs to collect, organize, find, access, understand, enrich, and activate technical, business, and operational metadata.
For more information, see [Data Catalog](https://docs.oracle.com/iaas/data-catalog/home.htm).

 * OpenAPI spec version: 20190325
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataCatalogClient = exports.DataCatalogApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const datacatalog_waiter_1 = require("./datacatalog-waiter");
const oci_common_2 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var DataCatalogApiKeys;
(function (DataCatalogApiKeys) {
})(DataCatalogApiKeys = exports.DataCatalogApiKeys || (exports.DataCatalogApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class DataCatalogClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "DataCatalog";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("datacatalog")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("datacatalog");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190325";
        if (this.logger)
            this.logger.info(`DataCatalogClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DataCatalogClient.serviceEndpointTemplate, this._region, DataCatalogClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DataCatalogClient.serviceEndpointTemplate, this._regionId, DataCatalogClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DataCatalogClient.serviceEndpointTemplate, region, DataCatalogClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DataCatalogClient.serviceEndpointTemplate, regionId, DataCatalogClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new DataCatalogWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new datacatalog_waiter_1.DataCatalogWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Adds a lock to a Catalog resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddCatalogLockRequest
     * @return AddCatalogLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/AddCatalogLock.ts.html |here} to see how to use AddCatalogLock API.
     */
    addCatalogLock(addCatalogLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#addCatalogLock.");
            const operationName = "addCatalogLock";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/AddCatalogLock";
            const pathParams = {
                "{catalogId}": addCatalogLockRequest.catalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addCatalogLockRequest.opcRequestId,
                "if-match": addCatalogLockRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addCatalogLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addCatalogLockRequest.addResourceLockDetails, "AddResourceLockDetails", model.AddResourceLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "catalog",
                    bodyModel: model.Catalog,
                    type: "model.Catalog",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds a lock to a CatalogPrivateEndpoint resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddCatalogPrivateEndpointLockRequest
     * @return AddCatalogPrivateEndpointLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/AddCatalogPrivateEndpointLock.ts.html |here} to see how to use AddCatalogPrivateEndpointLock API.
     */
    addCatalogPrivateEndpointLock(addCatalogPrivateEndpointLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#addCatalogPrivateEndpointLock.");
            const operationName = "addCatalogPrivateEndpointLock";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CatalogPrivateEndpoint/AddCatalogPrivateEndpointLock";
            const pathParams = {
                "{catalogPrivateEndpointId}": addCatalogPrivateEndpointLockRequest.catalogPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addCatalogPrivateEndpointLockRequest.opcRequestId,
                "if-match": addCatalogPrivateEndpointLockRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addCatalogPrivateEndpointLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogPrivateEndpoints/{catalogPrivateEndpointId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addCatalogPrivateEndpointLockRequest.addResourceLockDetails, "AddResourceLockDetails", model.AddResourceLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "catalogPrivateEndpoint",
                    bodyModel: model.CatalogPrivateEndpoint,
                    type: "model.CatalogPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add data selector pattern to the data asset.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddDataSelectorPatternsRequest
     * @return AddDataSelectorPatternsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/AddDataSelectorPatterns.ts.html |here} to see how to use AddDataSelectorPatterns API.
     */
    addDataSelectorPatterns(addDataSelectorPatternsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#addDataSelectorPatterns.");
            const operationName = "addDataSelectorPatterns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/AddDataSelectorPatterns";
            const pathParams = {
                "{catalogId}": addDataSelectorPatternsRequest.catalogId,
                "{dataAssetKey}": addDataSelectorPatternsRequest.dataAssetKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addDataSelectorPatternsRequest.opcRequestId,
                "if-match": addDataSelectorPatternsRequest.ifMatch,
                "opc-retry-token": addDataSelectorPatternsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addDataSelectorPatternsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/actions/addDataSelectorPatterns",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addDataSelectorPatternsRequest.dataSelectorPatternDetails, "DataSelectorPatternDetails", model.DataSelectorPatternDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataAsset",
                    bodyModel: model.DataAsset,
                    type: "model.DataAsset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds a lock to a Metastore resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddMetastoreLockRequest
     * @return AddMetastoreLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/AddMetastoreLock.ts.html |here} to see how to use AddMetastoreLock API.
     */
    addMetastoreLock(addMetastoreLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#addMetastoreLock.");
            const operationName = "addMetastoreLock";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Metastore/AddMetastoreLock";
            const pathParams = {
                "{metastoreId}": addMetastoreLockRequest.metastoreId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addMetastoreLockRequest.opcRequestId,
                "if-match": addMetastoreLockRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addMetastoreLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metastores/{metastoreId}/actions/addLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addMetastoreLockRequest.addResourceLockDetails, "AddResourceLockDetails", model.AddResourceLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "metastore",
                    bodyModel: model.Metastore,
                    type: "model.Metastore",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Associate the custom property for the given type
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AssociateCustomPropertyRequest
     * @return AssociateCustomPropertyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/AssociateCustomProperty.ts.html |here} to see how to use AssociateCustomProperty API.
     */
    associateCustomProperty(associateCustomPropertyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#associateCustomProperty.");
            const operationName = "associateCustomProperty";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Type/AssociateCustomProperty";
            const pathParams = {
                "{catalogId}": associateCustomPropertyRequest.catalogId,
                "{typeKey}": associateCustomPropertyRequest.typeKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": associateCustomPropertyRequest.opcRequestId,
                "if-match": associateCustomPropertyRequest.ifMatch,
                "opc-retry-token": associateCustomPropertyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, associateCustomPropertyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/types/{typeKey}/actions/associateCustomProperties",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(associateCustomPropertyRequest.associateCustomPropertyDetails, "TypeCustomPropertyDetails", model.TypeCustomPropertyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "type",
                    bodyModel: model.Type,
                    type: "model.Type",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Export technical objects from a Data Asset in Excel format. Returns details about the job which actually performs the export.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AsynchronousExportDataAssetRequest
     * @return AsynchronousExportDataAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/AsynchronousExportDataAsset.ts.html |here} to see how to use AsynchronousExportDataAsset API.
     */
    asynchronousExportDataAsset(asynchronousExportDataAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#asynchronousExportDataAsset.");
            const operationName = "asynchronousExportDataAsset";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/AsynchronousExportDataAsset";
            const pathParams = {
                "{catalogId}": asynchronousExportDataAssetRequest.catalogId,
                "{dataAssetKey}": asynchronousExportDataAssetRequest.dataAssetKey
            };
            const queryParams = {
                "exportType": asynchronousExportDataAssetRequest.exportType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": asynchronousExportDataAssetRequest.opcRequestId,
                "opc-retry-token": asynchronousExportDataAssetRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, asynchronousExportDataAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/actions/asynchronousExport",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(asynchronousExportDataAssetRequest.asynchronousExportDataAssetDetails, "AsynchronousExportDataAssetDetails", model.AsynchronousExportDataAssetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "asynchronousExportDataAssetResult",
                    bodyModel: model.AsynchronousExportDataAssetResult,
                    type: "model.AsynchronousExportDataAssetResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Exports the contents of a glossary in Excel format. Returns details about the job which actually performs the export.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AsynchronousExportGlossaryRequest
     * @return AsynchronousExportGlossaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/AsynchronousExportGlossary.ts.html |here} to see how to use AsynchronousExportGlossary API.
     */
    asynchronousExportGlossary(asynchronousExportGlossaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#asynchronousExportGlossary.");
            const operationName = "asynchronousExportGlossary";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Glossary/AsynchronousExportGlossary";
            const pathParams = {
                "{catalogId}": asynchronousExportGlossaryRequest.catalogId,
                "{glossaryKey}": asynchronousExportGlossaryRequest.glossaryKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": asynchronousExportGlossaryRequest.opcRequestId,
                "opc-retry-token": asynchronousExportGlossaryRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, asynchronousExportGlossaryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/actions/asynchronousExport",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(asynchronousExportGlossaryRequest.asynchronousExportGlossaryDetails, "AsynchronousExportGlossaryDetails", model.AsynchronousExportGlossaryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "asynchronousExportGlossaryResult",
                    bodyModel: model.AsynchronousExportGlossaryResult,
                    type: "model.AsynchronousExportGlossaryResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Attaches a private reverse connection endpoint resource to a data catalog resource. When provided, 'If-Match' is checked against 'ETag' values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AttachCatalogPrivateEndpointRequest
     * @return AttachCatalogPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/AttachCatalogPrivateEndpoint.ts.html |here} to see how to use AttachCatalogPrivateEndpoint API.
     */
    attachCatalogPrivateEndpoint(attachCatalogPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#attachCatalogPrivateEndpoint.");
            const operationName = "attachCatalogPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/AttachCatalogPrivateEndpoint";
            const pathParams = {
                "{catalogId}": attachCatalogPrivateEndpointRequest.catalogId
            };
            const queryParams = {
                "isLockOverride": attachCatalogPrivateEndpointRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": attachCatalogPrivateEndpointRequest.ifMatch,
                "opc-request-id": attachCatalogPrivateEndpointRequest.opcRequestId,
                "opc-retry-token": attachCatalogPrivateEndpointRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, attachCatalogPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/actions/attachCatalogPrivateEndpoint",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachCatalogPrivateEndpointRequest.attachCatalogPrivateEndpointDetails, "AttachCatalogPrivateEndpointDetails", model.AttachCatalogPrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeCatalogCompartmentRequest
     * @return ChangeCatalogCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ChangeCatalogCompartment.ts.html |here} to see how to use ChangeCatalogCompartment API.
     */
    changeCatalogCompartment(changeCatalogCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#changeCatalogCompartment.");
            const operationName = "changeCatalogCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/ChangeCatalogCompartment";
            const pathParams = {
                "{catalogId}": changeCatalogCompartmentRequest.catalogId
            };
            const queryParams = {
                "isLockOverride": changeCatalogCompartmentRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeCatalogCompartmentRequest.ifMatch,
                "opc-request-id": changeCatalogCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeCatalogCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeCatalogCompartmentRequest.changeCatalogCompartmentDetails, "ChangeCatalogCompartmentDetails", model.ChangeCatalogCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeCatalogPrivateEndpointCompartmentRequest
     * @return ChangeCatalogPrivateEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ChangeCatalogPrivateEndpointCompartment.ts.html |here} to see how to use ChangeCatalogPrivateEndpointCompartment API.
     */
    changeCatalogPrivateEndpointCompartment(changeCatalogPrivateEndpointCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#changeCatalogPrivateEndpointCompartment.");
            const operationName = "changeCatalogPrivateEndpointCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CatalogPrivateEndpoint/ChangeCatalogPrivateEndpointCompartment";
            const pathParams = {
                "{catalogPrivateEndpointId}": changeCatalogPrivateEndpointCompartmentRequest.catalogPrivateEndpointId
            };
            const queryParams = {
                "isLockOverride": changeCatalogPrivateEndpointCompartmentRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeCatalogPrivateEndpointCompartmentRequest.ifMatch,
                "opc-request-id": changeCatalogPrivateEndpointCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeCatalogPrivateEndpointCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogPrivateEndpoints/{catalogPrivateEndpointId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeCatalogPrivateEndpointCompartmentRequest.changeCatalogPrivateEndpointCompartmentDetails, "ChangeCatalogPrivateEndpointCompartmentDetails", model.ChangeCatalogPrivateEndpointCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeMetastoreCompartmentRequest
     * @return ChangeMetastoreCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ChangeMetastoreCompartment.ts.html |here} to see how to use ChangeMetastoreCompartment API.
     */
    changeMetastoreCompartment(changeMetastoreCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#changeMetastoreCompartment.");
            const operationName = "changeMetastoreCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Metastore/ChangeMetastoreCompartment";
            const pathParams = {
                "{metastoreId}": changeMetastoreCompartmentRequest.metastoreId
            };
            const queryParams = {
                "isLockOverride": changeMetastoreCompartmentRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeMetastoreCompartmentRequest.ifMatch,
                "opc-request-id": changeMetastoreCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMetastoreCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metastores/{metastoreId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMetastoreCompartmentRequest.changeMetastoreCompartmentDetails, "ChangeMetastoreCompartmentDetails", model.ChangeMetastoreCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new entity attribute.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateAttributeRequest
     * @return CreateAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateAttribute.ts.html |here} to see how to use CreateAttribute API.
     */
    createAttribute(createAttributeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createAttribute.");
            const operationName = "createAttribute";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Attribute/CreateAttribute";
            const pathParams = {
                "{catalogId}": createAttributeRequest.catalogId,
                "{dataAssetKey}": createAttributeRequest.dataAssetKey,
                "{entityKey}": createAttributeRequest.entityKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createAttributeRequest.opcRequestId,
                "opc-retry-token": createAttributeRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAttributeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/attributes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAttributeRequest.createAttributeDetails, "CreateAttributeDetails", model.CreateAttributeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "attribute",
                    bodyModel: model.Attribute,
                    type: "model.Attribute",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new entity attribute tag.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateAttributeTagRequest
     * @return CreateAttributeTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateAttributeTag.ts.html |here} to see how to use CreateAttributeTag API.
     */
    createAttributeTag(createAttributeTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createAttributeTag.");
            const operationName = "createAttributeTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/AttributeTag/CreateAttributeTag";
            const pathParams = {
                "{catalogId}": createAttributeTagRequest.catalogId,
                "{dataAssetKey}": createAttributeTagRequest.dataAssetKey,
                "{entityKey}": createAttributeTagRequest.entityKey,
                "{attributeKey}": createAttributeTagRequest.attributeKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createAttributeTagRequest.opcRequestId,
                "opc-retry-token": createAttributeTagRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAttributeTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/attributes/{attributeKey}/tags",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAttributeTagRequest.createAttributeTagDetails, "CreateTagDetails", model.CreateTagDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "attributeTag",
                    bodyModel: model.AttributeTag,
                    type: "model.AttributeTag",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new data catalog instance that includes a console and an API URL for managing metadata operations.
     * For more information, please see the documentation.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateCatalogRequest
     * @return CreateCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateCatalog.ts.html |here} to see how to use CreateCatalog API.
     */
    createCatalog(createCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createCatalog.");
            const operationName = "createCatalog";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/CreateCatalog";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createCatalogRequest.opcRetryToken,
                "opc-request-id": createCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCatalogRequest.createCatalogDetails, "CreateCatalogDetails", model.CreateCatalogDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a new private reverse connection endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateCatalogPrivateEndpointRequest
     * @return CreateCatalogPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateCatalogPrivateEndpoint.ts.html |here} to see how to use CreateCatalogPrivateEndpoint API.
     */
    createCatalogPrivateEndpoint(createCatalogPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createCatalogPrivateEndpoint.");
            const operationName = "createCatalogPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CatalogPrivateEndpoint/CreateCatalogPrivateEndpoint";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createCatalogPrivateEndpointRequest.opcRequestId,
                "opc-retry-token": createCatalogPrivateEndpointRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createCatalogPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogPrivateEndpoints",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCatalogPrivateEndpointRequest.createCatalogPrivateEndpointDetails, "CreateCatalogPrivateEndpointDetails", model.CreateCatalogPrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new connection.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateConnectionRequest
     * @return CreateConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateConnection.ts.html |here} to see how to use CreateConnection API.
     */
    createConnection(createConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createConnection.");
            const operationName = "createConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Connection/CreateConnection";
            const pathParams = {
                "{catalogId}": createConnectionRequest.catalogId,
                "{dataAssetKey}": createConnectionRequest.dataAssetKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createConnectionRequest.opcRequestId,
                "opc-retry-token": createConnectionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/connections",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createConnectionRequest.createConnectionDetails, "CreateConnectionDetails", model.CreateConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "connection",
                    bodyModel: model.Connection,
                    type: "model.Connection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a new Custom Property
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateCustomPropertyRequest
     * @return CreateCustomPropertyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateCustomProperty.ts.html |here} to see how to use CreateCustomProperty API.
     */
    createCustomProperty(createCustomPropertyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createCustomProperty.");
            const operationName = "createCustomProperty";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CustomProperty/CreateCustomProperty";
            const pathParams = {
                "{catalogId}": createCustomPropertyRequest.catalogId,
                "{namespaceId}": createCustomPropertyRequest.namespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createCustomPropertyRequest.opcRequestId,
                "opc-retry-token": createCustomPropertyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createCustomPropertyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/namespaces/{namespaceId}/customProperties",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCustomPropertyRequest.createCustomPropertyDetails, "CreateCustomPropertyDetails", model.CreateCustomPropertyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "customProperty",
                    bodyModel: model.CustomProperty,
                    type: "model.CustomProperty",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a new data asset.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDataAssetRequest
     * @return CreateDataAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateDataAsset.ts.html |here} to see how to use CreateDataAsset API.
     */
    createDataAsset(createDataAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createDataAsset.");
            const operationName = "createDataAsset";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/CreateDataAsset";
            const pathParams = {
                "{catalogId}": createDataAssetRequest.catalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createDataAssetRequest.opcRequestId,
                "opc-retry-token": createDataAssetRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDataAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDataAssetRequest.createDataAssetDetails, "CreateDataAssetDetails", model.CreateDataAssetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataAsset",
                    bodyModel: model.DataAsset,
                    type: "model.DataAsset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new data asset tag.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDataAssetTagRequest
     * @return CreateDataAssetTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateDataAssetTag.ts.html |here} to see how to use CreateDataAssetTag API.
     */
    createDataAssetTag(createDataAssetTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createDataAssetTag.");
            const operationName = "createDataAssetTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAssetTag/CreateDataAssetTag";
            const pathParams = {
                "{catalogId}": createDataAssetTagRequest.catalogId,
                "{dataAssetKey}": createDataAssetTagRequest.dataAssetKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createDataAssetTagRequest.opcRequestId,
                "opc-retry-token": createDataAssetTagRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDataAssetTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/tags",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDataAssetTagRequest.createDataAssetTagDetails, "CreateTagDetails", model.CreateTagDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataAssetTag",
                    bodyModel: model.DataAssetTag,
                    type: "model.DataAssetTag",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new data entity.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateEntityRequest
     * @return CreateEntityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateEntity.ts.html |here} to see how to use CreateEntity API.
     */
    createEntity(createEntityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createEntity.");
            const operationName = "createEntity";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Entity/CreateEntity";
            const pathParams = {
                "{catalogId}": createEntityRequest.catalogId,
                "{dataAssetKey}": createEntityRequest.dataAssetKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createEntityRequest.opcRequestId,
                "opc-retry-token": createEntityRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createEntityRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createEntityRequest.createEntityDetails, "CreateEntityDetails", model.CreateEntityDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "entity",
                    bodyModel: model.Entity,
                    type: "model.Entity",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new entity tag.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateEntityTagRequest
     * @return CreateEntityTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateEntityTag.ts.html |here} to see how to use CreateEntityTag API.
     */
    createEntityTag(createEntityTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createEntityTag.");
            const operationName = "createEntityTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/EntityTag/CreateEntityTag";
            const pathParams = {
                "{catalogId}": createEntityTagRequest.catalogId,
                "{dataAssetKey}": createEntityTagRequest.dataAssetKey,
                "{entityKey}": createEntityTagRequest.entityKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createEntityTagRequest.opcRequestId,
                "opc-retry-token": createEntityTagRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createEntityTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/tags",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createEntityTagRequest.createEntityTagDetails, "CreateTagDetails", model.CreateTagDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "entityTag",
                    bodyModel: model.EntityTag,
                    type: "model.EntityTag",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new folder.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateFolderRequest
     * @return CreateFolderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateFolder.ts.html |here} to see how to use CreateFolder API.
     */
    createFolder(createFolderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createFolder.");
            const operationName = "createFolder";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Folder/CreateFolder";
            const pathParams = {
                "{catalogId}": createFolderRequest.catalogId,
                "{dataAssetKey}": createFolderRequest.dataAssetKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createFolderRequest.opcRequestId,
                "opc-retry-token": createFolderRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createFolderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/folders",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createFolderRequest.createFolderDetails, "CreateFolderDetails", model.CreateFolderDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "folder",
                    bodyModel: model.Folder,
                    type: "model.Folder",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new folder tag.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateFolderTagRequest
     * @return CreateFolderTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateFolderTag.ts.html |here} to see how to use CreateFolderTag API.
     */
    createFolderTag(createFolderTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createFolderTag.");
            const operationName = "createFolderTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/FolderTag/CreateFolderTag";
            const pathParams = {
                "{catalogId}": createFolderTagRequest.catalogId,
                "{dataAssetKey}": createFolderTagRequest.dataAssetKey,
                "{folderKey}": createFolderTagRequest.folderKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createFolderTagRequest.opcRequestId,
                "opc-retry-token": createFolderTagRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createFolderTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/folders/{folderKey}/tags",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createFolderTagRequest.createFolderTagDetails, "CreateTagDetails", model.CreateTagDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "folderTag",
                    bodyModel: model.FolderTag,
                    type: "model.FolderTag",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new glossary.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateGlossaryRequest
     * @return CreateGlossaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateGlossary.ts.html |here} to see how to use CreateGlossary API.
     */
    createGlossary(createGlossaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createGlossary.");
            const operationName = "createGlossary";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Glossary/CreateGlossary";
            const pathParams = {
                "{catalogId}": createGlossaryRequest.catalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createGlossaryRequest.opcRequestId,
                "opc-retry-token": createGlossaryRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createGlossaryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createGlossaryRequest.createGlossaryDetails, "CreateGlossaryDetails", model.CreateGlossaryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "glossary",
                    bodyModel: model.Glossary,
                    type: "model.Glossary",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new job.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateJobRequest
     * @return CreateJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateJob.ts.html |here} to see how to use CreateJob API.
     */
    createJob(createJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createJob.");
            const operationName = "createJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Job/CreateJob";
            const pathParams = {
                "{catalogId}": createJobRequest.catalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createJobRequest.opcRequestId,
                "opc-retry-token": createJobRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createJobRequest.createJobDetails, "CreateJobDetails", model.CreateJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: model.Job,
                    type: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new job definition.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateJobDefinitionRequest
     * @return CreateJobDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateJobDefinition.ts.html |here} to see how to use CreateJobDefinition API.
     */
    createJobDefinition(createJobDefinitionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createJobDefinition.");
            const operationName = "createJobDefinition";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobDefinition/CreateJobDefinition";
            const pathParams = {
                "{catalogId}": createJobDefinitionRequest.catalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createJobDefinitionRequest.opcRequestId,
                "opc-retry-token": createJobDefinitionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createJobDefinitionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobDefinitions",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createJobDefinitionRequest.createJobDefinitionDetails, "CreateJobDefinitionDetails", model.CreateJobDefinitionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobDefinition",
                    bodyModel: model.JobDefinition,
                    type: "model.JobDefinition",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new job execution.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateJobExecutionRequest
     * @return CreateJobExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateJobExecution.ts.html |here} to see how to use CreateJobExecution API.
     */
    createJobExecution(createJobExecutionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createJobExecution.");
            const operationName = "createJobExecution";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobExecution/CreateJobExecution";
            const pathParams = {
                "{catalogId}": createJobExecutionRequest.catalogId,
                "{jobKey}": createJobExecutionRequest.jobKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createJobExecutionRequest.opcRequestId,
                "opc-retry-token": createJobExecutionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createJobExecutionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs/{jobKey}/executions",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createJobExecutionRequest.createJobExecutionDetails, "CreateJobExecutionDetails", model.CreateJobExecutionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobExecution",
                    bodyModel: model.JobExecution,
                    type: "model.JobExecution",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new metastore.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateMetastoreRequest
     * @return CreateMetastoreResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateMetastore.ts.html |here} to see how to use CreateMetastore API.
     */
    createMetastore(createMetastoreRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createMetastore.");
            const operationName = "createMetastore";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Metastore/CreateMetastore";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMetastoreRequest.opcRetryToken,
                "opc-request-id": createMetastoreRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMetastoreRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metastores",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMetastoreRequest.createMetastoreDetails, "CreateMetastoreDetails", model.CreateMetastoreDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a new Namespace to be used by a custom property
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateNamespaceRequest
     * @return CreateNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateNamespace.ts.html |here} to see how to use CreateNamespace API.
     */
    createNamespace(createNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createNamespace.");
            const operationName = "createNamespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Namespace/CreateNamespace";
            const pathParams = {
                "{catalogId}": createNamespaceRequest.catalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createNamespaceRequest.opcRequestId,
                "opc-retry-token": createNamespaceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/namespaces",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createNamespaceRequest.createNamespaceDetails, "CreateNamespaceDetails", model.CreateNamespaceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "namespace",
                    bodyModel: model.Namespace,
                    type: "model.Namespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a new pattern.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreatePatternRequest
     * @return CreatePatternResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreatePattern.ts.html |here} to see how to use CreatePattern API.
     */
    createPattern(createPatternRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createPattern.");
            const operationName = "createPattern";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Pattern/CreatePattern";
            const pathParams = {
                "{catalogId}": createPatternRequest.catalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createPatternRequest.opcRequestId,
                "opc-retry-token": createPatternRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createPatternRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/patterns",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createPatternRequest.createPatternDetails, "CreatePatternDetails", model.CreatePatternDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pattern",
                    bodyModel: model.Pattern,
                    type: "model.Pattern",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a new term within a glossary.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateTermRequest
     * @return CreateTermResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateTerm.ts.html |here} to see how to use CreateTerm API.
     */
    createTerm(createTermRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createTerm.");
            const operationName = "createTerm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Term/CreateTerm";
            const pathParams = {
                "{catalogId}": createTermRequest.catalogId,
                "{glossaryKey}": createTermRequest.glossaryKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createTermRequest.opcRequestId,
                "opc-retry-token": createTermRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createTermRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/terms",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTermRequest.createTermDetails, "CreateTermDetails", model.CreateTermDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "term",
                    bodyModel: model.Term,
                    type: "model.Term",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new term relationship for this term within a glossary.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateTermRelationshipRequest
     * @return CreateTermRelationshipResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/CreateTermRelationship.ts.html |here} to see how to use CreateTermRelationship API.
     */
    createTermRelationship(createTermRelationshipRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#createTermRelationship.");
            const operationName = "createTermRelationship";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/TermRelationship/CreateTermRelationship";
            const pathParams = {
                "{catalogId}": createTermRelationshipRequest.catalogId,
                "{glossaryKey}": createTermRelationshipRequest.glossaryKey,
                "{termKey}": createTermRelationshipRequest.termKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createTermRelationshipRequest.opcRequestId,
                "opc-retry-token": createTermRelationshipRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createTermRelationshipRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/terms/{termKey}/termRelationships",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTermRelationshipRequest.createTermRelationshipDetails, "CreateTermRelationshipDetails", model.CreateTermRelationshipDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "termRelationship",
                    bodyModel: model.TermRelationship,
                    type: "model.TermRelationship",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific entity attribute.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteAttributeRequest
     * @return DeleteAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteAttribute.ts.html |here} to see how to use DeleteAttribute API.
     */
    deleteAttribute(deleteAttributeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteAttribute.");
            const operationName = "deleteAttribute";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Attribute/DeleteAttribute";
            const pathParams = {
                "{catalogId}": deleteAttributeRequest.catalogId,
                "{dataAssetKey}": deleteAttributeRequest.dataAssetKey,
                "{entityKey}": deleteAttributeRequest.entityKey,
                "{attributeKey}": deleteAttributeRequest.attributeKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAttributeRequest.ifMatch,
                "opc-request-id": deleteAttributeRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAttributeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/attributes/{attributeKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific entity attribute tag.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteAttributeTagRequest
     * @return DeleteAttributeTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteAttributeTag.ts.html |here} to see how to use DeleteAttributeTag API.
     */
    deleteAttributeTag(deleteAttributeTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteAttributeTag.");
            const operationName = "deleteAttributeTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/AttributeTag/DeleteAttributeTag";
            const pathParams = {
                "{catalogId}": deleteAttributeTagRequest.catalogId,
                "{dataAssetKey}": deleteAttributeTagRequest.dataAssetKey,
                "{entityKey}": deleteAttributeTagRequest.entityKey,
                "{attributeKey}": deleteAttributeTagRequest.attributeKey,
                "{tagKey}": deleteAttributeTagRequest.tagKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAttributeTagRequest.ifMatch,
                "opc-request-id": deleteAttributeTagRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAttributeTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/attributes/{attributeKey}/tags/{tagKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a data catalog resource by identifier.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteCatalogRequest
     * @return DeleteCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteCatalog.ts.html |here} to see how to use DeleteCatalog API.
     */
    deleteCatalog(deleteCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteCatalog.");
            const operationName = "deleteCatalog";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/DeleteCatalog";
            const pathParams = {
                "{catalogId}": deleteCatalogRequest.catalogId
            };
            const queryParams = {
                "isLockOverride": deleteCatalogRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteCatalogRequest.ifMatch,
                "opc-request-id": deleteCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a private reverse connection endpoint by identifier.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteCatalogPrivateEndpointRequest
     * @return DeleteCatalogPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteCatalogPrivateEndpoint.ts.html |here} to see how to use DeleteCatalogPrivateEndpoint API.
     */
    deleteCatalogPrivateEndpoint(deleteCatalogPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteCatalogPrivateEndpoint.");
            const operationName = "deleteCatalogPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CatalogPrivateEndpoint/DeleteCatalogPrivateEndpoint";
            const pathParams = {
                "{catalogPrivateEndpointId}": deleteCatalogPrivateEndpointRequest.catalogPrivateEndpointId
            };
            const queryParams = {
                "isLockOverride": deleteCatalogPrivateEndpointRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteCatalogPrivateEndpointRequest.ifMatch,
                "opc-request-id": deleteCatalogPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteCatalogPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogPrivateEndpoints/{catalogPrivateEndpointId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific connection of a data asset.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteConnectionRequest
     * @return DeleteConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteConnection.ts.html |here} to see how to use DeleteConnection API.
     */
    deleteConnection(deleteConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteConnection.");
            const operationName = "deleteConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Connection/DeleteConnection";
            const pathParams = {
                "{catalogId}": deleteConnectionRequest.catalogId,
                "{dataAssetKey}": deleteConnectionRequest.dataAssetKey,
                "{connectionKey}": deleteConnectionRequest.connectionKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteConnectionRequest.ifMatch,
                "opc-request-id": deleteConnectionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/connections/{connectionKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific custom property identified by it's key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteCustomPropertyRequest
     * @return DeleteCustomPropertyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteCustomProperty.ts.html |here} to see how to use DeleteCustomProperty API.
     */
    deleteCustomProperty(deleteCustomPropertyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteCustomProperty.");
            const operationName = "deleteCustomProperty";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CustomProperty/DeleteCustomProperty";
            const pathParams = {
                "{catalogId}": deleteCustomPropertyRequest.catalogId,
                "{namespaceId}": deleteCustomPropertyRequest.namespaceId,
                "{customPropertyKey}": deleteCustomPropertyRequest.customPropertyKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteCustomPropertyRequest.ifMatch,
                "opc-request-id": deleteCustomPropertyRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteCustomPropertyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/namespaces/{namespaceId}/customProperties/{customPropertyKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific data asset identified by it's key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDataAssetRequest
     * @return DeleteDataAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteDataAsset.ts.html |here} to see how to use DeleteDataAsset API.
     */
    deleteDataAsset(deleteDataAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteDataAsset.");
            const operationName = "deleteDataAsset";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/DeleteDataAsset";
            const pathParams = {
                "{catalogId}": deleteDataAssetRequest.catalogId,
                "{dataAssetKey}": deleteDataAssetRequest.dataAssetKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDataAssetRequest.ifMatch,
                "opc-request-id": deleteDataAssetRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDataAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific data asset tag.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDataAssetTagRequest
     * @return DeleteDataAssetTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteDataAssetTag.ts.html |here} to see how to use DeleteDataAssetTag API.
     */
    deleteDataAssetTag(deleteDataAssetTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteDataAssetTag.");
            const operationName = "deleteDataAssetTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAssetTag/DeleteDataAssetTag";
            const pathParams = {
                "{catalogId}": deleteDataAssetTagRequest.catalogId,
                "{dataAssetKey}": deleteDataAssetTagRequest.dataAssetKey,
                "{tagKey}": deleteDataAssetTagRequest.tagKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDataAssetTagRequest.ifMatch,
                "opc-request-id": deleteDataAssetTagRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDataAssetTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/tags/{tagKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific data entity.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteEntityRequest
     * @return DeleteEntityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteEntity.ts.html |here} to see how to use DeleteEntity API.
     */
    deleteEntity(deleteEntityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteEntity.");
            const operationName = "deleteEntity";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Entity/DeleteEntity";
            const pathParams = {
                "{catalogId}": deleteEntityRequest.catalogId,
                "{dataAssetKey}": deleteEntityRequest.dataAssetKey,
                "{entityKey}": deleteEntityRequest.entityKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteEntityRequest.ifMatch,
                "opc-request-id": deleteEntityRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteEntityRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific entity tag.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteEntityTagRequest
     * @return DeleteEntityTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteEntityTag.ts.html |here} to see how to use DeleteEntityTag API.
     */
    deleteEntityTag(deleteEntityTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteEntityTag.");
            const operationName = "deleteEntityTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/EntityTag/DeleteEntityTag";
            const pathParams = {
                "{catalogId}": deleteEntityTagRequest.catalogId,
                "{dataAssetKey}": deleteEntityTagRequest.dataAssetKey,
                "{entityKey}": deleteEntityTagRequest.entityKey,
                "{tagKey}": deleteEntityTagRequest.tagKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteEntityTagRequest.ifMatch,
                "opc-request-id": deleteEntityTagRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteEntityTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/tags/{tagKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific folder of a data asset identified by it's key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteFolderRequest
     * @return DeleteFolderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteFolder.ts.html |here} to see how to use DeleteFolder API.
     */
    deleteFolder(deleteFolderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteFolder.");
            const operationName = "deleteFolder";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Folder/DeleteFolder";
            const pathParams = {
                "{catalogId}": deleteFolderRequest.catalogId,
                "{dataAssetKey}": deleteFolderRequest.dataAssetKey,
                "{folderKey}": deleteFolderRequest.folderKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteFolderRequest.ifMatch,
                "opc-request-id": deleteFolderRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteFolderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/folders/{folderKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific folder tag.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteFolderTagRequest
     * @return DeleteFolderTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteFolderTag.ts.html |here} to see how to use DeleteFolderTag API.
     */
    deleteFolderTag(deleteFolderTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteFolderTag.");
            const operationName = "deleteFolderTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/FolderTag/DeleteFolderTag";
            const pathParams = {
                "{catalogId}": deleteFolderTagRequest.catalogId,
                "{dataAssetKey}": deleteFolderTagRequest.dataAssetKey,
                "{folderKey}": deleteFolderTagRequest.folderKey,
                "{tagKey}": deleteFolderTagRequest.tagKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteFolderTagRequest.ifMatch,
                "opc-request-id": deleteFolderTagRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteFolderTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/folders/{folderKey}/tags/{tagKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific glossary identified by it's key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteGlossaryRequest
     * @return DeleteGlossaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteGlossary.ts.html |here} to see how to use DeleteGlossary API.
     */
    deleteGlossary(deleteGlossaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteGlossary.");
            const operationName = "deleteGlossary";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Glossary/DeleteGlossary";
            const pathParams = {
                "{catalogId}": deleteGlossaryRequest.catalogId,
                "{glossaryKey}": deleteGlossaryRequest.glossaryKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteGlossaryRequest.ifMatch,
                "opc-request-id": deleteGlossaryRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteGlossaryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific job identified by it's key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteJobRequest
     * @return DeleteJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteJob.ts.html |here} to see how to use DeleteJob API.
     */
    deleteJob(deleteJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteJob.");
            const operationName = "deleteJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Job/DeleteJob";
            const pathParams = {
                "{catalogId}": deleteJobRequest.catalogId,
                "{jobKey}": deleteJobRequest.jobKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteJobRequest.ifMatch,
                "opc-request-id": deleteJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs/{jobKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific job definition identified by it's key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteJobDefinitionRequest
     * @return DeleteJobDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteJobDefinition.ts.html |here} to see how to use DeleteJobDefinition API.
     */
    deleteJobDefinition(deleteJobDefinitionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteJobDefinition.");
            const operationName = "deleteJobDefinition";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobDefinition/DeleteJobDefinition";
            const pathParams = {
                "{catalogId}": deleteJobDefinitionRequest.catalogId,
                "{jobDefinitionKey}": deleteJobDefinitionRequest.jobDefinitionKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteJobDefinitionRequest.ifMatch,
                "opc-request-id": deleteJobDefinitionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteJobDefinitionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobDefinitions/{jobDefinitionKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a metastore resource by identifier.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMetastoreRequest
     * @return DeleteMetastoreResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteMetastore.ts.html |here} to see how to use DeleteMetastore API.
     */
    deleteMetastore(deleteMetastoreRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteMetastore.");
            const operationName = "deleteMetastore";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Metastore/DeleteMetastore";
            const pathParams = {
                "{metastoreId}": deleteMetastoreRequest.metastoreId
            };
            const queryParams = {
                "isLockOverride": deleteMetastoreRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMetastoreRequest.ifMatch,
                "opc-request-id": deleteMetastoreRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMetastoreRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metastores/{metastoreId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific Namespace identified by it's key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteNamespaceRequest
     * @return DeleteNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteNamespace.ts.html |here} to see how to use DeleteNamespace API.
     */
    deleteNamespace(deleteNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteNamespace.");
            const operationName = "deleteNamespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Namespace/DeleteNamespace";
            const pathParams = {
                "{catalogId}": deleteNamespaceRequest.catalogId,
                "{namespaceId}": deleteNamespaceRequest.namespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteNamespaceRequest.ifMatch,
                "opc-request-id": deleteNamespaceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/namespaces/{namespaceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific pattern identified by it's key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeletePatternRequest
     * @return DeletePatternResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeletePattern.ts.html |here} to see how to use DeletePattern API.
     */
    deletePattern(deletePatternRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deletePattern.");
            const operationName = "deletePattern";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Pattern/DeletePattern";
            const pathParams = {
                "{catalogId}": deletePatternRequest.catalogId,
                "{patternKey}": deletePatternRequest.patternKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deletePatternRequest.ifMatch,
                "opc-request-id": deletePatternRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deletePatternRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/patterns/{patternKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific glossary term.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteTermRequest
     * @return DeleteTermResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteTerm.ts.html |here} to see how to use DeleteTerm API.
     */
    deleteTerm(deleteTermRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteTerm.");
            const operationName = "deleteTerm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Term/DeleteTerm";
            const pathParams = {
                "{catalogId}": deleteTermRequest.catalogId,
                "{glossaryKey}": deleteTermRequest.glossaryKey,
                "{termKey}": deleteTermRequest.termKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteTermRequest.ifMatch,
                "opc-request-id": deleteTermRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteTermRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/terms/{termKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific glossary term relationship.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteTermRelationshipRequest
     * @return DeleteTermRelationshipResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DeleteTermRelationship.ts.html |here} to see how to use DeleteTermRelationship API.
     */
    deleteTermRelationship(deleteTermRelationshipRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#deleteTermRelationship.");
            const operationName = "deleteTermRelationship";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/TermRelationship/DeleteTermRelationship";
            const pathParams = {
                "{catalogId}": deleteTermRelationshipRequest.catalogId,
                "{glossaryKey}": deleteTermRelationshipRequest.glossaryKey,
                "{termKey}": deleteTermRelationshipRequest.termKey,
                "{termRelationshipKey}": deleteTermRelationshipRequest.termRelationshipKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteTermRelationshipRequest.ifMatch,
                "opc-request-id": deleteTermRelationshipRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteTermRelationshipRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/terms/{termKey}/termRelationships/{termRelationshipKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Detaches a private reverse connection endpoint resource to a data catalog resource. When provided, 'If-Match' is checked against 'ETag' values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DetachCatalogPrivateEndpointRequest
     * @return DetachCatalogPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DetachCatalogPrivateEndpoint.ts.html |here} to see how to use DetachCatalogPrivateEndpoint API.
     */
    detachCatalogPrivateEndpoint(detachCatalogPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#detachCatalogPrivateEndpoint.");
            const operationName = "detachCatalogPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/DetachCatalogPrivateEndpoint";
            const pathParams = {
                "{catalogId}": detachCatalogPrivateEndpointRequest.catalogId
            };
            const queryParams = {
                "isLockOverride": detachCatalogPrivateEndpointRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": detachCatalogPrivateEndpointRequest.ifMatch,
                "opc-request-id": detachCatalogPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, detachCatalogPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/actions/detachCatalogPrivateEndpoint",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(detachCatalogPrivateEndpointRequest.detachCatalogPrivateEndpointDetails, "DetachCatalogPrivateEndpointDetails", model.DetachCatalogPrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove the custom property for the given type
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DisassociateCustomPropertyRequest
     * @return DisassociateCustomPropertyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/DisassociateCustomProperty.ts.html |here} to see how to use DisassociateCustomProperty API.
     */
    disassociateCustomProperty(disassociateCustomPropertyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#disassociateCustomProperty.");
            const operationName = "disassociateCustomProperty";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Type/DisassociateCustomProperty";
            const pathParams = {
                "{catalogId}": disassociateCustomPropertyRequest.catalogId,
                "{typeKey}": disassociateCustomPropertyRequest.typeKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": disassociateCustomPropertyRequest.opcRequestId,
                "if-match": disassociateCustomPropertyRequest.ifMatch,
                "opc-retry-token": disassociateCustomPropertyRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disassociateCustomPropertyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/types/{typeKey}/actions/disassociateCustomProperties",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(disassociateCustomPropertyRequest.disassociateCustomPropertyDetails, "TypeCustomPropertyDetails", model.TypeCustomPropertyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "type",
                    bodyModel: model.Type,
                    type: "model.Type",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the fully expanded tree hierarchy of parent and child terms in this glossary.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ExpandTreeForGlossaryRequest
     * @return ExpandTreeForGlossaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ExpandTreeForGlossary.ts.html |here} to see how to use ExpandTreeForGlossary API.
     */
    expandTreeForGlossary(expandTreeForGlossaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#expandTreeForGlossary.");
            const operationName = "expandTreeForGlossary";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Glossary/ExpandTreeForGlossary";
            const pathParams = {
                "{catalogId}": expandTreeForGlossaryRequest.catalogId,
                "{glossaryKey}": expandTreeForGlossaryRequest.glossaryKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": expandTreeForGlossaryRequest.opcRequestId,
                "opc-retry-token": expandTreeForGlossaryRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, expandTreeForGlossaryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/actions/expandTree",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.GlossaryTreeElement,
                    type: "Array<model.GlossaryTreeElement>",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Export the glossary and the terms and return the exported glossary as csv or json.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ExportGlossaryRequest
     * @return ExportGlossaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ExportGlossary.ts.html |here} to see how to use ExportGlossary API.
     */
    exportGlossary(exportGlossaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#exportGlossary.");
            const operationName = "exportGlossary";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Glossary/ExportGlossary";
            const pathParams = {
                "{catalogId}": exportGlossaryRequest.catalogId,
                "{glossaryKey}": exportGlossaryRequest.glossaryKey
            };
            const queryParams = {
                "isRelationshipExported": exportGlossaryRequest.isRelationshipExported
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": exportGlossaryRequest.opcRequestId,
                "opc-retry-token": exportGlossaryRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, exportGlossaryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/actions/export",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "value",
                    bodyModel: "string",
                    type: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns lineage for a given entity object.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param FetchEntityLineageRequest
     * @return FetchEntityLineageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/FetchEntityLineage.ts.html |here} to see how to use FetchEntityLineage API.
     */
    fetchEntityLineage(fetchEntityLineageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#fetchEntityLineage.");
            const operationName = "fetchEntityLineage";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Entity/FetchEntityLineage";
            const pathParams = {
                "{catalogId}": fetchEntityLineageRequest.catalogId,
                "{dataAssetKey}": fetchEntityLineageRequest.dataAssetKey,
                "{entityKey}": fetchEntityLineageRequest.entityKey
            };
            const queryParams = {
                "limit": fetchEntityLineageRequest.limit,
                "page": fetchEntityLineageRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": fetchEntityLineageRequest.opcRequestId,
                "if-match": fetchEntityLineageRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, fetchEntityLineageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/actions/fetchLineage",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(fetchEntityLineageRequest.fetchEntityLineageDetails, "FetchEntityLineageDetails", model.FetchEntityLineageDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "entityLineage",
                    bodyModel: model.EntityLineage,
                    type: "model.EntityLineage",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific entity attribute by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAttributeRequest
     * @return GetAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetAttribute.ts.html |here} to see how to use GetAttribute API.
     */
    getAttribute(getAttributeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getAttribute.");
            const operationName = "getAttribute";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Attribute/GetAttribute";
            const pathParams = {
                "{catalogId}": getAttributeRequest.catalogId,
                "{dataAssetKey}": getAttributeRequest.dataAssetKey,
                "{entityKey}": getAttributeRequest.entityKey,
                "{attributeKey}": getAttributeRequest.attributeKey
            };
            const queryParams = {
                "isIncludeObjectRelationships": getAttributeRequest.isIncludeObjectRelationships,
                "fields": getAttributeRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAttributeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAttributeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/attributes/{attributeKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "attribute",
                    bodyModel: model.Attribute,
                    type: "model.Attribute",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific entity attribute tag by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAttributeTagRequest
     * @return GetAttributeTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetAttributeTag.ts.html |here} to see how to use GetAttributeTag API.
     */
    getAttributeTag(getAttributeTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getAttributeTag.");
            const operationName = "getAttributeTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/AttributeTag/GetAttributeTag";
            const pathParams = {
                "{catalogId}": getAttributeTagRequest.catalogId,
                "{dataAssetKey}": getAttributeTagRequest.dataAssetKey,
                "{entityKey}": getAttributeTagRequest.entityKey,
                "{attributeKey}": getAttributeTagRequest.attributeKey,
                "{tagKey}": getAttributeTagRequest.tagKey
            };
            const queryParams = {
                "fields": getAttributeTagRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAttributeTagRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAttributeTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/attributes/{attributeKey}/tags/{tagKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "attributeTag",
                    bodyModel: model.AttributeTag,
                    type: "model.AttributeTag",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a data catalog by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetCatalogRequest
     * @return GetCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetCatalog.ts.html |here} to see how to use GetCatalog API.
     */
    getCatalog(getCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getCatalog.");
            const operationName = "getCatalog";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/GetCatalog";
            const pathParams = {
                "{catalogId}": getCatalogRequest.catalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "catalog",
                    bodyModel: model.Catalog,
                    type: "model.Catalog",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific private reverse connection by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetCatalogPrivateEndpointRequest
     * @return GetCatalogPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetCatalogPrivateEndpoint.ts.html |here} to see how to use GetCatalogPrivateEndpoint API.
     */
    getCatalogPrivateEndpoint(getCatalogPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getCatalogPrivateEndpoint.");
            const operationName = "getCatalogPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CatalogPrivateEndpoint/GetCatalogPrivateEndpoint";
            const pathParams = {
                "{catalogPrivateEndpointId}": getCatalogPrivateEndpointRequest.catalogPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCatalogPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCatalogPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogPrivateEndpoints/{catalogPrivateEndpointId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "catalogPrivateEndpoint",
                    bodyModel: model.CatalogPrivateEndpoint,
                    type: "model.CatalogPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific data asset connection by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetConnectionRequest
     * @return GetConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetConnection.ts.html |here} to see how to use GetConnection API.
     */
    getConnection(getConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getConnection.");
            const operationName = "getConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Connection/GetConnection";
            const pathParams = {
                "{catalogId}": getConnectionRequest.catalogId,
                "{dataAssetKey}": getConnectionRequest.dataAssetKey,
                "{connectionKey}": getConnectionRequest.connectionKey
            };
            const queryParams = {
                "fields": getConnectionRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getConnectionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/connections/{connectionKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "connection",
                    bodyModel: model.Connection,
                    type: "model.Connection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific custom property for the given key within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetCustomPropertyRequest
     * @return GetCustomPropertyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetCustomProperty.ts.html |here} to see how to use GetCustomProperty API.
     */
    getCustomProperty(getCustomPropertyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getCustomProperty.");
            const operationName = "getCustomProperty";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CustomProperty/GetCustomProperty";
            const pathParams = {
                "{catalogId}": getCustomPropertyRequest.catalogId,
                "{namespaceId}": getCustomPropertyRequest.namespaceId,
                "{customPropertyKey}": getCustomPropertyRequest.customPropertyKey
            };
            const queryParams = {
                "fields": getCustomPropertyRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCustomPropertyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCustomPropertyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/namespaces/{namespaceId}/customProperties/{customPropertyKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "customProperty",
                    bodyModel: model.CustomProperty,
                    type: "model.CustomProperty",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific data asset for the given key within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDataAssetRequest
     * @return GetDataAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetDataAsset.ts.html |here} to see how to use GetDataAsset API.
     */
    getDataAsset(getDataAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getDataAsset.");
            const operationName = "getDataAsset";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/GetDataAsset";
            const pathParams = {
                "{catalogId}": getDataAssetRequest.catalogId,
                "{dataAssetKey}": getDataAssetRequest.dataAssetKey
            };
            const queryParams = {
                "fields": getDataAssetRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDataAssetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDataAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataAsset",
                    bodyModel: model.DataAsset,
                    type: "model.DataAsset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific data asset tag by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDataAssetTagRequest
     * @return GetDataAssetTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetDataAssetTag.ts.html |here} to see how to use GetDataAssetTag API.
     */
    getDataAssetTag(getDataAssetTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getDataAssetTag.");
            const operationName = "getDataAssetTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAssetTag/GetDataAssetTag";
            const pathParams = {
                "{catalogId}": getDataAssetTagRequest.catalogId,
                "{dataAssetKey}": getDataAssetTagRequest.dataAssetKey,
                "{tagKey}": getDataAssetTagRequest.tagKey
            };
            const queryParams = {
                "fields": getDataAssetTagRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDataAssetTagRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDataAssetTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/tags/{tagKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataAssetTag",
                    bodyModel: model.DataAssetTag,
                    type: "model.DataAssetTag",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific data entity by key for a data asset.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetEntityRequest
     * @return GetEntityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetEntity.ts.html |here} to see how to use GetEntity API.
     */
    getEntity(getEntityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getEntity.");
            const operationName = "getEntity";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Entity/GetEntity";
            const pathParams = {
                "{catalogId}": getEntityRequest.catalogId,
                "{dataAssetKey}": getEntityRequest.dataAssetKey,
                "{entityKey}": getEntityRequest.entityKey
            };
            const queryParams = {
                "isIncludeObjectRelationships": getEntityRequest.isIncludeObjectRelationships,
                "fields": getEntityRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getEntityRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getEntityRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "entity",
                    bodyModel: model.Entity,
                    type: "model.Entity",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific entity tag by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetEntityTagRequest
     * @return GetEntityTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetEntityTag.ts.html |here} to see how to use GetEntityTag API.
     */
    getEntityTag(getEntityTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getEntityTag.");
            const operationName = "getEntityTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/EntityTag/GetEntityTag";
            const pathParams = {
                "{catalogId}": getEntityTagRequest.catalogId,
                "{dataAssetKey}": getEntityTagRequest.dataAssetKey,
                "{entityKey}": getEntityTagRequest.entityKey,
                "{tagKey}": getEntityTagRequest.tagKey
            };
            const queryParams = {
                "fields": getEntityTagRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getEntityTagRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getEntityTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/tags/{tagKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "entityTag",
                    bodyModel: model.EntityTag,
                    type: "model.EntityTag",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific data asset folder by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetFolderRequest
     * @return GetFolderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetFolder.ts.html |here} to see how to use GetFolder API.
     */
    getFolder(getFolderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getFolder.");
            const operationName = "getFolder";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Folder/GetFolder";
            const pathParams = {
                "{catalogId}": getFolderRequest.catalogId,
                "{dataAssetKey}": getFolderRequest.dataAssetKey,
                "{folderKey}": getFolderRequest.folderKey
            };
            const queryParams = {
                "isIncludeObjectRelationships": getFolderRequest.isIncludeObjectRelationships,
                "fields": getFolderRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getFolderRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getFolderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/folders/{folderKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "folder",
                    bodyModel: model.Folder,
                    type: "model.Folder",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific folder tag by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetFolderTagRequest
     * @return GetFolderTagResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetFolderTag.ts.html |here} to see how to use GetFolderTag API.
     */
    getFolderTag(getFolderTagRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getFolderTag.");
            const operationName = "getFolderTag";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/FolderTag/GetFolderTag";
            const pathParams = {
                "{catalogId}": getFolderTagRequest.catalogId,
                "{dataAssetKey}": getFolderTagRequest.dataAssetKey,
                "{folderKey}": getFolderTagRequest.folderKey,
                "{tagKey}": getFolderTagRequest.tagKey
            };
            const queryParams = {
                "fields": getFolderTagRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getFolderTagRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getFolderTagRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/folders/{folderKey}/tags/{tagKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "folderTag",
                    bodyModel: model.FolderTag,
                    type: "model.FolderTag",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific glossary by key within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetGlossaryRequest
     * @return GetGlossaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetGlossary.ts.html |here} to see how to use GetGlossary API.
     */
    getGlossary(getGlossaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getGlossary.");
            const operationName = "getGlossary";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Glossary/GetGlossary";
            const pathParams = {
                "{catalogId}": getGlossaryRequest.catalogId,
                "{glossaryKey}": getGlossaryRequest.glossaryKey
            };
            const queryParams = {
                "fields": getGlossaryRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getGlossaryRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getGlossaryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "glossary",
                    bodyModel: model.Glossary,
                    type: "model.Glossary",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific job by key within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetJobRequest
     * @return GetJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetJob.ts.html |here} to see how to use GetJob API.
     */
    getJob(getJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getJob.");
            const operationName = "getJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Job/GetJob";
            const pathParams = {
                "{catalogId}": getJobRequest.catalogId,
                "{jobKey}": getJobRequest.jobKey
            };
            const queryParams = {
                "fields": getJobRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs/{jobKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: model.Job,
                    type: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific job definition by key within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetJobDefinitionRequest
     * @return GetJobDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetJobDefinition.ts.html |here} to see how to use GetJobDefinition API.
     */
    getJobDefinition(getJobDefinitionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getJobDefinition.");
            const operationName = "getJobDefinition";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobDefinition/GetJobDefinition";
            const pathParams = {
                "{catalogId}": getJobDefinitionRequest.catalogId,
                "{jobDefinitionKey}": getJobDefinitionRequest.jobDefinitionKey
            };
            const queryParams = {
                "fields": getJobDefinitionRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobDefinitionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getJobDefinitionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobDefinitions/{jobDefinitionKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobDefinition",
                    bodyModel: model.JobDefinition,
                    type: "model.JobDefinition",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific job execution by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetJobExecutionRequest
     * @return GetJobExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetJobExecution.ts.html |here} to see how to use GetJobExecution API.
     */
    getJobExecution(getJobExecutionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getJobExecution.");
            const operationName = "getJobExecution";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobExecution/GetJobExecution";
            const pathParams = {
                "{catalogId}": getJobExecutionRequest.catalogId,
                "{jobKey}": getJobExecutionRequest.jobKey,
                "{jobExecutionKey}": getJobExecutionRequest.jobExecutionKey
            };
            const queryParams = {
                "fields": getJobExecutionRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobExecutionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getJobExecutionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs/{jobKey}/executions/{jobExecutionKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobExecution",
                    bodyModel: model.JobExecution,
                    type: "model.JobExecution",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific job log by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetJobLogRequest
     * @return GetJobLogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetJobLog.ts.html |here} to see how to use GetJobLog API.
     */
    getJobLog(getJobLogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getJobLog.");
            const operationName = "getJobLog";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobLog/GetJobLog";
            const pathParams = {
                "{catalogId}": getJobLogRequest.catalogId,
                "{jobKey}": getJobLogRequest.jobKey,
                "{jobExecutionKey}": getJobLogRequest.jobExecutionKey,
                "{jobLogKey}": getJobLogRequest.jobLogKey
            };
            const queryParams = {
                "fields": getJobLogRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobLogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getJobLogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs/{jobKey}/executions/{jobExecutionKey}/logs/{jobLogKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobLog",
                    bodyModel: model.JobLog,
                    type: "model.JobLog",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific job metric by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetJobMetricsRequest
     * @return GetJobMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetJobMetrics.ts.html |here} to see how to use GetJobMetrics API.
     */
    getJobMetrics(getJobMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getJobMetrics.");
            const operationName = "getJobMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobMetric/GetJobMetrics";
            const pathParams = {
                "{catalogId}": getJobMetricsRequest.catalogId,
                "{jobKey}": getJobMetricsRequest.jobKey,
                "{jobExecutionKey}": getJobMetricsRequest.jobExecutionKey,
                "{jobMetricsKey}": getJobMetricsRequest.jobMetricsKey
            };
            const queryParams = {
                "fields": getJobMetricsRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getJobMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs/{jobKey}/executions/{jobExecutionKey}/metrics/{jobMetricsKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobMetric",
                    bodyModel: model.JobMetric,
                    type: "model.JobMetric",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a metastore by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMetastoreRequest
     * @return GetMetastoreResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetMetastore.ts.html |here} to see how to use GetMetastore API.
     */
    getMetastore(getMetastoreRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getMetastore.");
            const operationName = "getMetastore";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Metastore/GetMetastore";
            const pathParams = {
                "{metastoreId}": getMetastoreRequest.metastoreId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMetastoreRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMetastoreRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metastores/{metastoreId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "metastore",
                    bodyModel: model.Metastore,
                    type: "model.Metastore",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific namespace for the given key within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetNamespaceRequest
     * @return GetNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetNamespace.ts.html |here} to see how to use GetNamespace API.
     */
    getNamespace(getNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getNamespace.");
            const operationName = "getNamespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Namespace/GetNamespace";
            const pathParams = {
                "{catalogId}": getNamespaceRequest.catalogId,
                "{namespaceId}": getNamespaceRequest.namespaceId
            };
            const queryParams = {
                "fields": getNamespaceRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getNamespaceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/namespaces/{namespaceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "namespace",
                    bodyModel: model.Namespace,
                    type: "model.Namespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific pattern for the given key within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPatternRequest
     * @return GetPatternResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetPattern.ts.html |here} to see how to use GetPattern API.
     */
    getPattern(getPatternRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getPattern.");
            const operationName = "getPattern";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Pattern/GetPattern";
            const pathParams = {
                "{catalogId}": getPatternRequest.catalogId,
                "{patternKey}": getPatternRequest.patternKey
            };
            const queryParams = {
                "fields": getPatternRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getPatternRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getPatternRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/patterns/{patternKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pattern",
                    bodyModel: model.Pattern,
                    type: "model.Pattern",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific glossary term by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTermRequest
     * @return GetTermResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetTerm.ts.html |here} to see how to use GetTerm API.
     */
    getTerm(getTermRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getTerm.");
            const operationName = "getTerm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Term/GetTerm";
            const pathParams = {
                "{catalogId}": getTermRequest.catalogId,
                "{glossaryKey}": getTermRequest.glossaryKey,
                "{termKey}": getTermRequest.termKey
            };
            const queryParams = {
                "fields": getTermRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTermRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTermRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/terms/{termKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "term",
                    bodyModel: model.Term,
                    type: "model.Term",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific glossary term relationship by key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTermRelationshipRequest
     * @return GetTermRelationshipResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetTermRelationship.ts.html |here} to see how to use GetTermRelationship API.
     */
    getTermRelationship(getTermRelationshipRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getTermRelationship.");
            const operationName = "getTermRelationship";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/TermRelationship/GetTermRelationship";
            const pathParams = {
                "{catalogId}": getTermRelationshipRequest.catalogId,
                "{glossaryKey}": getTermRelationshipRequest.glossaryKey,
                "{termKey}": getTermRelationshipRequest.termKey,
                "{termRelationshipKey}": getTermRelationshipRequest.termRelationshipKey
            };
            const queryParams = {
                "fields": getTermRelationshipRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTermRelationshipRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTermRelationshipRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/terms/{termKey}/termRelationships/{termRelationshipKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "termRelationship",
                    bodyModel: model.TermRelationship,
                    type: "model.TermRelationship",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a specific type by key within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTypeRequest
     * @return GetTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetType.ts.html |here} to see how to use GetType API.
     */
    getType(getTypeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getType.");
            const operationName = "getType";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Type/GetType";
            const pathParams = {
                "{catalogId}": getTypeRequest.catalogId,
                "{typeKey}": getTypeRequest.typeKey
            };
            const queryParams = {
                "fields": getTypeRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTypeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getTypeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/types/{typeKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "type",
                    bodyModel: model.Type,
                    type: "model.Type",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the work request with the given OCID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/WorkRequest/GetWorkRequest";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Import new connection for this data asset.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ImportConnectionRequest
     * @return ImportConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ImportConnection.ts.html |here} to see how to use ImportConnection API.
     */
    importConnection(importConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#importConnection.");
            const operationName = "importConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/ImportConnection";
            const pathParams = {
                "{catalogId}": importConnectionRequest.catalogId,
                "{dataAssetKey}": importConnectionRequest.dataAssetKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": importConnectionRequest.opcRequestId,
                "if-match": importConnectionRequest.ifMatch,
                "opc-retry-token": importConnectionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, importConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/actions/importConnection",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(importConnectionRequest.importConnectionDetails, "ImportConnectionDetails", model.ImportConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "connection",
                    bodyModel: model.Connection,
                    type: "model.Connection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Import technical objects to a Data Asset
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ImportDataAssetRequest
     * @return ImportDataAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ImportDataAsset.ts.html |here} to see how to use ImportDataAsset API.
     */
    importDataAsset(importDataAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#importDataAsset.");
            const operationName = "importDataAsset";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/ImportDataAsset";
            const pathParams = {
                "{catalogId}": importDataAssetRequest.catalogId,
                "{dataAssetKey}": importDataAssetRequest.dataAssetKey
            };
            const queryParams = {
                "importType": importDataAssetRequest.importType,
                "isMissingValueIgnored": importDataAssetRequest.isMissingValueIgnored
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": importDataAssetRequest.opcRequestId,
                "opc-retry-token": importDataAssetRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, importDataAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/actions/import",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(importDataAssetRequest.importDataAssetDetails, "ImportDataAssetDetails", model.ImportDataAssetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "importDataAssetJobResult",
                    bodyModel: model.ImportDataAssetJobResult,
                    type: "model.ImportDataAssetJobResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Import the glossary and the terms from csv or json files and return the imported glossary resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ImportGlossaryRequest
     * @return ImportGlossaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ImportGlossary.ts.html |here} to see how to use ImportGlossary API.
     */
    importGlossary(importGlossaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#importGlossary.");
            const operationName = "importGlossary";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Glossary/ImportGlossary";
            const pathParams = {
                "{catalogId}": importGlossaryRequest.catalogId,
                "{glossaryKey}": importGlossaryRequest.glossaryKey
            };
            const queryParams = {
                "isRelationshipImported": importGlossaryRequest.isRelationshipImported
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": importGlossaryRequest.opcRequestId,
                "opc-retry-token": importGlossaryRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, importGlossaryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/actions/import",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(importGlossaryRequest.importGlossaryDetails, "ImportGlossaryDetails", model.ImportGlossaryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Imports lineage metadata. Returns details about the job that performs the import.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ImportLineageRequest
     * @return ImportLineageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ImportLineage.ts.html |here} to see how to use ImportLineage API.
     */
    importLineage(importLineageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#importLineage.");
            const operationName = "importLineage";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/ImportLineage";
            const pathParams = {
                "{catalogId}": importLineageRequest.catalogId,
                "{dataAssetKey}": importLineageRequest.dataAssetKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": importLineageRequest.opcRetryToken,
                "opc-request-id": importLineageRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, importLineageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/actions/importLineage",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(importLineageRequest.importLineageDetails, "ImportLineageDetails", model.ImportLineageDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "importLineageJobResult",
                    bodyModel: model.ImportLineageJobResult,
                    type: "model.ImportLineageJobResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * List the physical entities aggregated by this logical entity.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAggregatedPhysicalEntitiesRequest
     * @return ListAggregatedPhysicalEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListAggregatedPhysicalEntities.ts.html |here} to see how to use ListAggregatedPhysicalEntities API.
     */
    listAggregatedPhysicalEntities(listAggregatedPhysicalEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listAggregatedPhysicalEntities.");
            const operationName = "listAggregatedPhysicalEntities";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Entity/ListAggregatedPhysicalEntities";
            const pathParams = {
                "{catalogId}": listAggregatedPhysicalEntitiesRequest.catalogId,
                "{dataAssetKey}": listAggregatedPhysicalEntitiesRequest.dataAssetKey,
                "{entityKey}": listAggregatedPhysicalEntitiesRequest.entityKey
            };
            const queryParams = {
                "fields": listAggregatedPhysicalEntitiesRequest.fields,
                "displayNameContains": listAggregatedPhysicalEntitiesRequest.displayNameContains,
                "sortBy": listAggregatedPhysicalEntitiesRequest.sortBy,
                "sortOrder": listAggregatedPhysicalEntitiesRequest.sortOrder,
                "limit": listAggregatedPhysicalEntitiesRequest.limit,
                "page": listAggregatedPhysicalEntitiesRequest.page,
                "isIncludeProperties": listAggregatedPhysicalEntitiesRequest.isIncludeProperties
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAggregatedPhysicalEntitiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAggregatedPhysicalEntitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/actions/listAggregatedPhysicalEntities",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "entityCollection",
                    bodyModel: model.EntityCollection,
                    type: "model.EntityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all tags for an entity attribute.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAttributeTagsRequest
     * @return ListAttributeTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListAttributeTags.ts.html |here} to see how to use ListAttributeTags API.
     */
    listAttributeTags(listAttributeTagsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listAttributeTags.");
            const operationName = "listAttributeTags";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/AttributeTagCollection/ListAttributeTags";
            const pathParams = {
                "{catalogId}": listAttributeTagsRequest.catalogId,
                "{dataAssetKey}": listAttributeTagsRequest.dataAssetKey,
                "{entityKey}": listAttributeTagsRequest.entityKey,
                "{attributeKey}": listAttributeTagsRequest.attributeKey
            };
            const queryParams = {
                "name": listAttributeTagsRequest.name,
                "lifecycleState": listAttributeTagsRequest.lifecycleState,
                "termKey": listAttributeTagsRequest.termKey,
                "termPath": listAttributeTagsRequest.termPath,
                "timeCreated": listAttributeTagsRequest.timeCreated,
                "createdById": listAttributeTagsRequest.createdById,
                "fields": listAttributeTagsRequest.fields,
                "sortBy": listAttributeTagsRequest.sortBy,
                "sortOrder": listAttributeTagsRequest.sortOrder,
                "limit": listAttributeTagsRequest.limit,
                "page": listAttributeTagsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAttributeTagsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAttributeTagsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/attributes/{attributeKey}/tags",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "attributeTagCollection",
                    bodyModel: model.AttributeTagCollection,
                    type: "model.AttributeTagCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all attributes of an data entity.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAttributesRequest
     * @return ListAttributesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListAttributes.ts.html |here} to see how to use ListAttributes API.
     */
    listAttributes(listAttributesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listAttributes.");
            const operationName = "listAttributes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/AttributeCollection/ListAttributes";
            const pathParams = {
                "{catalogId}": listAttributesRequest.catalogId,
                "{dataAssetKey}": listAttributesRequest.dataAssetKey,
                "{entityKey}": listAttributesRequest.entityKey
            };
            const queryParams = {
                "displayName": listAttributesRequest.displayName,
                "businessName": listAttributesRequest.businessName,
                "displayOrBusinessNameContains": listAttributesRequest.displayOrBusinessNameContains,
                "displayNameContains": listAttributesRequest.displayNameContains,
                "lifecycleState": listAttributesRequest.lifecycleState,
                "timeCreated": listAttributesRequest.timeCreated,
                "timeUpdated": listAttributesRequest.timeUpdated,
                "createdById": listAttributesRequest.createdById,
                "updatedById": listAttributesRequest.updatedById,
                "externalKey": listAttributesRequest.externalKey,
                "timeExternal": listAttributesRequest.timeExternal,
                "externalTypeName": listAttributesRequest.externalTypeName,
                "isIncrementalData": listAttributesRequest.isIncrementalData,
                "isNullable": listAttributesRequest.isNullable,
                "length": listAttributesRequest.length,
                "position": listAttributesRequest.position,
                "precision": listAttributesRequest.precision,
                "scale": listAttributesRequest.scale,
                "fields": listAttributesRequest.fields,
                "sortBy": listAttributesRequest.sortBy,
                "sortOrder": listAttributesRequest.sortOrder,
                "limit": listAttributesRequest.limit,
                "page": listAttributesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAttributesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAttributesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/attributes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "attributeCollection",
                    bodyModel: model.AttributeCollection,
                    type: "model.AttributeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all the catalog private endpoints in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCatalogPrivateEndpointsRequest
     * @return ListCatalogPrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListCatalogPrivateEndpoints.ts.html |here} to see how to use ListCatalogPrivateEndpoints API.
     */
    listCatalogPrivateEndpoints(listCatalogPrivateEndpointsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listCatalogPrivateEndpoints.");
            const operationName = "listCatalogPrivateEndpoints";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CatalogPrivateEndpointSummary/ListCatalogPrivateEndpoints";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCatalogPrivateEndpointsRequest.compartmentId,
                "displayName": listCatalogPrivateEndpointsRequest.displayName,
                "limit": listCatalogPrivateEndpointsRequest.limit,
                "page": listCatalogPrivateEndpointsRequest.page,
                "lifecycleState": listCatalogPrivateEndpointsRequest.lifecycleState,
                "sortOrder": listCatalogPrivateEndpointsRequest.sortOrder,
                "sortBy": listCatalogPrivateEndpointsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCatalogPrivateEndpointsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCatalogPrivateEndpointsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogPrivateEndpoints",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.CatalogPrivateEndpointSummary,
                    type: "Array<model.CatalogPrivateEndpointSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listCatalogPrivateEndpointsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.CatalogPrivateEndpointSummary objects
     * contained in responses from the listCatalogPrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCatalogPrivateEndpoints(request) {
        return oci_common_1.paginateRecords(request, req => this.listCatalogPrivateEndpoints(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listCatalogPrivateEndpointsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listCatalogPrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCatalogPrivateEndpointsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listCatalogPrivateEndpoints(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.CatalogPrivateEndpointSummary objects
     * contained in responses from the listCatalogPrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCatalogPrivateEndpointsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listCatalogPrivateEndpoints(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCatalogPrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCatalogPrivateEndpointsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listCatalogPrivateEndpoints(req));
    }
    /**
     * Returns a list of all the data catalogs in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCatalogsRequest
     * @return ListCatalogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListCatalogs.ts.html |here} to see how to use ListCatalogs API.
     */
    listCatalogs(listCatalogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listCatalogs.");
            const operationName = "listCatalogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CatalogSummary/ListCatalogs";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCatalogsRequest.compartmentId,
                "displayName": listCatalogsRequest.displayName,
                "limit": listCatalogsRequest.limit,
                "page": listCatalogsRequest.page,
                "lifecycleState": listCatalogsRequest.lifecycleState,
                "sortOrder": listCatalogsRequest.sortOrder,
                "sortBy": listCatalogsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCatalogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCatalogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.CatalogSummary,
                    type: "Array<model.CatalogSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listCatalogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.CatalogSummary objects
     * contained in responses from the listCatalogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCatalogs(request) {
        return oci_common_1.paginateRecords(request, req => this.listCatalogs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listCatalogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listCatalogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCatalogsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listCatalogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.CatalogSummary objects
     * contained in responses from the listCatalogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCatalogsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listCatalogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCatalogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listCatalogsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listCatalogs(req));
    }
    /**
     * Returns a list of all Connections for a data asset.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListConnectionsRequest
     * @return ListConnectionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListConnections.ts.html |here} to see how to use ListConnections API.
     */
    listConnections(listConnectionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listConnections.");
            const operationName = "listConnections";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/ConnectionCollection/ListConnections";
            const pathParams = {
                "{catalogId}": listConnectionsRequest.catalogId,
                "{dataAssetKey}": listConnectionsRequest.dataAssetKey
            };
            const queryParams = {
                "displayName": listConnectionsRequest.displayName,
                "displayNameContains": listConnectionsRequest.displayNameContains,
                "lifecycleState": listConnectionsRequest.lifecycleState,
                "timeCreated": listConnectionsRequest.timeCreated,
                "timeUpdated": listConnectionsRequest.timeUpdated,
                "createdById": listConnectionsRequest.createdById,
                "updatedById": listConnectionsRequest.updatedById,
                "externalKey": listConnectionsRequest.externalKey,
                "timeStatusUpdated": listConnectionsRequest.timeStatusUpdated,
                "isDefault": listConnectionsRequest.isDefault,
                "fields": listConnectionsRequest.fields,
                "sortBy": listConnectionsRequest.sortBy,
                "sortOrder": listConnectionsRequest.sortOrder,
                "limit": listConnectionsRequest.limit,
                "page": listConnectionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listConnectionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listConnectionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/connections",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "connectionCollection",
                    bodyModel: model.ConnectionCollection,
                    type: "model.ConnectionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of custom properties within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListCustomPropertiesRequest
     * @return ListCustomPropertiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListCustomProperties.ts.html |here} to see how to use ListCustomProperties API.
     */
    listCustomProperties(listCustomPropertiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listCustomProperties.");
            const operationName = "listCustomProperties";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CustomProperty/ListCustomProperties";
            const pathParams = {
                "{catalogId}": listCustomPropertiesRequest.catalogId,
                "{namespaceId}": listCustomPropertiesRequest.namespaceId
            };
            const queryParams = {
                "displayName": listCustomPropertiesRequest.displayName,
                "displayNameContains": listCustomPropertiesRequest.displayNameContains,
                "dataTypes": listCustomPropertiesRequest.dataTypes,
                "typeName": listCustomPropertiesRequest.typeName,
                "lifecycleState": listCustomPropertiesRequest.lifecycleState,
                "timeCreated": listCustomPropertiesRequest.timeCreated,
                "timeUpdated": listCustomPropertiesRequest.timeUpdated,
                "createdById": listCustomPropertiesRequest.createdById,
                "updatedById": listCustomPropertiesRequest.updatedById,
                "fields": listCustomPropertiesRequest.fields,
                "sortOrder": listCustomPropertiesRequest.sortOrder,
                "sortBy": listCustomPropertiesRequest.sortBy,
                "limit": listCustomPropertiesRequest.limit,
                "page": listCustomPropertiesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCustomPropertiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCustomPropertiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/namespaces/{namespaceId}/customProperties",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "customPropertyCollection",
                    bodyModel: model.CustomPropertyCollection,
                    type: "model.CustomPropertyCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all tags for a data asset.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDataAssetTagsRequest
     * @return ListDataAssetTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListDataAssetTags.ts.html |here} to see how to use ListDataAssetTags API.
     */
    listDataAssetTags(listDataAssetTagsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listDataAssetTags.");
            const operationName = "listDataAssetTags";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAssetTagCollection/ListDataAssetTags";
            const pathParams = {
                "{catalogId}": listDataAssetTagsRequest.catalogId,
                "{dataAssetKey}": listDataAssetTagsRequest.dataAssetKey
            };
            const queryParams = {
                "name": listDataAssetTagsRequest.name,
                "lifecycleState": listDataAssetTagsRequest.lifecycleState,
                "termKey": listDataAssetTagsRequest.termKey,
                "termPath": listDataAssetTagsRequest.termPath,
                "timeCreated": listDataAssetTagsRequest.timeCreated,
                "createdById": listDataAssetTagsRequest.createdById,
                "fields": listDataAssetTagsRequest.fields,
                "sortBy": listDataAssetTagsRequest.sortBy,
                "sortOrder": listDataAssetTagsRequest.sortOrder,
                "limit": listDataAssetTagsRequest.limit,
                "page": listDataAssetTagsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDataAssetTagsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDataAssetTagsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/tags",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataAssetTagCollection",
                    bodyModel: model.DataAssetTagCollection,
                    type: "model.DataAssetTagCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of data assets within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDataAssetsRequest
     * @return ListDataAssetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListDataAssets.ts.html |here} to see how to use ListDataAssets API.
     */
    listDataAssets(listDataAssetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listDataAssets.");
            const operationName = "listDataAssets";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAssetCollection/ListDataAssets";
            const pathParams = {
                "{catalogId}": listDataAssetsRequest.catalogId
            };
            const queryParams = {
                "displayName": listDataAssetsRequest.displayName,
                "displayNameContains": listDataAssetsRequest.displayNameContains,
                "lifecycleState": listDataAssetsRequest.lifecycleState,
                "timeCreated": listDataAssetsRequest.timeCreated,
                "timeUpdated": listDataAssetsRequest.timeUpdated,
                "createdById": listDataAssetsRequest.createdById,
                "updatedById": listDataAssetsRequest.updatedById,
                "externalKey": listDataAssetsRequest.externalKey,
                "typeKey": listDataAssetsRequest.typeKey,
                "fields": listDataAssetsRequest.fields,
                "sortBy": listDataAssetsRequest.sortBy,
                "sortOrder": listDataAssetsRequest.sortOrder,
                "limit": listDataAssetsRequest.limit,
                "page": listDataAssetsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDataAssetsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDataAssetsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataAssetCollection",
                    bodyModel: model.DataAssetCollection,
                    type: "model.DataAssetCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * List logical entities derived from this pattern.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDerivedLogicalEntitiesRequest
     * @return ListDerivedLogicalEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListDerivedLogicalEntities.ts.html |here} to see how to use ListDerivedLogicalEntities API.
     */
    listDerivedLogicalEntities(listDerivedLogicalEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listDerivedLogicalEntities.");
            const operationName = "listDerivedLogicalEntities";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Pattern/ListDerivedLogicalEntities";
            const pathParams = {
                "{catalogId}": listDerivedLogicalEntitiesRequest.catalogId,
                "{patternKey}": listDerivedLogicalEntitiesRequest.patternKey
            };
            const queryParams = {
                "displayNameContains": listDerivedLogicalEntitiesRequest.displayNameContains,
                "sortBy": listDerivedLogicalEntitiesRequest.sortBy,
                "sortOrder": listDerivedLogicalEntitiesRequest.sortOrder,
                "limit": listDerivedLogicalEntitiesRequest.limit,
                "page": listDerivedLogicalEntitiesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDerivedLogicalEntitiesRequest.opcRequestId,
                "if-match": listDerivedLogicalEntitiesRequest.ifMatch,
                "opc-retry-token": listDerivedLogicalEntitiesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDerivedLogicalEntitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/patterns/{patternKey}/actions/listDerivedLogicalEntities",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "entityCollection",
                    bodyModel: model.EntityCollection,
                    type: "model.EntityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all entities of a data asset.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListEntitiesRequest
     * @return ListEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListEntities.ts.html |here} to see how to use ListEntities API.
     */
    listEntities(listEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listEntities.");
            const operationName = "listEntities";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Entity/ListEntities";
            const pathParams = {
                "{catalogId}": listEntitiesRequest.catalogId,
                "{dataAssetKey}": listEntitiesRequest.dataAssetKey
            };
            const queryParams = {
                "displayName": listEntitiesRequest.displayName,
                "businessName": listEntitiesRequest.businessName,
                "displayOrBusinessNameContains": listEntitiesRequest.displayOrBusinessNameContains,
                "typeKey": listEntitiesRequest.typeKey,
                "displayNameContains": listEntitiesRequest.displayNameContains,
                "lifecycleState": listEntitiesRequest.lifecycleState,
                "timeCreated": listEntitiesRequest.timeCreated,
                "timeUpdated": listEntitiesRequest.timeUpdated,
                "createdById": listEntitiesRequest.createdById,
                "updatedById": listEntitiesRequest.updatedById,
                "externalKey": listEntitiesRequest.externalKey,
                "patternKey": listEntitiesRequest.patternKey,
                "timeExternal": listEntitiesRequest.timeExternal,
                "timeStatusUpdated": listEntitiesRequest.timeStatusUpdated,
                "isLogical": listEntitiesRequest.isLogical,
                "isPartition": listEntitiesRequest.isPartition,
                "folderKey": listEntitiesRequest.folderKey,
                "path": listEntitiesRequest.path,
                "harvestStatus": listEntitiesRequest.harvestStatus,
                "lastJobKey": listEntitiesRequest.lastJobKey,
                "fields": listEntitiesRequest.fields,
                "sortBy": listEntitiesRequest.sortBy,
                "sortOrder": listEntitiesRequest.sortOrder,
                "limit": listEntitiesRequest.limit,
                "page": listEntitiesRequest.page,
                "isProcess": listEntitiesRequest.isProcess
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listEntitiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listEntitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "entityCollection",
                    bodyModel: model.EntityCollection,
                    type: "model.EntityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all tags for a data entity.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListEntityTagsRequest
     * @return ListEntityTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListEntityTags.ts.html |here} to see how to use ListEntityTags API.
     */
    listEntityTags(listEntityTagsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listEntityTags.");
            const operationName = "listEntityTags";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/EntityTagCollection/ListEntityTags";
            const pathParams = {
                "{catalogId}": listEntityTagsRequest.catalogId,
                "{dataAssetKey}": listEntityTagsRequest.dataAssetKey,
                "{entityKey}": listEntityTagsRequest.entityKey
            };
            const queryParams = {
                "name": listEntityTagsRequest.name,
                "lifecycleState": listEntityTagsRequest.lifecycleState,
                "termKey": listEntityTagsRequest.termKey,
                "termPath": listEntityTagsRequest.termPath,
                "timeCreated": listEntityTagsRequest.timeCreated,
                "createdById": listEntityTagsRequest.createdById,
                "fields": listEntityTagsRequest.fields,
                "sortBy": listEntityTagsRequest.sortBy,
                "sortOrder": listEntityTagsRequest.sortOrder,
                "limit": listEntityTagsRequest.limit,
                "page": listEntityTagsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listEntityTagsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listEntityTagsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/tags",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "entityTagCollection",
                    bodyModel: model.EntityTagCollection,
                    type: "model.EntityTagCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all tags for a folder.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListFolderTagsRequest
     * @return ListFolderTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListFolderTags.ts.html |here} to see how to use ListFolderTags API.
     */
    listFolderTags(listFolderTagsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listFolderTags.");
            const operationName = "listFolderTags";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/FolderTagCollection/ListFolderTags";
            const pathParams = {
                "{catalogId}": listFolderTagsRequest.catalogId,
                "{dataAssetKey}": listFolderTagsRequest.dataAssetKey,
                "{folderKey}": listFolderTagsRequest.folderKey
            };
            const queryParams = {
                "name": listFolderTagsRequest.name,
                "lifecycleState": listFolderTagsRequest.lifecycleState,
                "termKey": listFolderTagsRequest.termKey,
                "termPath": listFolderTagsRequest.termPath,
                "timeCreated": listFolderTagsRequest.timeCreated,
                "createdById": listFolderTagsRequest.createdById,
                "fields": listFolderTagsRequest.fields,
                "sortBy": listFolderTagsRequest.sortBy,
                "sortOrder": listFolderTagsRequest.sortOrder,
                "limit": listFolderTagsRequest.limit,
                "page": listFolderTagsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listFolderTagsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listFolderTagsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/folders/{folderKey}/tags",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "folderTagCollection",
                    bodyModel: model.FolderTagCollection,
                    type: "model.FolderTagCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all folders.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListFoldersRequest
     * @return ListFoldersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListFolders.ts.html |here} to see how to use ListFolders API.
     */
    listFolders(listFoldersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listFolders.");
            const operationName = "listFolders";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/FolderCollection/ListFolders";
            const pathParams = {
                "{catalogId}": listFoldersRequest.catalogId,
                "{dataAssetKey}": listFoldersRequest.dataAssetKey
            };
            const queryParams = {
                "displayName": listFoldersRequest.displayName,
                "businessName": listFoldersRequest.businessName,
                "displayOrBusinessNameContains": listFoldersRequest.displayOrBusinessNameContains,
                "displayNameContains": listFoldersRequest.displayNameContains,
                "lifecycleState": listFoldersRequest.lifecycleState,
                "parentFolderKey": listFoldersRequest.parentFolderKey,
                "path": listFoldersRequest.path,
                "externalKey": listFoldersRequest.externalKey,
                "timeCreated": listFoldersRequest.timeCreated,
                "timeUpdated": listFoldersRequest.timeUpdated,
                "createdById": listFoldersRequest.createdById,
                "updatedById": listFoldersRequest.updatedById,
                "harvestStatus": listFoldersRequest.harvestStatus,
                "lastJobKey": listFoldersRequest.lastJobKey,
                "fields": listFoldersRequest.fields,
                "typeKey": listFoldersRequest.typeKey,
                "sortBy": listFoldersRequest.sortBy,
                "sortOrder": listFoldersRequest.sortOrder,
                "limit": listFoldersRequest.limit,
                "page": listFoldersRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listFoldersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listFoldersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/folders",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "folderCollection",
                    bodyModel: model.FolderCollection,
                    type: "model.FolderCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all glossaries within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListGlossariesRequest
     * @return ListGlossariesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListGlossaries.ts.html |here} to see how to use ListGlossaries API.
     */
    listGlossaries(listGlossariesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listGlossaries.");
            const operationName = "listGlossaries";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Glossary/ListGlossaries";
            const pathParams = {
                "{catalogId}": listGlossariesRequest.catalogId
            };
            const queryParams = {
                "displayName": listGlossariesRequest.displayName,
                "displayNameContains": listGlossariesRequest.displayNameContains,
                "lifecycleState": listGlossariesRequest.lifecycleState,
                "timeCreated": listGlossariesRequest.timeCreated,
                "timeUpdated": listGlossariesRequest.timeUpdated,
                "createdById": listGlossariesRequest.createdById,
                "updatedById": listGlossariesRequest.updatedById,
                "fields": listGlossariesRequest.fields,
                "sortBy": listGlossariesRequest.sortBy,
                "sortOrder": listGlossariesRequest.sortOrder,
                "limit": listGlossariesRequest.limit,
                "page": listGlossariesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listGlossariesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listGlossariesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "glossaryCollection",
                    bodyModel: model.GlossaryCollection,
                    type: "model.GlossaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of job definitions within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListJobDefinitionsRequest
     * @return ListJobDefinitionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListJobDefinitions.ts.html |here} to see how to use ListJobDefinitions API.
     */
    listJobDefinitions(listJobDefinitionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listJobDefinitions.");
            const operationName = "listJobDefinitions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobDefinitionCollection/ListJobDefinitions";
            const pathParams = {
                "{catalogId}": listJobDefinitionsRequest.catalogId
            };
            const queryParams = {
                "displayName": listJobDefinitionsRequest.displayName,
                "displayNameContains": listJobDefinitionsRequest.displayNameContains,
                "jobExecutionState": listJobDefinitionsRequest.jobExecutionState,
                "lifecycleState": listJobDefinitionsRequest.lifecycleState,
                "jobType": listJobDefinitionsRequest.jobType,
                "isIncremental": listJobDefinitionsRequest.isIncremental,
                "dataAssetKey": listJobDefinitionsRequest.dataAssetKey,
                "glossaryKey": listJobDefinitionsRequest.glossaryKey,
                "connectionKey": listJobDefinitionsRequest.connectionKey,
                "timeCreated": listJobDefinitionsRequest.timeCreated,
                "timeUpdated": listJobDefinitionsRequest.timeUpdated,
                "createdById": listJobDefinitionsRequest.createdById,
                "updatedById": listJobDefinitionsRequest.updatedById,
                "sampleDataSizeInMBs": listJobDefinitionsRequest.sampleDataSizeInMBs,
                "fields": listJobDefinitionsRequest.fields,
                "sortBy": listJobDefinitionsRequest.sortBy,
                "sortOrder": listJobDefinitionsRequest.sortOrder,
                "limit": listJobDefinitionsRequest.limit,
                "page": listJobDefinitionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobDefinitionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listJobDefinitionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobDefinitions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobDefinitionCollection",
                    bodyModel: model.JobDefinitionCollection,
                    type: "model.JobDefinitionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of job executions for a job.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListJobExecutionsRequest
     * @return ListJobExecutionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListJobExecutions.ts.html |here} to see how to use ListJobExecutions API.
     */
    listJobExecutions(listJobExecutionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listJobExecutions.");
            const operationName = "listJobExecutions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobExecutionCollection/ListJobExecutions";
            const pathParams = {
                "{catalogId}": listJobExecutionsRequest.catalogId,
                "{jobKey}": listJobExecutionsRequest.jobKey
            };
            const queryParams = {
                "lifecycleState": listJobExecutionsRequest.lifecycleState,
                "timeCreated": listJobExecutionsRequest.timeCreated,
                "timeUpdated": listJobExecutionsRequest.timeUpdated,
                "createdById": listJobExecutionsRequest.createdById,
                "updatedById": listJobExecutionsRequest.updatedById,
                "jobType": listJobExecutionsRequest.jobType,
                "subType": listJobExecutionsRequest.subType,
                "parentKey": listJobExecutionsRequest.parentKey,
                "timeStart": listJobExecutionsRequest.timeStart,
                "timeEnd": listJobExecutionsRequest.timeEnd,
                "errorCode": listJobExecutionsRequest.errorCode,
                "errorMessage": listJobExecutionsRequest.errorMessage,
                "processKey": listJobExecutionsRequest.processKey,
                "externalUrl": listJobExecutionsRequest.externalUrl,
                "eventKey": listJobExecutionsRequest.eventKey,
                "dataEntityKey": listJobExecutionsRequest.dataEntityKey,
                "fields": listJobExecutionsRequest.fields,
                "sortBy": listJobExecutionsRequest.sortBy,
                "sortOrder": listJobExecutionsRequest.sortOrder,
                "limit": listJobExecutionsRequest.limit,
                "page": listJobExecutionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobExecutionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listJobExecutionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs/{jobKey}/executions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobExecutionCollection",
                    bodyModel: model.JobExecutionCollection,
                    type: "model.JobExecutionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of job logs.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListJobLogsRequest
     * @return ListJobLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListJobLogs.ts.html |here} to see how to use ListJobLogs API.
     */
    listJobLogs(listJobLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listJobLogs.");
            const operationName = "listJobLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobLogCollection/ListJobLogs";
            const pathParams = {
                "{catalogId}": listJobLogsRequest.catalogId,
                "{jobKey}": listJobLogsRequest.jobKey,
                "{jobExecutionKey}": listJobLogsRequest.jobExecutionKey
            };
            const queryParams = {
                "lifecycleState": listJobLogsRequest.lifecycleState,
                "severity": listJobLogsRequest.severity,
                "timeCreated": listJobLogsRequest.timeCreated,
                "timeUpdated": listJobLogsRequest.timeUpdated,
                "createdById": listJobLogsRequest.createdById,
                "updatedById": listJobLogsRequest.updatedById,
                "fields": listJobLogsRequest.fields,
                "sortBy": listJobLogsRequest.sortBy,
                "sortOrder": listJobLogsRequest.sortOrder,
                "limit": listJobLogsRequest.limit,
                "page": listJobLogsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listJobLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs/{jobKey}/executions/{jobExecutionKey}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobLogCollection",
                    bodyModel: model.JobLogCollection,
                    type: "model.JobLogCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of job metrics.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListJobMetricsRequest
     * @return ListJobMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListJobMetrics.ts.html |here} to see how to use ListJobMetrics API.
     */
    listJobMetrics(listJobMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listJobMetrics.");
            const operationName = "listJobMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobMetricCollection/ListJobMetrics";
            const pathParams = {
                "{catalogId}": listJobMetricsRequest.catalogId,
                "{jobKey}": listJobMetricsRequest.jobKey,
                "{jobExecutionKey}": listJobMetricsRequest.jobExecutionKey
            };
            const queryParams = {
                "displayName": listJobMetricsRequest.displayName,
                "displayNameContains": listJobMetricsRequest.displayNameContains,
                "category": listJobMetricsRequest.category,
                "subCategory": listJobMetricsRequest.subCategory,
                "unit": listJobMetricsRequest.unit,
                "value": listJobMetricsRequest.value,
                "batchKey": listJobMetricsRequest.batchKey,
                "timeCreated": listJobMetricsRequest.timeCreated,
                "timeUpdated": listJobMetricsRequest.timeUpdated,
                "timeInserted": listJobMetricsRequest.timeInserted,
                "createdById": listJobMetricsRequest.createdById,
                "updatedById": listJobMetricsRequest.updatedById,
                "fields": listJobMetricsRequest.fields,
                "sortBy": listJobMetricsRequest.sortBy,
                "sortOrder": listJobMetricsRequest.sortOrder,
                "limit": listJobMetricsRequest.limit,
                "page": listJobMetricsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listJobMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs/{jobKey}/executions/{jobExecutionKey}/metrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobMetricCollection",
                    bodyModel: model.JobMetricCollection,
                    type: "model.JobMetricCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of jobs within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListJobsRequest
     * @return ListJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListJobs.ts.html |here} to see how to use ListJobs API.
     */
    listJobs(listJobsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listJobs.");
            const operationName = "listJobs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobCollection/ListJobs";
            const pathParams = {
                "{catalogId}": listJobsRequest.catalogId
            };
            const queryParams = {
                "displayName": listJobsRequest.displayName,
                "displayNameContains": listJobsRequest.displayNameContains,
                "lifecycleState": listJobsRequest.lifecycleState,
                "timeCreated": listJobsRequest.timeCreated,
                "timeUpdated": listJobsRequest.timeUpdated,
                "createdById": listJobsRequest.createdById,
                "updatedById": listJobsRequest.updatedById,
                "jobType": listJobsRequest.jobType,
                "jobDefinitionKey": listJobsRequest.jobDefinitionKey,
                "dataAssetKey": listJobsRequest.dataAssetKey,
                "glossaryKey": listJobsRequest.glossaryKey,
                "scheduleCronExpression": listJobsRequest.scheduleCronExpression,
                "timeScheduleBegin": listJobsRequest.timeScheduleBegin,
                "timeScheduleEnd": listJobsRequest.timeScheduleEnd,
                "scheduleType": listJobsRequest.scheduleType,
                "connectionKey": listJobsRequest.connectionKey,
                "fields": listJobsRequest.fields,
                "executionCount": listJobsRequest.executionCount,
                "timeOfLatestExecution": listJobsRequest.timeOfLatestExecution,
                "sortBy": listJobsRequest.sortBy,
                "sortOrder": listJobsRequest.sortOrder,
                "limit": listJobsRequest.limit,
                "page": listJobsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listJobsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobCollection",
                    bodyModel: model.JobCollection,
                    type: "model.JobCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all metastores in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMetastoresRequest
     * @return ListMetastoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListMetastores.ts.html |here} to see how to use ListMetastores API.
     */
    listMetastores(listMetastoresRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listMetastores.");
            const operationName = "listMetastores";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/MetastoreSummary/ListMetastores";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMetastoresRequest.compartmentId,
                "displayName": listMetastoresRequest.displayName,
                "limit": listMetastoresRequest.limit,
                "page": listMetastoresRequest.page,
                "lifecycleState": listMetastoresRequest.lifecycleState,
                "sortOrder": listMetastoresRequest.sortOrder,
                "sortBy": listMetastoresRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMetastoresRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMetastoresRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metastores",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.MetastoreSummary,
                    type: "Array<model.MetastoreSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listMetastoresRecordIterator function.
     * Creates a new async iterator which will iterate over the models.MetastoreSummary objects
     * contained in responses from the listMetastores operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMetastores(request) {
        return oci_common_1.paginateRecords(request, req => this.listMetastores(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listMetastoresResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listMetastores operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMetastoresResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listMetastores(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.MetastoreSummary objects
     * contained in responses from the listMetastores operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMetastoresRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listMetastores(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMetastores operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMetastoresResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listMetastores(req));
    }
    /**
     * Returns a list of namespaces within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListNamespacesRequest
     * @return ListNamespacesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListNamespaces.ts.html |here} to see how to use ListNamespaces API.
     */
    listNamespaces(listNamespacesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listNamespaces.");
            const operationName = "listNamespaces";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Namespace/ListNamespaces";
            const pathParams = {
                "{catalogId}": listNamespacesRequest.catalogId
            };
            const queryParams = {
                "displayName": listNamespacesRequest.displayName,
                "displayNameContains": listNamespacesRequest.displayNameContains,
                "lifecycleState": listNamespacesRequest.lifecycleState,
                "timeCreated": listNamespacesRequest.timeCreated,
                "timeUpdated": listNamespacesRequest.timeUpdated,
                "createdById": listNamespacesRequest.createdById,
                "updatedById": listNamespacesRequest.updatedById,
                "sortBy": listNamespacesRequest.sortBy,
                "sortOrder": listNamespacesRequest.sortOrder,
                "fields": listNamespacesRequest.fields,
                "limit": listNamespacesRequest.limit,
                "page": listNamespacesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listNamespacesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listNamespacesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/namespaces",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "namespaceCollection",
                    bodyModel: model.NamespaceCollection,
                    type: "model.NamespaceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of patterns within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPatternsRequest
     * @return ListPatternsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListPatterns.ts.html |here} to see how to use ListPatterns API.
     */
    listPatterns(listPatternsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listPatterns.");
            const operationName = "listPatterns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Pattern/ListPatterns";
            const pathParams = {
                "{catalogId}": listPatternsRequest.catalogId
            };
            const queryParams = {
                "displayName": listPatternsRequest.displayName,
                "displayNameContains": listPatternsRequest.displayNameContains,
                "lifecycleState": listPatternsRequest.lifecycleState,
                "timeCreated": listPatternsRequest.timeCreated,
                "timeUpdated": listPatternsRequest.timeUpdated,
                "createdById": listPatternsRequest.createdById,
                "updatedById": listPatternsRequest.updatedById,
                "fields": listPatternsRequest.fields,
                "sortBy": listPatternsRequest.sortBy,
                "sortOrder": listPatternsRequest.sortOrder,
                "limit": listPatternsRequest.limit,
                "page": listPatternsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listPatternsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listPatternsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/patterns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "patternCollection",
                    bodyModel: model.PatternCollection,
                    type: "model.PatternCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all rules of a data entity.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRulesRequest
     * @return ListRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListRules.ts.html |here} to see how to use ListRules API.
     */
    listRules(listRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listRules.");
            const operationName = "listRules";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/RuleSummary/ListRules";
            const pathParams = {
                "{catalogId}": listRulesRequest.catalogId,
                "{dataAssetKey}": listRulesRequest.dataAssetKey,
                "{entityKey}": listRulesRequest.entityKey
            };
            const queryParams = {
                "displayName": listRulesRequest.displayName,
                "displayNameContains": listRulesRequest.displayNameContains,
                "ruleType": listRulesRequest.ruleType,
                "lifecycleState": listRulesRequest.lifecycleState,
                "originType": listRulesRequest.originType,
                "externalKey": listRulesRequest.externalKey,
                "timeCreated": listRulesRequest.timeCreated,
                "timeUpdated": listRulesRequest.timeUpdated,
                "createdById": listRulesRequest.createdById,
                "updatedById": listRulesRequest.updatedById,
                "fields": listRulesRequest.fields,
                "sortBy": listRulesRequest.sortBy,
                "sortOrder": listRulesRequest.sortOrder,
                "limit": listRulesRequest.limit,
                "page": listRulesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listRulesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listRulesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/rules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ruleCollection",
                    bodyModel: model.RuleCollection,
                    type: "model.RuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all user created tags in the system.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTagsRequest
     * @return ListTagsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListTags.ts.html |here} to see how to use ListTags API.
     */
    listTags(listTagsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listTags.");
            const operationName = "listTags";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Term/ListTags";
            const pathParams = {
                "{catalogId}": listTagsRequest.catalogId
            };
            const queryParams = {
                "displayName": listTagsRequest.displayName,
                "displayNameContains": listTagsRequest.displayNameContains,
                "lifecycleState": listTagsRequest.lifecycleState,
                "fields": listTagsRequest.fields,
                "sortBy": listTagsRequest.sortBy,
                "sortOrder": listTagsRequest.sortOrder,
                "limit": listTagsRequest.limit,
                "page": listTagsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTagsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTagsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/tags",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "termCollection",
                    bodyModel: model.TermCollection,
                    type: "model.TermCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all term relationships within a glossary.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTermRelationshipsRequest
     * @return ListTermRelationshipsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListTermRelationships.ts.html |here} to see how to use ListTermRelationships API.
     */
    listTermRelationships(listTermRelationshipsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listTermRelationships.");
            const operationName = "listTermRelationships";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/TermRelationship/ListTermRelationships";
            const pathParams = {
                "{catalogId}": listTermRelationshipsRequest.catalogId,
                "{glossaryKey}": listTermRelationshipsRequest.glossaryKey,
                "{termKey}": listTermRelationshipsRequest.termKey
            };
            const queryParams = {
                "displayName": listTermRelationshipsRequest.displayName,
                "displayNameContains": listTermRelationshipsRequest.displayNameContains,
                "lifecycleState": listTermRelationshipsRequest.lifecycleState,
                "fields": listTermRelationshipsRequest.fields,
                "sortBy": listTermRelationshipsRequest.sortBy,
                "sortOrder": listTermRelationshipsRequest.sortOrder,
                "limit": listTermRelationshipsRequest.limit,
                "page": listTermRelationshipsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTermRelationshipsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTermRelationshipsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/terms/{termKey}/termRelationships",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "termRelationshipCollection",
                    bodyModel: model.TermRelationshipCollection,
                    type: "model.TermRelationshipCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all terms within a glossary.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTermsRequest
     * @return ListTermsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListTerms.ts.html |here} to see how to use ListTerms API.
     */
    listTerms(listTermsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listTerms.");
            const operationName = "listTerms";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Term/ListTerms";
            const pathParams = {
                "{catalogId}": listTermsRequest.catalogId,
                "{glossaryKey}": listTermsRequest.glossaryKey
            };
            const queryParams = {
                "displayName": listTermsRequest.displayName,
                "displayNameContains": listTermsRequest.displayNameContains,
                "lifecycleState": listTermsRequest.lifecycleState,
                "parentTermKey": listTermsRequest.parentTermKey,
                "isAllowedToHaveChildTerms": listTermsRequest.isAllowedToHaveChildTerms,
                "workflowStatus": listTermsRequest.workflowStatus,
                "path": listTermsRequest.path,
                "fields": listTermsRequest.fields,
                "sortBy": listTermsRequest.sortBy,
                "sortOrder": listTermsRequest.sortOrder,
                "limit": listTermsRequest.limit,
                "page": listTermsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTermsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTermsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/terms",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "termCollection",
                    bodyModel: model.TermCollection,
                    type: "model.TermCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all types within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTypesRequest
     * @return ListTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListTypes.ts.html |here} to see how to use ListTypes API.
     */
    listTypes(listTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listTypes.");
            const operationName = "listTypes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/TypeCollection/ListTypes";
            const pathParams = {
                "{catalogId}": listTypesRequest.catalogId
            };
            const queryParams = {
                "name": listTypesRequest.name,
                "lifecycleState": listTypesRequest.lifecycleState,
                "isInternal": listTypesRequest.isInternal,
                "isTag": listTypesRequest.isTag,
                "isApproved": listTypesRequest.isApproved,
                "externalTypeName": listTypesRequest.externalTypeName,
                "typeCategory": listTypesRequest.typeCategory,
                "fields": listTypesRequest.fields,
                "sortBy": listTypesRequest.sortBy,
                "sortOrder": listTypesRequest.sortOrder,
                "limit": listTypesRequest.limit,
                "page": listTypesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTypesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listTypesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/types",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "typeCollection",
                    bodyModel: model.TypeCollection,
                    type: "model.TypeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a (paginated) list of errors for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/WorkRequestError/ListWorkRequestErrors";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit,
                "sortBy": listWorkRequestErrorsRequest.sortBy,
                "sortOrder": listWorkRequestErrorsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestError,
                    type: "Array<model.WorkRequestError>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Returns a (paginated) list of logs for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/WorkRequestLog/ListWorkRequestLogs";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit,
                "sortBy": listWorkRequestLogsRequest.sortBy,
                "sortOrder": listWorkRequestLogsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestLog,
                    type: "Array<model.WorkRequestLog>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestLog objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLog objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/WorkRequest/ListWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequest,
                    type: "Array<model.WorkRequest>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequest objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequest objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Returns stats on objects by type in the repository.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ObjectStatsRequest
     * @return ObjectStatsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ObjectStats.ts.html |here} to see how to use ObjectStats API.
     */
    objectStats(objectStatsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#objectStats.");
            const operationName = "objectStats";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/ObjectStats";
            const pathParams = {
                "{catalogId}": objectStatsRequest.catalogId
            };
            const queryParams = {
                "sortBy": objectStatsRequest.sortBy,
                "sortOrder": objectStatsRequest.sortOrder,
                "limit": objectStatsRequest.limit,
                "page": objectStatsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": objectStatsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, objectStatsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/actions/objectStats",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "value",
                    bodyModel: "string",
                    type: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Parse data asset references through connections from this data asset.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ParseConnectionRequest
     * @return ParseConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ParseConnection.ts.html |here} to see how to use ParseConnection API.
     */
    parseConnection(parseConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#parseConnection.");
            const operationName = "parseConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/ParseConnection";
            const pathParams = {
                "{catalogId}": parseConnectionRequest.catalogId,
                "{dataAssetKey}": parseConnectionRequest.dataAssetKey
            };
            const queryParams = {
                "connectionKey": parseConnectionRequest.connectionKey
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": parseConnectionRequest.opcRequestId,
                "opc-retry-token": parseConnectionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, parseConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/actions/parseConnection",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(parseConnectionRequest.parseConnectionDetails, "ParseConnectionDetails", model.ParseConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ConnectionAliasSummary,
                    type: "Array<model.ConnectionAliasSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Act on a recommendation. A recommendation can be accepted or rejected. For example, if a recommendation of type LINK_GLOSSARY_TERM
     * is accepted, the system will link the source object (e.g. an attribute) to a target glossary term.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ProcessRecommendationRequest
     * @return ProcessRecommendationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ProcessRecommendation.ts.html |here} to see how to use ProcessRecommendation API.
     */
    processRecommendation(processRecommendationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#processRecommendation.");
            const operationName = "processRecommendation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/ProcessRecommendation";
            const pathParams = {
                "{catalogId}": processRecommendationRequest.catalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": processRecommendationRequest.ifMatch,
                "opc-request-id": processRecommendationRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, processRecommendationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/actions/processRecommendation",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(processRecommendationRequest.processRecommendationDetails, "ProcessRecommendationDetails", model.ProcessRecommendationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "processRecommendationDetails",
                    bodyModel: model.ProcessRecommendationDetails,
                    type: "model.ProcessRecommendationDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of recommendations for the given object and recommendation type.
     * By default, it will return inferred recommendations for review. The optional query param 'RecommendationStatus' can be set,
     * to return only recommendations having that status.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RecommendationsRequest
     * @return RecommendationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/Recommendations.ts.html |here} to see how to use Recommendations API.
     */
    recommendations(recommendationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#recommendations.");
            const operationName = "recommendations";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/Recommendations";
            const pathParams = {
                "{catalogId}": recommendationsRequest.catalogId
            };
            const queryParams = {
                "recommendationType": recommendationsRequest.recommendationType,
                "sourceObjectKey": recommendationsRequest.sourceObjectKey,
                "sourceObjectType": recommendationsRequest.sourceObjectType,
                "recommendationStatus": recommendationsRequest.recommendationStatus
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": recommendationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, recommendationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/actions/getRecommendations",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recommendationCollection",
                    bodyModel: model.RecommendationCollection,
                    type: "model.RecommendationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a lock from a Catalog resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveCatalogLockRequest
     * @return RemoveCatalogLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/RemoveCatalogLock.ts.html |here} to see how to use RemoveCatalogLock API.
     */
    removeCatalogLock(removeCatalogLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#removeCatalogLock.");
            const operationName = "removeCatalogLock";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/RemoveCatalogLock";
            const pathParams = {
                "{catalogId}": removeCatalogLockRequest.catalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeCatalogLockRequest.opcRequestId,
                "if-match": removeCatalogLockRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeCatalogLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeCatalogLockRequest.removeResourceLockDetails, "RemoveResourceLockDetails", model.RemoveResourceLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "catalog",
                    bodyModel: model.Catalog,
                    type: "model.Catalog",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a lock from a CatalogPrivateEndpoint resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveCatalogPrivateEndpointLockRequest
     * @return RemoveCatalogPrivateEndpointLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/RemoveCatalogPrivateEndpointLock.ts.html |here} to see how to use RemoveCatalogPrivateEndpointLock API.
     */
    removeCatalogPrivateEndpointLock(removeCatalogPrivateEndpointLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#removeCatalogPrivateEndpointLock.");
            const operationName = "removeCatalogPrivateEndpointLock";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CatalogPrivateEndpoint/RemoveCatalogPrivateEndpointLock";
            const pathParams = {
                "{catalogPrivateEndpointId}": removeCatalogPrivateEndpointLockRequest.catalogPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeCatalogPrivateEndpointLockRequest.opcRequestId,
                "if-match": removeCatalogPrivateEndpointLockRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeCatalogPrivateEndpointLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogPrivateEndpoints/{catalogPrivateEndpointId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeCatalogPrivateEndpointLockRequest.removeResourceLockDetails, "RemoveResourceLockDetails", model.RemoveResourceLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "catalogPrivateEndpoint",
                    bodyModel: model.CatalogPrivateEndpoint,
                    type: "model.CatalogPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove data selector pattern from the data asset.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveDataSelectorPatternsRequest
     * @return RemoveDataSelectorPatternsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/RemoveDataSelectorPatterns.ts.html |here} to see how to use RemoveDataSelectorPatterns API.
     */
    removeDataSelectorPatterns(removeDataSelectorPatternsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#removeDataSelectorPatterns.");
            const operationName = "removeDataSelectorPatterns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/RemoveDataSelectorPatterns";
            const pathParams = {
                "{catalogId}": removeDataSelectorPatternsRequest.catalogId,
                "{dataAssetKey}": removeDataSelectorPatternsRequest.dataAssetKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeDataSelectorPatternsRequest.opcRequestId,
                "if-match": removeDataSelectorPatternsRequest.ifMatch,
                "opc-retry-token": removeDataSelectorPatternsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeDataSelectorPatternsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/actions/removeDataSelectorPatterns",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeDataSelectorPatternsRequest.dataSelectorPatternDetails, "DataSelectorPatternDetails", model.DataSelectorPatternDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataAsset",
                    bodyModel: model.DataAsset,
                    type: "model.DataAsset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a lock from a Metastore resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveMetastoreLockRequest
     * @return RemoveMetastoreLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/RemoveMetastoreLock.ts.html |here} to see how to use RemoveMetastoreLock API.
     */
    removeMetastoreLock(removeMetastoreLockRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#removeMetastoreLock.");
            const operationName = "removeMetastoreLock";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Metastore/RemoveMetastoreLock";
            const pathParams = {
                "{metastoreId}": removeMetastoreLockRequest.metastoreId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeMetastoreLockRequest.opcRequestId,
                "if-match": removeMetastoreLockRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeMetastoreLockRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metastores/{metastoreId}/actions/removeLock",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeMetastoreLockRequest.removeResourceLockDetails, "RemoveResourceLockDetails", model.RemoveResourceLockDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "metastore",
                    bodyModel: model.Metastore,
                    type: "model.Metastore",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of search results within a data catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SearchCriteriaRequest
     * @return SearchCriteriaResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/SearchCriteria.ts.html |here} to see how to use SearchCriteria API.
     */
    searchCriteria(searchCriteriaRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#searchCriteria.");
            const operationName = "searchCriteria";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/SearchResult/SearchCriteria";
            const pathParams = {
                "{catalogId}": searchCriteriaRequest.catalogId
            };
            const queryParams = {
                "displayName": searchCriteriaRequest.displayName,
                "name": searchCriteriaRequest.name,
                "lifecycleState": searchCriteriaRequest.lifecycleState,
                "timeout": searchCriteriaRequest.timeout,
                "sortBy": searchCriteriaRequest.sortBy,
                "sortOrder": searchCriteriaRequest.sortOrder,
                "limit": searchCriteriaRequest.limit,
                "page": searchCriteriaRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": searchCriteriaRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchCriteriaRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchCriteriaRequest.searchCriteriaDetails, "SearchCriteria", model.SearchCriteria.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "searchResultCollection",
                    bodyModel: model.SearchResultCollection,
                    type: "model.SearchResultCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of potential string matches for a given input string.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SuggestMatchesRequest
     * @return SuggestMatchesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/SuggestMatches.ts.html |here} to see how to use SuggestMatches API.
     */
    suggestMatches(suggestMatchesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#suggestMatches.");
            const operationName = "suggestMatches";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/SuggestResults/SuggestMatches";
            const pathParams = {
                "{catalogId}": suggestMatchesRequest.catalogId
            };
            const queryParams = {
                "timeout": suggestMatchesRequest.timeout,
                "inputText": suggestMatchesRequest.inputText,
                "limit": suggestMatchesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": suggestMatchesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, suggestMatchesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/actions/suggest",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "suggestResults",
                    bodyModel: model.SuggestResults,
                    type: "model.SuggestResults",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Export technical objects from a Data Asset
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SynchronousExportDataAssetRequest
     * @return SynchronousExportDataAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/SynchronousExportDataAsset.ts.html |here} to see how to use SynchronousExportDataAsset API.
     */
    synchronousExportDataAsset(synchronousExportDataAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#synchronousExportDataAsset.");
            const operationName = "synchronousExportDataAsset";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/SynchronousExportDataAsset";
            const pathParams = {
                "{catalogId}": synchronousExportDataAssetRequest.catalogId,
                "{dataAssetKey}": synchronousExportDataAssetRequest.dataAssetKey
            };
            const queryParams = {
                "exportType": synchronousExportDataAssetRequest.exportType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": synchronousExportDataAssetRequest.opcRequestId,
                "opc-retry-token": synchronousExportDataAssetRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, synchronousExportDataAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/actions/synchronousExport",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(synchronousExportDataAssetRequest.synchronousExportDataAssetDetails, "ExportDataAssetDetails", model.ExportDataAssetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Test the connection by connecting to the data asset using credentials in the metadata.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param TestConnectionRequest
     * @return TestConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/TestConnection.ts.html |here} to see how to use TestConnection API.
     */
    testConnection(testConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#testConnection.");
            const operationName = "testConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Connection/TestConnection";
            const pathParams = {
                "{catalogId}": testConnectionRequest.catalogId,
                "{dataAssetKey}": testConnectionRequest.dataAssetKey,
                "{connectionKey}": testConnectionRequest.connectionKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": testConnectionRequest.opcRequestId,
                "opc-retry-token": testConnectionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, testConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/connections/{connectionKey}/actions/test",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "validateConnectionResult",
                    bodyModel: model.ValidateConnectionResult,
                    type: "model.ValidateConnectionResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific data asset attribute.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateAttributeRequest
     * @return UpdateAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateAttribute.ts.html |here} to see how to use UpdateAttribute API.
     */
    updateAttribute(updateAttributeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateAttribute.");
            const operationName = "updateAttribute";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Attribute/UpdateAttribute";
            const pathParams = {
                "{catalogId}": updateAttributeRequest.catalogId,
                "{dataAssetKey}": updateAttributeRequest.dataAssetKey,
                "{entityKey}": updateAttributeRequest.entityKey,
                "{attributeKey}": updateAttributeRequest.attributeKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAttributeRequest.ifMatch,
                "opc-request-id": updateAttributeRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAttributeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}/attributes/{attributeKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAttributeRequest.updateAttributeDetails, "UpdateAttributeDetails", model.UpdateAttributeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "attribute",
                    bodyModel: model.Attribute,
                    type: "model.Attribute",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the data catalog.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateCatalogRequest
     * @return UpdateCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateCatalog.ts.html |here} to see how to use UpdateCatalog API.
     */
    updateCatalog(updateCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateCatalog.");
            const operationName = "updateCatalog";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/UpdateCatalog";
            const pathParams = {
                "{catalogId}": updateCatalogRequest.catalogId
            };
            const queryParams = {
                "isLockOverride": updateCatalogRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateCatalogRequest.ifMatch,
                "opc-request-id": updateCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCatalogRequest.updateCatalogDetails, "UpdateCatalogDetails", model.UpdateCatalogDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "catalog",
                    bodyModel: model.Catalog,
                    type: "model.Catalog",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the private reverse connection endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateCatalogPrivateEndpointRequest
     * @return UpdateCatalogPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateCatalogPrivateEndpoint.ts.html |here} to see how to use UpdateCatalogPrivateEndpoint API.
     */
    updateCatalogPrivateEndpoint(updateCatalogPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateCatalogPrivateEndpoint.");
            const operationName = "updateCatalogPrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CatalogPrivateEndpoint/UpdateCatalogPrivateEndpoint";
            const pathParams = {
                "{catalogPrivateEndpointId}": updateCatalogPrivateEndpointRequest.catalogPrivateEndpointId
            };
            const queryParams = {
                "isLockOverride": updateCatalogPrivateEndpointRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateCatalogPrivateEndpointRequest.ifMatch,
                "opc-request-id": updateCatalogPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateCatalogPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogPrivateEndpoints/{catalogPrivateEndpointId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCatalogPrivateEndpointRequest.updateCatalogPrivateEndpointDetails, "UpdateCatalogPrivateEndpointDetails", model.UpdateCatalogPrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific connection of a data asset.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateConnectionRequest
     * @return UpdateConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateConnection.ts.html |here} to see how to use UpdateConnection API.
     */
    updateConnection(updateConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateConnection.");
            const operationName = "updateConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Connection/UpdateConnection";
            const pathParams = {
                "{catalogId}": updateConnectionRequest.catalogId,
                "{dataAssetKey}": updateConnectionRequest.dataAssetKey,
                "{connectionKey}": updateConnectionRequest.connectionKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateConnectionRequest.ifMatch,
                "opc-request-id": updateConnectionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/connections/{connectionKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateConnectionRequest.updateConnectionDetails, "UpdateConnectionDetails", model.UpdateConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "connection",
                    bodyModel: model.Connection,
                    type: "model.Connection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific custom property identified by the given key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateCustomPropertyRequest
     * @return UpdateCustomPropertyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateCustomProperty.ts.html |here} to see how to use UpdateCustomProperty API.
     */
    updateCustomProperty(updateCustomPropertyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateCustomProperty.");
            const operationName = "updateCustomProperty";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/CustomProperty/UpdateCustomProperty";
            const pathParams = {
                "{catalogId}": updateCustomPropertyRequest.catalogId,
                "{namespaceId}": updateCustomPropertyRequest.namespaceId,
                "{customPropertyKey}": updateCustomPropertyRequest.customPropertyKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateCustomPropertyRequest.ifMatch,
                "opc-request-id": updateCustomPropertyRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateCustomPropertyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/namespaces/{namespaceId}/customProperties/{customPropertyKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCustomPropertyRequest.updateCustomPropertyDetails, "UpdateCustomPropertyDetails", model.UpdateCustomPropertyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "customProperty",
                    bodyModel: model.CustomProperty,
                    type: "model.CustomProperty",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific data asset identified by the given key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDataAssetRequest
     * @return UpdateDataAssetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateDataAsset.ts.html |here} to see how to use UpdateDataAsset API.
     */
    updateDataAsset(updateDataAssetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateDataAsset.");
            const operationName = "updateDataAsset";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/UpdateDataAsset";
            const pathParams = {
                "{catalogId}": updateDataAssetRequest.catalogId,
                "{dataAssetKey}": updateDataAssetRequest.dataAssetKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDataAssetRequest.ifMatch,
                "opc-request-id": updateDataAssetRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDataAssetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDataAssetRequest.updateDataAssetDetails, "UpdateDataAssetDetails", model.UpdateDataAssetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataAsset",
                    bodyModel: model.DataAsset,
                    type: "model.DataAsset",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific data entity.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateEntityRequest
     * @return UpdateEntityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateEntity.ts.html |here} to see how to use UpdateEntity API.
     */
    updateEntity(updateEntityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateEntity.");
            const operationName = "updateEntity";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Entity/UpdateEntity";
            const pathParams = {
                "{catalogId}": updateEntityRequest.catalogId,
                "{dataAssetKey}": updateEntityRequest.dataAssetKey,
                "{entityKey}": updateEntityRequest.entityKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateEntityRequest.ifMatch,
                "opc-request-id": updateEntityRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateEntityRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/entities/{entityKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateEntityRequest.updateEntityDetails, "UpdateEntityDetails", model.UpdateEntityDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "entity",
                    bodyModel: model.Entity,
                    type: "model.Entity",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific folder of a data asset.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateFolderRequest
     * @return UpdateFolderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateFolder.ts.html |here} to see how to use UpdateFolder API.
     */
    updateFolder(updateFolderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateFolder.");
            const operationName = "updateFolder";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Folder/UpdateFolder";
            const pathParams = {
                "{catalogId}": updateFolderRequest.catalogId,
                "{dataAssetKey}": updateFolderRequest.dataAssetKey,
                "{folderKey}": updateFolderRequest.folderKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateFolderRequest.ifMatch,
                "opc-request-id": updateFolderRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateFolderRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/folders/{folderKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateFolderRequest.updateFolderDetails, "UpdateFolderDetails", model.UpdateFolderDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "folder",
                    bodyModel: model.Folder,
                    type: "model.Folder",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific glossary identified by the given key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateGlossaryRequest
     * @return UpdateGlossaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateGlossary.ts.html |here} to see how to use UpdateGlossary API.
     */
    updateGlossary(updateGlossaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateGlossary.");
            const operationName = "updateGlossary";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Glossary/UpdateGlossary";
            const pathParams = {
                "{catalogId}": updateGlossaryRequest.catalogId,
                "{glossaryKey}": updateGlossaryRequest.glossaryKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateGlossaryRequest.ifMatch,
                "opc-request-id": updateGlossaryRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateGlossaryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateGlossaryRequest.updateGlossaryDetails, "UpdateGlossaryDetails", model.UpdateGlossaryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "glossary",
                    bodyModel: model.Glossary,
                    type: "model.Glossary",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific job identified by the given key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateJobRequest
     * @return UpdateJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateJob.ts.html |here} to see how to use UpdateJob API.
     */
    updateJob(updateJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateJob.");
            const operationName = "updateJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Job/UpdateJob";
            const pathParams = {
                "{catalogId}": updateJobRequest.catalogId,
                "{jobKey}": updateJobRequest.jobKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateJobRequest.ifMatch,
                "opc-request-id": updateJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobs/{jobKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateJobRequest.updateJobDetails, "UpdateJobDetails", model.UpdateJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: model.Job,
                    type: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update a specific job definition identified by the given key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateJobDefinitionRequest
     * @return UpdateJobDefinitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateJobDefinition.ts.html |here} to see how to use UpdateJobDefinition API.
     */
    updateJobDefinition(updateJobDefinitionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateJobDefinition.");
            const operationName = "updateJobDefinition";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/JobDefinition/UpdateJobDefinition";
            const pathParams = {
                "{catalogId}": updateJobDefinitionRequest.catalogId,
                "{jobDefinitionKey}": updateJobDefinitionRequest.jobDefinitionKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateJobDefinitionRequest.ifMatch,
                "opc-request-id": updateJobDefinitionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateJobDefinitionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/jobDefinitions/{jobDefinitionKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateJobDefinitionRequest.updateJobDefinitionDetails, "UpdateJobDefinitionDetails", model.UpdateJobDefinitionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobDefinition",
                    bodyModel: model.JobDefinition,
                    type: "model.JobDefinition",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a metastore resource by identifier.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateMetastoreRequest
     * @return UpdateMetastoreResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateMetastore.ts.html |here} to see how to use UpdateMetastore API.
     */
    updateMetastore(updateMetastoreRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateMetastore.");
            const operationName = "updateMetastore";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Metastore/UpdateMetastore";
            const pathParams = {
                "{metastoreId}": updateMetastoreRequest.metastoreId
            };
            const queryParams = {
                "isLockOverride": updateMetastoreRequest.isLockOverride
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMetastoreRequest.ifMatch,
                "opc-request-id": updateMetastoreRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMetastoreRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metastores/{metastoreId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMetastoreRequest.updateMetastoreDetails, "UpdateMetastoreDetails", model.UpdateMetastoreDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "metastore",
                    bodyModel: model.Metastore,
                    type: "model.Metastore",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific namespace identified by the given key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateNamespaceRequest
     * @return UpdateNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateNamespace.ts.html |here} to see how to use UpdateNamespace API.
     */
    updateNamespace(updateNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateNamespace.");
            const operationName = "updateNamespace";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Namespace/UpdateNamespace";
            const pathParams = {
                "{catalogId}": updateNamespaceRequest.catalogId,
                "{namespaceId}": updateNamespaceRequest.namespaceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateNamespaceRequest.ifMatch,
                "opc-request-id": updateNamespaceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateNamespaceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/namespaces/{namespaceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateNamespaceRequest.updateNamespaceDetails, "UpdateNamespaceDetails", model.UpdateNamespaceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "namespace",
                    bodyModel: model.Namespace,
                    type: "model.Namespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific pattern identified by the given key.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdatePatternRequest
     * @return UpdatePatternResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdatePattern.ts.html |here} to see how to use UpdatePattern API.
     */
    updatePattern(updatePatternRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updatePattern.");
            const operationName = "updatePattern";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Pattern/UpdatePattern";
            const pathParams = {
                "{catalogId}": updatePatternRequest.catalogId,
                "{patternKey}": updatePatternRequest.patternKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updatePatternRequest.ifMatch,
                "opc-request-id": updatePatternRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updatePatternRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/patterns/{patternKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updatePatternRequest.updatePatternDetails, "UpdatePatternDetails", model.UpdatePatternDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pattern",
                    bodyModel: model.Pattern,
                    type: "model.Pattern",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific glossary term.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateTermRequest
     * @return UpdateTermResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateTerm.ts.html |here} to see how to use UpdateTerm API.
     */
    updateTerm(updateTermRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateTerm.");
            const operationName = "updateTerm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Term/UpdateTerm";
            const pathParams = {
                "{catalogId}": updateTermRequest.catalogId,
                "{glossaryKey}": updateTermRequest.glossaryKey,
                "{termKey}": updateTermRequest.termKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTermRequest.ifMatch,
                "opc-request-id": updateTermRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateTermRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/terms/{termKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTermRequest.updateTermDetails, "UpdateTermDetails", model.UpdateTermDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "term",
                    bodyModel: model.Term,
                    type: "model.Term",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a specific glossary term relationship.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateTermRelationshipRequest
     * @return UpdateTermRelationshipResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UpdateTermRelationship.ts.html |here} to see how to use UpdateTermRelationship API.
     */
    updateTermRelationship(updateTermRelationshipRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#updateTermRelationship.");
            const operationName = "updateTermRelationship";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/TermRelationship/UpdateTermRelationship";
            const pathParams = {
                "{catalogId}": updateTermRelationshipRequest.catalogId,
                "{glossaryKey}": updateTermRelationshipRequest.glossaryKey,
                "{termKey}": updateTermRelationshipRequest.termKey,
                "{termRelationshipKey}": updateTermRelationshipRequest.termRelationshipKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTermRelationshipRequest.ifMatch,
                "opc-request-id": updateTermRelationshipRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateTermRelationshipRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/glossaries/{glossaryKey}/terms/{termKey}/termRelationships/{termRelationshipKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTermRelationshipRequest.updateTermRelationshipDetails, "UpdateTermRelationshipDetails", model.UpdateTermRelationshipDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "termRelationship",
                    bodyModel: model.TermRelationship,
                    type: "model.TermRelationship",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Upload connection credentails and metadata for this connection.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UploadCredentialsRequest
     * @return UploadCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/UploadCredentials.ts.html |here} to see how to use UploadCredentials API.
     */
    uploadCredentials(uploadCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#uploadCredentials.");
            const operationName = "uploadCredentials";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Connection/UploadCredentials";
            const pathParams = {
                "{catalogId}": uploadCredentialsRequest.catalogId,
                "{dataAssetKey}": uploadCredentialsRequest.dataAssetKey,
                "{connectionKey}": uploadCredentialsRequest.connectionKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": uploadCredentialsRequest.opcRequestId,
                "if-match": uploadCredentialsRequest.ifMatch,
                "opc-retry-token": uploadCredentialsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, uploadCredentialsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/connections/{connectionKey}/actions/uploadCredentials",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(uploadCredentialsRequest.uploadCredentialsDetails, "UploadCredentialsDetails", model.UploadCredentialsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "connection",
                    bodyModel: model.Connection,
                    type: "model.Connection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns active users in the system.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UsersRequest
     * @return UsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/Users.ts.html |here} to see how to use Users API.
     */
    users(usersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#users.");
            const operationName = "users";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Catalog/Users";
            const pathParams = {
                "{catalogId}": usersRequest.catalogId
            };
            const queryParams = {
                "sortBy": usersRequest.sortBy,
                "sortOrder": usersRequest.sortOrder,
                "limit": usersRequest.limit,
                "page": usersRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": usersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, usersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/actions/users",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "value",
                    bodyModel: "string",
                    type: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Validate connection by connecting to the data asset using credentials in metadata.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ValidateConnectionRequest
     * @return ValidateConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ValidateConnection.ts.html |here} to see how to use ValidateConnection API.
     */
    validateConnection(validateConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#validateConnection.");
            const operationName = "validateConnection";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/DataAsset/ValidateConnection";
            const pathParams = {
                "{catalogId}": validateConnectionRequest.catalogId,
                "{dataAssetKey}": validateConnectionRequest.dataAssetKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": validateConnectionRequest.opcRequestId,
                "opc-retry-token": validateConnectionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, validateConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/dataAssets/{dataAssetKey}/actions/validateConnection",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(validateConnectionRequest.validateConnectionDetails, "ValidateConnectionDetails", model.ValidateConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "validateConnectionResult",
                    bodyModel: model.ValidateConnectionResult,
                    type: "model.ValidateConnectionResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Validate pattern by deriving file groups representing logical entities using the expression
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ValidatePatternRequest
     * @return ValidatePatternResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datacatalog/ValidatePattern.ts.html |here} to see how to use ValidatePattern API.
     */
    validatePattern(validatePatternRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataCatalogClient#validatePattern.");
            const operationName = "validatePattern";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-catalog/20190325/Pattern/ValidatePattern";
            const pathParams = {
                "{catalogId}": validatePatternRequest.catalogId,
                "{patternKey}": validatePatternRequest.patternKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": validatePatternRequest.opcRequestId,
                "opc-retry-token": validatePatternRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, validatePatternRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/catalogs/{catalogId}/patterns/{patternKey}/actions/validate",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(validatePatternRequest.validatePatternDetails, "ValidatePatternDetails", model.ValidatePatternDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "validatePatternResult",
                    bodyModel: model.ValidatePatternResult,
                    type: "model.ValidatePatternResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DataCatalogClient = DataCatalogClient;
DataCatalogClient.serviceEndpointTemplate = "https://datacatalog.{region}.oci.{secondLevelDomain}";
DataCatalogClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map