/**
 * Data Catalog API
 * Use the Data Catalog APIs to collect, organize, find, access, understand, enrich, and activate technical, business, and operational metadata.
For more information, see [Data Catalog](https://docs.oracle.com/iaas/data-catalog/home.htm).

 * OpenAPI spec version: 20190325
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * Object describing an individual element of object lineage.
 */
export interface LineageObject {
    /**
     * Key of the object, such as an entity, about which this lineage applies.
     */
    "objectKey"?: string;
    /**
     * Display name of the object.
     */
    "displayName"?: string;
    /**
     * Detailed description of the object.
     */
    "description"?: string;
    /**
     * Indicates if intra-lineage is available for this given object. If yes, drill-down can be requested for
     * this object.
     *
     */
    "isIntraLineageAvailable"?: boolean;
    /**
     * Key of the parent object for this object.
     */
    "parentKey"?: string;
    /**
     * Full path of the parent object.
     */
    "parentPath"?: string;
    /**
     * The time that this object was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     *
     */
    "timeCreated"?: Date;
    /**
     * The time that this object was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
     *
     */
    "timeUpdated"?: Date;
    /**
     * Type name of the object. Type keys can be found via the '/types' endpoint.
     */
    "typeName"?: string;
    /**
     * Type key of the object. Type keys can be found via the '/types' endpoint.
     */
    "typeKey"?: string;
    /**
     * A map of maps that contains the properties which are specific to the entity type. Each entity type
     * definition defines it's set of required and optional properties. The map keys are category names and the
     * values are maps of property name to property value. Every property is contained inside of a category. Most
     * data entities have required properties within the \"default\" category.
     * Example: {@code {\"properties\": { \"default\": { \"key1\": \"value1\"}}}}
     *
     */
    "properties"?: {
        [key: string]: {
            [key: string]: string;
        };
    };
}
export declare namespace LineageObject {
    function getJsonObj(obj: LineageObject): object;
    function getDeserializedJsonObj(obj: LineageObject): object;
}
