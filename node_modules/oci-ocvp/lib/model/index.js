"use strict";
/**
 * Oracle Cloud VMware Solution API
 * Use the Oracle Cloud VMware API to create SDDCs and manage ESXi hosts and software.
For more information, see [Oracle Cloud VMware Solution](https://docs.oracle.com/iaas/Content/VMware/Concepts/ocvsoverview.htm).

 * OpenAPI spec version: 20230701
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkRequestErrorCollection = exports.WorkRequestError = exports.WorkRequestCollection = exports.WorkRequest = exports.VsphereUpgradeObject = exports.VsphereTypes = exports.VsphereLicense = exports.UpdateSddcDetails = exports.UpdateEsxiHostDetails = exports.UpdateClusterDetails = exports.SupportedVmwareSoftwareVersionSummary = exports.SupportedVmwareSoftwareVersionCollection = exports.SupportedHostShapeSummary = exports.SupportedHostShapeCollection = exports.SupportedEsxiSoftwareVersionSummary = exports.SupportedCommitmentSummaryCollection = exports.SupportedCommitmentSummary = exports.SortOrders = exports.SddcSummary = exports.SddcPassword = exports.SddcCollection = exports.Sddc = exports.ReplaceHostDetails = exports.PasswordTypes = exports.OperationTypes = exports.OperationStatus = exports.NetworkConfiguration = exports.LifecycleStates = exports.InitialConfiguration = exports.InitialClusterConfiguration = exports.HcxModes = exports.HcxLicenseSummary = exports.HcxLicenseStatus = exports.EsxiHostSummary = exports.EsxiHostCollection = exports.EsxiHost = exports.DowngradeHcxDetails = exports.DatastoreTypes = exports.DatastoreInfo = exports.DatastoreDetails = exports.DatastoreClusterTypes = exports.CreateSddcDetails = exports.CreateEsxiHostDetails = exports.CreateClusterDetails = exports.Commitment = exports.ClusterSummary = exports.ClusterCollection = exports.Cluster = exports.ChangeSddcCompartmentDetails = exports.ActionTypes = void 0;
exports.WorkRequestResource = exports.WorkRequestLogEntryCollection = exports.WorkRequestLogEntry = void 0;
const ActionTypes = __importStar(require("./action-types"));
exports.ActionTypes = ActionTypes.ActionTypes;
const ChangeSddcCompartmentDetails = __importStar(require("./change-sddc-compartment-details"));
exports.ChangeSddcCompartmentDetails = ChangeSddcCompartmentDetails.ChangeSddcCompartmentDetails;
const Cluster = __importStar(require("./cluster"));
exports.Cluster = Cluster.Cluster;
const ClusterCollection = __importStar(require("./cluster-collection"));
exports.ClusterCollection = ClusterCollection.ClusterCollection;
const ClusterSummary = __importStar(require("./cluster-summary"));
exports.ClusterSummary = ClusterSummary.ClusterSummary;
const Commitment = __importStar(require("./commitment"));
exports.Commitment = Commitment.Commitment;
const CreateClusterDetails = __importStar(require("./create-cluster-details"));
exports.CreateClusterDetails = CreateClusterDetails.CreateClusterDetails;
const CreateEsxiHostDetails = __importStar(require("./create-esxi-host-details"));
exports.CreateEsxiHostDetails = CreateEsxiHostDetails.CreateEsxiHostDetails;
const CreateSddcDetails = __importStar(require("./create-sddc-details"));
exports.CreateSddcDetails = CreateSddcDetails.CreateSddcDetails;
const DatastoreClusterTypes = __importStar(require("./datastore-cluster-types"));
exports.DatastoreClusterTypes = DatastoreClusterTypes.DatastoreClusterTypes;
const DatastoreDetails = __importStar(require("./datastore-details"));
exports.DatastoreDetails = DatastoreDetails.DatastoreDetails;
const DatastoreInfo = __importStar(require("./datastore-info"));
exports.DatastoreInfo = DatastoreInfo.DatastoreInfo;
const DatastoreTypes = __importStar(require("./datastore-types"));
exports.DatastoreTypes = DatastoreTypes.DatastoreTypes;
const DowngradeHcxDetails = __importStar(require("./downgrade-hcx-details"));
exports.DowngradeHcxDetails = DowngradeHcxDetails.DowngradeHcxDetails;
const EsxiHost = __importStar(require("./esxi-host"));
exports.EsxiHost = EsxiHost.EsxiHost;
const EsxiHostCollection = __importStar(require("./esxi-host-collection"));
exports.EsxiHostCollection = EsxiHostCollection.EsxiHostCollection;
const EsxiHostSummary = __importStar(require("./esxi-host-summary"));
exports.EsxiHostSummary = EsxiHostSummary.EsxiHostSummary;
const HcxLicenseStatus = __importStar(require("./hcx-license-status"));
exports.HcxLicenseStatus = HcxLicenseStatus.HcxLicenseStatus;
const HcxLicenseSummary = __importStar(require("./hcx-license-summary"));
exports.HcxLicenseSummary = HcxLicenseSummary.HcxLicenseSummary;
const HcxModes = __importStar(require("./hcx-modes"));
exports.HcxModes = HcxModes.HcxModes;
const InitialClusterConfiguration = __importStar(require("./initial-cluster-configuration"));
exports.InitialClusterConfiguration = InitialClusterConfiguration.InitialClusterConfiguration;
const InitialConfiguration = __importStar(require("./initial-configuration"));
exports.InitialConfiguration = InitialConfiguration.InitialConfiguration;
const LifecycleStates = __importStar(require("./lifecycle-states"));
exports.LifecycleStates = LifecycleStates.LifecycleStates;
const NetworkConfiguration = __importStar(require("./network-configuration"));
exports.NetworkConfiguration = NetworkConfiguration.NetworkConfiguration;
const OperationStatus = __importStar(require("./operation-status"));
exports.OperationStatus = OperationStatus.OperationStatus;
const OperationTypes = __importStar(require("./operation-types"));
exports.OperationTypes = OperationTypes.OperationTypes;
const PasswordTypes = __importStar(require("./password-types"));
exports.PasswordTypes = PasswordTypes.PasswordTypes;
const ReplaceHostDetails = __importStar(require("./replace-host-details"));
exports.ReplaceHostDetails = ReplaceHostDetails.ReplaceHostDetails;
const Sddc = __importStar(require("./sddc"));
exports.Sddc = Sddc.Sddc;
const SddcCollection = __importStar(require("./sddc-collection"));
exports.SddcCollection = SddcCollection.SddcCollection;
const SddcPassword = __importStar(require("./sddc-password"));
exports.SddcPassword = SddcPassword.SddcPassword;
const SddcSummary = __importStar(require("./sddc-summary"));
exports.SddcSummary = SddcSummary.SddcSummary;
const SortOrders = __importStar(require("./sort-orders"));
exports.SortOrders = SortOrders.SortOrders;
const SupportedCommitmentSummary = __importStar(require("./supported-commitment-summary"));
exports.SupportedCommitmentSummary = SupportedCommitmentSummary.SupportedCommitmentSummary;
const SupportedCommitmentSummaryCollection = __importStar(require("./supported-commitment-summary-collection"));
exports.SupportedCommitmentSummaryCollection = SupportedCommitmentSummaryCollection.SupportedCommitmentSummaryCollection;
const SupportedEsxiSoftwareVersionSummary = __importStar(require("./supported-esxi-software-version-summary"));
exports.SupportedEsxiSoftwareVersionSummary = SupportedEsxiSoftwareVersionSummary.SupportedEsxiSoftwareVersionSummary;
const SupportedHostShapeCollection = __importStar(require("./supported-host-shape-collection"));
exports.SupportedHostShapeCollection = SupportedHostShapeCollection.SupportedHostShapeCollection;
const SupportedHostShapeSummary = __importStar(require("./supported-host-shape-summary"));
exports.SupportedHostShapeSummary = SupportedHostShapeSummary.SupportedHostShapeSummary;
const SupportedVmwareSoftwareVersionCollection = __importStar(require("./supported-vmware-software-version-collection"));
exports.SupportedVmwareSoftwareVersionCollection = SupportedVmwareSoftwareVersionCollection.SupportedVmwareSoftwareVersionCollection;
const SupportedVmwareSoftwareVersionSummary = __importStar(require("./supported-vmware-software-version-summary"));
exports.SupportedVmwareSoftwareVersionSummary = SupportedVmwareSoftwareVersionSummary.SupportedVmwareSoftwareVersionSummary;
const UpdateClusterDetails = __importStar(require("./update-cluster-details"));
exports.UpdateClusterDetails = UpdateClusterDetails.UpdateClusterDetails;
const UpdateEsxiHostDetails = __importStar(require("./update-esxi-host-details"));
exports.UpdateEsxiHostDetails = UpdateEsxiHostDetails.UpdateEsxiHostDetails;
const UpdateSddcDetails = __importStar(require("./update-sddc-details"));
exports.UpdateSddcDetails = UpdateSddcDetails.UpdateSddcDetails;
const VsphereLicense = __importStar(require("./vsphere-license"));
exports.VsphereLicense = VsphereLicense.VsphereLicense;
const VsphereTypes = __importStar(require("./vsphere-types"));
exports.VsphereTypes = VsphereTypes.VsphereTypes;
const VsphereUpgradeObject = __importStar(require("./vsphere-upgrade-object"));
exports.VsphereUpgradeObject = VsphereUpgradeObject.VsphereUpgradeObject;
const WorkRequest = __importStar(require("./work-request"));
exports.WorkRequest = WorkRequest.WorkRequest;
const WorkRequestCollection = __importStar(require("./work-request-collection"));
exports.WorkRequestCollection = WorkRequestCollection.WorkRequestCollection;
const WorkRequestError = __importStar(require("./work-request-error"));
exports.WorkRequestError = WorkRequestError.WorkRequestError;
const WorkRequestErrorCollection = __importStar(require("./work-request-error-collection"));
exports.WorkRequestErrorCollection = WorkRequestErrorCollection.WorkRequestErrorCollection;
const WorkRequestLogEntry = __importStar(require("./work-request-log-entry"));
exports.WorkRequestLogEntry = WorkRequestLogEntry.WorkRequestLogEntry;
const WorkRequestLogEntryCollection = __importStar(require("./work-request-log-entry-collection"));
exports.WorkRequestLogEntryCollection = WorkRequestLogEntryCollection.WorkRequestLogEntryCollection;
const WorkRequestResource = __importStar(require("./work-request-resource"));
exports.WorkRequestResource = WorkRequestResource.WorkRequestResource;
//# sourceMappingURL=index.js.map