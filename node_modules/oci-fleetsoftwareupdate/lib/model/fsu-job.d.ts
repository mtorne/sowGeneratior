/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Exadata Fleet Update Job resource.
 *
 */
export interface FsuJob {
    /**
     * OCID identifier for the Exadata Fleet Update Job.
     *
     */
    "id": string;
    /**
     * Exadata Fleet Update Job display name.
     *
     */
    "displayName"?: string;
    /**
     * Compartment Identifier, this will map to the owner Exadata Fleet Update Action resource.
     *
     */
    "compartmentId": string;
    /**
     * OCID of the Exadata Fleet Update Action that this job is part of.
     *
     */
    "fsuActionId": string;
    "progress"?: model.JobProgressDetails;
    /**
     * The time the Exadata Fleet Update Job was created. An RFC3339 formatted datetime string.
     *
     */
    "timeCreated": Date;
    /**
     * The time the Exadata Fleet Update Job started execution. An RFC3339 formatted datetime string.
     *
     */
    "timeStarted"?: Date;
    /**
     * The time the Exadata Fleet Update Job was updated. An RFC3339 formatted datetime string.
     *
     */
    "timeUpdated"?: Date;
    /**
     * The time the Exadata Fleet Update Job completed execution. An RFC3339 formatted datetime string.
     *
     */
    "timeFinished"?: Date;
    /**
     * The current state of the Exadata Fleet Update Job.
     *
     */
    "lifecycleState": model.JobLifecycleStates;
    /**
     * A message describing the current state in more detail.
     * For example, can be used to provide actionable information for a resource in Failed state.
     *
     */
    "lifecycleDetails"?: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    "type": string;
}
export declare namespace FsuJob {
    function getJsonObj(obj: FsuJob): object;
    function getDeserializedJsonObj(obj: FsuJob): object;
}
