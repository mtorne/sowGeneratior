/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Exadata Fleet Update Cycle resource creation details.
 *
 */
export interface CreateFsuCycleDetails {
    /**
     * Exadata Fleet Update Cycle display name.
     *
     */
    "displayName"?: string;
    /**
     * Compartment Identifier.
     *
     */
    "compartmentId": string;
    /**
     * OCID identifier for the Collection ID the Exadata Fleet Update Cycle will be assigned to.
     *
     */
    "fsuCollectionId": string;
    "goalVersionDetails": model.VersionFsuTargetDetails | model.ImageIdFsuTargetDetails;
    "batchingStrategy"?: model.CreateSequentialBatchingStrategyDetails | model.CreateFiftyFiftyBatchingStrategyDetails | model.CreateServiceAvailabilityFactorBatchingStrategyDetails | model.CreateNonRollingBatchingStrategyDetails;
    "stageActionSchedule"?: model.CreateStartTimeScheduleDetails;
    "applyActionSchedule"?: model.CreateStartTimeScheduleDetails;
    "diagnosticsCollection"?: model.DiagnosticsCollectionDetails;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    "type": string;
}
export declare namespace CreateFsuCycleDetails {
    function getJsonObj(obj: CreateFsuCycleDetails): object;
    function getDeserializedJsonObj(obj: CreateFsuCycleDetails): object;
}
