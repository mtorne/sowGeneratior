/**
 * Exadata Fleet Update service API
 * Use the Exadata Fleet Update service to patch large collections of components directly,
as a single entity, orchestrating the maintenance actions to update all chosen components in the stack in a single cycle.

 * OpenAPI spec version: 20220528
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { FleetSoftwareUpdateClient } from "./client";
export declare class FleetSoftwareUpdateWaiter {
    private client;
    private readonly config?;
    constructor(client: FleetSoftwareUpdateClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forFsuAction till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFsuActionResponse | null (null in case of 404 response)
     */
    forFsuAction(request: serviceRequests.GetFsuActionRequest, ...targetStates: models.ActionLifecycleStates[]): Promise<serviceResponses.GetFsuActionResponse | null>;
    /**
     * Waits forFsuCollection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFsuCollectionResponse | null (null in case of 404 response)
     */
    forFsuCollection(request: serviceRequests.GetFsuCollectionRequest, ...targetStates: models.CollectionLifecycleStates[]): Promise<serviceResponses.GetFsuCollectionResponse | null>;
    /**
     * Waits forFsuCycle till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFsuCycleResponse | null (null in case of 404 response)
     */
    forFsuCycle(request: serviceRequests.GetFsuCycleRequest, ...targetStates: models.CycleLifecycleStates[]): Promise<serviceResponses.GetFsuCycleResponse | null>;
    /**
     * Waits forFsuDiscovery till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFsuDiscoveryResponse | null (null in case of 404 response)
     */
    forFsuDiscovery(request: serviceRequests.GetFsuDiscoveryRequest, ...targetStates: models.DiscoveryLifecycleStates[]): Promise<serviceResponses.GetFsuDiscoveryResponse | null>;
    /**
     * Waits forFsuJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFsuJobResponse | null (null in case of 404 response)
     */
    forFsuJob(request: serviceRequests.GetFsuJobRequest, ...targetStates: models.JobLifecycleStates[]): Promise<serviceResponses.GetFsuJobResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
