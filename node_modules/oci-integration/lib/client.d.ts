/**
 * Oracle Integration API
 * Oracle Integration API.
 * OpenAPI spec version: 20190131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { IntegrationInstanceWaiter } from "./integrationinstance-waiter";
declare const Breaker: any;
export declare enum IntegrationInstanceApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class IntegrationInstanceClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": IntegrationInstanceWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new IntegrationInstanceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): IntegrationInstanceWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): IntegrationInstanceWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Enable Oracle Managed Custom Endpoint for given integration instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddOracleManagedCustomEndpointRequest
     * @return AddOracleManagedCustomEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/AddOracleManagedCustomEndpoint.ts.html |here} to see how to use AddOracleManagedCustomEndpoint API.
     */
    addOracleManagedCustomEndpoint(addOracleManagedCustomEndpointRequest: requests.AddOracleManagedCustomEndpointRequest): Promise<responses.AddOracleManagedCustomEndpointResponse>;
    /**
     * Change the compartment for an integration instance
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeIntegrationInstanceCompartmentRequest
     * @return ChangeIntegrationInstanceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/ChangeIntegrationInstanceCompartment.ts.html |here} to see how to use ChangeIntegrationInstanceCompartment API.
     */
    changeIntegrationInstanceCompartment(changeIntegrationInstanceCompartmentRequest: requests.ChangeIntegrationInstanceCompartmentRequest): Promise<responses.ChangeIntegrationInstanceCompartmentResponse>;
    /**
     * Change an Integration instance network endpoint. The operation is long-running
     * and creates a new WorkRequest.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeIntegrationInstanceNetworkEndpointRequest
     * @return ChangeIntegrationInstanceNetworkEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/ChangeIntegrationInstanceNetworkEndpoint.ts.html |here} to see how to use ChangeIntegrationInstanceNetworkEndpoint API.
     */
    changeIntegrationInstanceNetworkEndpoint(changeIntegrationInstanceNetworkEndpointRequest: requests.ChangeIntegrationInstanceNetworkEndpointRequest): Promise<responses.ChangeIntegrationInstanceNetworkEndpointResponse>;
    /**
     * Change private endpoint outbound connection for given Integration instance. The operation is long-running
     * and creates a new WorkRequest.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangePrivateEndpointOutboundConnectionRequest
     * @return ChangePrivateEndpointOutboundConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/ChangePrivateEndpointOutboundConnection.ts.html |here} to see how to use ChangePrivateEndpointOutboundConnection API.
     */
    changePrivateEndpointOutboundConnection(changePrivateEndpointOutboundConnectionRequest: requests.ChangePrivateEndpointOutboundConnectionRequest): Promise<responses.ChangePrivateEndpointOutboundConnectionResponse>;
    /**
     * Creates a new Integration Instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateIntegrationInstanceRequest
     * @return CreateIntegrationInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/CreateIntegrationInstance.ts.html |here} to see how to use CreateIntegrationInstance API.
     */
    createIntegrationInstance(createIntegrationInstanceRequest: requests.CreateIntegrationInstanceRequest): Promise<responses.CreateIntegrationInstanceResponse>;
    /**
     * Deletes an Integration Instance resource by identifier.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteIntegrationInstanceRequest
     * @return DeleteIntegrationInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/DeleteIntegrationInstance.ts.html |here} to see how to use DeleteIntegrationInstance API.
     */
    deleteIntegrationInstance(deleteIntegrationInstanceRequest: requests.DeleteIntegrationInstanceRequest): Promise<responses.DeleteIntegrationInstanceResponse>;
    /**
     * Allows failover for disaster recovery. Called in the context of integration instance in that region.
     * Upon calling the failover api in the region where given instance was created,
     * the intigration instance if primary will be switched to standby and crossRegion integration instance
     * will be switched to primary and vice-versa.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DisasterRecoveryFailoverRequest
     * @return DisasterRecoveryFailoverResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/DisasterRecoveryFailover.ts.html |here} to see how to use DisasterRecoveryFailover API.
     */
    disasterRecoveryFailover(disasterRecoveryFailoverRequest: requests.DisasterRecoveryFailoverRequest): Promise<responses.DisasterRecoveryFailoverResponse>;
    /**
     * Enable Process Automation for given Integration Instance
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param EnableProcessAutomationRequest
     * @return EnableProcessAutomationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/EnableProcessAutomation.ts.html |here} to see how to use EnableProcessAutomation API.
     */
    enableProcessAutomation(enableProcessAutomationRequest: requests.EnableProcessAutomationRequest): Promise<responses.EnableProcessAutomationResponse>;
    /**
     * Extend Data Retention period for given Integration Instance
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ExtendDataRetentionRequest
     * @return ExtendDataRetentionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/ExtendDataRetention.ts.html |here} to see how to use ExtendDataRetention API.
     */
    extendDataRetention(extendDataRetentionRequest: requests.ExtendDataRetentionRequest): Promise<responses.ExtendDataRetentionResponse>;
    /**
     * Gets a IntegrationInstance by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetIntegrationInstanceRequest
     * @return GetIntegrationInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/GetIntegrationInstance.ts.html |here} to see how to use GetIntegrationInstance API.
     */
    getIntegrationInstance(getIntegrationInstanceRequest: requests.GetIntegrationInstanceRequest): Promise<responses.GetIntegrationInstanceResponse>;
    /**
     * Gets the status of the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Returns a list of Integration Instances.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListIntegrationInstancesRequest
     * @return ListIntegrationInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/ListIntegrationInstances.ts.html |here} to see how to use ListIntegrationInstances API.
     */
    listIntegrationInstances(listIntegrationInstancesRequest: requests.ListIntegrationInstancesRequest): Promise<responses.ListIntegrationInstancesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listIntegrationInstancesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.IntegrationInstanceSummary objects
     * contained in responses from the listIntegrationInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIntegrationInstances(request: requests.ListIntegrationInstancesRequest): AsyncIterableIterator<model.IntegrationInstanceSummary>;
    /**
     * NOTE: This function is deprecated in favor of listIntegrationInstancesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listIntegrationInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIntegrationInstancesResponses(request: requests.ListIntegrationInstancesRequest): AsyncIterableIterator<responses.ListIntegrationInstancesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.IntegrationInstanceSummary objects
     * contained in responses from the listIntegrationInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIntegrationInstancesRecordIterator(request: requests.ListIntegrationInstancesRequest): AsyncIterableIterator<model.IntegrationInstanceSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIntegrationInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listIntegrationInstancesResponseIterator(request: requests.ListIntegrationInstancesRequest): AsyncIterableIterator<responses.ListIntegrationInstancesResponse>;
    /**
     * Get the errors of a work request.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<model.WorkRequestError>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsRecordIterator(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<model.WorkRequestError>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsResponseIterator(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse>;
    /**
     * Get the logs of a work request.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<model.WorkRequestLogEntry>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<responses.ListWorkRequestLogsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsRecordIterator(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<model.WorkRequestLogEntry>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsResponseIterator(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<model.WorkRequestSummary>;
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsRecordIterator(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<model.WorkRequestSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsResponseIterator(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
    /**
     * Remove Oracle Managed Custom Endpoint for given integration instance that was previously enabled.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveOracleManagedCustomEndpointRequest
     * @return RemoveOracleManagedCustomEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/RemoveOracleManagedCustomEndpoint.ts.html |here} to see how to use RemoveOracleManagedCustomEndpoint API.
     */
    removeOracleManagedCustomEndpoint(removeOracleManagedCustomEndpointRequest: requests.RemoveOracleManagedCustomEndpointRequest): Promise<responses.RemoveOracleManagedCustomEndpointResponse>;
    /**
     * Start an integration instance that was previously in an INACTIVE state
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param StartIntegrationInstanceRequest
     * @return StartIntegrationInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/StartIntegrationInstance.ts.html |here} to see how to use StartIntegrationInstance API.
     */
    startIntegrationInstance(startIntegrationInstanceRequest: requests.StartIntegrationInstanceRequest): Promise<responses.StartIntegrationInstanceResponse>;
    /**
     * Stop an integration instance that was previously in an ACTIVE state
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param StopIntegrationInstanceRequest
     * @return StopIntegrationInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/StopIntegrationInstance.ts.html |here} to see how to use StopIntegrationInstance API.
     */
    stopIntegrationInstance(stopIntegrationInstanceRequest: requests.StopIntegrationInstanceRequest): Promise<responses.StopIntegrationInstanceResponse>;
    /**
     * Updates the Integration Instance.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateIntegrationInstanceRequest
     * @return UpdateIntegrationInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/integration/UpdateIntegrationInstance.ts.html |here} to see how to use UpdateIntegrationInstance API.
     */
    updateIntegrationInstance(updateIntegrationInstanceRequest: requests.UpdateIntegrationInstanceRequest): Promise<responses.UpdateIntegrationInstanceResponse>;
}
export {};
