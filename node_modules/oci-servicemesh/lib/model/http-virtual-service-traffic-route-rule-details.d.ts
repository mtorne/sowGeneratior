/**
 * Service Mesh API
 * Use the Service Mesh API to manage mesh, virtual service, access policy and other mesh related items.
 * OpenAPI spec version: 20220615
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Rule for routing incoming Virtual Service traffic with HTTP protocol
 */
export interface HttpVirtualServiceTrafficRouteRuleDetails extends model.VirtualServiceTrafficRouteRuleDetails {
    /**
     * Route to match
     */
    "path"?: string;
    /**
     * Match type for the route
     */
    "pathType"?: HttpVirtualServiceTrafficRouteRuleDetails.PathType;
    /**
     * If true, the rule will check that the content-type header has a application/grpc
     * or one of the various application/grpc+ values.
     *
     */
    "isGrpc"?: boolean;
    /**
     * The maximum duration in milliseconds for the target service to respond to a request.
     * If provided, the timeout value overrides the default timeout of 15 seconds for the HTTP based route rules, and disabled (no timeout) when 'isGrpc' is true.
     * The value 0 (zero) indicates that the timeout is disabled.
     * For streaming responses from the target service, consider either keeping the timeout disabled or set a sufficiently high value.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "requestTimeoutInMs"?: number;
    "type": string;
}
export declare namespace HttpVirtualServiceTrafficRouteRuleDetails {
    enum PathType {
        Prefix = "PREFIX"
    }
    function getJsonObj(obj: HttpVirtualServiceTrafficRouteRuleDetails, isParentJsonObj?: boolean): object;
    const type = "HTTP";
    function getDeserializedJsonObj(obj: HttpVirtualServiceTrafficRouteRuleDetails, isParentJsonObj?: boolean): object;
}
