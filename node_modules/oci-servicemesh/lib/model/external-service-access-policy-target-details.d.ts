/**
 * Service Mesh API
 * Use the Service Mesh API to manage mesh, virtual service, access policy and other mesh related items.
 * OpenAPI spec version: 20220615
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * External service target that internal virtual services direct traffic to.
 */
export interface ExternalServiceAccessPolicyTargetDetails extends model.AccessPolicyTargetDetails {
    /**
     * The hostnames of the external service. Only applicable for HTTP and HTTPS protocols.
     * Wildcard hostnames are supported in the prefix form.
     * Examples of valid hostnames are \"www.example.com\", \"*.example.com\", \"*.com\", \"*\".
     * Hostname \"*\" can be used to allow all hosts.
     *
     */
    "hostnames"?: Array<string>;
    /**
     * The ipAddresses of the external service in CIDR notation. Only applicable for TCP protocol.
     * All requests matching the given CIDR notation will pass through.
     * In case a wildcard CIDR \"0.0.0.0/0\" is provided, the same port cannot be used for a virtual service communication.
     *
     */
    "ipAddresses"?: Array<string>;
    /**
     * Ports exposed by an external service. If left empty all ports will be allowed.
     */
    "ports"?: Array<number>;
    /**
     * Protocol of the external service
     */
    "protocol"?: ExternalServiceAccessPolicyTargetDetails.Protocol;
    "type": string;
}
export declare namespace ExternalServiceAccessPolicyTargetDetails {
    enum Protocol {
        Http = "HTTP",
        Https = "HTTPS",
        Tcp = "TCP"
    }
    function getJsonObj(obj: ExternalServiceAccessPolicyTargetDetails, isParentJsonObj?: boolean): object;
    const type = "EXTERNAL_SERVICE";
    function getDeserializedJsonObj(obj: ExternalServiceAccessPolicyTargetDetails, isParentJsonObj?: boolean): object;
}
