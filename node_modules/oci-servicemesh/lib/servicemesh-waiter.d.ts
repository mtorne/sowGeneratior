/**
 * Service Mesh API
 * Use the Service Mesh API to manage mesh, virtual service, access policy and other mesh related items.
 * OpenAPI spec version: 20220615
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ServiceMeshClient } from "./client";
export declare class ServiceMeshWaiter {
    private client;
    private readonly config?;
    constructor(client: ServiceMeshClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAccessPolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAccessPolicyResponse | null (null in case of 404 response)
     */
    forAccessPolicy(request: serviceRequests.GetAccessPolicyRequest, ...targetStates: models.AccessPolicy.LifecycleState[]): Promise<serviceResponses.GetAccessPolicyResponse | null>;
    /**
     * Waits forIngressGateway till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIngressGatewayResponse | null (null in case of 404 response)
     */
    forIngressGateway(request: serviceRequests.GetIngressGatewayRequest, ...targetStates: models.IngressGateway.LifecycleState[]): Promise<serviceResponses.GetIngressGatewayResponse | null>;
    /**
     * Waits forIngressGatewayRouteTable till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetIngressGatewayRouteTableResponse | null (null in case of 404 response)
     */
    forIngressGatewayRouteTable(request: serviceRequests.GetIngressGatewayRouteTableRequest, ...targetStates: models.IngressGatewayRouteTable.LifecycleState[]): Promise<serviceResponses.GetIngressGatewayRouteTableResponse | null>;
    /**
     * Waits forMesh till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMeshResponse | null (null in case of 404 response)
     */
    forMesh(request: serviceRequests.GetMeshRequest, ...targetStates: models.Mesh.LifecycleState[]): Promise<serviceResponses.GetMeshResponse | null>;
    /**
     * Waits forVirtualDeployment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVirtualDeploymentResponse | null (null in case of 404 response)
     */
    forVirtualDeployment(request: serviceRequests.GetVirtualDeploymentRequest, ...targetStates: models.VirtualDeployment.LifecycleState[]): Promise<serviceResponses.GetVirtualDeploymentResponse | null>;
    /**
     * Waits forVirtualService till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVirtualServiceResponse | null (null in case of 404 response)
     */
    forVirtualService(request: serviceRequests.GetVirtualServiceRequest, ...targetStates: models.VirtualService.LifecycleState[]): Promise<serviceResponses.GetVirtualServiceResponse | null>;
    /**
     * Waits forVirtualServiceRouteTable till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVirtualServiceRouteTableResponse | null (null in case of 404 response)
     */
    forVirtualServiceRouteTable(request: serviceRequests.GetVirtualServiceRouteTableRequest, ...targetStates: models.VirtualServiceRouteTable.LifecycleState[]): Promise<serviceResponses.GetVirtualServiceRouteTableResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
