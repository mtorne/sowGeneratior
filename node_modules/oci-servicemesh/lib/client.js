"use strict";
/**
 * Service Mesh API
 * Use the Service Mesh API to manage mesh, virtual service, access policy and other mesh related items.
 * OpenAPI spec version: 20220615
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceMeshClient = exports.ServiceMeshApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const servicemesh_waiter_1 = require("./servicemesh-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var ServiceMeshApiKeys;
(function (ServiceMeshApiKeys) {
})(ServiceMeshApiKeys = exports.ServiceMeshApiKeys || (exports.ServiceMeshApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class ServiceMeshClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "ServiceMesh";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("servicemesh")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("servicemesh");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220615";
        if (this.logger)
            this.logger.info(`ServiceMeshClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ServiceMeshClient.serviceEndpointTemplate, this._region, ServiceMeshClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ServiceMeshClient.serviceEndpointTemplate, this._regionId, ServiceMeshClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ServiceMeshClient.serviceEndpointTemplate, region, ServiceMeshClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ServiceMeshClient.serviceEndpointTemplate, regionId, ServiceMeshClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new ServiceMeshWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new servicemesh_waiter_1.ServiceMeshWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Cancels the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#cancelWorkRequest.");
            const operationName = "cancelWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/WorkRequest/CancelWorkRequest";
            const pathParams = {
                "{workRequestId}": cancelWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": cancelWorkRequestRequest.ifMatch,
                "opc-request-id": cancelWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves an AccessPolicy resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAccessPolicyCompartmentRequest
     * @return ChangeAccessPolicyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ChangeAccessPolicyCompartment.ts.html |here} to see how to use ChangeAccessPolicyCompartment API.
     */
    changeAccessPolicyCompartment(changeAccessPolicyCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#changeAccessPolicyCompartment.");
            const operationName = "changeAccessPolicyCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/AccessPolicy/ChangeAccessPolicyCompartment";
            const pathParams = {
                "{accessPolicyId}": changeAccessPolicyCompartmentRequest.accessPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAccessPolicyCompartmentRequest.ifMatch,
                "opc-request-id": changeAccessPolicyCompartmentRequest.opcRequestId,
                "opc-retry-token": changeAccessPolicyCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAccessPolicyCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/accessPolicies/{accessPolicyId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAccessPolicyCompartmentRequest.changeAccessPolicyCompartmentDetails, "ChangeAccessPolicyCompartmentDetails", model.ChangeAccessPolicyCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a IngressGateway resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeIngressGatewayCompartmentRequest
     * @return ChangeIngressGatewayCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ChangeIngressGatewayCompartment.ts.html |here} to see how to use ChangeIngressGatewayCompartment API.
     */
    changeIngressGatewayCompartment(changeIngressGatewayCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#changeIngressGatewayCompartment.");
            const operationName = "changeIngressGatewayCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGateway/ChangeIngressGatewayCompartment";
            const pathParams = {
                "{ingressGatewayId}": changeIngressGatewayCompartmentRequest.ingressGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeIngressGatewayCompartmentRequest.ifMatch,
                "opc-request-id": changeIngressGatewayCompartmentRequest.opcRequestId,
                "opc-retry-token": changeIngressGatewayCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeIngressGatewayCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGateways/{ingressGatewayId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeIngressGatewayCompartmentRequest.changeIngressGatewayCompartmentDetails, "ChangeIngressGatewayCompartmentDetails", model.ChangeIngressGatewayCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a IngressGatewayRouteTable resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeIngressGatewayRouteTableCompartmentRequest
     * @return ChangeIngressGatewayRouteTableCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ChangeIngressGatewayRouteTableCompartment.ts.html |here} to see how to use ChangeIngressGatewayRouteTableCompartment API.
     */
    changeIngressGatewayRouteTableCompartment(changeIngressGatewayRouteTableCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#changeIngressGatewayRouteTableCompartment.");
            const operationName = "changeIngressGatewayRouteTableCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGatewayRouteTable/ChangeIngressGatewayRouteTableCompartment";
            const pathParams = {
                "{ingressGatewayRouteTableId}": changeIngressGatewayRouteTableCompartmentRequest.ingressGatewayRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeIngressGatewayRouteTableCompartmentRequest.ifMatch,
                "opc-request-id": changeIngressGatewayRouteTableCompartmentRequest.opcRequestId,
                "opc-retry-token": changeIngressGatewayRouteTableCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeIngressGatewayRouteTableCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGatewayRouteTables/{ingressGatewayRouteTableId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeIngressGatewayRouteTableCompartmentRequest.changeIngressGatewayRouteTableCompartmentDetails, "ChangeIngressGatewayRouteTableCompartmentDetails", model.ChangeIngressGatewayRouteTableCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a Mesh resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMeshCompartmentRequest
     * @return ChangeMeshCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ChangeMeshCompartment.ts.html |here} to see how to use ChangeMeshCompartment API.
     */
    changeMeshCompartment(changeMeshCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#changeMeshCompartment.");
            const operationName = "changeMeshCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/Mesh/ChangeMeshCompartment";
            const pathParams = {
                "{meshId}": changeMeshCompartmentRequest.meshId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeMeshCompartmentRequest.ifMatch,
                "opc-request-id": changeMeshCompartmentRequest.opcRequestId,
                "opc-retry-token": changeMeshCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMeshCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/meshes/{meshId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMeshCompartmentRequest.changeMeshCompartmentDetails, "ChangeMeshCompartmentDetails", model.ChangeMeshCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a VirtualDeployment resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeVirtualDeploymentCompartmentRequest
     * @return ChangeVirtualDeploymentCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ChangeVirtualDeploymentCompartment.ts.html |here} to see how to use ChangeVirtualDeploymentCompartment API.
     */
    changeVirtualDeploymentCompartment(changeVirtualDeploymentCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#changeVirtualDeploymentCompartment.");
            const operationName = "changeVirtualDeploymentCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualDeployment/ChangeVirtualDeploymentCompartment";
            const pathParams = {
                "{virtualDeploymentId}": changeVirtualDeploymentCompartmentRequest.virtualDeploymentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeVirtualDeploymentCompartmentRequest.ifMatch,
                "opc-request-id": changeVirtualDeploymentCompartmentRequest.opcRequestId,
                "opc-retry-token": changeVirtualDeploymentCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeVirtualDeploymentCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualDeployments/{virtualDeploymentId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeVirtualDeploymentCompartmentRequest.changeVirtualDeploymentCompartmentDetails, "ChangeVirtualDeploymentCompartmentDetails", model.ChangeVirtualDeploymentCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a VirtualService resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeVirtualServiceCompartmentRequest
     * @return ChangeVirtualServiceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ChangeVirtualServiceCompartment.ts.html |here} to see how to use ChangeVirtualServiceCompartment API.
     */
    changeVirtualServiceCompartment(changeVirtualServiceCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#changeVirtualServiceCompartment.");
            const operationName = "changeVirtualServiceCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualService/ChangeVirtualServiceCompartment";
            const pathParams = {
                "{virtualServiceId}": changeVirtualServiceCompartmentRequest.virtualServiceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeVirtualServiceCompartmentRequest.ifMatch,
                "opc-request-id": changeVirtualServiceCompartmentRequest.opcRequestId,
                "opc-retry-token": changeVirtualServiceCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeVirtualServiceCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServices/{virtualServiceId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeVirtualServiceCompartmentRequest.changeVirtualServiceCompartmentDetails, "ChangeVirtualServiceCompartmentDetails", model.ChangeVirtualServiceCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a VirtualServiceRouteTable resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeVirtualServiceRouteTableCompartmentRequest
     * @return ChangeVirtualServiceRouteTableCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ChangeVirtualServiceRouteTableCompartment.ts.html |here} to see how to use ChangeVirtualServiceRouteTableCompartment API.
     */
    changeVirtualServiceRouteTableCompartment(changeVirtualServiceRouteTableCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#changeVirtualServiceRouteTableCompartment.");
            const operationName = "changeVirtualServiceRouteTableCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualServiceRouteTable/ChangeVirtualServiceRouteTableCompartment";
            const pathParams = {
                "{virtualServiceRouteTableId}": changeVirtualServiceRouteTableCompartmentRequest.virtualServiceRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeVirtualServiceRouteTableCompartmentRequest.ifMatch,
                "opc-request-id": changeVirtualServiceRouteTableCompartmentRequest.opcRequestId,
                "opc-retry-token": changeVirtualServiceRouteTableCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeVirtualServiceRouteTableCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServiceRouteTables/{virtualServiceRouteTableId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeVirtualServiceRouteTableCompartmentRequest.changeVirtualServiceRouteTableCompartmentDetails, "ChangeVirtualServiceRouteTableCompartmentDetails", model.ChangeVirtualServiceRouteTableCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new AccessPolicy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAccessPolicyRequest
     * @return CreateAccessPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/CreateAccessPolicy.ts.html |here} to see how to use CreateAccessPolicy API.
     */
    createAccessPolicy(createAccessPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#createAccessPolicy.");
            const operationName = "createAccessPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/AccessPolicy/CreateAccessPolicy";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createAccessPolicyRequest.opcRetryToken,
                "opc-request-id": createAccessPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAccessPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/accessPolicies",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAccessPolicyRequest.createAccessPolicyDetails, "CreateAccessPolicyDetails", model.CreateAccessPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "accessPolicy",
                    bodyModel: model.AccessPolicy,
                    type: "model.AccessPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new IngressGateway.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateIngressGatewayRequest
     * @return CreateIngressGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/CreateIngressGateway.ts.html |here} to see how to use CreateIngressGateway API.
     */
    createIngressGateway(createIngressGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#createIngressGateway.");
            const operationName = "createIngressGateway";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGateway/CreateIngressGateway";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createIngressGatewayRequest.opcRetryToken,
                "opc-request-id": createIngressGatewayRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createIngressGatewayRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGateways",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createIngressGatewayRequest.createIngressGatewayDetails, "CreateIngressGatewayDetails", model.CreateIngressGatewayDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingressGateway",
                    bodyModel: model.IngressGateway,
                    type: "model.IngressGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new IngressGatewayRouteTable.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateIngressGatewayRouteTableRequest
     * @return CreateIngressGatewayRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/CreateIngressGatewayRouteTable.ts.html |here} to see how to use CreateIngressGatewayRouteTable API.
     */
    createIngressGatewayRouteTable(createIngressGatewayRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#createIngressGatewayRouteTable.");
            const operationName = "createIngressGatewayRouteTable";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGatewayRouteTable/CreateIngressGatewayRouteTable";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createIngressGatewayRouteTableRequest.opcRetryToken,
                "opc-request-id": createIngressGatewayRouteTableRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createIngressGatewayRouteTableRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGatewayRouteTables",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createIngressGatewayRouteTableRequest.createIngressGatewayRouteTableDetails, "CreateIngressGatewayRouteTableDetails", model.CreateIngressGatewayRouteTableDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingressGatewayRouteTable",
                    bodyModel: model.IngressGatewayRouteTable,
                    type: "model.IngressGatewayRouteTable",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Mesh.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMeshRequest
     * @return CreateMeshResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/CreateMesh.ts.html |here} to see how to use CreateMesh API.
     */
    createMesh(createMeshRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#createMesh.");
            const operationName = "createMesh";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/Mesh/CreateMesh";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMeshRequest.opcRetryToken,
                "opc-request-id": createMeshRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMeshRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/meshes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMeshRequest.createMeshDetails, "CreateMeshDetails", model.CreateMeshDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mesh",
                    bodyModel: model.Mesh,
                    type: "model.Mesh",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new VirtualDeployment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateVirtualDeploymentRequest
     * @return CreateVirtualDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/CreateVirtualDeployment.ts.html |here} to see how to use CreateVirtualDeployment API.
     */
    createVirtualDeployment(createVirtualDeploymentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#createVirtualDeployment.");
            const operationName = "createVirtualDeployment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualDeployment/CreateVirtualDeployment";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createVirtualDeploymentRequest.opcRetryToken,
                "opc-request-id": createVirtualDeploymentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createVirtualDeploymentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualDeployments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVirtualDeploymentRequest.createVirtualDeploymentDetails, "CreateVirtualDeploymentDetails", model.CreateVirtualDeploymentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualDeployment",
                    bodyModel: model.VirtualDeployment,
                    type: "model.VirtualDeployment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new VirtualService.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateVirtualServiceRequest
     * @return CreateVirtualServiceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/CreateVirtualService.ts.html |here} to see how to use CreateVirtualService API.
     */
    createVirtualService(createVirtualServiceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#createVirtualService.");
            const operationName = "createVirtualService";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualService/CreateVirtualService";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createVirtualServiceRequest.opcRetryToken,
                "opc-request-id": createVirtualServiceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createVirtualServiceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServices",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVirtualServiceRequest.createVirtualServiceDetails, "CreateVirtualServiceDetails", model.CreateVirtualServiceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualService",
                    bodyModel: model.VirtualService,
                    type: "model.VirtualService",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new VirtualServiceRouteTable.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateVirtualServiceRouteTableRequest
     * @return CreateVirtualServiceRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/CreateVirtualServiceRouteTable.ts.html |here} to see how to use CreateVirtualServiceRouteTable API.
     */
    createVirtualServiceRouteTable(createVirtualServiceRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#createVirtualServiceRouteTable.");
            const operationName = "createVirtualServiceRouteTable";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualServiceRouteTable/CreateVirtualServiceRouteTable";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createVirtualServiceRouteTableRequest.opcRetryToken,
                "opc-request-id": createVirtualServiceRouteTableRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createVirtualServiceRouteTableRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServiceRouteTables",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVirtualServiceRouteTableRequest.createVirtualServiceRouteTableDetails, "CreateVirtualServiceRouteTableDetails", model.CreateVirtualServiceRouteTableDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualServiceRouteTable",
                    bodyModel: model.VirtualServiceRouteTable,
                    type: "model.VirtualServiceRouteTable",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an AccessPolicy resource by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAccessPolicyRequest
     * @return DeleteAccessPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/DeleteAccessPolicy.ts.html |here} to see how to use DeleteAccessPolicy API.
     */
    deleteAccessPolicy(deleteAccessPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#deleteAccessPolicy.");
            const operationName = "deleteAccessPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/AccessPolicy/DeleteAccessPolicy";
            const pathParams = {
                "{accessPolicyId}": deleteAccessPolicyRequest.accessPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAccessPolicyRequest.ifMatch,
                "opc-request-id": deleteAccessPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAccessPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/accessPolicies/{accessPolicyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an IngressGateway resource by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteIngressGatewayRequest
     * @return DeleteIngressGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/DeleteIngressGateway.ts.html |here} to see how to use DeleteIngressGateway API.
     */
    deleteIngressGateway(deleteIngressGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#deleteIngressGateway.");
            const operationName = "deleteIngressGateway";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGateway/DeleteIngressGateway";
            const pathParams = {
                "{ingressGatewayId}": deleteIngressGatewayRequest.ingressGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteIngressGatewayRequest.ifMatch,
                "opc-request-id": deleteIngressGatewayRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteIngressGatewayRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGateways/{ingressGatewayId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a IngressGatewayRouteTable resource by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteIngressGatewayRouteTableRequest
     * @return DeleteIngressGatewayRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/DeleteIngressGatewayRouteTable.ts.html |here} to see how to use DeleteIngressGatewayRouteTable API.
     */
    deleteIngressGatewayRouteTable(deleteIngressGatewayRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#deleteIngressGatewayRouteTable.");
            const operationName = "deleteIngressGatewayRouteTable";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGatewayRouteTable/DeleteIngressGatewayRouteTable";
            const pathParams = {
                "{ingressGatewayRouteTableId}": deleteIngressGatewayRouteTableRequest.ingressGatewayRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteIngressGatewayRouteTableRequest.ifMatch,
                "opc-request-id": deleteIngressGatewayRouteTableRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteIngressGatewayRouteTableRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGatewayRouteTables/{ingressGatewayRouteTableId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a Mesh resource by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMeshRequest
     * @return DeleteMeshResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/DeleteMesh.ts.html |here} to see how to use DeleteMesh API.
     */
    deleteMesh(deleteMeshRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#deleteMesh.");
            const operationName = "deleteMesh";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/Mesh/DeleteMesh";
            const pathParams = {
                "{meshId}": deleteMeshRequest.meshId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMeshRequest.ifMatch,
                "opc-request-id": deleteMeshRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMeshRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/meshes/{meshId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a VirtualDeployment resource by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteVirtualDeploymentRequest
     * @return DeleteVirtualDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/DeleteVirtualDeployment.ts.html |here} to see how to use DeleteVirtualDeployment API.
     */
    deleteVirtualDeployment(deleteVirtualDeploymentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#deleteVirtualDeployment.");
            const operationName = "deleteVirtualDeployment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualDeployment/DeleteVirtualDeployment";
            const pathParams = {
                "{virtualDeploymentId}": deleteVirtualDeploymentRequest.virtualDeploymentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVirtualDeploymentRequest.ifMatch,
                "opc-request-id": deleteVirtualDeploymentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteVirtualDeploymentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualDeployments/{virtualDeploymentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a VirtualService resource by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteVirtualServiceRequest
     * @return DeleteVirtualServiceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/DeleteVirtualService.ts.html |here} to see how to use DeleteVirtualService API.
     */
    deleteVirtualService(deleteVirtualServiceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#deleteVirtualService.");
            const operationName = "deleteVirtualService";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualService/DeleteVirtualService";
            const pathParams = {
                "{virtualServiceId}": deleteVirtualServiceRequest.virtualServiceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVirtualServiceRequest.ifMatch,
                "opc-request-id": deleteVirtualServiceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteVirtualServiceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServices/{virtualServiceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a VirtualServiceRouteTable resource by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteVirtualServiceRouteTableRequest
     * @return DeleteVirtualServiceRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/DeleteVirtualServiceRouteTable.ts.html |here} to see how to use DeleteVirtualServiceRouteTable API.
     */
    deleteVirtualServiceRouteTable(deleteVirtualServiceRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#deleteVirtualServiceRouteTable.");
            const operationName = "deleteVirtualServiceRouteTable";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualServiceRouteTable/DeleteVirtualServiceRouteTable";
            const pathParams = {
                "{virtualServiceRouteTableId}": deleteVirtualServiceRouteTableRequest.virtualServiceRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVirtualServiceRouteTableRequest.ifMatch,
                "opc-request-id": deleteVirtualServiceRouteTableRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteVirtualServiceRouteTableRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServiceRouteTables/{virtualServiceRouteTableId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get an AccessPolicy by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAccessPolicyRequest
     * @return GetAccessPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/GetAccessPolicy.ts.html |here} to see how to use GetAccessPolicy API.
     */
    getAccessPolicy(getAccessPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#getAccessPolicy.");
            const operationName = "getAccessPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/AccessPolicy/GetAccessPolicy";
            const pathParams = {
                "{accessPolicyId}": getAccessPolicyRequest.accessPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAccessPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAccessPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/accessPolicies/{accessPolicyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "accessPolicy",
                    bodyModel: model.AccessPolicy,
                    type: "model.AccessPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets an IngressGateway by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetIngressGatewayRequest
     * @return GetIngressGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/GetIngressGateway.ts.html |here} to see how to use GetIngressGateway API.
     */
    getIngressGateway(getIngressGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#getIngressGateway.");
            const operationName = "getIngressGateway";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGateway/GetIngressGateway";
            const pathParams = {
                "{ingressGatewayId}": getIngressGatewayRequest.ingressGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getIngressGatewayRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getIngressGatewayRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGateways/{ingressGatewayId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingressGateway",
                    bodyModel: model.IngressGateway,
                    type: "model.IngressGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a IngressGatewayRouteTable by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetIngressGatewayRouteTableRequest
     * @return GetIngressGatewayRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/GetIngressGatewayRouteTable.ts.html |here} to see how to use GetIngressGatewayRouteTable API.
     */
    getIngressGatewayRouteTable(getIngressGatewayRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#getIngressGatewayRouteTable.");
            const operationName = "getIngressGatewayRouteTable";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGatewayRouteTable/GetIngressGatewayRouteTable";
            const pathParams = {
                "{ingressGatewayRouteTableId}": getIngressGatewayRouteTableRequest.ingressGatewayRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getIngressGatewayRouteTableRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getIngressGatewayRouteTableRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGatewayRouteTables/{ingressGatewayRouteTableId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingressGatewayRouteTable",
                    bodyModel: model.IngressGatewayRouteTable,
                    type: "model.IngressGatewayRouteTable",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a Mesh by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMeshRequest
     * @return GetMeshResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/GetMesh.ts.html |here} to see how to use GetMesh API.
     */
    getMesh(getMeshRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#getMesh.");
            const operationName = "getMesh";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/Mesh/GetMesh";
            const pathParams = {
                "{meshId}": getMeshRequest.meshId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMeshRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMeshRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/meshes/{meshId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mesh",
                    bodyModel: model.Mesh,
                    type: "model.Mesh",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the attributes of the Proxy such as proxy image version.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetProxyDetailsRequest
     * @return GetProxyDetailsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/GetProxyDetails.ts.html |here} to see how to use GetProxyDetails API.
     */
    getProxyDetails(getProxyDetailsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#getProxyDetails.");
            const operationName = "getProxyDetails";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/ProxyDetails/GetProxyDetails";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getProxyDetailsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getProxyDetailsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/proxyDetails",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "proxyDetails",
                    bodyModel: model.ProxyDetails,
                    type: "model.ProxyDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a VirtualDeployment by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetVirtualDeploymentRequest
     * @return GetVirtualDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/GetVirtualDeployment.ts.html |here} to see how to use GetVirtualDeployment API.
     */
    getVirtualDeployment(getVirtualDeploymentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#getVirtualDeployment.");
            const operationName = "getVirtualDeployment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualDeployment/GetVirtualDeployment";
            const pathParams = {
                "{virtualDeploymentId}": getVirtualDeploymentRequest.virtualDeploymentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getVirtualDeploymentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getVirtualDeploymentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualDeployments/{virtualDeploymentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualDeployment",
                    bodyModel: model.VirtualDeployment,
                    type: "model.VirtualDeployment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a VirtualService by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetVirtualServiceRequest
     * @return GetVirtualServiceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/GetVirtualService.ts.html |here} to see how to use GetVirtualService API.
     */
    getVirtualService(getVirtualServiceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#getVirtualService.");
            const operationName = "getVirtualService";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualService/GetVirtualService";
            const pathParams = {
                "{virtualServiceId}": getVirtualServiceRequest.virtualServiceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getVirtualServiceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getVirtualServiceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServices/{virtualServiceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualService",
                    bodyModel: model.VirtualService,
                    type: "model.VirtualService",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a VirtualServiceRouteTable by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetVirtualServiceRouteTableRequest
     * @return GetVirtualServiceRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/GetVirtualServiceRouteTable.ts.html |here} to see how to use GetVirtualServiceRouteTable API.
     */
    getVirtualServiceRouteTable(getVirtualServiceRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#getVirtualServiceRouteTable.");
            const operationName = "getVirtualServiceRouteTable";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualServiceRouteTable/GetVirtualServiceRouteTable";
            const pathParams = {
                "{virtualServiceRouteTableId}": getVirtualServiceRouteTableRequest.virtualServiceRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getVirtualServiceRouteTableRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getVirtualServiceRouteTableRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServiceRouteTables/{virtualServiceRouteTableId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualServiceRouteTable",
                    bodyModel: model.VirtualServiceRouteTable,
                    type: "model.VirtualServiceRouteTable",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/WorkRequest/GetWorkRequest";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of AccessPolicy objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAccessPoliciesRequest
     * @return ListAccessPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ListAccessPolicies.ts.html |here} to see how to use ListAccessPolicies API.
     */
    listAccessPolicies(listAccessPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#listAccessPolicies.");
            const operationName = "listAccessPolicies";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/AccessPolicy/ListAccessPolicies";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAccessPoliciesRequest.compartmentId,
                "name": listAccessPoliciesRequest.name,
                "limit": listAccessPoliciesRequest.limit,
                "page": listAccessPoliciesRequest.page,
                "sortOrder": listAccessPoliciesRequest.sortOrder,
                "sortBy": listAccessPoliciesRequest.sortBy,
                "meshId": listAccessPoliciesRequest.meshId,
                "id": listAccessPoliciesRequest.id,
                "lifecycleState": listAccessPoliciesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAccessPoliciesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAccessPoliciesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/accessPolicies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "accessPolicyCollection",
                    bodyModel: model.AccessPolicyCollection,
                    type: "model.AccessPolicyCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of IngressGatewayRouteTable objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListIngressGatewayRouteTablesRequest
     * @return ListIngressGatewayRouteTablesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ListIngressGatewayRouteTables.ts.html |here} to see how to use ListIngressGatewayRouteTables API.
     */
    listIngressGatewayRouteTables(listIngressGatewayRouteTablesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#listIngressGatewayRouteTables.");
            const operationName = "listIngressGatewayRouteTables";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGatewayRouteTable/ListIngressGatewayRouteTables";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listIngressGatewayRouteTablesRequest.compartmentId,
                "name": listIngressGatewayRouteTablesRequest.name,
                "limit": listIngressGatewayRouteTablesRequest.limit,
                "page": listIngressGatewayRouteTablesRequest.page,
                "sortOrder": listIngressGatewayRouteTablesRequest.sortOrder,
                "sortBy": listIngressGatewayRouteTablesRequest.sortBy,
                "ingressGatewayId": listIngressGatewayRouteTablesRequest.ingressGatewayId,
                "id": listIngressGatewayRouteTablesRequest.id,
                "lifecycleState": listIngressGatewayRouteTablesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listIngressGatewayRouteTablesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listIngressGatewayRouteTablesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGatewayRouteTables",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingressGatewayRouteTableCollection",
                    bodyModel: model.IngressGatewayRouteTableCollection,
                    type: "model.IngressGatewayRouteTableCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of IngressGateway objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListIngressGatewaysRequest
     * @return ListIngressGatewaysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ListIngressGateways.ts.html |here} to see how to use ListIngressGateways API.
     */
    listIngressGateways(listIngressGatewaysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#listIngressGateways.");
            const operationName = "listIngressGateways";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGateway/ListIngressGateways";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listIngressGatewaysRequest.compartmentId,
                "name": listIngressGatewaysRequest.name,
                "limit": listIngressGatewaysRequest.limit,
                "page": listIngressGatewaysRequest.page,
                "sortOrder": listIngressGatewaysRequest.sortOrder,
                "sortBy": listIngressGatewaysRequest.sortBy,
                "meshId": listIngressGatewaysRequest.meshId,
                "id": listIngressGatewaysRequest.id,
                "lifecycleState": listIngressGatewaysRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listIngressGatewaysRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listIngressGatewaysRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGateways",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingressGatewayCollection",
                    bodyModel: model.IngressGatewayCollection,
                    type: "model.IngressGatewayCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Mesh objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMeshesRequest
     * @return ListMeshesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ListMeshes.ts.html |here} to see how to use ListMeshes API.
     */
    listMeshes(listMeshesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#listMeshes.");
            const operationName = "listMeshes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/Mesh/ListMeshes";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMeshesRequest.compartmentId,
                "displayName": listMeshesRequest.displayName,
                "limit": listMeshesRequest.limit,
                "page": listMeshesRequest.page,
                "sortOrder": listMeshesRequest.sortOrder,
                "sortBy": listMeshesRequest.sortBy,
                "lifecycleState": listMeshesRequest.lifecycleState,
                "id": listMeshesRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMeshesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMeshesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/meshes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "meshCollection",
                    bodyModel: model.MeshCollection,
                    type: "model.MeshCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of VirtualDeployments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListVirtualDeploymentsRequest
     * @return ListVirtualDeploymentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ListVirtualDeployments.ts.html |here} to see how to use ListVirtualDeployments API.
     */
    listVirtualDeployments(listVirtualDeploymentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#listVirtualDeployments.");
            const operationName = "listVirtualDeployments";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualDeployment/ListVirtualDeployments";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVirtualDeploymentsRequest.compartmentId,
                "name": listVirtualDeploymentsRequest.name,
                "limit": listVirtualDeploymentsRequest.limit,
                "page": listVirtualDeploymentsRequest.page,
                "sortOrder": listVirtualDeploymentsRequest.sortOrder,
                "sortBy": listVirtualDeploymentsRequest.sortBy,
                "virtualServiceId": listVirtualDeploymentsRequest.virtualServiceId,
                "id": listVirtualDeploymentsRequest.id,
                "lifecycleState": listVirtualDeploymentsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listVirtualDeploymentsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listVirtualDeploymentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualDeployments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualDeploymentCollection",
                    bodyModel: model.VirtualDeploymentCollection,
                    type: "model.VirtualDeploymentCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of VirtualServiceRouteTable objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListVirtualServiceRouteTablesRequest
     * @return ListVirtualServiceRouteTablesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ListVirtualServiceRouteTables.ts.html |here} to see how to use ListVirtualServiceRouteTables API.
     */
    listVirtualServiceRouteTables(listVirtualServiceRouteTablesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#listVirtualServiceRouteTables.");
            const operationName = "listVirtualServiceRouteTables";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualServiceRouteTable/ListVirtualServiceRouteTables";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVirtualServiceRouteTablesRequest.compartmentId,
                "name": listVirtualServiceRouteTablesRequest.name,
                "limit": listVirtualServiceRouteTablesRequest.limit,
                "page": listVirtualServiceRouteTablesRequest.page,
                "sortOrder": listVirtualServiceRouteTablesRequest.sortOrder,
                "sortBy": listVirtualServiceRouteTablesRequest.sortBy,
                "virtualServiceId": listVirtualServiceRouteTablesRequest.virtualServiceId,
                "id": listVirtualServiceRouteTablesRequest.id,
                "lifecycleState": listVirtualServiceRouteTablesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listVirtualServiceRouteTablesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listVirtualServiceRouteTablesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServiceRouteTables",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualServiceRouteTableCollection",
                    bodyModel: model.VirtualServiceRouteTableCollection,
                    type: "model.VirtualServiceRouteTableCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of VirtualService objects.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListVirtualServicesRequest
     * @return ListVirtualServicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ListVirtualServices.ts.html |here} to see how to use ListVirtualServices API.
     */
    listVirtualServices(listVirtualServicesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#listVirtualServices.");
            const operationName = "listVirtualServices";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualService/ListVirtualServices";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVirtualServicesRequest.compartmentId,
                "name": listVirtualServicesRequest.name,
                "limit": listVirtualServicesRequest.limit,
                "page": listVirtualServicesRequest.page,
                "sortOrder": listVirtualServicesRequest.sortOrder,
                "sortBy": listVirtualServicesRequest.sortBy,
                "meshId": listVirtualServicesRequest.meshId,
                "id": listVirtualServicesRequest.id,
                "lifecycleState": listVirtualServicesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listVirtualServicesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listVirtualServicesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServices",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualServiceCollection",
                    bodyModel: model.VirtualServiceCollection,
                    type: "model.VirtualServiceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/WorkRequest/ListWorkRequestErrors";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit,
                "sortOrder": listWorkRequestErrorsRequest.sortOrder,
                "sortBy": listWorkRequestErrorsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: model.WorkRequestErrorCollection,
                    type: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/WorkRequest/ListWorkRequestLogs";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit,
                "sortOrder": listWorkRequestLogsRequest.sortOrder,
                "sortBy": listWorkRequestLogsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestLogEntryCollection",
                    bodyModel: model.WorkRequestLogEntryCollection,
                    type: "model.WorkRequestLogEntryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/WorkRequest/ListWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "workRequestId": listWorkRequestsRequest.workRequestId,
                "resourceId": listWorkRequestsRequest.resourceId,
                "operationStatus": listWorkRequestsRequest.operationStatus,
                "sortOrder": listWorkRequestsRequest.sortOrder,
                "sortBy": listWorkRequestsRequest.sortBy,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestCollection",
                    bodyModel: model.WorkRequestCollection,
                    type: "model.WorkRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the AccessPolicy.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAccessPolicyRequest
     * @return UpdateAccessPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/UpdateAccessPolicy.ts.html |here} to see how to use UpdateAccessPolicy API.
     */
    updateAccessPolicy(updateAccessPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#updateAccessPolicy.");
            const operationName = "updateAccessPolicy";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/AccessPolicy/UpdateAccessPolicy";
            const pathParams = {
                "{accessPolicyId}": updateAccessPolicyRequest.accessPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAccessPolicyRequest.ifMatch,
                "opc-retry-token": updateAccessPolicyRequest.opcRetryToken,
                "opc-request-id": updateAccessPolicyRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAccessPolicyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/accessPolicies/{accessPolicyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAccessPolicyRequest.updateAccessPolicyDetails, "UpdateAccessPolicyDetails", model.UpdateAccessPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the IngressGateway.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateIngressGatewayRequest
     * @return UpdateIngressGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/UpdateIngressGateway.ts.html |here} to see how to use UpdateIngressGateway API.
     */
    updateIngressGateway(updateIngressGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#updateIngressGateway.");
            const operationName = "updateIngressGateway";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGateway/UpdateIngressGateway";
            const pathParams = {
                "{ingressGatewayId}": updateIngressGatewayRequest.ingressGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateIngressGatewayRequest.ifMatch,
                "opc-retry-token": updateIngressGatewayRequest.opcRetryToken,
                "opc-request-id": updateIngressGatewayRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateIngressGatewayRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGateways/{ingressGatewayId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateIngressGatewayRequest.updateIngressGatewayDetails, "UpdateIngressGatewayDetails", model.UpdateIngressGatewayDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the IngressGatewayRouteTable.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateIngressGatewayRouteTableRequest
     * @return UpdateIngressGatewayRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/UpdateIngressGatewayRouteTable.ts.html |here} to see how to use UpdateIngressGatewayRouteTable API.
     */
    updateIngressGatewayRouteTable(updateIngressGatewayRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#updateIngressGatewayRouteTable.");
            const operationName = "updateIngressGatewayRouteTable";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/IngressGatewayRouteTable/UpdateIngressGatewayRouteTable";
            const pathParams = {
                "{ingressGatewayRouteTableId}": updateIngressGatewayRouteTableRequest.ingressGatewayRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateIngressGatewayRouteTableRequest.ifMatch,
                "opc-retry-token": updateIngressGatewayRouteTableRequest.opcRetryToken,
                "opc-request-id": updateIngressGatewayRouteTableRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateIngressGatewayRouteTableRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ingressGatewayRouteTables/{ingressGatewayRouteTableId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateIngressGatewayRouteTableRequest.updateIngressGatewayRouteTableDetails, "UpdateIngressGatewayRouteTableDetails", model.UpdateIngressGatewayRouteTableDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the Mesh.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMeshRequest
     * @return UpdateMeshResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/UpdateMesh.ts.html |here} to see how to use UpdateMesh API.
     */
    updateMesh(updateMeshRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#updateMesh.");
            const operationName = "updateMesh";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/Mesh/UpdateMesh";
            const pathParams = {
                "{meshId}": updateMeshRequest.meshId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMeshRequest.ifMatch,
                "opc-retry-token": updateMeshRequest.opcRetryToken,
                "opc-request-id": updateMeshRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMeshRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/meshes/{meshId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMeshRequest.updateMeshDetails, "UpdateMeshDetails", model.UpdateMeshDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the VirtualDeployment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateVirtualDeploymentRequest
     * @return UpdateVirtualDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/UpdateVirtualDeployment.ts.html |here} to see how to use UpdateVirtualDeployment API.
     */
    updateVirtualDeployment(updateVirtualDeploymentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#updateVirtualDeployment.");
            const operationName = "updateVirtualDeployment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualDeployment/UpdateVirtualDeployment";
            const pathParams = {
                "{virtualDeploymentId}": updateVirtualDeploymentRequest.virtualDeploymentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVirtualDeploymentRequest.ifMatch,
                "opc-retry-token": updateVirtualDeploymentRequest.opcRetryToken,
                "opc-request-id": updateVirtualDeploymentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateVirtualDeploymentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualDeployments/{virtualDeploymentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVirtualDeploymentRequest.updateVirtualDeploymentDetails, "UpdateVirtualDeploymentDetails", model.UpdateVirtualDeploymentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the VirtualService.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateVirtualServiceRequest
     * @return UpdateVirtualServiceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/UpdateVirtualService.ts.html |here} to see how to use UpdateVirtualService API.
     */
    updateVirtualService(updateVirtualServiceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#updateVirtualService.");
            const operationName = "updateVirtualService";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualService/UpdateVirtualService";
            const pathParams = {
                "{virtualServiceId}": updateVirtualServiceRequest.virtualServiceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVirtualServiceRequest.ifMatch,
                "opc-retry-token": updateVirtualServiceRequest.opcRetryToken,
                "opc-request-id": updateVirtualServiceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateVirtualServiceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServices/{virtualServiceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVirtualServiceRequest.updateVirtualServiceDetails, "UpdateVirtualServiceDetails", model.UpdateVirtualServiceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the VirtualServiceRouteTable.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateVirtualServiceRouteTableRequest
     * @return UpdateVirtualServiceRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/servicemesh/UpdateVirtualServiceRouteTable.ts.html |here} to see how to use UpdateVirtualServiceRouteTable API.
     */
    updateVirtualServiceRouteTable(updateVirtualServiceRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ServiceMeshClient#updateVirtualServiceRouteTable.");
            const operationName = "updateVirtualServiceRouteTable";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/service-mesh/20220615/VirtualServiceRouteTable/UpdateVirtualServiceRouteTable";
            const pathParams = {
                "{virtualServiceRouteTableId}": updateVirtualServiceRouteTableRequest.virtualServiceRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVirtualServiceRouteTableRequest.ifMatch,
                "opc-retry-token": updateVirtualServiceRouteTableRequest.opcRetryToken,
                "opc-request-id": updateVirtualServiceRouteTableRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateVirtualServiceRouteTableRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualServiceRouteTables/{virtualServiceRouteTableId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVirtualServiceRouteTableRequest.updateVirtualServiceRouteTableDetails, "UpdateVirtualServiceRouteTableDetails", model.UpdateVirtualServiceRouteTableDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ServiceMeshClient = ServiceMeshClient;
ServiceMeshClient.serviceEndpointTemplate = "https://servicemesh.{region}.oci.{secondLevelDomain}";
ServiceMeshClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map