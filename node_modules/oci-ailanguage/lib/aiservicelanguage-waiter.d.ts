/**
 * Language API
 * OCI Language Service solutions can help enterprise customers integrate AI into their products immediately using our proven,
pre-trained and custom models or containers, without a need to set up an house team of AI and ML experts.
This allows enterprises to focus on business drivers and development work rather than AI and ML operations, which shortens the time to market.

 * OpenAPI spec version: 20221001
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { AIServiceLanguageClient } from "./client";
export declare class AIServiceLanguageWaiter {
    private client;
    private readonly config?;
    constructor(client: AIServiceLanguageClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetEndpointResponse | null (null in case of 404 response)
     */
    forEndpoint(request: serviceRequests.GetEndpointRequest, ...targetStates: models.Endpoint.LifecycleState[]): Promise<serviceResponses.GetEndpointResponse | null>;
    /**
     * Waits forJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobResponse | null (null in case of 404 response)
     */
    forJob(request: serviceRequests.GetJobRequest, ...targetStates: models.Job.LifecycleState[]): Promise<serviceResponses.GetJobResponse | null>;
    /**
     * Waits forModel till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetModelResponse | null (null in case of 404 response)
     */
    forModel(request: serviceRequests.GetModelRequest, ...targetStates: models.Model.LifecycleState[]): Promise<serviceResponses.GetModelResponse | null>;
    /**
     * Waits forProject till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetProjectResponse | null (null in case of 404 response)
     */
    forProject(request: serviceRequests.GetProjectRequest, ...targetStates: models.Project.LifecycleState[]): Promise<serviceResponses.GetProjectResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
