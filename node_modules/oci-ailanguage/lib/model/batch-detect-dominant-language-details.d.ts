/**
 * Language API
 * OCI Language Service solutions can help enterprise customers integrate AI into their products immediately using our proven,
pre-trained and custom models or containers, without a need to set up an house team of AI and ML experts.
This allows enterprises to focus on business drivers and development work rather than AI and ML operations, which shortens the time to market.

 * OpenAPI spec version: 20221001
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The documents details for language detect call.
 */
export interface BatchDetectDominantLanguageDetails {
    /**
     * Unique name across user tenancy in a region to identify an endpoint to be used for inferencing.
     */
    "alias"?: string;
    /**
     * Specifies whether to consider or ignore transliteration. For example \"hi, aap kaise ho? sab kuch teek hai? I will call you tomorrow.\" would be detected as English when ignore transliteration=true, Hindi when ignoreTransliteration=false.
     */
    "shouldIgnoreTransliteration"?: boolean;
    /**
     * default value is None.
     * Specifies maximum number of characters to consider for determining the dominant language.
     * If unspecified, then optimum number characters will be considered.
     * If 0 is specified then all the characters are used to determine the language.
     * If the value is greater than 0, then specified number of characters will be considered from the beginning of the text.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "charsToConsider"?: number;
    /**
     * The endpoint which have to be used for inferencing. If endpointId and compartmentId is provided, then inference will be served from custom model which is mapped to this Endpoint.
     */
    "endpointId"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that calls the API, inference will be served from pre trained model
     */
    "compartmentId"?: string;
    /**
     * List of Documents for detect language.
     */
    "documents": Array<model.DominantLanguageDocument>;
}
export declare namespace BatchDetectDominantLanguageDetails {
    function getJsonObj(obj: BatchDetectDominantLanguageDetails): object;
    function getDeserializedJsonObj(obj: BatchDetectDominantLanguageDetails): object;
}
