/**
 * Container Instance API
 * A description of the Container Instance API
 * OpenAPI spec version: 20210415
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
* A container instance to host containers.
* <p>
If you delete a container instance, the record remains visible for a short period
* of time before being permanently removed.
*
*/
export interface ContainerInstance {
    /**
     * An OCID that cannot be changed.
     */
    "id": string;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    "displayName": string;
    /**
     * The OCID of the compartment.
     */
    "compartmentId": string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}.
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}.
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * The availability domain to place the container instance.
     */
    "availabilityDomain": string;
    /**
     * The fault domain to place the container instance.
     */
    "faultDomain"?: string;
    /**
     * The current state of the container instance.
     */
    "lifecycleState": ContainerInstance.LifecycleState;
    /**
     * A message that describes the current state of the container in more detail. Can be used to provide
     * actionable information.
     *
     */
    "lifecycleDetails"?: string;
    /**
     * A volume is a directory with data that is accessible across multiple containers in a
     * container instance.
     *
     */
    "volumes"?: Array<model.ContainerVolume>;
    /**
     * The number of volumes that are attached to the container instance. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "volumeCount"?: number;
    /**
     * The containers on the container instance.
     */
    "containers": Array<model.ContainerInstanceContainer>;
    /**
     * The number of containers on the container instance. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "containerCount": number;
    /**
     * The time the container instance was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    "timeCreated": Date;
    /**
     * The time the container instance was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    "timeUpdated"?: Date;
    /**
     * The shape of the container instance. The shape determines the number of OCPUs, amount of memory, and other resources that are allocated to a container instance.
     */
    "shape": string;
    "shapeConfig": model.ContainerInstanceShapeConfig;
    /**
     * The virtual networks available to the containers in the container instance.
     */
    "vnics": Array<model.ContainerVnic>;
    "dnsConfig"?: model.ContainerDnsConfig;
    /**
     * The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "gracefulShutdownTimeoutInSeconds"?: number;
    /**
     * The image pulls secrets so you can access private registry to pull container images.
     */
    "imagePullSecrets"?: Array<model.ImagePullSecret>;
    /**
     * The container restart policy is applied for all containers in container instance.
     */
    "containerRestartPolicy": ContainerInstance.ContainerRestartPolicy;
}
export declare namespace ContainerInstance {
    enum LifecycleState {
        Creating = "CREATING",
        Updating = "UPDATING",
        Active = "ACTIVE",
        Inactive = "INACTIVE",
        Deleting = "DELETING",
        Deleted = "DELETED",
        Failed = "FAILED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum ContainerRestartPolicy {
        Always = "ALWAYS",
        Never = "NEVER",
        OnFailure = "ON_FAILURE",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: ContainerInstance): object;
    function getDeserializedJsonObj(obj: ContainerInstance): object;
}
