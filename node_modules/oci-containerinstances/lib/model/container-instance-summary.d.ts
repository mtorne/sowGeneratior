/**
 * Container Instance API
 * A description of the Container Instance API
 * OpenAPI spec version: 20210415
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * A set of details about a single container instance returned by list APIs.
 *
 */
export interface ContainerInstanceSummary {
    /**
     * OCID that cannot be changed.
     */
    "id": string;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    "displayName": string;
    /**
     * The OCID of the compartment to create the container instance in.
     */
    "compartmentId": string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}.
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}.
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * The availability domain where the container instance runs.
     */
    "availabilityDomain": string;
    /**
     * The fault domain where the container instance runs.
     */
    "faultDomain"?: string;
    /**
     * The current state of the container instance.
     */
    "lifecycleState": string;
    /**
     * A message that describes the current state of the container instance in more detail. Can be used to provide
     * actionable information.
     *
     */
    "lifecycleDetails"?: string;
    /**
     * The time the container instance was created, in the format defined by RFC3339.
     */
    "timeCreated": Date;
    /**
     * The time the container instance was updated, in the format defined by RFC3339.
     */
    "timeUpdated"?: Date;
    /**
     * The shape of the container instance. The shape determines the resources available to the container instance.
     */
    "shape": string;
    "shapeConfig": model.ContainerInstanceShapeConfig;
    /**
     * The number of containers in the container instance. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "containerCount": number;
    /**
     * The amount of time that processes in a container have to gracefully end when the container must be stopped. For example, when you delete a container instance. After the timeout is reached, the processes are sent a signal to be deleted. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "gracefulShutdownTimeoutInSeconds"?: number;
    /**
     * The number of volumes that are attached to the container instance. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "volumeCount"?: number;
    /**
     * Container Restart Policy
     */
    "containerRestartPolicy": string;
}
export declare namespace ContainerInstanceSummary {
    function getJsonObj(obj: ContainerInstanceSummary): object;
    function getDeserializedJsonObj(obj: ContainerInstanceSummary): object;
}
