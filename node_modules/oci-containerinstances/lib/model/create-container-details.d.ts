/**
 * Container Instance API
 * A description of the Container Instance API
 * OpenAPI spec version: 20210415
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
* Information to create a new container within a container instance.
* <p>
The container created by this call contains both the tags specified
* in this object and any tags specified in the parent container instance.
* <p>
The container is created in the same compartment, availability domain,
* and fault domain as its container instance.
*
*/
export interface CreateContainerDetails {
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     * If you don't provide a name, a name is generated automatically.
     *
     */
    "displayName"?: string;
    /**
      * A URL identifying the image that the container runs in, such as docker.io/library/busybox:latest. If you do not provide a tag, the tag will default to latest.
  * <p>
  If no registry is provided, will default the registry to public docker hub {@code docker.io/library}.
  * <p>
  The registry used for container image must be reachable over the Container Instance's VNIC.
  *
      */
    "imageUrl": string;
    /**
     * An optional command that overrides the ENTRYPOINT process.
     * If you do not provide a value, the existing ENTRYPOINT process defined in the image is used.
     *
     */
    "command"?: Array<string>;
    /**
      * A list of string arguments for a container's ENTRYPOINT process.
  * <p>
  Many containers use an ENTRYPOINT process pointing to a shell
  * (/bin/bash). For those containers, this argument list
  * specifies the main command in the container process.
  * <p>
  The total size of all arguments combined must be 64 KB or smaller.
  *
      */
    "arguments"?: Array<string>;
    /**
     * The working directory within the container's filesystem for
     * the container process. If not specified, the default
     * working directory from the image is used.
     *
     */
    "workingDirectory"?: string;
    /**
      * A map of additional environment variables to set in the environment of the container's
  * ENTRYPOINT process. These variables are in addition to any variables already defined
  * in the container's image.
  * <p>
  The total size of all environment variables combined, name and values, must be 64 KB or smaller.
  *
      */
    "environmentVariables"?: {
        [key: string]: string;
    };
    /**
     * List of the volume mounts.
     *
     */
    "volumeMounts"?: Array<model.CreateVolumeMountDetails>;
    /**
      * Determines if the container will have access to the container instance resource principal.
  * <p>
  This method utilizes resource principal version 2.2. For information on how to use the exposed resource principal elements, see
  * https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal.
  *
      */
    "isResourcePrincipalDisabled"?: boolean;
    "resourceConfig"?: model.CreateContainerResourceConfigDetails;
    /**
     * list of container health checks to check container status and take appropriate action if container status is failed.
     * There are two types of health checks that we currently support HTTP and TCP.
     *
     */
    "healthChecks"?: Array<model.CreateContainerHealthCheckDetails>;
    "securityContext"?: model.CreateLinuxSecurityContextDetails;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}.
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace CreateContainerDetails {
    function getJsonObj(obj: CreateContainerDetails): object;
    function getDeserializedJsonObj(obj: CreateContainerDetails): object;
}
