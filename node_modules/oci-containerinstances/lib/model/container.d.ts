/**
 * Container Instance API
 * A description of the Container Instance API
 * OpenAPI spec version: 20210415
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
* A single container on a container instance.
* <p>
If you delete a container, the record remains visible for a short period
* of time before being permanently removed.
*
*/
export interface Container {
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container.
     */
    "id": string;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    "displayName": string;
    /**
     * The OCID of the compartment that contains the container.
     */
    "compartmentId": string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}.
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}.
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * The availability domain where the container instance that hosts the container runs.
     */
    "availabilityDomain": string;
    /**
     * The fault domain of the container instance that hosts the container runs.
     */
    "faultDomain"?: string;
    /**
     * The current state of the container.
     */
    "lifecycleState": Container.LifecycleState;
    /**
     * A message that describes the current state of the container in more detail. Can be used to provide
     * actionable information.
     *
     */
    "lifecycleDetails"?: string;
    /**
     * The exit code of the container process when it stopped running. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "exitCode"?: number;
    /**
     * The time when the container last deleted (terminated), in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    "timeTerminated"?: Date;
    /**
     * The time the container was created, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    "timeCreated": Date;
    /**
     * The time the container was updated, in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    "timeUpdated"?: Date;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container instance that the container is running on.
     */
    "containerInstanceId": string;
    /**
      * The container image information. Currently only supports public Docker registry.
  * <p>
  You can provide either the image name (containerImage), image name with version (containerImagev1), or complete Docker image URL
  * {@code docker.io/library/containerImage:latest}.
  * <p>
  If you do not provide a registry, the registry defaults to public Docker hub {@code docker.io/library}.
  * The registry used for the container image must be reachable over the VNIC of the container instance.
  *
      */
    "imageUrl": string;
    /**
     * This command overrides ENTRYPOINT process of the container.
     * If you do not specify this command, the existing ENTRYPOINT process defined in the image is the default.
     *
     */
    "command"?: Array<string>;
    /**
      * A list of string arguments for the ENTRYPOINT process of the container.
  * <p>
  Many containers use an ENTRYPOINT process pointing to a shell
  * {@code /bin/bash}. For those containers, you can use the argument list to specify the main command in the container process.
  *
      */
    "arguments"?: Array<string>;
    /**
     * The working directory within the container's filesystem for
     * the container process. If not specified, the default
     * working directory from the image is used.
     *
     */
    "workingDirectory"?: string;
    /**
     * A map of additional environment variables to set in the environment of the
     * ENTRYPOINT process of the container. These variables are in addition to any variables already defined
     * in the container's image.
     *
     */
    "environmentVariables"?: {
        [key: string]: string;
    };
    /**
     * List of the volume mounts.
     *
     */
    "volumeMounts"?: Array<model.VolumeMount>;
    /**
     * List of container health checks
     */
    "healthChecks"?: Array<model.ContainerHealthCheck>;
    /**
      * Determines if the container will have access to the container instance resource principal.
  * <p>
  This method utilizes resource principal version 2.2. For more information on how to use the exposed resource principal elements, see
  * https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal.
  *
      */
    "isResourcePrincipalDisabled"?: boolean;
    "resourceConfig"?: model.ContainerResourceConfig;
    /**
     * The number of container restart attempts. Depending on the restart policy, a restart might be attempted after a health check failure or a container exit. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "containerRestartAttemptCount"?: number;
    "securityContext"?: model.LinuxSecurityContext;
}
export declare namespace Container {
    enum LifecycleState {
        Creating = "CREATING",
        Updating = "UPDATING",
        Active = "ACTIVE",
        Inactive = "INACTIVE",
        Deleting = "DELETING",
        Deleted = "DELETED",
        Failed = "FAILED",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: Container): object;
    function getDeserializedJsonObj(obj: Container): object;
}
