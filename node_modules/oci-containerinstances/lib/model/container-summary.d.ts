/**
 * Container Instance API
 * A description of the Container Instance API
 * OpenAPI spec version: 20210415
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Summary information about a container.
 *
 */
export interface ContainerSummary {
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container.
     */
    "id": string;
    /**
     * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
     */
    "displayName": string;
    /**
     * The compartment [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     */
    "compartmentId": string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}.
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}.
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * The availability domain where the container instance that hosts this container runs.
     */
    "availabilityDomain": string;
    /**
     * The fault domain where the container instance that hosts the container runs.
     */
    "faultDomain"?: string;
    /**
     * The current state of the container.
     */
    "lifecycleState": string;
    /**
     * A message that describes the current state of the container in more detail. Can be used to provide
     * actionable information.
     *
     */
    "lifecycleDetails"?: string;
    /**
     * The time the the container was created in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    "timeCreated": Date;
    /**
     * The time the container was updated in the format defined by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
     */
    "timeUpdated"?: Date;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the container instance on which the container is running.
     */
    "containerInstanceId": string;
    "resourceConfig"?: model.ContainerResourceConfig;
    /**
      * A URL identifying the image that the container runs in, such as docker.io/library/busybox:latest. If you do not provide a tag, the tag will default to latest.
  * <p>
  If no registry is provided, will default the registry to public docker hub {@code docker.io/library}.
  * The registry used for container image must be reachable over the Container Instance's VNIC.
  *
      */
    "imageUrl": string;
    /**
      * Determines whether the container will have access to the container instance resource principal.
  * <p>
  This method utilizes resource principal version 2.2. For information on how to use the exposed resource principal elements, see
  * https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdk_authentication_methods.htm#sdk_authentication_methods_resource_principal.
  *
      */
    "isResourcePrincipalDisabled"?: boolean;
    "securityContext"?: model.LinuxSecurityContext;
}
export declare namespace ContainerSummary {
    function getJsonObj(obj: ContainerSummary): object;
    function getDeserializedJsonObj(obj: ContainerSummary): object;
}
