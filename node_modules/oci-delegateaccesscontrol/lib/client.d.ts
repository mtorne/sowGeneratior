/**
 * Oracle Delegate Access Control API
 * Oracle Delegate Access Control allows ExaCC and ExaCS customers to delegate management of their Exadata resources operators outside their tenancies.
With Delegate Access Control, Support Providers can deliver managed services using comprehensive and robust tooling built on the OCI platform.
Customers maintain control over who has access to the delegated resources in their tenancy and what actions can be taken.
Enterprises managing resources across multiple tenants can use Delegate Access Control to streamline management tasks.
Using logging service, customers can view a near real-time audit report of all actions performed by a Service Provider operator.

 * OpenAPI spec version: 20230801
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { DelegateAccessControlWaiter } from "./delegateaccesscontrol-waiter";
import { WorkRequestWaiter } from "./workrequest-waiter";
declare const Breaker: any;
export declare enum DelegateAccessControlApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DelegateAccessControlClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DelegateAccessControlWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DelegateAccessControlWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DelegateAccessControlWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DelegateAccessControlWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Approves a Delegated Resource Access Request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ApproveDelegatedResourceAccessRequestRequest
     * @return ApproveDelegatedResourceAccessRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ApproveDelegatedResourceAccessRequest.ts.html |here} to see how to use ApproveDelegatedResourceAccessRequest API.
     */
    approveDelegatedResourceAccessRequest(approveDelegatedResourceAccessRequestRequest: requests.ApproveDelegatedResourceAccessRequestRequest): Promise<responses.ApproveDelegatedResourceAccessRequestResponse>;
    /**
     * Moves the Delegation Control resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDelegationControlCompartmentRequest
     * @return ChangeDelegationControlCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ChangeDelegationControlCompartment.ts.html |here} to see how to use ChangeDelegationControlCompartment API.
     */
    changeDelegationControlCompartment(changeDelegationControlCompartmentRequest: requests.ChangeDelegationControlCompartmentRequest): Promise<responses.ChangeDelegationControlCompartmentResponse>;
    /**
     * Moves the Delegation Subscription resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDelegationSubscriptionCompartmentRequest
     * @return ChangeDelegationSubscriptionCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ChangeDelegationSubscriptionCompartment.ts.html |here} to see how to use ChangeDelegationSubscriptionCompartment API.
     */
    changeDelegationSubscriptionCompartment(changeDelegationSubscriptionCompartmentRequest: requests.ChangeDelegationSubscriptionCompartmentRequest): Promise<responses.ChangeDelegationSubscriptionCompartmentResponse>;
    /**
     * Creates a Delegation Control.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDelegationControlRequest
     * @return CreateDelegationControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/CreateDelegationControl.ts.html |here} to see how to use CreateDelegationControl API.
     */
    createDelegationControl(createDelegationControlRequest: requests.CreateDelegationControlRequest): Promise<responses.CreateDelegationControlResponse>;
    /**
     * Creates Delegation Subscription in Delegation Control.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDelegationSubscriptionRequest
     * @return CreateDelegationSubscriptionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/CreateDelegationSubscription.ts.html |here} to see how to use CreateDelegationSubscription API.
     */
    createDelegationSubscription(createDelegationSubscriptionRequest: requests.CreateDelegationSubscriptionRequest): Promise<responses.CreateDelegationSubscriptionResponse>;
    /**
     * Deletes a Delegation Control. You cannot delete a Delegation Control if it is assigned to govern any target resource currently or in the future.
     * In that case, first, delete all of the current and future assignments before deleting the Delegation Control. A Delegation Control that was previously assigned to a target
     * resource is marked as DELETED following a successful deletion. However, it is not completely deleted from the system. This is to ensure auditing information for the accesses
     * done under the Delegation Control is preserved for future needs. The system purges the deleted Delegation Control only when all of the audit data associated with the
     * Delegation Control are also deleted. Therefore, you cannot reuse the name of the deleted Delegation Control until the system purges the Delegation Control.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDelegationControlRequest
     * @return DeleteDelegationControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/DeleteDelegationControl.ts.html |here} to see how to use DeleteDelegationControl API.
     */
    deleteDelegationControl(deleteDelegationControlRequest: requests.DeleteDelegationControlRequest): Promise<responses.DeleteDelegationControlResponse>;
    /**
     * eletes an Delegation Subscription in Delegation Control.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDelegationSubscriptionRequest
     * @return DeleteDelegationSubscriptionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/DeleteDelegationSubscription.ts.html |here} to see how to use DeleteDelegationSubscription API.
     */
    deleteDelegationSubscription(deleteDelegationSubscriptionRequest: requests.DeleteDelegationSubscriptionRequest): Promise<responses.DeleteDelegationSubscriptionResponse>;
    /**
     * Gets details of a Delegated Resource Access Request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDelegatedResourceAccessRequestRequest
     * @return GetDelegatedResourceAccessRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetDelegatedResourceAccessRequest.ts.html |here} to see how to use GetDelegatedResourceAccessRequest API.
     */
    getDelegatedResourceAccessRequest(getDelegatedResourceAccessRequestRequest: requests.GetDelegatedResourceAccessRequestRequest): Promise<responses.GetDelegatedResourceAccessRequestResponse>;
    /**
     * Gets the audit log report for the given Delegated Resource Access Request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDelegatedResourceAccessRequestAuditLogReportRequest
     * @return GetDelegatedResourceAccessRequestAuditLogReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetDelegatedResourceAccessRequestAuditLogReport.ts.html |here} to see how to use GetDelegatedResourceAccessRequestAuditLogReport API.
     */
    getDelegatedResourceAccessRequestAuditLogReport(getDelegatedResourceAccessRequestAuditLogReportRequest: requests.GetDelegatedResourceAccessRequestAuditLogReportRequest): Promise<responses.GetDelegatedResourceAccessRequestAuditLogReportResponse>;
    /**
     * Gets the Delegation Control associated with the specified Delegation Control ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDelegationControlRequest
     * @return GetDelegationControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetDelegationControl.ts.html |here} to see how to use GetDelegationControl API.
     */
    getDelegationControl(getDelegationControlRequest: requests.GetDelegationControlRequest): Promise<responses.GetDelegationControlResponse>;
    /**
     * Gets a DelegationSubscription by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDelegationSubscriptionRequest
     * @return GetDelegationSubscriptionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetDelegationSubscription.ts.html |here} to see how to use GetDelegationSubscription API.
     */
    getDelegationSubscription(getDelegationSubscriptionRequest: requests.GetDelegationSubscriptionRequest): Promise<responses.GetDelegationSubscriptionResponse>;
    /**
     * Gets a ServiceProvider by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetServiceProviderRequest
     * @return GetServiceProviderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetServiceProvider.ts.html |here} to see how to use GetServiceProvider API.
     */
    getServiceProvider(getServiceProviderRequest: requests.GetServiceProviderRequest): Promise<responses.GetServiceProviderResponse>;
    /**
     * Gets the Service Provider Action associated with the specified Service Provider Action ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetServiceProviderActionRequest
     * @return GetServiceProviderActionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetServiceProviderAction.ts.html |here} to see how to use GetServiceProviderAction API.
     */
    getServiceProviderAction(getServiceProviderActionRequest: requests.GetServiceProviderActionRequest): Promise<responses.GetServiceProviderActionResponse>;
    /**
     * Returns a history of all status associated with the Delegated Resource Access RequestId.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDelegatedResourceAccessRequestHistoriesRequest
     * @return ListDelegatedResourceAccessRequestHistoriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListDelegatedResourceAccessRequestHistories.ts.html |here} to see how to use ListDelegatedResourceAccessRequestHistories API.
     */
    listDelegatedResourceAccessRequestHistories(listDelegatedResourceAccessRequestHistoriesRequest: requests.ListDelegatedResourceAccessRequestHistoriesRequest): Promise<responses.ListDelegatedResourceAccessRequestHistoriesResponse>;
    /**
     * Lists all Delegated Resource Access Requests in the compartment. Note that only one of lifecycleState or requestStatus query parameter can be used.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDelegatedResourceAccessRequestsRequest
     * @return ListDelegatedResourceAccessRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListDelegatedResourceAccessRequests.ts.html |here} to see how to use ListDelegatedResourceAccessRequests API.
     */
    listDelegatedResourceAccessRequests(listDelegatedResourceAccessRequestsRequest: requests.ListDelegatedResourceAccessRequestsRequest): Promise<responses.ListDelegatedResourceAccessRequestsResponse>;
    /**
     * Returns a list of resources associated with the Delegation Control.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDelegationControlResourcesRequest
     * @return ListDelegationControlResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListDelegationControlResources.ts.html |here} to see how to use ListDelegationControlResources API.
     */
    listDelegationControlResources(listDelegationControlResourcesRequest: requests.ListDelegationControlResourcesRequest): Promise<responses.ListDelegationControlResourcesResponse>;
    /**
     * Lists the Delegation Controls in the compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDelegationControlsRequest
     * @return ListDelegationControlsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListDelegationControls.ts.html |here} to see how to use ListDelegationControls API.
     */
    listDelegationControls(listDelegationControlsRequest: requests.ListDelegationControlsRequest): Promise<responses.ListDelegationControlsResponse>;
    /**
     * Lists the Delegation Subscriptions in Delegation Control.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDelegationSubscriptionsRequest
     * @return ListDelegationSubscriptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListDelegationSubscriptions.ts.html |here} to see how to use ListDelegationSubscriptions API.
     */
    listDelegationSubscriptions(listDelegationSubscriptionsRequest: requests.ListDelegationSubscriptionsRequest): Promise<responses.ListDelegationSubscriptionsResponse>;
    /**
     * Lists all the ServiceProviderActions available in the system.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListServiceProviderActionsRequest
     * @return ListServiceProviderActionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListServiceProviderActions.ts.html |here} to see how to use ListServiceProviderActions API.
     */
    listServiceProviderActions(listServiceProviderActionsRequest: requests.ListServiceProviderActionsRequest): Promise<responses.ListServiceProviderActionsResponse>;
    /**
     * Lists the MoreInformation interaction between customer and support operators.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListServiceProviderInteractionsRequest
     * @return ListServiceProviderInteractionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListServiceProviderInteractions.ts.html |here} to see how to use ListServiceProviderInteractions API.
     */
    listServiceProviderInteractions(listServiceProviderInteractionsRequest: requests.ListServiceProviderInteractionsRequest): Promise<responses.ListServiceProviderInteractionsResponse>;
    /**
     * Lists the Service Providers.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListServiceProvidersRequest
     * @return ListServiceProvidersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListServiceProviders.ts.html |here} to see how to use ListServiceProviders API.
     */
    listServiceProviders(listServiceProvidersRequest: requests.ListServiceProvidersRequest): Promise<responses.ListServiceProvidersResponse>;
    /**
     * Rejects a Delegated Resource Access Request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RejectDelegatedResourceAccessRequestRequest
     * @return RejectDelegatedResourceAccessRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/RejectDelegatedResourceAccessRequest.ts.html |here} to see how to use RejectDelegatedResourceAccessRequest API.
     */
    rejectDelegatedResourceAccessRequest(rejectDelegatedResourceAccessRequestRequest: requests.RejectDelegatedResourceAccessRequestRequest): Promise<responses.RejectDelegatedResourceAccessRequestResponse>;
    /**
     * Revokes an already approved Delegated Resource Access Request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RevokeDelegatedResourceAccessRequestRequest
     * @return RevokeDelegatedResourceAccessRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/RevokeDelegatedResourceAccessRequest.ts.html |here} to see how to use RevokeDelegatedResourceAccessRequest API.
     */
    revokeDelegatedResourceAccessRequest(revokeDelegatedResourceAccessRequestRequest: requests.RevokeDelegatedResourceAccessRequestRequest): Promise<responses.RevokeDelegatedResourceAccessRequestResponse>;
    /**
     * Posts query for additional information for the given Delegated Resource Access Request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ServiceProviderInteractionRequestRequest
     * @return ServiceProviderInteractionRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ServiceProviderInteractionRequest.ts.html |here} to see how to use ServiceProviderInteractionRequest API.
     */
    serviceProviderInteractionRequest(serviceProviderInteractionRequestRequest: requests.ServiceProviderInteractionRequestRequest): Promise<responses.ServiceProviderInteractionRequestResponse>;
    /**
     * Updates the existing DelegationControl for a given Delegation Control ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDelegationControlRequest
     * @return UpdateDelegationControlResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/UpdateDelegationControl.ts.html |here} to see how to use UpdateDelegationControl API.
     */
    updateDelegationControl(updateDelegationControlRequest: requests.UpdateDelegationControlRequest): Promise<responses.UpdateDelegationControlResponse>;
    /**
     * Updates the existing DelegationSubscription for a given Delegation Subscription ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDelegationSubscriptionRequest
     * @return UpdateDelegationSubscriptionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/UpdateDelegationSubscription.ts.html |here} to see how to use UpdateDelegationSubscription API.
     */
    updateDelegationSubscription(updateDelegationSubscriptionRequest: requests.UpdateDelegationSubscriptionRequest): Promise<responses.UpdateDelegationSubscriptionResponse>;
}
export declare enum WorkRequestApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class WorkRequestClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": WorkRequestWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new WorkRequestWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): WorkRequestWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): WorkRequestWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Gets details of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Returns a (paginated) list of errors for the work request with the given ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Returns a (paginated) list of logs for the work request with the given ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/delegateaccesscontrol/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
}
export {};
