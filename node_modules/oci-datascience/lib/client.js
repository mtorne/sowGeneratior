"use strict";
/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataScienceClient = exports.DataScienceApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const datascience_waiter_1 = require("./datascience-waiter");
const oci_common_2 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var DataScienceApiKeys;
(function (DataScienceApiKeys) {
})(DataScienceApiKeys = exports.DataScienceApiKeys || (exports.DataScienceApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class DataScienceClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "DataScience";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("datascience")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("datascience");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190101";
        if (this.logger)
            this.logger.info(`DataScienceClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DataScienceClient.serviceEndpointTemplate, this._region, DataScienceClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DataScienceClient.serviceEndpointTemplate, this._regionId, DataScienceClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DataScienceClient.serviceEndpointTemplate, region, DataScienceClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DataScienceClient.serviceEndpointTemplate, regionId, DataScienceClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new DataScienceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new datascience_waiter_1.DataScienceWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Activates the model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ActivateModelRequest
     * @return ActivateModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ActivateModel.ts.html |here} to see how to use ActivateModel API.
     */
    activateModel(activateModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#activateModel.");
            const operationName = "activateModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/ActivateModel";
            const pathParams = {
                "{modelId}": activateModelRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": activateModelRequest.ifMatch,
                "opc-request-id": activateModelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, activateModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/actions/activate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "model",
                    bodyModel: model.Model,
                    type: "model.Model",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Activates the model deployment.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ActivateModelDeploymentRequest
     * @return ActivateModelDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ActivateModelDeployment.ts.html |here} to see how to use ActivateModelDeployment API.
     */
    activateModelDeployment(activateModelDeploymentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#activateModelDeployment.");
            const operationName = "activateModelDeployment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/ActivateModelDeployment";
            const pathParams = {
                "{modelDeploymentId}": activateModelDeploymentRequest.modelDeploymentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": activateModelDeploymentRequest.ifMatch,
                "opc-request-id": activateModelDeploymentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, activateModelDeploymentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelDeployments/{modelDeploymentId}/actions/activate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Activates the notebook session.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ActivateNotebookSessionRequest
     * @return ActivateNotebookSessionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ActivateNotebookSession.ts.html |here} to see how to use ActivateNotebookSession API.
     */
    activateNotebookSession(activateNotebookSessionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#activateNotebookSession.");
            const operationName = "activateNotebookSession";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/ActivateNotebookSession";
            const pathParams = {
                "{notebookSessionId}": activateNotebookSessionRequest.notebookSessionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": activateNotebookSessionRequest.ifMatch,
                "opc-request-id": activateNotebookSessionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, activateNotebookSessionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/notebookSessions/{notebookSessionId}/actions/activate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Activate schedule.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ActivateScheduleRequest
     * @return ActivateScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ActivateSchedule.ts.html |here} to see how to use ActivateSchedule API.
     */
    activateSchedule(activateScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#activateSchedule.");
            const operationName = "activateSchedule";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Schedule/ActivateSchedule";
            const pathParams = {
                "{scheduleId}": activateScheduleRequest.scheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": activateScheduleRequest.opcRequestId,
                "if-match": activateScheduleRequest.ifMatch,
                "opc-retry-token": activateScheduleRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, activateScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/schedules/{scheduleId}/actions/activate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Cancels an IN_PROGRESS job run.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelJobRunRequest
     * @return CancelJobRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CancelJobRun.ts.html |here} to see how to use CancelJobRun API.
     */
    cancelJobRun(cancelJobRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#cancelJobRun.");
            const operationName = "cancelJobRun";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/CancelJobRun";
            const pathParams = {
                "{jobRunId}": cancelJobRunRequest.jobRunId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": cancelJobRunRequest.opcRequestId,
                "if-match": cancelJobRunRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelJobRunRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobRuns/{jobRunId}/actions/cancelJobRun",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Cancel a PipelineRun.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelPipelineRunRequest
     * @return CancelPipelineRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CancelPipelineRun.ts.html |here} to see how to use CancelPipelineRun API.
     */
    cancelPipelineRun(cancelPipelineRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#cancelPipelineRun.");
            const operationName = "cancelPipelineRun";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/PipelineRun/CancelPipelineRun";
            const pathParams = {
                "{pipelineRunId}": cancelPipelineRunRequest.pipelineRunId
            };
            const queryParams = {
                "terminateGracefully": cancelPipelineRunRequest.terminateGracefully
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": cancelPipelineRunRequest.opcRequestId,
                "opc-retry-token": cancelPipelineRunRequest.opcRetryToken,
                "if-match": cancelPipelineRunRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelPipelineRunRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelineRuns/{pipelineRunId}/actions/cancelPipelineRun",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Cancels a work request that has not started.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#cancelWorkRequest.");
            const operationName = "cancelWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/WorkRequest/CancelWorkRequest";
            const pathParams = {
                "{workRequestId}": cancelWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": cancelWorkRequestRequest.ifMatch,
                "opc-request-id": cancelWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a private endpoint into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDataSciencePrivateEndpointCompartmentRequest
     * @return ChangeDataSciencePrivateEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeDataSciencePrivateEndpointCompartment.ts.html |here} to see how to use ChangeDataSciencePrivateEndpointCompartment API.
     */
    changeDataSciencePrivateEndpointCompartment(changeDataSciencePrivateEndpointCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeDataSciencePrivateEndpointCompartment.");
            const operationName = "changeDataSciencePrivateEndpointCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/DataSciencePrivateEndpoint/ChangeDataSciencePrivateEndpointCompartment";
            const pathParams = {
                "{dataSciencePrivateEndpointId}": changeDataSciencePrivateEndpointCompartmentRequest.dataSciencePrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeDataSciencePrivateEndpointCompartmentRequest.opcRequestId,
                "if-match": changeDataSciencePrivateEndpointCompartmentRequest.ifMatch,
                "opc-retry-token": changeDataSciencePrivateEndpointCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeDataSciencePrivateEndpointCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSciencePrivateEndpoints/{dataSciencePrivateEndpointId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDataSciencePrivateEndpointCompartmentRequest.changeDataSciencePrivateEndpointCompartmentDetails, "ChangeDataSciencePrivateEndpointCompartmentDetails", model.ChangeDataSciencePrivateEndpointCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Changes a job's compartment
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeJobCompartmentRequest
     * @return ChangeJobCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeJobCompartment.ts.html |here} to see how to use ChangeJobCompartment API.
     */
    changeJobCompartment(changeJobCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeJobCompartment.");
            const operationName = "changeJobCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/ChangeJobCompartment";
            const pathParams = {
                "{jobId}": changeJobCompartmentRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeJobCompartmentRequest.ifMatch,
                "opc-request-id": changeJobCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeJobCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeJobCompartmentRequest.changeJobCompartmentDetails, "ChangeJobCompartmentDetails", model.ChangeJobCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Changes a job run's compartment
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeJobRunCompartmentRequest
     * @return ChangeJobRunCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeJobRunCompartment.ts.html |here} to see how to use ChangeJobRunCompartment API.
     */
    changeJobRunCompartment(changeJobRunCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeJobRunCompartment.");
            const operationName = "changeJobRunCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/ChangeJobRunCompartment";
            const pathParams = {
                "{jobRunId}": changeJobRunCompartmentRequest.jobRunId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeJobRunCompartmentRequest.ifMatch,
                "opc-request-id": changeJobRunCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeJobRunCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobRuns/{jobRunId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeJobRunCompartmentRequest.changeJobRunCompartmentDetails, "ChangeJobRunCompartmentDetails", model.ChangeJobRunCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a MlApplication resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMlApplicationCompartmentRequest
     * @return ChangeMlApplicationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeMlApplicationCompartment.ts.html |here} to see how to use ChangeMlApplicationCompartment API.
     */
    changeMlApplicationCompartment(changeMlApplicationCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeMlApplicationCompartment.");
            const operationName = "changeMlApplicationCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplication/ChangeMlApplicationCompartment";
            const pathParams = {
                "{mlApplicationId}": changeMlApplicationCompartmentRequest.mlApplicationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeMlApplicationCompartmentRequest.ifMatch,
                "opc-request-id": changeMlApplicationCompartmentRequest.opcRequestId,
                "opc-retry-token": changeMlApplicationCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMlApplicationCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplications/{mlApplicationId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMlApplicationCompartmentRequest.changeMlApplicationCompartmentDetails, "ChangeMlApplicationCompartmentDetails", model.ChangeMlApplicationCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a MlApplicationImplementation resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMlApplicationImplementationCompartmentRequest
     * @return ChangeMlApplicationImplementationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeMlApplicationImplementationCompartment.ts.html |here} to see how to use ChangeMlApplicationImplementationCompartment API.
     */
    changeMlApplicationImplementationCompartment(changeMlApplicationImplementationCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeMlApplicationImplementationCompartment.");
            const operationName = "changeMlApplicationImplementationCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementation/ChangeMlApplicationImplementationCompartment";
            const pathParams = {
                "{mlApplicationImplementationId}": changeMlApplicationImplementationCompartmentRequest.mlApplicationImplementationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeMlApplicationImplementationCompartmentRequest.ifMatch,
                "opc-request-id": changeMlApplicationImplementationCompartmentRequest.opcRequestId,
                "opc-retry-token": changeMlApplicationImplementationCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMlApplicationImplementationCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementations/{mlApplicationImplementationId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMlApplicationImplementationCompartmentRequest.changeMlApplicationImplementationCompartmentDetails, "ChangeMlApplicationImplementationCompartmentDetails", model.ChangeMlApplicationImplementationCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a MlApplicationInstance resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMlApplicationInstanceCompartmentRequest
     * @return ChangeMlApplicationInstanceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeMlApplicationInstanceCompartment.ts.html |here} to see how to use ChangeMlApplicationInstanceCompartment API.
     */
    changeMlApplicationInstanceCompartment(changeMlApplicationInstanceCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeMlApplicationInstanceCompartment.");
            const operationName = "changeMlApplicationInstanceCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstance/ChangeMlApplicationInstanceCompartment";
            const pathParams = {
                "{mlApplicationInstanceId}": changeMlApplicationInstanceCompartmentRequest.mlApplicationInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeMlApplicationInstanceCompartmentRequest.ifMatch,
                "opc-request-id": changeMlApplicationInstanceCompartmentRequest.opcRequestId,
                "opc-retry-token": changeMlApplicationInstanceCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMlApplicationInstanceCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstances/{mlApplicationInstanceId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMlApplicationInstanceCompartmentRequest.changeMlApplicationInstanceCompartmentDetails, "ChangeMlApplicationInstanceCompartmentDetails", model.ChangeMlApplicationInstanceCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a MlApplicationInstanceView resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMlApplicationInstanceViewCompartmentRequest
     * @return ChangeMlApplicationInstanceViewCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeMlApplicationInstanceViewCompartment.ts.html |here} to see how to use ChangeMlApplicationInstanceViewCompartment API.
     */
    changeMlApplicationInstanceViewCompartment(changeMlApplicationInstanceViewCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeMlApplicationInstanceViewCompartment.");
            const operationName = "changeMlApplicationInstanceViewCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstanceView/ChangeMlApplicationInstanceViewCompartment";
            const pathParams = {
                "{mlApplicationInstanceViewId}": changeMlApplicationInstanceViewCompartmentRequest.mlApplicationInstanceViewId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeMlApplicationInstanceViewCompartmentRequest.ifMatch,
                "opc-request-id": changeMlApplicationInstanceViewCompartmentRequest.opcRequestId,
                "opc-retry-token": changeMlApplicationInstanceViewCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMlApplicationInstanceViewCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstanceViews/{mlApplicationInstanceViewId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMlApplicationInstanceViewCompartmentRequest.changeMlApplicationInstanceViewCompartmentDetails, "ChangeMlApplicationInstanceViewCompartmentDetails", model.ChangeMlApplicationInstanceViewCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a model resource into a different compartment.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeModelCompartmentRequest
     * @return ChangeModelCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeModelCompartment.ts.html |here} to see how to use ChangeModelCompartment API.
     */
    changeModelCompartment(changeModelCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeModelCompartment.");
            const operationName = "changeModelCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/ChangeModelCompartment";
            const pathParams = {
                "{modelId}": changeModelCompartmentRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeModelCompartmentRequest.ifMatch,
                "opc-request-id": changeModelCompartmentRequest.opcRequestId,
                "opc-retry-token": changeModelCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeModelCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeModelCompartmentRequest.changeModelCompartmentDetails, "ChangeModelCompartmentDetails", model.ChangeModelCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a model deployment into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeModelDeploymentCompartmentRequest
     * @return ChangeModelDeploymentCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeModelDeploymentCompartment.ts.html |here} to see how to use ChangeModelDeploymentCompartment API.
     */
    changeModelDeploymentCompartment(changeModelDeploymentCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeModelDeploymentCompartment.");
            const operationName = "changeModelDeploymentCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/ChangeModelDeploymentCompartment";
            const pathParams = {
                "{modelDeploymentId}": changeModelDeploymentCompartmentRequest.modelDeploymentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeModelDeploymentCompartmentRequest.ifMatch,
                "opc-request-id": changeModelDeploymentCompartmentRequest.opcRequestId,
                "opc-retry-token": changeModelDeploymentCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeModelDeploymentCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelDeployments/{modelDeploymentId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeModelDeploymentCompartmentRequest.changeModelDeploymentCompartmentDetails, "ChangeModelDeploymentCompartmentDetails", model.ChangeModelDeploymentCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a modelVersionSet resource into a different compartment.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeModelVersionSetCompartmentRequest
     * @return ChangeModelVersionSetCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeModelVersionSetCompartment.ts.html |here} to see how to use ChangeModelVersionSetCompartment API.
     */
    changeModelVersionSetCompartment(changeModelVersionSetCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeModelVersionSetCompartment.");
            const operationName = "changeModelVersionSetCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelVersionSet/ChangeModelVersionSetCompartment";
            const pathParams = {
                "{modelVersionSetId}": changeModelVersionSetCompartmentRequest.modelVersionSetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeModelVersionSetCompartmentRequest.ifMatch,
                "opc-request-id": changeModelVersionSetCompartmentRequest.opcRequestId,
                "opc-retry-token": changeModelVersionSetCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeModelVersionSetCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelVersionSets/{modelVersionSetId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeModelVersionSetCompartmentRequest.changeModelVersionSetCompartmentDetails, "ChangeModelVersionSetCompartmentDetails", model.ChangeModelVersionSetCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a notebook session resource into a different compartment.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeNotebookSessionCompartmentRequest
     * @return ChangeNotebookSessionCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeNotebookSessionCompartment.ts.html |here} to see how to use ChangeNotebookSessionCompartment API.
     */
    changeNotebookSessionCompartment(changeNotebookSessionCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeNotebookSessionCompartment.");
            const operationName = "changeNotebookSessionCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/ChangeNotebookSessionCompartment";
            const pathParams = {
                "{notebookSessionId}": changeNotebookSessionCompartmentRequest.notebookSessionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeNotebookSessionCompartmentRequest.ifMatch,
                "opc-request-id": changeNotebookSessionCompartmentRequest.opcRequestId,
                "opc-retry-token": changeNotebookSessionCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeNotebookSessionCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/notebookSessions/{notebookSessionId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeNotebookSessionCompartmentRequest.changeNotebookSessionCompartmentDetails, "ChangeNotebookSessionCompartmentDetails", model.ChangeNotebookSessionCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a resource into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangePipelineCompartmentRequest
     * @return ChangePipelineCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangePipelineCompartment.ts.html |here} to see how to use ChangePipelineCompartment API.
     */
    changePipelineCompartment(changePipelineCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changePipelineCompartment.");
            const operationName = "changePipelineCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Pipeline/ChangePipelineCompartment";
            const pathParams = {
                "{pipelineId}": changePipelineCompartmentRequest.pipelineId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changePipelineCompartmentRequest.opcRequestId,
                "if-match": changePipelineCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changePipelineCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelines/{pipelineId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changePipelineCompartmentRequest.changePipelineCompartmentDetails, "ChangePipelineCompartmentDetails", model.ChangePipelineCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a resource into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangePipelineRunCompartmentRequest
     * @return ChangePipelineRunCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangePipelineRunCompartment.ts.html |here} to see how to use ChangePipelineRunCompartment API.
     */
    changePipelineRunCompartment(changePipelineRunCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changePipelineRunCompartment.");
            const operationName = "changePipelineRunCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/PipelineRun/ChangePipelineRunCompartment";
            const pathParams = {
                "{pipelineRunId}": changePipelineRunCompartmentRequest.pipelineRunId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changePipelineRunCompartmentRequest.opcRequestId,
                "if-match": changePipelineRunCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changePipelineRunCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelineRuns/{pipelineRunId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changePipelineRunCompartmentRequest.changePipelineRunCompartmentDetails, "ChangePipelineRunCompartmentDetails", model.ChangePipelineRunCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a project resource into a different compartment.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeProjectCompartmentRequest
     * @return ChangeProjectCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeProjectCompartment.ts.html |here} to see how to use ChangeProjectCompartment API.
     */
    changeProjectCompartment(changeProjectCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeProjectCompartment.");
            const operationName = "changeProjectCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Project/ChangeProjectCompartment";
            const pathParams = {
                "{projectId}": changeProjectCompartmentRequest.projectId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeProjectCompartmentRequest.ifMatch,
                "opc-request-id": changeProjectCompartmentRequest.opcRequestId,
                "opc-retry-token": changeProjectCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeProjectCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/projects/{projectId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeProjectCompartmentRequest.changeProjectCompartmentDetails, "ChangeProjectCompartmentDetails", model.ChangeProjectCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a Schedule resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeScheduleCompartmentRequest
     * @return ChangeScheduleCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeScheduleCompartment.ts.html |here} to see how to use ChangeScheduleCompartment API.
     */
    changeScheduleCompartment(changeScheduleCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#changeScheduleCompartment.");
            const operationName = "changeScheduleCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Schedule/ChangeScheduleCompartment";
            const pathParams = {
                "{scheduleId}": changeScheduleCompartmentRequest.scheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": changeScheduleCompartmentRequest.opcRetryToken,
                "if-match": changeScheduleCompartmentRequest.ifMatch,
                "opc-request-id": changeScheduleCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeScheduleCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/schedules/{scheduleId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeScheduleCompartmentRequest.changeScheduleCompartmentDetails, "ChangeScheduleCompartmentDetails", model.ChangeScheduleCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a Data Science private endpoint to be used by a Data Science resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDataSciencePrivateEndpointRequest
     * @return CreateDataSciencePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateDataSciencePrivateEndpoint.ts.html |here} to see how to use CreateDataSciencePrivateEndpoint API.
     */
    createDataSciencePrivateEndpoint(createDataSciencePrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createDataSciencePrivateEndpoint.");
            const operationName = "createDataSciencePrivateEndpoint";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDataSciencePrivateEndpointRequest.opcRetryToken,
                "opc-request-id": createDataSciencePrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDataSciencePrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSciencePrivateEndpoints",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDataSciencePrivateEndpointRequest.createDataSciencePrivateEndpointDetails, "CreateDataSciencePrivateEndpointDetails", model.CreateDataSciencePrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataSciencePrivateEndpoint",
                    bodyModel: model.DataSciencePrivateEndpoint,
                    type: "model.DataSciencePrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a job.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateJobRequest
     * @return CreateJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateJob.ts.html |here} to see how to use CreateJob API.
     */
    createJob(createJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createJob.");
            const operationName = "createJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/CreateJob";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createJobRequest.opcRequestId,
                "opc-retry-token": createJobRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createJobRequest.createJobDetails, "CreateJobDetails", model.CreateJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: model.Job,
                    type: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Uploads a job artifact.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateJobArtifactRequest
     * @return CreateJobArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateJobArtifact.ts.html |here} to see how to use CreateJobArtifact API.
     */
    createJobArtifact(createJobArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createJobArtifact.");
            const operationName = "createJobArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/CreateJobArtifact";
            const pathParams = {
                "{jobId}": createJobArtifactRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "opc-request-id": createJobArtifactRequest.opcRequestId,
                "opc-retry-token": createJobArtifactRequest.opcRetryToken,
                "content-length": createJobArtifactRequest.contentLength,
                "content-disposition": createJobArtifactRequest.contentDisposition
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createJobArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}/artifact",
                method: "POST",
                bodyContent: createJobArtifactRequest.jobArtifact,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink, true);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a job run.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateJobRunRequest
     * @return CreateJobRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateJobRun.ts.html |here} to see how to use CreateJobRun API.
     */
    createJobRun(createJobRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createJobRun.");
            const operationName = "createJobRun";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/CreateJobRun";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createJobRunRequest.opcRequestId,
                "opc-retry-token": createJobRunRequest.opcRetryToken,
                "opc-parent-rpt-url": createJobRunRequest.opcParentRptUrl
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createJobRunRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobRuns",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createJobRunRequest.createJobRunDetails, "CreateJobRunDetails", model.CreateJobRunDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobRun",
                    bodyModel: model.JobRun,
                    type: "model.JobRun",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new MlApplication.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMlApplicationRequest
     * @return CreateMlApplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateMlApplication.ts.html |here} to see how to use CreateMlApplication API.
     */
    createMlApplication(createMlApplicationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createMlApplication.");
            const operationName = "createMlApplication";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplication/CreateMlApplication";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMlApplicationRequest.opcRetryToken,
                "opc-request-id": createMlApplicationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMlApplicationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplications",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMlApplicationRequest.createMlApplicationDetails, "CreateMlApplicationDetails", model.CreateMlApplicationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplication",
                    bodyModel: model.MlApplication,
                    type: "model.MlApplication",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new MlApplicationImplementation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMlApplicationImplementationRequest
     * @return CreateMlApplicationImplementationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateMlApplicationImplementation.ts.html |here} to see how to use CreateMlApplicationImplementation API.
     */
    createMlApplicationImplementation(createMlApplicationImplementationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createMlApplicationImplementation.");
            const operationName = "createMlApplicationImplementation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementation/CreateMlApplicationImplementation";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMlApplicationImplementationRequest.opcRetryToken,
                "opc-request-id": createMlApplicationImplementationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMlApplicationImplementationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMlApplicationImplementationRequest.createMlApplicationImplementationDetails, "CreateMlApplicationImplementationDetails", model.CreateMlApplicationImplementationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationImplementation",
                    bodyModel: model.MlApplicationImplementation,
                    type: "model.MlApplicationImplementation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new MlApplicationInstance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateMlApplicationInstanceRequest
     * @return CreateMlApplicationInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateMlApplicationInstance.ts.html |here} to see how to use CreateMlApplicationInstance API.
     */
    createMlApplicationInstance(createMlApplicationInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createMlApplicationInstance.");
            const operationName = "createMlApplicationInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstance/CreateMlApplicationInstance";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMlApplicationInstanceRequest.opcRetryToken,
                "opc-request-id": createMlApplicationInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createMlApplicationInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstances",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMlApplicationInstanceRequest.createMlApplicationInstanceDetails, "CreateMlApplicationInstanceDetails", model.CreateMlApplicationInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationInstance",
                    bodyModel: model.MlApplicationInstance,
                    type: "model.MlApplicationInstance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateModelRequest
     * @return CreateModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModel.ts.html |here} to see how to use CreateModel API.
     */
    createModel(createModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createModel.");
            const operationName = "createModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/CreateModel";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createModelRequest.opcRequestId,
                "opc-retry-token": createModelRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createModelRequest.createModelDetails, "CreateModelDetails", model.CreateModelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "model",
                    bodyModel: model.Model,
                    type: "model.Model",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates model artifact for specified model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateModelArtifactRequest
     * @return CreateModelArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelArtifact.ts.html |here} to see how to use CreateModelArtifact API.
     */
    createModelArtifact(createModelArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createModelArtifact.");
            const operationName = "createModelArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/CreateModelArtifact";
            const pathParams = {
                "{modelId}": createModelArtifactRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "opc-request-id": createModelArtifactRequest.opcRequestId,
                "opc-retry-token": createModelArtifactRequest.opcRetryToken,
                "content-length": createModelArtifactRequest.contentLength,
                "content-disposition": createModelArtifactRequest.contentDisposition,
                "if-match": createModelArtifactRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createModelArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/artifact",
                method: "POST",
                bodyContent: createModelArtifactRequest.modelArtifact,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink, true);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates model custom metadata artifact for specified model.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateModelCustomMetadatumArtifactRequest
     * @return CreateModelCustomMetadatumArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelCustomMetadatumArtifact.ts.html |here} to see how to use CreateModelCustomMetadatumArtifact API.
     */
    createModelCustomMetadatumArtifact(createModelCustomMetadatumArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createModelCustomMetadatumArtifact.");
            const operationName = "createModelCustomMetadatumArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/CreateModelCustomMetadatumArtifact";
            const pathParams = {
                "{modelId}": createModelCustomMetadatumArtifactRequest.modelId,
                "{metadatumKeyName}": createModelCustomMetadatumArtifactRequest.metadatumKeyName
            };
            const queryParams = {};
            let headerParams = {
                "opc-request-id": createModelCustomMetadatumArtifactRequest.opcRequestId,
                "content-length": createModelCustomMetadatumArtifactRequest.contentLength,
                "content-disposition": createModelCustomMetadatumArtifactRequest.contentDisposition,
                "if-match": createModelCustomMetadatumArtifactRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createModelCustomMetadatumArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/customMetadata/{metadatumKeyName}/artifact",
                method: "POST",
                bodyContent: createModelCustomMetadatumArtifactRequest.modelCustomMetadatumArtifact,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink, true);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates model defined metadata artifact for specified model.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateModelDefinedMetadatumArtifactRequest
     * @return CreateModelDefinedMetadatumArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelDefinedMetadatumArtifact.ts.html |here} to see how to use CreateModelDefinedMetadatumArtifact API.
     */
    createModelDefinedMetadatumArtifact(createModelDefinedMetadatumArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createModelDefinedMetadatumArtifact.");
            const operationName = "createModelDefinedMetadatumArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/CreateModelDefinedMetadatumArtifact";
            const pathParams = {
                "{modelId}": createModelDefinedMetadatumArtifactRequest.modelId,
                "{metadatumKeyName}": createModelDefinedMetadatumArtifactRequest.metadatumKeyName
            };
            const queryParams = {};
            let headerParams = {
                "opc-request-id": createModelDefinedMetadatumArtifactRequest.opcRequestId,
                "content-length": createModelDefinedMetadatumArtifactRequest.contentLength,
                "content-disposition": createModelDefinedMetadatumArtifactRequest.contentDisposition,
                "if-match": createModelDefinedMetadatumArtifactRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createModelDefinedMetadatumArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/definedMetadata/{metadatumKeyName}/artifact",
                method: "POST",
                bodyContent: createModelDefinedMetadatumArtifactRequest.modelDefinedMetadatumArtifact,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink, true);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new model deployment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateModelDeploymentRequest
     * @return CreateModelDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelDeployment.ts.html |here} to see how to use CreateModelDeployment API.
     */
    createModelDeployment(createModelDeploymentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createModelDeployment.");
            const operationName = "createModelDeployment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/CreateModelDeployment";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createModelDeploymentRequest.opcRequestId,
                "opc-retry-token": createModelDeploymentRequest.opcRetryToken,
                "opc-parent-rpt-url": createModelDeploymentRequest.opcParentRptUrl
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createModelDeploymentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelDeployments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createModelDeploymentRequest.createModelDeploymentDetails, "CreateModelDeploymentDetails", model.CreateModelDeploymentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "modelDeployment",
                    bodyModel: model.ModelDeployment,
                    type: "model.ModelDeployment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates provenance information for the specified model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateModelProvenanceRequest
     * @return CreateModelProvenanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelProvenance.ts.html |here} to see how to use CreateModelProvenance API.
     */
    createModelProvenance(createModelProvenanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createModelProvenance.");
            const operationName = "createModelProvenance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/CreateModelProvenance";
            const pathParams = {
                "{modelId}": createModelProvenanceRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createModelProvenanceRequest.opcRequestId,
                "opc-retry-token": createModelProvenanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createModelProvenanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/provenance",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createModelProvenanceRequest.createModelProvenanceDetails, "CreateModelProvenanceDetails", model.CreateModelProvenanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "modelProvenance",
                    bodyModel: model.ModelProvenance,
                    type: "model.ModelProvenance",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new modelVersionSet.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateModelVersionSetRequest
     * @return CreateModelVersionSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelVersionSet.ts.html |here} to see how to use CreateModelVersionSet API.
     */
    createModelVersionSet(createModelVersionSetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createModelVersionSet.");
            const operationName = "createModelVersionSet";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelVersionSet/CreateModelVersionSet";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createModelVersionSetRequest.opcRequestId,
                "opc-retry-token": createModelVersionSetRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createModelVersionSetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelVersionSets",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createModelVersionSetRequest.createModelVersionSetDetails, "CreateModelVersionSetDetails", model.CreateModelVersionSetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "modelVersionSet",
                    bodyModel: model.ModelVersionSet,
                    type: "model.ModelVersionSet",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new notebook session.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateNotebookSessionRequest
     * @return CreateNotebookSessionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateNotebookSession.ts.html |here} to see how to use CreateNotebookSession API.
     */
    createNotebookSession(createNotebookSessionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createNotebookSession.");
            const operationName = "createNotebookSession";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/CreateNotebookSession";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createNotebookSessionRequest.opcRequestId,
                "opc-retry-token": createNotebookSessionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createNotebookSessionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/notebookSessions",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createNotebookSessionRequest.createNotebookSessionDetails, "CreateNotebookSessionDetails", model.CreateNotebookSessionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "notebookSession",
                    bodyModel: model.NotebookSession,
                    type: "model.NotebookSession",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Pipeline.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreatePipelineRequest
     * @return CreatePipelineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreatePipeline.ts.html |here} to see how to use CreatePipeline API.
     */
    createPipeline(createPipelineRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createPipeline.");
            const operationName = "createPipeline";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Pipeline/CreatePipeline";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createPipelineRequest.opcRetryToken,
                "opc-request-id": createPipelineRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createPipelineRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelines",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createPipelineRequest.createPipelineDetails, "CreatePipelineDetails", model.CreatePipelineDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pipeline",
                    bodyModel: model.Pipeline,
                    type: "model.Pipeline",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new PipelineRun.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreatePipelineRunRequest
     * @return CreatePipelineRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreatePipelineRun.ts.html |here} to see how to use CreatePipelineRun API.
     */
    createPipelineRun(createPipelineRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createPipelineRun.");
            const operationName = "createPipelineRun";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/PipelineRun/CreatePipelineRun";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createPipelineRunRequest.opcRetryToken,
                "opc-request-id": createPipelineRunRequest.opcRequestId,
                "opc-parent-rpt-url": createPipelineRunRequest.opcParentRptUrl
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createPipelineRunRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelineRuns",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createPipelineRunRequest.createPipelineRunDetails, "CreatePipelineRunDetails", model.CreatePipelineRunDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pipelineRun",
                    bodyModel: model.PipelineRun,
                    type: "model.PipelineRun",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new project.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateProjectRequest
     * @return CreateProjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateProject.ts.html |here} to see how to use CreateProject API.
     */
    createProject(createProjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createProject.");
            const operationName = "createProject";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Project/CreateProject";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createProjectRequest.opcRequestId,
                "opc-retry-token": createProjectRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createProjectRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/projects",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createProjectRequest.createProjectDetails, "CreateProjectDetails", model.CreateProjectDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "project",
                    bodyModel: model.Project,
                    type: "model.Project",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Schedule.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateScheduleRequest
     * @return CreateScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateSchedule.ts.html |here} to see how to use CreateSchedule API.
     */
    createSchedule(createScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createSchedule.");
            const operationName = "createSchedule";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Schedule/CreateSchedule";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createScheduleRequest.opcRetryToken,
                "opc-request-id": createScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/schedules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createScheduleRequest.createScheduleDetails, "CreateScheduleDetails", model.CreateScheduleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "schedule",
                    bodyModel: model.Schedule,
                    type: "model.Schedule",
                    responseHeaders: [
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Upload the artifact for a step in the pipeline.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateStepArtifactRequest
     * @return CreateStepArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateStepArtifact.ts.html |here} to see how to use CreateStepArtifact API.
     */
    createStepArtifact(createStepArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#createStepArtifact.");
            const operationName = "createStepArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Pipeline/CreateStepArtifact";
            const pathParams = {
                "{pipelineId}": createStepArtifactRequest.pipelineId,
                "{stepName}": createStepArtifactRequest.stepName
            };
            const queryParams = {};
            let headerParams = {
                "opc-request-id": createStepArtifactRequest.opcRequestId,
                "opc-retry-token": createStepArtifactRequest.opcRetryToken,
                "content-length": createStepArtifactRequest.contentLength,
                "content-disposition": createStepArtifactRequest.contentDisposition
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createStepArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelines/{pipelineId}/steps/{stepName}/artifact",
                method: "POST",
                bodyContent: createStepArtifactRequest.stepArtifact,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink, true);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deactivates the model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeactivateModelRequest
     * @return DeactivateModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeactivateModel.ts.html |here} to see how to use DeactivateModel API.
     */
    deactivateModel(deactivateModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deactivateModel.");
            const operationName = "deactivateModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/DeactivateModel";
            const pathParams = {
                "{modelId}": deactivateModelRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deactivateModelRequest.ifMatch,
                "opc-request-id": deactivateModelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deactivateModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/actions/deactivate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "model",
                    bodyModel: model.Model,
                    type: "model.Model",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deactivates the model deployment.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeactivateModelDeploymentRequest
     * @return DeactivateModelDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeactivateModelDeployment.ts.html |here} to see how to use DeactivateModelDeployment API.
     */
    deactivateModelDeployment(deactivateModelDeploymentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deactivateModelDeployment.");
            const operationName = "deactivateModelDeployment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/DeactivateModelDeployment";
            const pathParams = {
                "{modelDeploymentId}": deactivateModelDeploymentRequest.modelDeploymentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deactivateModelDeploymentRequest.ifMatch,
                "opc-request-id": deactivateModelDeploymentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deactivateModelDeploymentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelDeployments/{modelDeploymentId}/actions/deactivate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deactivates the notebook session.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeactivateNotebookSessionRequest
     * @return DeactivateNotebookSessionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeactivateNotebookSession.ts.html |here} to see how to use DeactivateNotebookSession API.
     */
    deactivateNotebookSession(deactivateNotebookSessionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deactivateNotebookSession.");
            const operationName = "deactivateNotebookSession";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/DeactivateNotebookSession";
            const pathParams = {
                "{notebookSessionId}": deactivateNotebookSessionRequest.notebookSessionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deactivateNotebookSessionRequest.ifMatch,
                "opc-request-id": deactivateNotebookSessionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deactivateNotebookSessionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/notebookSessions/{notebookSessionId}/actions/deactivate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deactivate schedule.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeactivateScheduleRequest
     * @return DeactivateScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeactivateSchedule.ts.html |here} to see how to use DeactivateSchedule API.
     */
    deactivateSchedule(deactivateScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deactivateSchedule.");
            const operationName = "deactivateSchedule";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Schedule/DeactivateSchedule";
            const pathParams = {
                "{scheduleId}": deactivateScheduleRequest.scheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deactivateScheduleRequest.opcRequestId,
                "if-match": deactivateScheduleRequest.ifMatch,
                "opc-retry-token": deactivateScheduleRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deactivateScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/schedules/{scheduleId}/actions/deactivate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a private endpoint using `privateEndpointId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDataSciencePrivateEndpointRequest
     * @return DeleteDataSciencePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteDataSciencePrivateEndpoint.ts.html |here} to see how to use DeleteDataSciencePrivateEndpoint API.
     */
    deleteDataSciencePrivateEndpoint(deleteDataSciencePrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteDataSciencePrivateEndpoint.");
            const operationName = "deleteDataSciencePrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/DataSciencePrivateEndpoint/DeleteDataSciencePrivateEndpoint";
            const pathParams = {
                "{dataSciencePrivateEndpointId}": deleteDataSciencePrivateEndpointRequest.dataSciencePrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteDataSciencePrivateEndpointRequest.opcRequestId,
                "if-match": deleteDataSciencePrivateEndpointRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDataSciencePrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSciencePrivateEndpoints/{dataSciencePrivateEndpointId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a job.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteJobRequest
     * @return DeleteJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteJob.ts.html |here} to see how to use DeleteJob API.
     */
    deleteJob(deleteJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteJob.");
            const operationName = "deleteJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/DeleteJob";
            const pathParams = {
                "{jobId}": deleteJobRequest.jobId
            };
            const queryParams = {
                "deleteRelatedJobRuns": deleteJobRequest.deleteRelatedJobRuns
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteJobRequest.ifMatch,
                "opc-request-id": deleteJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a job run.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteJobRunRequest
     * @return DeleteJobRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteJobRun.ts.html |here} to see how to use DeleteJobRun API.
     */
    deleteJobRun(deleteJobRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteJobRun.");
            const operationName = "deleteJobRun";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/DeleteJobRun";
            const pathParams = {
                "{jobRunId}": deleteJobRunRequest.jobRunId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteJobRunRequest.ifMatch,
                "opc-request-id": deleteJobRunRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteJobRunRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobRuns/{jobRunId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a MlApplication resource by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMlApplicationRequest
     * @return DeleteMlApplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteMlApplication.ts.html |here} to see how to use DeleteMlApplication API.
     */
    deleteMlApplication(deleteMlApplicationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteMlApplication.");
            const operationName = "deleteMlApplication";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplication/DeleteMlApplication";
            const pathParams = {
                "{mlApplicationId}": deleteMlApplicationRequest.mlApplicationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMlApplicationRequest.ifMatch,
                "opc-request-id": deleteMlApplicationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMlApplicationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplications/{mlApplicationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a MlApplicationImplementation resource by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMlApplicationImplementationRequest
     * @return DeleteMlApplicationImplementationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteMlApplicationImplementation.ts.html |here} to see how to use DeleteMlApplicationImplementation API.
     */
    deleteMlApplicationImplementation(deleteMlApplicationImplementationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteMlApplicationImplementation.");
            const operationName = "deleteMlApplicationImplementation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementation/DeleteMlApplicationImplementation";
            const pathParams = {
                "{mlApplicationImplementationId}": deleteMlApplicationImplementationRequest.mlApplicationImplementationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMlApplicationImplementationRequest.ifMatch,
                "opc-request-id": deleteMlApplicationImplementationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMlApplicationImplementationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementations/{mlApplicationImplementationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a MlApplicationInstance resource by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteMlApplicationInstanceRequest
     * @return DeleteMlApplicationInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteMlApplicationInstance.ts.html |here} to see how to use DeleteMlApplicationInstance API.
     */
    deleteMlApplicationInstance(deleteMlApplicationInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteMlApplicationInstance.");
            const operationName = "deleteMlApplicationInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstance/DeleteMlApplicationInstance";
            const pathParams = {
                "{mlApplicationInstanceId}": deleteMlApplicationInstanceRequest.mlApplicationInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMlApplicationInstanceRequest.ifMatch,
                "opc-request-id": deleteMlApplicationInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteMlApplicationInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstances/{mlApplicationInstanceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteModelRequest
     * @return DeleteModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteModel.ts.html |here} to see how to use DeleteModel API.
     */
    deleteModel(deleteModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteModel.");
            const operationName = "deleteModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/DeleteModel";
            const pathParams = {
                "{modelId}": deleteModelRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteModelRequest.ifMatch,
                "opc-request-id": deleteModelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes model custom metadata artifact for specified model metadata key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteModelCustomMetadatumArtifactRequest
     * @return DeleteModelCustomMetadatumArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteModelCustomMetadatumArtifact.ts.html |here} to see how to use DeleteModelCustomMetadatumArtifact API.
     */
    deleteModelCustomMetadatumArtifact(deleteModelCustomMetadatumArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteModelCustomMetadatumArtifact.");
            const operationName = "deleteModelCustomMetadatumArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/DeleteModelCustomMetadatumArtifact";
            const pathParams = {
                "{modelId}": deleteModelCustomMetadatumArtifactRequest.modelId,
                "{metadatumKeyName}": deleteModelCustomMetadatumArtifactRequest.metadatumKeyName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteModelCustomMetadatumArtifactRequest.opcRequestId,
                "if-match": deleteModelCustomMetadatumArtifactRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteModelCustomMetadatumArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/customMetadata/{metadatumKeyName}/artifact",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes model defined metadata artifact for specified model metadata key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteModelDefinedMetadatumArtifactRequest
     * @return DeleteModelDefinedMetadatumArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteModelDefinedMetadatumArtifact.ts.html |here} to see how to use DeleteModelDefinedMetadatumArtifact API.
     */
    deleteModelDefinedMetadatumArtifact(deleteModelDefinedMetadatumArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteModelDefinedMetadatumArtifact.");
            const operationName = "deleteModelDefinedMetadatumArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/DeleteModelDefinedMetadatumArtifact";
            const pathParams = {
                "{modelId}": deleteModelDefinedMetadatumArtifactRequest.modelId,
                "{metadatumKeyName}": deleteModelDefinedMetadatumArtifactRequest.metadatumKeyName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteModelDefinedMetadatumArtifactRequest.opcRequestId,
                "if-match": deleteModelDefinedMetadatumArtifactRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteModelDefinedMetadatumArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/definedMetadata/{metadatumKeyName}/artifact",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified model deployment. Any unsaved work in this model deployment is lost.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteModelDeploymentRequest
     * @return DeleteModelDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteModelDeployment.ts.html |here} to see how to use DeleteModelDeployment API.
     */
    deleteModelDeployment(deleteModelDeploymentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteModelDeployment.");
            const operationName = "deleteModelDeployment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/DeleteModelDeployment";
            const pathParams = {
                "{modelDeploymentId}": deleteModelDeploymentRequest.modelDeploymentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteModelDeploymentRequest.ifMatch,
                "opc-request-id": deleteModelDeploymentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteModelDeploymentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelDeployments/{modelDeploymentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified modelVersionSet.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteModelVersionSetRequest
     * @return DeleteModelVersionSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteModelVersionSet.ts.html |here} to see how to use DeleteModelVersionSet API.
     */
    deleteModelVersionSet(deleteModelVersionSetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteModelVersionSet.");
            const operationName = "deleteModelVersionSet";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelVersionSet/DeleteModelVersionSet";
            const pathParams = {
                "{modelVersionSetId}": deleteModelVersionSetRequest.modelVersionSetId
            };
            const queryParams = {
                "isDeleteRelatedModels": deleteModelVersionSetRequest.isDeleteRelatedModels
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteModelVersionSetRequest.ifMatch,
                "opc-request-id": deleteModelVersionSetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteModelVersionSetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelVersionSets/{modelVersionSetId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified notebook session. Any unsaved work in this notebook session are lost.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteNotebookSessionRequest
     * @return DeleteNotebookSessionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteNotebookSession.ts.html |here} to see how to use DeleteNotebookSession API.
     */
    deleteNotebookSession(deleteNotebookSessionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteNotebookSession.");
            const operationName = "deleteNotebookSession";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/DeleteNotebookSession";
            const pathParams = {
                "{notebookSessionId}": deleteNotebookSessionRequest.notebookSessionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteNotebookSessionRequest.ifMatch,
                "opc-request-id": deleteNotebookSessionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteNotebookSessionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/notebookSessions/{notebookSessionId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a Pipeline resource by identifier.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeletePipelineRequest
     * @return DeletePipelineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeletePipeline.ts.html |here} to see how to use DeletePipeline API.
     */
    deletePipeline(deletePipelineRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deletePipeline.");
            const operationName = "deletePipeline";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Pipeline/DeletePipeline";
            const pathParams = {
                "{pipelineId}": deletePipelineRequest.pipelineId
            };
            const queryParams = {
                "deleteRelatedPipelineRuns": deletePipelineRequest.deleteRelatedPipelineRuns,
                "deleteRelatedJobRuns": deletePipelineRequest.deleteRelatedJobRuns
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deletePipelineRequest.ifMatch,
                "opc-request-id": deletePipelineRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deletePipelineRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelines/{pipelineId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a PipelineRun resource by identifier.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeletePipelineRunRequest
     * @return DeletePipelineRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeletePipelineRun.ts.html |here} to see how to use DeletePipelineRun API.
     */
    deletePipelineRun(deletePipelineRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deletePipelineRun.");
            const operationName = "deletePipelineRun";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/PipelineRun/DeletePipelineRun";
            const pathParams = {
                "{pipelineRunId}": deletePipelineRunRequest.pipelineRunId
            };
            const queryParams = {
                "deleteRelatedJobRuns": deletePipelineRunRequest.deleteRelatedJobRuns
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deletePipelineRunRequest.ifMatch,
                "opc-request-id": deletePipelineRunRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deletePipelineRunRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelineRuns/{pipelineRunId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified project. This operation fails unless all associated resources (notebook sessions or models) are in a DELETED state. You must delete all associated resources before deleting a project.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteProjectRequest
     * @return DeleteProjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteProject.ts.html |here} to see how to use DeleteProject API.
     */
    deleteProject(deleteProjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteProject.");
            const operationName = "deleteProject";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Project/DeleteProject";
            const pathParams = {
                "{projectId}": deleteProjectRequest.projectId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteProjectRequest.ifMatch,
                "opc-request-id": deleteProjectRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteProjectRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/projects/{projectId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a Schedule resource by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteScheduleRequest
     * @return DeleteScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteSchedule.ts.html |here} to see how to use DeleteSchedule API.
     */
    deleteSchedule(deleteScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#deleteSchedule.");
            const operationName = "deleteSchedule";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Schedule/DeleteSchedule";
            const pathParams = {
                "{scheduleId}": deleteScheduleRequest.scheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteScheduleRequest.ifMatch,
                "opc-request-id": deleteScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/schedules/{scheduleId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disable trigger of given name for given ML Application Instance View flow
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DisableMlApplicationInstanceViewTriggerRequest
     * @return DisableMlApplicationInstanceViewTriggerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DisableMlApplicationInstanceViewTrigger.ts.html |here} to see how to use DisableMlApplicationInstanceViewTrigger API.
     */
    disableMlApplicationInstanceViewTrigger(disableMlApplicationInstanceViewTriggerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#disableMlApplicationInstanceViewTrigger.");
            const operationName = "disableMlApplicationInstanceViewTrigger";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstanceView/DisableMlApplicationInstanceViewTrigger";
            const pathParams = {
                "{mlApplicationInstanceViewId}": disableMlApplicationInstanceViewTriggerRequest.mlApplicationInstanceViewId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": disableMlApplicationInstanceViewTriggerRequest.ifMatch,
                "opc-request-id": disableMlApplicationInstanceViewTriggerRequest.opcRequestId,
                "opc-retry-token": disableMlApplicationInstanceViewTriggerRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableMlApplicationInstanceViewTriggerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstanceViews/{mlApplicationInstanceViewId}/actions/disableTrigger",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(disableMlApplicationInstanceViewTriggerRequest.disableMlApplicationInstanceViewTriggerDetails, "DisableMlApplicationInstanceViewTriggerDetails", model.DisableMlApplicationInstanceViewTriggerDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationInstanceView",
                    bodyModel: model.MlApplicationInstanceView,
                    type: "model.MlApplicationInstanceView",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enable trigger of given name for given ML Application Instance View flow
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableMlApplicationInstanceViewTriggerRequest
     * @return EnableMlApplicationInstanceViewTriggerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/EnableMlApplicationInstanceViewTrigger.ts.html |here} to see how to use EnableMlApplicationInstanceViewTrigger API.
     */
    enableMlApplicationInstanceViewTrigger(enableMlApplicationInstanceViewTriggerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#enableMlApplicationInstanceViewTrigger.");
            const operationName = "enableMlApplicationInstanceViewTrigger";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstanceView/EnableMlApplicationInstanceViewTrigger";
            const pathParams = {
                "{mlApplicationInstanceViewId}": enableMlApplicationInstanceViewTriggerRequest.mlApplicationInstanceViewId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": enableMlApplicationInstanceViewTriggerRequest.ifMatch,
                "opc-request-id": enableMlApplicationInstanceViewTriggerRequest.opcRequestId,
                "opc-retry-token": enableMlApplicationInstanceViewTriggerRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableMlApplicationInstanceViewTriggerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstanceViews/{mlApplicationInstanceViewId}/actions/enableTrigger",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableMlApplicationInstanceViewTriggerRequest.enableMlApplicationInstanceViewTriggerDetails, "EnableMlApplicationInstanceViewTriggerDetails", model.EnableMlApplicationInstanceViewTriggerDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationInstanceView",
                    bodyModel: model.MlApplicationInstanceView,
                    type: "model.MlApplicationInstanceView",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Export model artifact from source to the service bucket
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ExportModelArtifactRequest
     * @return ExportModelArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ExportModelArtifact.ts.html |here} to see how to use ExportModelArtifact API.
     */
    exportModelArtifact(exportModelArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#exportModelArtifact.");
            const operationName = "exportModelArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/ExportModelArtifact";
            const pathParams = {
                "{modelId}": exportModelArtifactRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": exportModelArtifactRequest.opcRequestId,
                "opc-retry-token": exportModelArtifactRequest.opcRetryToken,
                "if-match": exportModelArtifactRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, exportModelArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/actions/exportArtifact",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(exportModelArtifactRequest.exportModelArtifactDetails, "ExportModelArtifactDetails", model.ExportModelArtifactDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves an private endpoint using a `privateEndpointId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDataSciencePrivateEndpointRequest
     * @return GetDataSciencePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetDataSciencePrivateEndpoint.ts.html |here} to see how to use GetDataSciencePrivateEndpoint API.
     */
    getDataSciencePrivateEndpoint(getDataSciencePrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getDataSciencePrivateEndpoint.");
            const operationName = "getDataSciencePrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/DataSciencePrivateEndpoint/GetDataSciencePrivateEndpoint";
            const pathParams = {
                "{dataSciencePrivateEndpointId}": getDataSciencePrivateEndpointRequest.dataSciencePrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDataSciencePrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDataSciencePrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSciencePrivateEndpoints/{dataSciencePrivateEndpointId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataSciencePrivateEndpoint",
                    bodyModel: model.DataSciencePrivateEndpoint,
                    type: "model.DataSciencePrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a job.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetJobRequest
     * @return GetJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetJob.ts.html |here} to see how to use GetJob API.
     */
    getJob(getJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getJob.");
            const operationName = "getJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/GetJob";
            const pathParams = {
                "{jobId}": getJobRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: model.Job,
                    type: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads job artifact content for specified job.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetJobArtifactContentRequest
     * @return GetJobArtifactContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetJobArtifactContent.ts.html |here} to see how to use GetJobArtifactContent API.
     */
    getJobArtifactContent(getJobArtifactContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getJobArtifactContent.");
            const operationName = "getJobArtifactContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/GetJobArtifactContent";
            const pathParams = {
                "{jobId}": getJobArtifactContentRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobArtifactContentRequest.opcRequestId,
                "range": getJobArtifactContentRequest.range
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getJobArtifactContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}/artifact/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a job run.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetJobRunRequest
     * @return GetJobRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetJobRun.ts.html |here} to see how to use GetJobRun API.
     */
    getJobRun(getJobRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getJobRun.");
            const operationName = "getJobRun";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/GetJobRun";
            const pathParams = {
                "{jobRunId}": getJobRunRequest.jobRunId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobRunRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getJobRunRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobRuns/{jobRunId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobRun",
                    bodyModel: model.JobRun,
                    type: "model.JobRun",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a MlApplication by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMlApplicationRequest
     * @return GetMlApplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetMlApplication.ts.html |here} to see how to use GetMlApplication API.
     */
    getMlApplication(getMlApplicationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getMlApplication.");
            const operationName = "getMlApplication";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplication/GetMlApplication";
            const pathParams = {
                "{mlApplicationId}": getMlApplicationRequest.mlApplicationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMlApplicationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMlApplicationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplications/{mlApplicationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplication",
                    bodyModel: model.MlApplication,
                    type: "model.MlApplication",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves ML Application package for MlApplicationImplementationVersion with given id.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMlApplicationHistoricalPackageContentRequest
     * @return GetMlApplicationHistoricalPackageContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetMlApplicationHistoricalPackageContent.ts.html |here} to see how to use GetMlApplicationHistoricalPackageContent API.
     */
    getMlApplicationHistoricalPackageContent(getMlApplicationHistoricalPackageContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getMlApplicationHistoricalPackageContent.");
            const operationName = "getMlApplicationHistoricalPackageContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementationVersion/GetMlApplicationHistoricalPackageContent";
            const pathParams = {
                "{mlApplicationImplementationVersionId}": getMlApplicationHistoricalPackageContentRequest.mlApplicationImplementationVersionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMlApplicationHistoricalPackageContentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMlApplicationHistoricalPackageContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementationVersions/{mlApplicationImplementationVersionId}/mlApplicationHistoricalPackage/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a MlApplicationImplementation by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMlApplicationImplementationRequest
     * @return GetMlApplicationImplementationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetMlApplicationImplementation.ts.html |here} to see how to use GetMlApplicationImplementation API.
     */
    getMlApplicationImplementation(getMlApplicationImplementationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getMlApplicationImplementation.");
            const operationName = "getMlApplicationImplementation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementation/GetMlApplicationImplementation";
            const pathParams = {
                "{mlApplicationImplementationId}": getMlApplicationImplementationRequest.mlApplicationImplementationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMlApplicationImplementationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMlApplicationImplementationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementations/{mlApplicationImplementationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationImplementation",
                    bodyModel: model.MlApplicationImplementation,
                    type: "model.MlApplicationImplementation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a MlApplicationImplementationVersion by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMlApplicationImplementationVersionRequest
     * @return GetMlApplicationImplementationVersionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetMlApplicationImplementationVersion.ts.html |here} to see how to use GetMlApplicationImplementationVersion API.
     */
    getMlApplicationImplementationVersion(getMlApplicationImplementationVersionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getMlApplicationImplementationVersion.");
            const operationName = "getMlApplicationImplementationVersion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementationVersion/GetMlApplicationImplementationVersion";
            const pathParams = {
                "{mlApplicationImplementationVersionId}": getMlApplicationImplementationVersionRequest.mlApplicationImplementationVersionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMlApplicationImplementationVersionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMlApplicationImplementationVersionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementationVersions/{mlApplicationImplementationVersionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationImplementationVersion",
                    bodyModel: model.MlApplicationImplementationVersion,
                    type: "model.MlApplicationImplementationVersion",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a MlApplicationInstance by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMlApplicationInstanceRequest
     * @return GetMlApplicationInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetMlApplicationInstance.ts.html |here} to see how to use GetMlApplicationInstance API.
     */
    getMlApplicationInstance(getMlApplicationInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getMlApplicationInstance.");
            const operationName = "getMlApplicationInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstance/GetMlApplicationInstance";
            const pathParams = {
                "{mlApplicationInstanceId}": getMlApplicationInstanceRequest.mlApplicationInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMlApplicationInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMlApplicationInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstances/{mlApplicationInstanceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationInstance",
                    bodyModel: model.MlApplicationInstance,
                    type: "model.MlApplicationInstance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a MlApplicationInstanceView by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMlApplicationInstanceViewRequest
     * @return GetMlApplicationInstanceViewResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetMlApplicationInstanceView.ts.html |here} to see how to use GetMlApplicationInstanceView API.
     */
    getMlApplicationInstanceView(getMlApplicationInstanceViewRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getMlApplicationInstanceView.");
            const operationName = "getMlApplicationInstanceView";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstanceView/GetMlApplicationInstanceView";
            const pathParams = {
                "{mlApplicationInstanceViewId}": getMlApplicationInstanceViewRequest.mlApplicationInstanceViewId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMlApplicationInstanceViewRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMlApplicationInstanceViewRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstanceViews/{mlApplicationInstanceViewId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationInstanceView",
                    bodyModel: model.MlApplicationInstanceView,
                    type: "model.MlApplicationInstanceView",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves last ML Application package uploaded for given ML Application Implementation
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetMlApplicationPackageContentRequest
     * @return GetMlApplicationPackageContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetMlApplicationPackageContent.ts.html |here} to see how to use GetMlApplicationPackageContent API.
     */
    getMlApplicationPackageContent(getMlApplicationPackageContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getMlApplicationPackageContent.");
            const operationName = "getMlApplicationPackageContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementation/GetMlApplicationPackageContent";
            const pathParams = {
                "{mlApplicationImplementationId}": getMlApplicationPackageContentRequest.mlApplicationImplementationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMlApplicationPackageContentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getMlApplicationPackageContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementations/{mlApplicationImplementationId}/mlApplicationPackage/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-ml-app-package-args"),
                            key: "opcMlAppPackageArgs",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified model's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetModelRequest
     * @return GetModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModel.ts.html |here} to see how to use GetModel API.
     */
    getModel(getModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getModel.");
            const operationName = "getModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/GetModel";
            const pathParams = {
                "{modelId}": getModelRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getModelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "model",
                    bodyModel: model.Model,
                    type: "model.Model",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads model artifact content for specified model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetModelArtifactContentRequest
     * @return GetModelArtifactContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelArtifactContent.ts.html |here} to see how to use GetModelArtifactContent API.
     */
    getModelArtifactContent(getModelArtifactContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getModelArtifactContent.");
            const operationName = "getModelArtifactContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/GetModelArtifactContent";
            const pathParams = {
                "{modelId}": getModelArtifactContentRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getModelArtifactContentRequest.opcRequestId,
                "range": getModelArtifactContentRequest.range
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getModelArtifactContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/artifact/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads model custom metadata artifact content for specified model metadata key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetModelCustomMetadatumArtifactContentRequest
     * @return GetModelCustomMetadatumArtifactContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelCustomMetadatumArtifactContent.ts.html |here} to see how to use GetModelCustomMetadatumArtifactContent API.
     */
    getModelCustomMetadatumArtifactContent(getModelCustomMetadatumArtifactContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getModelCustomMetadatumArtifactContent.");
            const operationName = "getModelCustomMetadatumArtifactContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/GetModelCustomMetadatumArtifactContent";
            const pathParams = {
                "{modelId}": getModelCustomMetadatumArtifactContentRequest.modelId,
                "{metadatumKeyName}": getModelCustomMetadatumArtifactContentRequest.metadatumKeyName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getModelCustomMetadatumArtifactContentRequest.opcRequestId,
                "range": getModelCustomMetadatumArtifactContentRequest.range
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getModelCustomMetadatumArtifactContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/customMetadata/{metadatumKeyName}/artifact/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Downloads model defined metadata artifact content for specified model metadata key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetModelDefinedMetadatumArtifactContentRequest
     * @return GetModelDefinedMetadatumArtifactContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelDefinedMetadatumArtifactContent.ts.html |here} to see how to use GetModelDefinedMetadatumArtifactContent API.
     */
    getModelDefinedMetadatumArtifactContent(getModelDefinedMetadatumArtifactContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getModelDefinedMetadatumArtifactContent.");
            const operationName = "getModelDefinedMetadatumArtifactContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/GetModelDefinedMetadatumArtifactContent";
            const pathParams = {
                "{modelId}": getModelDefinedMetadatumArtifactContentRequest.modelId,
                "{metadatumKeyName}": getModelDefinedMetadatumArtifactContentRequest.metadatumKeyName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getModelDefinedMetadatumArtifactContentRequest.opcRequestId,
                "range": getModelDefinedMetadatumArtifactContentRequest.range
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getModelDefinedMetadatumArtifactContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/definedMetadata/{metadatumKeyName}/artifact/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves the model deployment for the specified `modelDeploymentId`.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetModelDeploymentRequest
     * @return GetModelDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelDeployment.ts.html |here} to see how to use GetModelDeployment API.
     */
    getModelDeployment(getModelDeploymentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getModelDeployment.");
            const operationName = "getModelDeployment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/GetModelDeployment";
            const pathParams = {
                "{modelDeploymentId}": getModelDeploymentRequest.modelDeploymentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getModelDeploymentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getModelDeploymentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelDeployments/{modelDeploymentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "modelDeployment",
                    bodyModel: model.ModelDeployment,
                    type: "model.ModelDeployment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets provenance information for specified model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetModelProvenanceRequest
     * @return GetModelProvenanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelProvenance.ts.html |here} to see how to use GetModelProvenance API.
     */
    getModelProvenance(getModelProvenanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getModelProvenance.");
            const operationName = "getModelProvenance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/GetModelProvenance";
            const pathParams = {
                "{modelId}": getModelProvenanceRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getModelProvenanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getModelProvenanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/provenance",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "modelProvenance",
                    bodyModel: model.ModelProvenance,
                    type: "model.ModelProvenance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified model version set information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetModelVersionSetRequest
     * @return GetModelVersionSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelVersionSet.ts.html |here} to see how to use GetModelVersionSet API.
     */
    getModelVersionSet(getModelVersionSetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getModelVersionSet.");
            const operationName = "getModelVersionSet";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelVersionSet/GetModelVersionSet";
            const pathParams = {
                "{modelVersionSetId}": getModelVersionSetRequest.modelVersionSetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getModelVersionSetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getModelVersionSetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelVersionSets/{modelVersionSetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "modelVersionSet",
                    bodyModel: model.ModelVersionSet,
                    type: "model.ModelVersionSet",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified notebook session's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetNotebookSessionRequest
     * @return GetNotebookSessionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetNotebookSession.ts.html |here} to see how to use GetNotebookSession API.
     */
    getNotebookSession(getNotebookSessionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getNotebookSession.");
            const operationName = "getNotebookSession";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/GetNotebookSession";
            const pathParams = {
                "{notebookSessionId}": getNotebookSessionRequest.notebookSessionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getNotebookSessionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getNotebookSessionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/notebookSessions/{notebookSessionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "notebookSession",
                    bodyModel: model.NotebookSession,
                    type: "model.NotebookSession",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a Pipeline by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPipelineRequest
     * @return GetPipelineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetPipeline.ts.html |here} to see how to use GetPipeline API.
     */
    getPipeline(getPipelineRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getPipeline.");
            const operationName = "getPipeline";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Pipeline/GetPipeline";
            const pathParams = {
                "{pipelineId}": getPipelineRequest.pipelineId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getPipelineRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getPipelineRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelines/{pipelineId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pipeline",
                    bodyModel: model.Pipeline,
                    type: "model.Pipeline",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a PipelineRun by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPipelineRunRequest
     * @return GetPipelineRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetPipelineRun.ts.html |here} to see how to use GetPipelineRun API.
     */
    getPipelineRun(getPipelineRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getPipelineRun.");
            const operationName = "getPipelineRun";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/PipelineRun/GetPipelineRun";
            const pathParams = {
                "{pipelineRunId}": getPipelineRunRequest.pipelineRunId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getPipelineRunRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getPipelineRunRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelineRuns/{pipelineRunId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pipelineRun",
                    bodyModel: model.PipelineRun,
                    type: "model.PipelineRun",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified project's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetProjectRequest
     * @return GetProjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetProject.ts.html |here} to see how to use GetProject API.
     */
    getProject(getProjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getProject.");
            const operationName = "getProject";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Project/GetProject";
            const pathParams = {
                "{projectId}": getProjectRequest.projectId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getProjectRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getProjectRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/projects/{projectId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "project",
                    bodyModel: model.Project,
                    type: "model.Project",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a Schedule by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetScheduleRequest
     * @return GetScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetSchedule.ts.html |here} to see how to use GetSchedule API.
     */
    getSchedule(getScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getSchedule.");
            const operationName = "getSchedule";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Schedule/GetSchedule";
            const pathParams = {
                "{scheduleId}": getScheduleRequest.scheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/schedules/{scheduleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "schedule",
                    bodyModel: model.Schedule,
                    type: "model.Schedule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Download the artifact for a step in the pipeline.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetStepArtifactContentRequest
     * @return GetStepArtifactContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetStepArtifactContent.ts.html |here} to see how to use GetStepArtifactContent API.
     */
    getStepArtifactContent(getStepArtifactContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getStepArtifactContent.");
            const operationName = "getStepArtifactContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Pipeline/GetStepArtifactContent";
            const pathParams = {
                "{pipelineId}": getStepArtifactContentRequest.pipelineId,
                "{stepName}": getStepArtifactContentRequest.stepName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getStepArtifactContentRequest.opcRequestId,
                "range": getStepArtifactContentRequest.range
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getStepArtifactContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelines/{pipelineId}/steps/{stepName}/artifact/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink, true);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified work request's information.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/WorkRequest/GetWorkRequest";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets job artifact metadata.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param HeadJobArtifactRequest
     * @return HeadJobArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/HeadJobArtifact.ts.html |here} to see how to use HeadJobArtifact API.
     */
    headJobArtifact(headJobArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#headJobArtifact.");
            const operationName = "headJobArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/HeadJobArtifact";
            const pathParams = {
                "{jobId}": headJobArtifactRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": headJobArtifactRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, headJobArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}/artifact/content",
                method: "HEAD",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets model artifact metadata for specified model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param HeadModelArtifactRequest
     * @return HeadModelArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/HeadModelArtifact.ts.html |here} to see how to use HeadModelArtifact API.
     */
    headModelArtifact(headModelArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#headModelArtifact.");
            const operationName = "headModelArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/HeadModelArtifact";
            const pathParams = {
                "{modelId}": headModelArtifactRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": headModelArtifactRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, headModelArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/artifact/content",
                method: "HEAD",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets custom metadata artifact metadata for specified model metadata key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param HeadModelCustomMetadatumArtifactRequest
     * @return HeadModelCustomMetadatumArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/HeadModelCustomMetadatumArtifact.ts.html |here} to see how to use HeadModelCustomMetadatumArtifact API.
     */
    headModelCustomMetadatumArtifact(headModelCustomMetadatumArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#headModelCustomMetadatumArtifact.");
            const operationName = "headModelCustomMetadatumArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/HeadModelCustomMetadatumArtifact";
            const pathParams = {
                "{modelId}": headModelCustomMetadatumArtifactRequest.modelId,
                "{metadatumKeyName}": headModelCustomMetadatumArtifactRequest.metadatumKeyName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": headModelCustomMetadatumArtifactRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, headModelCustomMetadatumArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/customMetadata/{metadatumKeyName}/artifact/content",
                method: "HEAD",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets defined metadata artifact metadata for specified model metadata key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param HeadModelDefinedMetadatumArtifactRequest
     * @return HeadModelDefinedMetadatumArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/HeadModelDefinedMetadatumArtifact.ts.html |here} to see how to use HeadModelDefinedMetadatumArtifact API.
     */
    headModelDefinedMetadatumArtifact(headModelDefinedMetadatumArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#headModelDefinedMetadatumArtifact.");
            const operationName = "headModelDefinedMetadatumArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/HeadModelDefinedMetadatumArtifact";
            const pathParams = {
                "{modelId}": headModelDefinedMetadatumArtifactRequest.modelId,
                "{metadatumKeyName}": headModelDefinedMetadatumArtifactRequest.metadatumKeyName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": headModelDefinedMetadatumArtifactRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, headModelDefinedMetadatumArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/definedMetadata/{metadatumKeyName}/artifact/content",
                method: "HEAD",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the artifact metadata for a step in the pipeline.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param HeadStepArtifactRequest
     * @return HeadStepArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/HeadStepArtifact.ts.html |here} to see how to use HeadStepArtifact API.
     */
    headStepArtifact(headStepArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#headStepArtifact.");
            const operationName = "headStepArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Pipeline/HeadStepArtifact";
            const pathParams = {
                "{pipelineId}": headStepArtifactRequest.pipelineId,
                "{stepName}": headStepArtifactRequest.stepName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": headStepArtifactRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, headStepArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelines/{pipelineId}/steps/{stepName}/artifact/content",
                method: "HEAD",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Import model artifact from service bucket
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ImportModelArtifactRequest
     * @return ImportModelArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ImportModelArtifact.ts.html |here} to see how to use ImportModelArtifact API.
     */
    importModelArtifact(importModelArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#importModelArtifact.");
            const operationName = "importModelArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/ImportModelArtifact";
            const pathParams = {
                "{modelId}": importModelArtifactRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": importModelArtifactRequest.opcRequestId,
                "if-match": importModelArtifactRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, importModelArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/actions/importArtifact",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(importModelArtifactRequest.importModelArtifactDetails, "ImportModelArtifactDetails", model.ImportModelArtifactDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * List containers.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListContainersRequest
     * @return ListContainersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListContainers.ts.html |here} to see how to use ListContainers API.
     */
    listContainers(listContainersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listContainers.");
            const operationName = "listContainers";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ContainerSummary/ListContainers";
            const pathParams = {};
            const queryParams = {
                "isLatest": listContainersRequest.isLatest,
                "displayName": listContainersRequest.displayName,
                "containerName": listContainersRequest.containerName,
                "lifecycleState": listContainersRequest.lifecycleState,
                "targetWorkload": listContainersRequest.targetWorkload,
                "usageQueryParam": listContainersRequest.usageQueryParam,
                "tagQueryParam": listContainersRequest.tagQueryParam,
                "limit": listContainersRequest.limit,
                "page": listContainersRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listContainersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listContainersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containers",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ContainerSummary,
                    type: "Array<model.ContainerSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listContainersRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ContainerSummary objects
     * contained in responses from the listContainers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllContainers(request) {
        return oci_common_1.paginateRecords(request, req => this.listContainers(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listContainersResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listContainers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllContainersResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listContainers(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ContainerSummary objects
     * contained in responses from the listContainers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listContainersRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listContainers(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listContainers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listContainersResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listContainers(req));
    }
    /**
     * Lists all Data Science private endpoints in the specified compartment. The query must include compartmentId. The query can also include one other parameter. If the query doesn't include compartmentId, or includes compartmentId with two or more other parameters, then an error is returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDataSciencePrivateEndpointsRequest
     * @return ListDataSciencePrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListDataSciencePrivateEndpoints.ts.html |here} to see how to use ListDataSciencePrivateEndpoints API.
     */
    listDataSciencePrivateEndpoints(listDataSciencePrivateEndpointsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listDataSciencePrivateEndpoints.");
            const operationName = "listDataSciencePrivateEndpoints";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/DataSciencePrivateEndpoint/ListDataSciencePrivateEndpoints";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDataSciencePrivateEndpointsRequest.compartmentId,
                "limit": listDataSciencePrivateEndpointsRequest.limit,
                "page": listDataSciencePrivateEndpointsRequest.page,
                "lifecycleState": listDataSciencePrivateEndpointsRequest.lifecycleState,
                "sortBy": listDataSciencePrivateEndpointsRequest.sortBy,
                "sortOrder": listDataSciencePrivateEndpointsRequest.sortOrder,
                "displayName": listDataSciencePrivateEndpointsRequest.displayName,
                "createdBy": listDataSciencePrivateEndpointsRequest.createdBy,
                "dataScienceResourceType": listDataSciencePrivateEndpointsRequest.dataScienceResourceType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDataSciencePrivateEndpointsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDataSciencePrivateEndpointsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSciencePrivateEndpoints",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.DataSciencePrivateEndpointSummary,
                    type: "Array<model.DataSciencePrivateEndpointSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listDataSciencePrivateEndpointsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.DataSciencePrivateEndpointSummary objects
     * contained in responses from the listDataSciencePrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDataSciencePrivateEndpoints(request) {
        return oci_common_1.paginateRecords(request, req => this.listDataSciencePrivateEndpoints(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listDataSciencePrivateEndpointsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listDataSciencePrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDataSciencePrivateEndpointsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDataSciencePrivateEndpoints(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.DataSciencePrivateEndpointSummary objects
     * contained in responses from the listDataSciencePrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDataSciencePrivateEndpointsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listDataSciencePrivateEndpoints(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDataSciencePrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDataSciencePrivateEndpointsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listDataSciencePrivateEndpoints(req));
    }
    /**
     * List fast launch capable job configs in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListFastLaunchJobConfigsRequest
     * @return ListFastLaunchJobConfigsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListFastLaunchJobConfigs.ts.html |here} to see how to use ListFastLaunchJobConfigs API.
     */
    listFastLaunchJobConfigs(listFastLaunchJobConfigsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listFastLaunchJobConfigs.");
            const operationName = "listFastLaunchJobConfigs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/FastLaunchJobConfigSummary/ListFastLaunchJobConfigs";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listFastLaunchJobConfigsRequest.compartmentId,
                "limit": listFastLaunchJobConfigsRequest.limit,
                "page": listFastLaunchJobConfigsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listFastLaunchJobConfigsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listFastLaunchJobConfigsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fastLaunchJobConfigs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.FastLaunchJobConfigSummary,
                    type: "Array<model.FastLaunchJobConfigSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listFastLaunchJobConfigsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.FastLaunchJobConfigSummary objects
     * contained in responses from the listFastLaunchJobConfigs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFastLaunchJobConfigs(request) {
        return oci_common_1.paginateRecords(request, req => this.listFastLaunchJobConfigs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listFastLaunchJobConfigsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listFastLaunchJobConfigs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFastLaunchJobConfigsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listFastLaunchJobConfigs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.FastLaunchJobConfigSummary objects
     * contained in responses from the listFastLaunchJobConfigs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listFastLaunchJobConfigsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listFastLaunchJobConfigs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listFastLaunchJobConfigs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listFastLaunchJobConfigsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listFastLaunchJobConfigs(req));
    }
    /**
     * List out job runs.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListJobRunsRequest
     * @return ListJobRunsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListJobRuns.ts.html |here} to see how to use ListJobRuns API.
     */
    listJobRuns(listJobRunsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listJobRuns.");
            const operationName = "listJobRuns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRunSummary/ListJobRuns";
            const pathParams = {};
            const queryParams = {
                "id": listJobRunsRequest.id,
                "jobId": listJobRunsRequest.jobId,
                "compartmentId": listJobRunsRequest.compartmentId,
                "createdBy": listJobRunsRequest.createdBy,
                "displayName": listJobRunsRequest.displayName,
                "limit": listJobRunsRequest.limit,
                "page": listJobRunsRequest.page,
                "sortOrder": listJobRunsRequest.sortOrder,
                "sortBy": listJobRunsRequest.sortBy,
                "lifecycleState": listJobRunsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobRunsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listJobRunsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobRuns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.JobRunSummary,
                    type: "Array<model.JobRunSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listJobRunsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.JobRunSummary objects
     * contained in responses from the listJobRuns operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllJobRuns(request) {
        return oci_common_1.paginateRecords(request, req => this.listJobRuns(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listJobRunsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listJobRuns operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllJobRunsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listJobRuns(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.JobRunSummary objects
     * contained in responses from the listJobRuns operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listJobRunsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listJobRuns(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listJobRuns operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listJobRunsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listJobRuns(req));
    }
    /**
     * List job shapes available in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListJobShapesRequest
     * @return ListJobShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListJobShapes.ts.html |here} to see how to use ListJobShapes API.
     */
    listJobShapes(listJobShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listJobShapes.");
            const operationName = "listJobShapes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobShapeSummary/ListJobShapes";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listJobShapesRequest.compartmentId,
                "limit": listJobShapesRequest.limit,
                "page": listJobShapesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobShapesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listJobShapesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobShapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.JobShapeSummary,
                    type: "Array<model.JobShapeSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listJobShapesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.JobShapeSummary objects
     * contained in responses from the listJobShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllJobShapes(request) {
        return oci_common_1.paginateRecords(request, req => this.listJobShapes(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listJobShapesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listJobShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllJobShapesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listJobShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.JobShapeSummary objects
     * contained in responses from the listJobShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listJobShapesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listJobShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listJobShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listJobShapesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listJobShapes(req));
    }
    /**
     * List jobs in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListJobsRequest
     * @return ListJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListJobs.ts.html |here} to see how to use ListJobs API.
     */
    listJobs(listJobsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listJobs.");
            const operationName = "listJobs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobSummary/ListJobs";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listJobsRequest.compartmentId,
                "projectId": listJobsRequest.projectId,
                "id": listJobsRequest.id,
                "displayName": listJobsRequest.displayName,
                "lifecycleState": listJobsRequest.lifecycleState,
                "createdBy": listJobsRequest.createdBy,
                "limit": listJobsRequest.limit,
                "page": listJobsRequest.page,
                "sortOrder": listJobsRequest.sortOrder,
                "sortBy": listJobsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listJobsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.JobSummary,
                    type: "Array<model.JobSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listJobsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.JobSummary objects
     * contained in responses from the listJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllJobs(request) {
        return oci_common_1.paginateRecords(request, req => this.listJobs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listJobsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllJobsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listJobs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.JobSummary objects
     * contained in responses from the listJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listJobsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listJobs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listJobsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listJobs(req));
    }
    /**
     * Returns a list of MlApplicationImplementationVersions.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMlApplicationImplementationVersionsRequest
     * @return ListMlApplicationImplementationVersionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListMlApplicationImplementationVersions.ts.html |here} to see how to use ListMlApplicationImplementationVersions API.
     */
    listMlApplicationImplementationVersions(listMlApplicationImplementationVersionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listMlApplicationImplementationVersions.");
            const operationName = "listMlApplicationImplementationVersions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementationVersion/ListMlApplicationImplementationVersions";
            const pathParams = {};
            const queryParams = {
                "mlApplicationImplementationId": listMlApplicationImplementationVersionsRequest.mlApplicationImplementationId,
                "lifecycleState": listMlApplicationImplementationVersionsRequest.lifecycleState,
                "limit": listMlApplicationImplementationVersionsRequest.limit,
                "page": listMlApplicationImplementationVersionsRequest.page,
                "sortOrder": listMlApplicationImplementationVersionsRequest.sortOrder,
                "sortBy": listMlApplicationImplementationVersionsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMlApplicationImplementationVersionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMlApplicationImplementationVersionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementationVersions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationImplementationVersionCollection",
                    bodyModel: model.MlApplicationImplementationVersionCollection,
                    type: "model.MlApplicationImplementationVersionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of MlApplicationImplementations.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMlApplicationImplementationsRequest
     * @return ListMlApplicationImplementationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListMlApplicationImplementations.ts.html |here} to see how to use ListMlApplicationImplementations API.
     */
    listMlApplicationImplementations(listMlApplicationImplementationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listMlApplicationImplementations.");
            const operationName = "listMlApplicationImplementations";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementation/ListMlApplicationImplementations";
            const pathParams = {};
            const queryParams = {
                "mlApplicationImplementationId": listMlApplicationImplementationsRequest.mlApplicationImplementationId,
                "name": listMlApplicationImplementationsRequest.name,
                "mlApplicationId": listMlApplicationImplementationsRequest.mlApplicationId,
                "compartmentId": listMlApplicationImplementationsRequest.compartmentId,
                "compartmentIdInSubtree": listMlApplicationImplementationsRequest.compartmentIdInSubtree,
                "lifecycleState": listMlApplicationImplementationsRequest.lifecycleState,
                "limit": listMlApplicationImplementationsRequest.limit,
                "page": listMlApplicationImplementationsRequest.page,
                "sortOrder": listMlApplicationImplementationsRequest.sortOrder,
                "sortBy": listMlApplicationImplementationsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMlApplicationImplementationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMlApplicationImplementationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationImplementationCollection",
                    bodyModel: model.MlApplicationImplementationCollection,
                    type: "model.MlApplicationImplementationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of MlApplicationInstanceViews.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMlApplicationInstanceViewsRequest
     * @return ListMlApplicationInstanceViewsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListMlApplicationInstanceViews.ts.html |here} to see how to use ListMlApplicationInstanceViews API.
     */
    listMlApplicationInstanceViews(listMlApplicationInstanceViewsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listMlApplicationInstanceViews.");
            const operationName = "listMlApplicationInstanceViews";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstanceView/ListMlApplicationInstanceViews";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMlApplicationInstanceViewsRequest.compartmentId,
                "displayName": listMlApplicationInstanceViewsRequest.displayName,
                "mlApplicationId": listMlApplicationInstanceViewsRequest.mlApplicationId,
                "mlApplicationImplementationId": listMlApplicationInstanceViewsRequest.mlApplicationImplementationId,
                "lifecycleState": listMlApplicationInstanceViewsRequest.lifecycleState,
                "limit": listMlApplicationInstanceViewsRequest.limit,
                "page": listMlApplicationInstanceViewsRequest.page,
                "sortOrder": listMlApplicationInstanceViewsRequest.sortOrder,
                "sortBy": listMlApplicationInstanceViewsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMlApplicationInstanceViewsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMlApplicationInstanceViewsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstanceViews",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationInstanceViewCollection",
                    bodyModel: model.MlApplicationInstanceViewCollection,
                    type: "model.MlApplicationInstanceViewCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of MlApplicationsInstances.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMlApplicationInstancesRequest
     * @return ListMlApplicationInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListMlApplicationInstances.ts.html |here} to see how to use ListMlApplicationInstances API.
     */
    listMlApplicationInstances(listMlApplicationInstancesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listMlApplicationInstances.");
            const operationName = "listMlApplicationInstances";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstance/ListMlApplicationInstances";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMlApplicationInstancesRequest.compartmentId,
                "displayName": listMlApplicationInstancesRequest.displayName,
                "mlApplicationId": listMlApplicationInstancesRequest.mlApplicationId,
                "lifecycleState": listMlApplicationInstancesRequest.lifecycleState,
                "limit": listMlApplicationInstancesRequest.limit,
                "page": listMlApplicationInstancesRequest.page,
                "sortOrder": listMlApplicationInstancesRequest.sortOrder,
                "sortBy": listMlApplicationInstancesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMlApplicationInstancesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMlApplicationInstancesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstances",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationInstanceCollection",
                    bodyModel: model.MlApplicationInstanceCollection,
                    type: "model.MlApplicationInstanceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of MlApplications.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMlApplicationsRequest
     * @return ListMlApplicationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListMlApplications.ts.html |here} to see how to use ListMlApplications API.
     */
    listMlApplications(listMlApplicationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listMlApplications.");
            const operationName = "listMlApplications";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplication/ListMlApplications";
            const pathParams = {};
            const queryParams = {
                "mlApplicationId": listMlApplicationsRequest.mlApplicationId,
                "compartmentId": listMlApplicationsRequest.compartmentId,
                "compartmentIdInSubtree": listMlApplicationsRequest.compartmentIdInSubtree,
                "name": listMlApplicationsRequest.name,
                "lifecycleState": listMlApplicationsRequest.lifecycleState,
                "limit": listMlApplicationsRequest.limit,
                "page": listMlApplicationsRequest.page,
                "sortOrder": listMlApplicationsRequest.sortOrder,
                "sortBy": listMlApplicationsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMlApplicationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMlApplicationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplications",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationCollection",
                    bodyModel: model.MlApplicationCollection,
                    type: "model.MlApplicationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the valid model deployment shapes.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListModelDeploymentShapesRequest
     * @return ListModelDeploymentShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListModelDeploymentShapes.ts.html |here} to see how to use ListModelDeploymentShapes API.
     */
    listModelDeploymentShapes(listModelDeploymentShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listModelDeploymentShapes.");
            const operationName = "listModelDeploymentShapes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeploymentShapeSummary/ListModelDeploymentShapes";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listModelDeploymentShapesRequest.compartmentId,
                "limit": listModelDeploymentShapesRequest.limit,
                "page": listModelDeploymentShapesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listModelDeploymentShapesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listModelDeploymentShapesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelDeploymentShapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ModelDeploymentShapeSummary,
                    type: "Array<model.ModelDeploymentShapeSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listModelDeploymentShapesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModelDeploymentShapeSummary objects
     * contained in responses from the listModelDeploymentShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModelDeploymentShapes(request) {
        return oci_common_1.paginateRecords(request, req => this.listModelDeploymentShapes(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listModelDeploymentShapesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModelDeploymentShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModelDeploymentShapesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listModelDeploymentShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ModelDeploymentShapeSummary objects
     * contained in responses from the listModelDeploymentShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModelDeploymentShapesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listModelDeploymentShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModelDeploymentShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModelDeploymentShapesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listModelDeploymentShapes(req));
    }
    /**
     * Lists all model deployments in the specified compartment. Only one parameter other than compartmentId may also be included in a query. The query must include compartmentId. If the query does not include compartmentId, or includes compartmentId but two or more other parameters an error is returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListModelDeploymentsRequest
     * @return ListModelDeploymentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListModelDeployments.ts.html |here} to see how to use ListModelDeployments API.
     */
    listModelDeployments(listModelDeploymentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listModelDeployments.");
            const operationName = "listModelDeployments";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeploymentSummary/ListModelDeployments";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listModelDeploymentsRequest.compartmentId,
                "id": listModelDeploymentsRequest.id,
                "projectId": listModelDeploymentsRequest.projectId,
                "displayName": listModelDeploymentsRequest.displayName,
                "lifecycleState": listModelDeploymentsRequest.lifecycleState,
                "createdBy": listModelDeploymentsRequest.createdBy,
                "limit": listModelDeploymentsRequest.limit,
                "page": listModelDeploymentsRequest.page,
                "sortOrder": listModelDeploymentsRequest.sortOrder,
                "sortBy": listModelDeploymentsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listModelDeploymentsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listModelDeploymentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelDeployments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ModelDeploymentSummary,
                    type: "Array<model.ModelDeploymentSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listModelDeploymentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModelDeploymentSummary objects
     * contained in responses from the listModelDeployments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModelDeployments(request) {
        return oci_common_1.paginateRecords(request, req => this.listModelDeployments(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listModelDeploymentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModelDeployments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModelDeploymentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listModelDeployments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ModelDeploymentSummary objects
     * contained in responses from the listModelDeployments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModelDeploymentsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listModelDeployments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModelDeployments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModelDeploymentsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listModelDeployments(req));
    }
    /**
     * Lists model version sets in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListModelVersionSetsRequest
     * @return ListModelVersionSetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListModelVersionSets.ts.html |here} to see how to use ListModelVersionSets API.
     */
    listModelVersionSets(listModelVersionSetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listModelVersionSets.");
            const operationName = "listModelVersionSets";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelVersionSetSummary/ListModelVersionSets";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listModelVersionSetsRequest.compartmentId,
                "category": listModelVersionSetsRequest.category,
                "id": listModelVersionSetsRequest.id,
                "projectId": listModelVersionSetsRequest.projectId,
                "name": listModelVersionSetsRequest.name,
                "lifecycleState": listModelVersionSetsRequest.lifecycleState,
                "createdBy": listModelVersionSetsRequest.createdBy,
                "limit": listModelVersionSetsRequest.limit,
                "page": listModelVersionSetsRequest.page,
                "sortOrder": listModelVersionSetsRequest.sortOrder,
                "sortBy": listModelVersionSetsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listModelVersionSetsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listModelVersionSetsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelVersionSets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ModelVersionSetSummary,
                    type: "Array<model.ModelVersionSetSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listModelVersionSetsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModelVersionSetSummary objects
     * contained in responses from the listModelVersionSets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModelVersionSets(request) {
        return oci_common_1.paginateRecords(request, req => this.listModelVersionSets(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listModelVersionSetsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModelVersionSets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModelVersionSetsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listModelVersionSets(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ModelVersionSetSummary objects
     * contained in responses from the listModelVersionSets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModelVersionSetsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listModelVersionSets(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModelVersionSets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModelVersionSetsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listModelVersionSets(req));
    }
    /**
     * Lists models in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListModelsRequest
     * @return ListModelsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListModels.ts.html |here} to see how to use ListModels API.
     */
    listModels(listModelsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listModels.");
            const operationName = "listModels";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelSummary/ListModels";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listModelsRequest.compartmentId,
                "modelVersionSetName": listModelsRequest.modelVersionSetName,
                "versionLabel": listModelsRequest.versionLabel,
                "category": listModelsRequest.category,
                "id": listModelsRequest.id,
                "projectId": listModelsRequest.projectId,
                "displayName": listModelsRequest.displayName,
                "lifecycleState": listModelsRequest.lifecycleState,
                "createdBy": listModelsRequest.createdBy,
                "limit": listModelsRequest.limit,
                "page": listModelsRequest.page,
                "sortOrder": listModelsRequest.sortOrder,
                "sortBy": listModelsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listModelsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listModelsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ModelSummary,
                    type: "Array<model.ModelSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listModelsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ModelSummary objects
     * contained in responses from the listModels operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModels(request) {
        return oci_common_1.paginateRecords(request, req => this.listModels(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listModelsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listModels operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllModelsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listModels(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ModelSummary objects
     * contained in responses from the listModels operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModelsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listModels(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listModels operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listModelsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listModels(req));
    }
    /**
     * Lists the valid notebook session shapes.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListNotebookSessionShapesRequest
     * @return ListNotebookSessionShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListNotebookSessionShapes.ts.html |here} to see how to use ListNotebookSessionShapes API.
     */
    listNotebookSessionShapes(listNotebookSessionShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listNotebookSessionShapes.");
            const operationName = "listNotebookSessionShapes";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSessionShapeSummary/ListNotebookSessionShapes";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listNotebookSessionShapesRequest.compartmentId,
                "limit": listNotebookSessionShapesRequest.limit,
                "page": listNotebookSessionShapesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listNotebookSessionShapesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listNotebookSessionShapesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/notebookSessionShapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.NotebookSessionShapeSummary,
                    type: "Array<model.NotebookSessionShapeSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listNotebookSessionShapesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.NotebookSessionShapeSummary objects
     * contained in responses from the listNotebookSessionShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNotebookSessionShapes(request) {
        return oci_common_1.paginateRecords(request, req => this.listNotebookSessionShapes(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listNotebookSessionShapesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listNotebookSessionShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNotebookSessionShapesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listNotebookSessionShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.NotebookSessionShapeSummary objects
     * contained in responses from the listNotebookSessionShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listNotebookSessionShapesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listNotebookSessionShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listNotebookSessionShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listNotebookSessionShapesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listNotebookSessionShapes(req));
    }
    /**
     * Lists the notebook sessions in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListNotebookSessionsRequest
     * @return ListNotebookSessionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListNotebookSessions.ts.html |here} to see how to use ListNotebookSessions API.
     */
    listNotebookSessions(listNotebookSessionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listNotebookSessions.");
            const operationName = "listNotebookSessions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSessionSummary/ListNotebookSessions";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listNotebookSessionsRequest.compartmentId,
                "id": listNotebookSessionsRequest.id,
                "projectId": listNotebookSessionsRequest.projectId,
                "displayName": listNotebookSessionsRequest.displayName,
                "lifecycleState": listNotebookSessionsRequest.lifecycleState,
                "createdBy": listNotebookSessionsRequest.createdBy,
                "limit": listNotebookSessionsRequest.limit,
                "page": listNotebookSessionsRequest.page,
                "sortOrder": listNotebookSessionsRequest.sortOrder,
                "sortBy": listNotebookSessionsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listNotebookSessionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listNotebookSessionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/notebookSessions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.NotebookSessionSummary,
                    type: "Array<model.NotebookSessionSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listNotebookSessionsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.NotebookSessionSummary objects
     * contained in responses from the listNotebookSessions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNotebookSessions(request) {
        return oci_common_1.paginateRecords(request, req => this.listNotebookSessions(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listNotebookSessionsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listNotebookSessions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNotebookSessionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listNotebookSessions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.NotebookSessionSummary objects
     * contained in responses from the listNotebookSessions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listNotebookSessionsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listNotebookSessions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listNotebookSessions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listNotebookSessionsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listNotebookSessions(req));
    }
    /**
     * Returns a list of PipelineRuns.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPipelineRunsRequest
     * @return ListPipelineRunsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListPipelineRuns.ts.html |here} to see how to use ListPipelineRuns API.
     */
    listPipelineRuns(listPipelineRunsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listPipelineRuns.");
            const operationName = "listPipelineRuns";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/PipelineRun/ListPipelineRuns";
            const pathParams = {};
            const queryParams = {
                "id": listPipelineRunsRequest.id,
                "pipelineId": listPipelineRunsRequest.pipelineId,
                "compartmentId": listPipelineRunsRequest.compartmentId,
                "displayName": listPipelineRunsRequest.displayName,
                "lifecycleState": listPipelineRunsRequest.lifecycleState,
                "createdBy": listPipelineRunsRequest.createdBy,
                "limit": listPipelineRunsRequest.limit,
                "page": listPipelineRunsRequest.page,
                "sortOrder": listPipelineRunsRequest.sortOrder,
                "sortBy": listPipelineRunsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listPipelineRunsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listPipelineRunsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelineRuns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.PipelineRunSummary,
                    type: "Array<model.PipelineRunSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listPipelineRunsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.PipelineRunSummary objects
     * contained in responses from the listPipelineRuns operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPipelineRuns(request) {
        return oci_common_1.paginateRecords(request, req => this.listPipelineRuns(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listPipelineRunsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listPipelineRuns operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPipelineRunsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listPipelineRuns(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.PipelineRunSummary objects
     * contained in responses from the listPipelineRuns operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPipelineRunsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listPipelineRuns(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPipelineRuns operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPipelineRunsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listPipelineRuns(req));
    }
    /**
     * Returns a list of Pipelines.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPipelinesRequest
     * @return ListPipelinesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListPipelines.ts.html |here} to see how to use ListPipelines API.
     */
    listPipelines(listPipelinesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listPipelines.");
            const operationName = "listPipelines";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Pipeline/ListPipelines";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listPipelinesRequest.compartmentId,
                "projectId": listPipelinesRequest.projectId,
                "id": listPipelinesRequest.id,
                "displayName": listPipelinesRequest.displayName,
                "lifecycleState": listPipelinesRequest.lifecycleState,
                "createdBy": listPipelinesRequest.createdBy,
                "limit": listPipelinesRequest.limit,
                "page": listPipelinesRequest.page,
                "sortOrder": listPipelinesRequest.sortOrder,
                "sortBy": listPipelinesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listPipelinesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listPipelinesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelines",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.PipelineSummary,
                    type: "Array<model.PipelineSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listPipelinesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.PipelineSummary objects
     * contained in responses from the listPipelines operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPipelines(request) {
        return oci_common_1.paginateRecords(request, req => this.listPipelines(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listPipelinesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listPipelines operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPipelinesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listPipelines(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.PipelineSummary objects
     * contained in responses from the listPipelines operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPipelinesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listPipelines(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPipelines operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listPipelinesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listPipelines(req));
    }
    /**
     * Lists projects in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListProjectsRequest
     * @return ListProjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListProjects.ts.html |here} to see how to use ListProjects API.
     */
    listProjects(listProjectsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listProjects.");
            const operationName = "listProjects";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ProjectSummary/ListProjects";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listProjectsRequest.compartmentId,
                "id": listProjectsRequest.id,
                "displayName": listProjectsRequest.displayName,
                "lifecycleState": listProjectsRequest.lifecycleState,
                "createdBy": listProjectsRequest.createdBy,
                "limit": listProjectsRequest.limit,
                "page": listProjectsRequest.page,
                "sortOrder": listProjectsRequest.sortOrder,
                "sortBy": listProjectsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listProjectsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listProjectsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/projects",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ProjectSummary,
                    type: "Array<model.ProjectSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listProjectsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ProjectSummary objects
     * contained in responses from the listProjects operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllProjects(request) {
        return oci_common_1.paginateRecords(request, req => this.listProjects(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listProjectsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listProjects operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllProjectsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listProjects(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ProjectSummary objects
     * contained in responses from the listProjects operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listProjectsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listProjects(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listProjects operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listProjectsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listProjects(req));
    }
    /**
     * Returns a list of Schedules.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSchedulesRequest
     * @return ListSchedulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListSchedules.ts.html |here} to see how to use ListSchedules API.
     */
    listSchedules(listSchedulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listSchedules.");
            const operationName = "listSchedules";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Schedule/ListSchedules";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSchedulesRequest.compartmentId,
                "projectId": listSchedulesRequest.projectId,
                "lifecycleState": listSchedulesRequest.lifecycleState,
                "displayName": listSchedulesRequest.displayName,
                "id": listSchedulesRequest.id,
                "limit": listSchedulesRequest.limit,
                "page": listSchedulesRequest.page,
                "sortOrder": listSchedulesRequest.sortOrder,
                "sortBy": listSchedulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSchedulesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSchedulesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/schedules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ScheduleSummary,
                    type: "Array<model.ScheduleSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listSchedulesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ScheduleSummary objects
     * contained in responses from the listSchedules operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSchedules(request) {
        return oci_common_1.paginateRecords(request, req => this.listSchedules(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listSchedulesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSchedules operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSchedulesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSchedules(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ScheduleSummary objects
     * contained in responses from the listSchedules operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSchedulesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listSchedules(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSchedules operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSchedulesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listSchedules(req));
    }
    /**
     * Lists work request errors for the specified work request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/WorkRequest/ListWorkRequestErrors";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "limit": listWorkRequestErrorsRequest.limit,
                "page": listWorkRequestErrorsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestError,
                    type: "Array<model.WorkRequestError>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Lists work request logs for the specified work request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/WorkRequest/ListWorkRequestLogs";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "limit": listWorkRequestLogsRequest.limit,
                "page": listWorkRequestLogsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestLogEntry,
                    type: "Array<model.WorkRequestLogEntry>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Lists work requests in the specified compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/WorkRequestSummary/ListWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "id": listWorkRequestsRequest.id,
                "operationType": listWorkRequestsRequest.operationType,
                "status": listWorkRequestsRequest.status,
                "limit": listWorkRequestsRequest.limit,
                "page": listWorkRequestsRequest.page,
                "sortOrder": listWorkRequestsRequest.sortOrder,
                "sortBy": listWorkRequestsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestSummary,
                    type: "Array<model.WorkRequestSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Upload ML Application Package
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PutMlApplicationPackageRequest
     * @return PutMlApplicationPackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/PutMlApplicationPackage.ts.html |here} to see how to use PutMlApplicationPackage API.
     */
    putMlApplicationPackage(putMlApplicationPackageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#putMlApplicationPackage.");
            const operationName = "putMlApplicationPackage";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementation/PutMlApplicationPackage";
            const pathParams = {
                "{mlApplicationImplementationId}": putMlApplicationPackageRequest.mlApplicationImplementationId
            };
            const queryParams = {};
            let headerParams = {
                "opc-request-id": putMlApplicationPackageRequest.opcRequestId,
                "opc-retry-token": putMlApplicationPackageRequest.opcRetryToken,
                "content-length": putMlApplicationPackageRequest.contentLength,
                "content-disposition": putMlApplicationPackageRequest.contentDisposition,
                "opc-ml-app-package-args": putMlApplicationPackageRequest.opcMlAppPackageArgs
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putMlApplicationPackageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementations/{mlApplicationImplementationId}/mlApplicationPackage",
                method: "PUT",
                bodyContent: putMlApplicationPackageRequest.putMlApplicationPackage,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Provider can initiate recovery of the resource only if MlApplicationInstanceView is in one of the recoverable sub-states (RECOVERABLE_PROVIDER_ISSUE, RECOVERABLE_SERVICE_ISSUE).
     * Provider should investigate (using MlApplicationInstanceView lifecycleDetails, relevant logs and metrics) and fix the issue before the recovery is initiated.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RecoverMlApplicationInstanceViewRequest
     * @return RecoverMlApplicationInstanceViewResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/RecoverMlApplicationInstanceView.ts.html |here} to see how to use RecoverMlApplicationInstanceView API.
     */
    recoverMlApplicationInstanceView(recoverMlApplicationInstanceViewRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#recoverMlApplicationInstanceView.");
            const operationName = "recoverMlApplicationInstanceView";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstanceView/RecoverMlApplicationInstanceView";
            const pathParams = {
                "{mlApplicationInstanceViewId}": recoverMlApplicationInstanceViewRequest.mlApplicationInstanceViewId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": recoverMlApplicationInstanceViewRequest.ifMatch,
                "opc-request-id": recoverMlApplicationInstanceViewRequest.opcRequestId,
                "opc-retry-token": recoverMlApplicationInstanceViewRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, recoverMlApplicationInstanceViewRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstanceViews/{mlApplicationInstanceViewId}/actions/recover",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Registers model artifact reference metadata
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RegisterModelArtifactReferenceRequest
     * @return RegisterModelArtifactReferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/RegisterModelArtifactReference.ts.html |here} to see how to use RegisterModelArtifactReference API.
     */
    registerModelArtifactReference(registerModelArtifactReferenceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#registerModelArtifactReference.");
            const operationName = "registerModelArtifactReference";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/RegisterModelArtifactReferenceDetails/RegisterModelArtifactReference";
            const pathParams = {
                "{modelId}": registerModelArtifactReferenceRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": registerModelArtifactReferenceRequest.opcRequestId,
                "opc-retry-token": registerModelArtifactReferenceRequest.opcRetryToken,
                "if-match": registerModelArtifactReferenceRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, registerModelArtifactReferenceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/actions/registerArtifactReference",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(registerModelArtifactReferenceRequest.registerModelArtifactReferenceDetails, "RegisterModelArtifactReferenceDetails", model.RegisterModelArtifactReferenceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Restore archived model artifact
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RestoreArchivedModelArtifactRequest
     * @return RestoreArchivedModelArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/RestoreArchivedModelArtifact.ts.html |here} to see how to use RestoreArchivedModelArtifact API.
     */
    restoreArchivedModelArtifact(restoreArchivedModelArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#restoreArchivedModelArtifact.");
            const operationName = "restoreArchivedModelArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/RestoreArchivedModelArtifact";
            const pathParams = {
                "{modelId}": restoreArchivedModelArtifactRequest.modelId
            };
            const queryParams = {
                "restoreModelForHoursSpecified": restoreArchivedModelArtifactRequest.restoreModelForHoursSpecified
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": restoreArchivedModelArtifactRequest.opcRequestId,
                "opc-retry-token": restoreArchivedModelArtifactRequest.opcRetryToken,
                "if-match": restoreArchivedModelArtifactRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, restoreArchivedModelArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/actions/restore",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Trigger ML Application Instance flow if possible
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param TriggerMlApplicationInstanceFlowRequest
     * @return TriggerMlApplicationInstanceFlowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/TriggerMlApplicationInstanceFlow.ts.html |here} to see how to use TriggerMlApplicationInstanceFlow API.
     */
    triggerMlApplicationInstanceFlow(triggerMlApplicationInstanceFlowRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#triggerMlApplicationInstanceFlow.");
            const operationName = "triggerMlApplicationInstanceFlow";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstance/TriggerMlApplicationInstanceFlow";
            const pathParams = {
                "{mlApplicationInstanceId}": triggerMlApplicationInstanceFlowRequest.mlApplicationInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": triggerMlApplicationInstanceFlowRequest.opcRequestId,
                "opc-retry-token": triggerMlApplicationInstanceFlowRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, triggerMlApplicationInstanceFlowRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstances/{mlApplicationInstanceId}/actions/trigger",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(triggerMlApplicationInstanceFlowRequest.triggerMlApplicationInstanceFlowDetails, "TriggerMlApplicationInstanceFlowDetails", model.TriggerMlApplicationInstanceFlowDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Trigger ML Application Instance View flow if possible
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param TriggerMlApplicationInstanceViewFlowRequest
     * @return TriggerMlApplicationInstanceViewFlowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/TriggerMlApplicationInstanceViewFlow.ts.html |here} to see how to use TriggerMlApplicationInstanceViewFlow API.
     */
    triggerMlApplicationInstanceViewFlow(triggerMlApplicationInstanceViewFlowRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#triggerMlApplicationInstanceViewFlow.");
            const operationName = "triggerMlApplicationInstanceViewFlow";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstanceView/TriggerMlApplicationInstanceViewFlow";
            const pathParams = {
                "{mlApplicationInstanceViewId}": triggerMlApplicationInstanceViewFlowRequest.mlApplicationInstanceViewId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": triggerMlApplicationInstanceViewFlowRequest.opcRequestId,
                "opc-retry-token": triggerMlApplicationInstanceViewFlowRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, triggerMlApplicationInstanceViewFlowRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstanceViews/{mlApplicationInstanceViewId}/actions/trigger",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(triggerMlApplicationInstanceViewFlowRequest.triggerMlApplicationInstanceViewFlowDetails, "TriggerMlApplicationInstanceViewFlowDetails", model.TriggerMlApplicationInstanceViewFlowDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a private endpoint using a `privateEndpointId`.  If changes to a private endpoint match
     * a previously defined private endpoint, then a 409 status code is returned.  This indicates
     * that a conflict has been detected.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDataSciencePrivateEndpointRequest
     * @return UpdateDataSciencePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateDataSciencePrivateEndpoint.ts.html |here} to see how to use UpdateDataSciencePrivateEndpoint API.
     */
    updateDataSciencePrivateEndpoint(updateDataSciencePrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateDataSciencePrivateEndpoint.");
            const operationName = "updateDataSciencePrivateEndpoint";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/DataSciencePrivateEndpoint/UpdateDataSciencePrivateEndpoint";
            const pathParams = {
                "{dataSciencePrivateEndpointId}": updateDataSciencePrivateEndpointRequest.dataSciencePrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateDataSciencePrivateEndpointRequest.opcRequestId,
                "if-match": updateDataSciencePrivateEndpointRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDataSciencePrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataSciencePrivateEndpoints/{dataSciencePrivateEndpointId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDataSciencePrivateEndpointRequest.updateDataSciencePrivateEndpointDetails, "UpdateDataSciencePrivateEndpointDetails", model.UpdateDataSciencePrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataSciencePrivateEndpoint",
                    bodyModel: model.DataSciencePrivateEndpoint,
                    type: "model.DataSciencePrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a job.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateJobRequest
     * @return UpdateJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateJob.ts.html |here} to see how to use UpdateJob API.
     */
    updateJob(updateJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateJob.");
            const operationName = "updateJob";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/UpdateJob";
            const pathParams = {
                "{jobId}": updateJobRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateJobRequest.opcRequestId,
                "if-match": updateJobRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateJobRequest.updateJobDetails, "UpdateJobDetails", model.UpdateJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: model.Job,
                    type: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a job run.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateJobRunRequest
     * @return UpdateJobRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateJobRun.ts.html |here} to see how to use UpdateJobRun API.
     */
    updateJobRun(updateJobRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateJobRun.");
            const operationName = "updateJobRun";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/UpdateJobRun";
            const pathParams = {
                "{jobRunId}": updateJobRunRequest.jobRunId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateJobRunRequest.opcRequestId,
                "if-match": updateJobRunRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateJobRunRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobRuns/{jobRunId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateJobRunRequest.updateJobRunDetails, "UpdateJobRunDetails", model.UpdateJobRunDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobRun",
                    bodyModel: model.JobRun,
                    type: "model.JobRun",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the MlApplication
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMlApplicationRequest
     * @return UpdateMlApplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateMlApplication.ts.html |here} to see how to use UpdateMlApplication API.
     */
    updateMlApplication(updateMlApplicationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateMlApplication.");
            const operationName = "updateMlApplication";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplication/UpdateMlApplication";
            const pathParams = {
                "{mlApplicationId}": updateMlApplicationRequest.mlApplicationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMlApplicationRequest.ifMatch,
                "opc-request-id": updateMlApplicationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMlApplicationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplications/{mlApplicationId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMlApplicationRequest.updateMlApplicationDetails, "UpdateMlApplicationDetails", model.UpdateMlApplicationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplication",
                    bodyModel: model.MlApplication,
                    type: "model.MlApplication",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the MlApplicationImplementation
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMlApplicationImplementationRequest
     * @return UpdateMlApplicationImplementationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateMlApplicationImplementation.ts.html |here} to see how to use UpdateMlApplicationImplementation API.
     */
    updateMlApplicationImplementation(updateMlApplicationImplementationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateMlApplicationImplementation.");
            const operationName = "updateMlApplicationImplementation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementation/UpdateMlApplicationImplementation";
            const pathParams = {
                "{mlApplicationImplementationId}": updateMlApplicationImplementationRequest.mlApplicationImplementationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMlApplicationImplementationRequest.ifMatch,
                "opc-request-id": updateMlApplicationImplementationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMlApplicationImplementationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementations/{mlApplicationImplementationId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMlApplicationImplementationRequest.updateMlApplicationImplementationDetails, "UpdateMlApplicationImplementationDetails", model.UpdateMlApplicationImplementationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the MlApplicationImplementationVersion
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMlApplicationImplementationVersionRequest
     * @return UpdateMlApplicationImplementationVersionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateMlApplicationImplementationVersion.ts.html |here} to see how to use UpdateMlApplicationImplementationVersion API.
     */
    updateMlApplicationImplementationVersion(updateMlApplicationImplementationVersionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateMlApplicationImplementationVersion.");
            const operationName = "updateMlApplicationImplementationVersion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationImplementationVersion/UpdateMlApplicationImplementationVersion";
            const pathParams = {
                "{mlApplicationImplementationVersionId}": updateMlApplicationImplementationVersionRequest.mlApplicationImplementationVersionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMlApplicationImplementationVersionRequest.ifMatch,
                "opc-request-id": updateMlApplicationImplementationVersionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMlApplicationImplementationVersionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationImplementationVersions/{mlApplicationImplementationVersionId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMlApplicationImplementationVersionRequest.updateMlApplicationImplementationVersionDetails, "UpdateMlApplicationImplementationVersionDetails", model.UpdateMlApplicationImplementationVersionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationImplementationVersion",
                    bodyModel: model.MlApplicationImplementationVersion,
                    type: "model.MlApplicationImplementationVersion",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the MlApplicationInstance
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateMlApplicationInstanceRequest
     * @return UpdateMlApplicationInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateMlApplicationInstance.ts.html |here} to see how to use UpdateMlApplicationInstance API.
     */
    updateMlApplicationInstance(updateMlApplicationInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateMlApplicationInstance.");
            const operationName = "updateMlApplicationInstance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstance/UpdateMlApplicationInstance";
            const pathParams = {
                "{mlApplicationInstanceId}": updateMlApplicationInstanceRequest.mlApplicationInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMlApplicationInstanceRequest.ifMatch,
                "opc-request-id": updateMlApplicationInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMlApplicationInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstances/{mlApplicationInstanceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMlApplicationInstanceRequest.updateMlApplicationInstanceDetails, "UpdateMlApplicationInstanceDetails", model.UpdateMlApplicationInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the MlApplicationInstanceView
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateMlApplicationInstanceViewRequest
     * @return UpdateMlApplicationInstanceViewResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateMlApplicationInstanceView.ts.html |here} to see how to use UpdateMlApplicationInstanceView API.
     */
    updateMlApplicationInstanceView(updateMlApplicationInstanceViewRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateMlApplicationInstanceView.");
            const operationName = "updateMlApplicationInstanceView";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/MlApplicationInstanceView/UpdateMlApplicationInstanceView";
            const pathParams = {
                "{mlApplicationInstanceViewId}": updateMlApplicationInstanceViewRequest.mlApplicationInstanceViewId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMlApplicationInstanceViewRequest.ifMatch,
                "opc-request-id": updateMlApplicationInstanceViewRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateMlApplicationInstanceViewRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mlApplicationInstanceViews/{mlApplicationInstanceViewId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMlApplicationInstanceViewRequest.updateMlApplicationInstanceViewDetails, "UpdateMlApplicationInstanceViewDetails", model.UpdateMlApplicationInstanceViewDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mlApplicationInstanceView",
                    bodyModel: model.MlApplicationInstanceView,
                    type: "model.MlApplicationInstanceView",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the properties of a model. You can update the `displayName`, `description`, `freeformTags`, and `definedTags` properties.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateModelRequest
     * @return UpdateModelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModel.ts.html |here} to see how to use UpdateModel API.
     */
    updateModel(updateModelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateModel.");
            const operationName = "updateModel";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/UpdateModel";
            const pathParams = {
                "{modelId}": updateModelRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateModelRequest.ifMatch,
                "opc-request-id": updateModelRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateModelRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateModelRequest.updateModelDetails, "UpdateModelDetails", model.UpdateModelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "model",
                    bodyModel: model.Model,
                    type: "model.Model",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates model custom metadata artifact for specified model metadata key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateModelCustomMetadatumArtifactRequest
     * @return UpdateModelCustomMetadatumArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModelCustomMetadatumArtifact.ts.html |here} to see how to use UpdateModelCustomMetadatumArtifact API.
     */
    updateModelCustomMetadatumArtifact(updateModelCustomMetadatumArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateModelCustomMetadatumArtifact.");
            const operationName = "updateModelCustomMetadatumArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/UpdateModelCustomMetadatumArtifact";
            const pathParams = {
                "{modelId}": updateModelCustomMetadatumArtifactRequest.modelId,
                "{metadatumKeyName}": updateModelCustomMetadatumArtifactRequest.metadatumKeyName
            };
            const queryParams = {};
            let headerParams = {
                "opc-request-id": updateModelCustomMetadatumArtifactRequest.opcRequestId,
                "content-length": updateModelCustomMetadatumArtifactRequest.contentLength,
                "content-disposition": updateModelCustomMetadatumArtifactRequest.contentDisposition,
                "if-match": updateModelCustomMetadatumArtifactRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateModelCustomMetadatumArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/customMetadata/{metadatumKeyName}/artifact",
                method: "PUT",
                bodyContent: updateModelCustomMetadatumArtifactRequest.modelCustomMetadatumArtifact,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink, true);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates model defined metadata artifact for specified model metadata key.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateModelDefinedMetadatumArtifactRequest
     * @return UpdateModelDefinedMetadatumArtifactResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModelDefinedMetadatumArtifact.ts.html |here} to see how to use UpdateModelDefinedMetadatumArtifact API.
     */
    updateModelDefinedMetadatumArtifact(updateModelDefinedMetadatumArtifactRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateModelDefinedMetadatumArtifact.");
            const operationName = "updateModelDefinedMetadatumArtifact";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/UpdateModelDefinedMetadatumArtifact";
            const pathParams = {
                "{modelId}": updateModelDefinedMetadatumArtifactRequest.modelId,
                "{metadatumKeyName}": updateModelDefinedMetadatumArtifactRequest.metadatumKeyName
            };
            const queryParams = {};
            let headerParams = {
                "opc-request-id": updateModelDefinedMetadatumArtifactRequest.opcRequestId,
                "content-length": updateModelDefinedMetadatumArtifactRequest.contentLength,
                "content-disposition": updateModelDefinedMetadatumArtifactRequest.contentDisposition,
                "if-match": updateModelDefinedMetadatumArtifactRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateModelDefinedMetadatumArtifactRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/definedMetadata/{metadatumKeyName}/artifact",
                method: "PUT",
                bodyContent: updateModelDefinedMetadatumArtifactRequest.modelDefinedMetadatumArtifact,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink, true);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the properties of a model deployment. Some of the properties of `modelDeploymentConfigurationDetails` or `CategoryLogDetails` can also be updated with zero down time
     * when the model deployment's lifecycle state is ACTIVE or NEEDS_ATTENTION i.e `instanceShapeName`, `instanceCount` and `modelId`, separately `loadBalancerShape` or `CategoryLogDetails`
     * can also be updated independently. All of the fields can be updated when the deployment is in the INACTIVE lifecycle state. Changes will take effect the next time the model
     * deployment is activated.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateModelDeploymentRequest
     * @return UpdateModelDeploymentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModelDeployment.ts.html |here} to see how to use UpdateModelDeployment API.
     */
    updateModelDeployment(updateModelDeploymentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateModelDeployment.");
            const operationName = "updateModelDeployment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/UpdateModelDeployment";
            const pathParams = {
                "{modelDeploymentId}": updateModelDeploymentRequest.modelDeploymentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateModelDeploymentRequest.ifMatch,
                "opc-request-id": updateModelDeploymentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateModelDeploymentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelDeployments/{modelDeploymentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateModelDeploymentRequest.updateModelDeploymentDetails, "UpdateModelDeploymentDetails", model.UpdateModelDeploymentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the provenance information for the specified model.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateModelProvenanceRequest
     * @return UpdateModelProvenanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModelProvenance.ts.html |here} to see how to use UpdateModelProvenance API.
     */
    updateModelProvenance(updateModelProvenanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateModelProvenance.");
            const operationName = "updateModelProvenance";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/UpdateModelProvenance";
            const pathParams = {
                "{modelId}": updateModelProvenanceRequest.modelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateModelProvenanceRequest.opcRequestId,
                "if-match": updateModelProvenanceRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateModelProvenanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/models/{modelId}/provenance",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateModelProvenanceRequest.updateModelProvenanceDetails, "UpdateModelProvenanceDetails", model.UpdateModelProvenanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "modelProvenance",
                    bodyModel: model.ModelProvenance,
                    type: "model.ModelProvenance",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the properties of a model version set. User can update the `description` property.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateModelVersionSetRequest
     * @return UpdateModelVersionSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModelVersionSet.ts.html |here} to see how to use UpdateModelVersionSet API.
     */
    updateModelVersionSet(updateModelVersionSetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateModelVersionSet.");
            const operationName = "updateModelVersionSet";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelVersionSet/UpdateModelVersionSet";
            const pathParams = {
                "{modelVersionSetId}": updateModelVersionSetRequest.modelVersionSetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateModelVersionSetRequest.ifMatch,
                "opc-request-id": updateModelVersionSetRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateModelVersionSetRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/modelVersionSets/{modelVersionSetId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateModelVersionSetRequest.updateModelVersionSetDetails, "UpdateModelVersionSetDetails", model.UpdateModelVersionSetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "modelVersionSet",
                    bodyModel: model.ModelVersionSet,
                    type: "model.ModelVersionSet",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the properties of a notebook session. You can update the `displayName`, `freeformTags`, and `definedTags` properties.
     * When the notebook session is in the INACTIVE lifecycle state, you can update `notebookSessionConfigurationDetails` and change `shape`, `subnetId`, and `blockStorageSizeInGBs`.
     * Changes to the `notebookSessionConfigurationDetails` take effect the next time the `ActivateNotebookSession` action is invoked on the notebook session resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateNotebookSessionRequest
     * @return UpdateNotebookSessionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateNotebookSession.ts.html |here} to see how to use UpdateNotebookSession API.
     */
    updateNotebookSession(updateNotebookSessionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateNotebookSession.");
            const operationName = "updateNotebookSession";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/UpdateNotebookSession";
            const pathParams = {
                "{notebookSessionId}": updateNotebookSessionRequest.notebookSessionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateNotebookSessionRequest.ifMatch,
                "opc-request-id": updateNotebookSessionRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateNotebookSessionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/notebookSessions/{notebookSessionId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateNotebookSessionRequest.updateNotebookSessionDetails, "UpdateNotebookSessionDetails", model.UpdateNotebookSessionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "notebookSession",
                    bodyModel: model.NotebookSession,
                    type: "model.NotebookSession",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the Pipeline.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdatePipelineRequest
     * @return UpdatePipelineResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdatePipeline.ts.html |here} to see how to use UpdatePipeline API.
     */
    updatePipeline(updatePipelineRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updatePipeline.");
            const operationName = "updatePipeline";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Pipeline/UpdatePipeline";
            const pathParams = {
                "{pipelineId}": updatePipelineRequest.pipelineId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updatePipelineRequest.ifMatch,
                "opc-request-id": updatePipelineRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updatePipelineRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelines/{pipelineId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updatePipelineRequest.updatePipelineDetails, "UpdatePipelineDetails", model.UpdatePipelineDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pipeline",
                    bodyModel: model.Pipeline,
                    type: "model.Pipeline",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the PipelineRun.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdatePipelineRunRequest
     * @return UpdatePipelineRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdatePipelineRun.ts.html |here} to see how to use UpdatePipelineRun API.
     */
    updatePipelineRun(updatePipelineRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updatePipelineRun.");
            const operationName = "updatePipelineRun";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/PipelineRun/UpdatePipelineRun";
            const pathParams = {
                "{pipelineRunId}": updatePipelineRunRequest.pipelineRunId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updatePipelineRunRequest.ifMatch,
                "opc-request-id": updatePipelineRunRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updatePipelineRunRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pipelineRuns/{pipelineRunId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updatePipelineRunRequest.updatePipelineRunDetails, "UpdatePipelineRunDetails", model.UpdatePipelineRunDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pipelineRun",
                    bodyModel: model.PipelineRun,
                    type: "model.PipelineRun",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the properties of a project. You can update the `displayName`, `description`, `freeformTags`, and `definedTags` properties.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateProjectRequest
     * @return UpdateProjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateProject.ts.html |here} to see how to use UpdateProject API.
     */
    updateProject(updateProjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateProject.");
            const operationName = "updateProject";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Project/UpdateProject";
            const pathParams = {
                "{projectId}": updateProjectRequest.projectId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateProjectRequest.ifMatch,
                "opc-request-id": updateProjectRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateProjectRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/projects/{projectId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateProjectRequest.updateProjectDetails, "UpdateProjectDetails", model.UpdateProjectDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "project",
                    bodyModel: model.Project,
                    type: "model.Project",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the Schedule
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateScheduleRequest
     * @return UpdateScheduleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateSchedule.ts.html |here} to see how to use UpdateSchedule API.
     */
    updateSchedule(updateScheduleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DataScienceClient#updateSchedule.");
            const operationName = "updateSchedule";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Schedule/UpdateSchedule";
            const pathParams = {
                "{scheduleId}": updateScheduleRequest.scheduleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateScheduleRequest.ifMatch,
                "opc-request-id": updateScheduleRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateScheduleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/schedules/{scheduleId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateScheduleRequest.updateScheduleDetails, "UpdateScheduleDetails", model.UpdateScheduleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DataScienceClient = DataScienceClient;
DataScienceClient.serviceEndpointTemplate = "https://datascience.{region}.oci.{secondLevelDomain}";
DataScienceClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map