/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The model deployment workload configuration.
 */
export interface ModelDeployWorkloadConfigurationDetails extends model.WorkloadConfigurationDetails {
    /**
     * The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings.
     * Use {@code CMD} as arguments to the {@code ENTRYPOINT} or the only command to run in the absence of an {@code ENTRYPOINT}.
     * The combined size of {@code CMD} and {@code ENTRYPOINT} must be less than 2048 bytes.
     *
     */
    "cmd": string;
    /**
     * The port on which the web server serving the inference is running.
     * The port can be anything between {@code 1024} and {@code 65535}. The following ports cannot be used {@code 24224}, {@code 8446}, {@code 8447}.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "serverPort": number;
    /**
     * The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen.
     * The port can be anything between {@code 1024} and {@code 65535}. The following ports cannot be used {@code 24224}, {@code 8446}, {@code 8447}.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "healthCheckPort": number;
    /**
     * The additional configurations
     */
    "additionalConfigurations"?: {
        [key: string]: string;
    };
    "workloadType": string;
}
export declare namespace ModelDeployWorkloadConfigurationDetails {
    function getJsonObj(obj: ModelDeployWorkloadConfigurationDetails, isParentJsonObj?: boolean): object;
    const workloadType = "MODEL_DEPLOYMENT";
    function getDeserializedJsonObj(obj: ModelDeployWorkloadConfigurationDetails, isParentJsonObj?: boolean): object;
}
