/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Summary of the MlApplicationImplementationVersion.
 */
export interface MlApplicationImplementationVersionSummary {
    /**
     * The OCID of the MlApplicationImplementationVersion. Unique identifier that is immutable after creation.
     */
    "id": string;
    /**
     * The OCID of the MlApplicationImplementation for which this resource keeps the historical state.
     */
    "mlApplicationImplementationId": string;
    /**
     * ML Application Implementation name which is unique for given ML Application.
     */
    "name": string;
    /**
     * Description of ML Application Implementation defined in ML Application package descriptor
     */
    "description"?: string;
    /**
     * The OCID of the ML Application implemented by this ML Application Implementation.
     */
    "mlApplicationId": string;
    /**
     * The name of ML Application (based on mlApplicationId).
     */
    "mlApplicationName": string;
    /**
     * The version of ML Application Package (e.g. \"1.2\" or \"2.0.4\") defined in ML Application package descriptor. Value is not mandatory only for CREATING state otherwise it must be always presented.
     */
    "packageVersion"?: string;
    /**
     * Schema of configuration which needs to be provided for each ML Application Instance. It is defined in the ML Application package descriptor.
     */
    "configurationSchema"?: Array<model.ConfigurationPropertySchema>;
    /**
     * List of ML Application Implementation OCIDs for which migration from this implementation is allowed. Migration means that if consumers change implementation for their instances to implementation with OCID from this list, instance components will be updated in place otherwise new instance components are created based on the new implementation and old instance components are removed.
     */
    "allowedMigrationDestinations"?: Array<string>;
    /**
     * Creation time of MlApplicationImplementationVersion in the format defined by RFC 3339.
     */
    "timeCreated": Date;
    /**
     * The current state of the MlApplicationImplementationVersion.
     */
    "lifecycleState": string;
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * Example: {@code {\"Department\": \"Finance\"}}
     *
     */
    "freeformTags": {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
     *
     */
    "definedTags": {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace MlApplicationImplementationVersionSummary {
    function getJsonObj(obj: MlApplicationImplementationVersionSummary): object;
    function getDeserializedJsonObj(obj: MlApplicationImplementationVersionSummary): object;
}
