/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * A Pipeline to orchestrate and execute machine learning workflows.
 */
export interface Pipeline {
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline.
     */
    "id": string;
    /**
     * The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * Example: 2020-08-06T21:10:29.41Z
     *
     */
    "timeCreated": Date;
    /**
     * The date and time the resource was updated in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
     * Example: 2020-08-06T21:10:29.41Z
     *
     */
    "timeUpdated"?: Date;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the pipeline.
     */
    "createdBy": string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the pipeline with.
     */
    "projectId": string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want to create the pipeline.
     */
    "compartmentId": string;
    /**
     * A user-friendly display name for the resource.
     */
    "displayName": string;
    /**
     * A short description of the pipeline.
     */
    "description"?: string;
    "configurationDetails"?: model.PipelineDefaultConfigurationDetails;
    "logConfigurationDetails"?: model.PipelineLogConfigurationDetails;
    "infrastructureConfigurationDetails"?: model.PipelineInfrastructureConfigurationDetails;
    /**
     * The storage mount details to mount to the instance running the pipeline step.
     */
    "storageMountConfigurationDetailsList"?: Array<model.StorageMountConfigurationDetails>;
    /**
     * Array of step details for each step.
     */
    "stepDetails": Array<model.PipelineStepDetails>;
    /**
     * The current state of the pipeline.
     */
    "lifecycleState": model.PipelineLifecycleState;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
     */
    "lifecycleDetails"?: string;
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * Example: {@code {\"Department\": \"Finance\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
     * Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace Pipeline {
    function getJsonObj(obj: Pipeline): object;
    function getDeserializedJsonObj(obj: Pipeline): object;
}
