"use strict";
/**
 * Resource Discovery and Monitoring Control API
 * Use the Resource Discovery and Monitoring Control API to get details about monitored instances and perform actions. For more information, see [Resource Discovery and Monitoring](https://docs.oracle.com/iaas/os-management/osms/osms-resource-discovery-monitoring.htm).

 * OpenAPI spec version: 20210330
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoredInstance = void 0;
var MonitoredInstance;
(function (MonitoredInstance) {
    let MonitoringState;
    (function (MonitoringState) {
        MonitoringState["Enabled"] = "ENABLED";
        MonitoringState["Disabled"] = "DISABLED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        MonitoringState["UnknownValue"] = "UNKNOWN_VALUE";
    })(MonitoringState = MonitoredInstance.MonitoringState || (MonitoredInstance.MonitoringState = {}));
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Creating"] = "CREATING";
        LifecycleState["Updating"] = "UPDATING";
        LifecycleState["Active"] = "ACTIVE";
        LifecycleState["Inactive"] = "INACTIVE";
        LifecycleState["Deleting"] = "DELETING";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = MonitoredInstance.LifecycleState || (MonitoredInstance.LifecycleState = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    MonitoredInstance.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    MonitoredInstance.getDeserializedJsonObj = getDeserializedJsonObj;
})(MonitoredInstance = exports.MonitoredInstance || (exports.MonitoredInstance = {}));
//# sourceMappingURL=monitored-instance.js.map