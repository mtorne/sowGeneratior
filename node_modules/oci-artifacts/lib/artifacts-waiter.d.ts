/**
 * Artifacts and Container Images API
 * API covering the Artifacts and [Registry](https://docs.oracle.com/iaas/Content/Registry/Concepts/registryoverview.htm) services.
Use this API to manage resources such as generic artifacts and container images.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ArtifactsClient } from "./client";
export declare class ArtifactsWaiter {
    private client;
    private readonly config?;
    constructor(client: ArtifactsClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forContainerImage till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetContainerImageResponse | null (null in case of 404 response)
     */
    forContainerImage(request: serviceRequests.GetContainerImageRequest, ...targetStates: models.ContainerImage.LifecycleState[]): Promise<serviceResponses.GetContainerImageResponse | null>;
    /**
     * Waits forContainerImageSignature till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetContainerImageSignatureResponse | null (null in case of 404 response)
     */
    forContainerImageSignature(request: serviceRequests.GetContainerImageSignatureRequest, ...targetStates: models.ContainerImageSignature.LifecycleState[]): Promise<serviceResponses.GetContainerImageSignatureResponse | null>;
    /**
     * Waits forContainerRepository till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetContainerRepositoryResponse | null (null in case of 404 response)
     */
    forContainerRepository(request: serviceRequests.GetContainerRepositoryRequest, ...targetStates: models.ContainerRepository.LifecycleState[]): Promise<serviceResponses.GetContainerRepositoryResponse | null>;
    /**
     * Waits forGenericArtifact till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetGenericArtifactResponse | null (null in case of 404 response)
     */
    forGenericArtifact(request: serviceRequests.GetGenericArtifactRequest, ...targetStates: models.GenericArtifact.LifecycleState[]): Promise<serviceResponses.GetGenericArtifactResponse | null>;
    /**
     * Waits forRepository till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRepositoryResponse | null (null in case of 404 response)
     */
    forRepository(request: serviceRequests.GetRepositoryRequest, ...targetStates: models.Repository.LifecycleState[]): Promise<serviceResponses.GetRepositoryResponse | null>;
}
