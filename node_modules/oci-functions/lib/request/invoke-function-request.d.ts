/**
 *
 *
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/// <reference types="node" />
import common = require("oci-common");
import stream = require("stream");
/**
 * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/functions/InvokeFunction.ts.html |here} to see how to use InvokeFunctionRequest.
 */
export interface InvokeFunctionRequest extends common.BaseRequest {
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of this function.
     *
     */
    "functionId": string;
    /**
     * The body of the function invocation.
     * Note: The maximum size of the request is limited. This limit is currently 6MB and the endpoint will not accept requests that are bigger than this limit.
     *
     */
    "invokeFunctionBody"?: Uint8Array | Buffer | Blob | stream.Readable | ReadableStream | string;
    /**
     * An optional intent header that indicates to the FDK the way the event should be interpreted. E.g. 'httprequest', 'cloudevent'.
     *
     */
    "fnIntent"?: InvokeFunctionRequest.FnIntent;
    /**
     * Indicates whether Oracle Functions should execute the request and return the result ('sync') of the execution,
     * or whether Oracle Functions should return as soon as processing has begun ('detached') and leave result handling to the function.
     *
     */
    "fnInvokeType"?: InvokeFunctionRequest.FnInvokeType;
    /**
     * The unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
     * particular request, please provide the request ID.
     *
     */
    "opcRequestId"?: string;
    /**
     * Indicates that the request is a dry run, if set to \"true\". A dry run request does not execute the function.
     *
     */
    "isDryRun"?: boolean;
}
export declare namespace InvokeFunctionRequest {
    enum FnIntent {
        Httprequest = "httprequest",
        Cloudevent = "cloudevent"
    }
    enum FnInvokeType {
        Detached = "detached",
        Sync = "sync"
    }
}
