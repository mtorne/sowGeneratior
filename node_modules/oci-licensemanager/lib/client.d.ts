/**
 * License Manager API
 * Use the License Manager API to manage product licenses and license records. For more information, see [License Manager Overview](https://docs.oracle.com/iaas/Content/LicenseManager/Concepts/licensemanageroverview.htm).
 * OpenAPI spec version: 20220430
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { LicenseManagerWaiter } from "./licensemanager-waiter";
declare const Breaker: any;
export declare enum LicenseManagerApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class LicenseManagerClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": LicenseManagerWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new LicenseManagerWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): LicenseManagerWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): LicenseManagerWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Bulk upload the product licenses and license records for a given compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkUploadLicenseRecordsRequest
     * @return BulkUploadLicenseRecordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/BulkUploadLicenseRecords.ts.html |here} to see how to use BulkUploadLicenseRecords API.
     */
    bulkUploadLicenseRecords(bulkUploadLicenseRecordsRequest: requests.BulkUploadLicenseRecordsRequest): Promise<responses.BulkUploadLicenseRecordsResponse>;
    /**
     * Creates a new license record for the given product license ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateLicenseRecordRequest
     * @return CreateLicenseRecordResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/CreateLicenseRecord.ts.html |here} to see how to use CreateLicenseRecord API.
     */
    createLicenseRecord(createLicenseRecordRequest: requests.CreateLicenseRecordRequest): Promise<responses.CreateLicenseRecordResponse>;
    /**
     * Creates a new product license.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateProductLicenseRequest
     * @return CreateProductLicenseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/CreateProductLicense.ts.html |here} to see how to use CreateProductLicense API.
     */
    createProductLicense(createProductLicenseRequest: requests.CreateProductLicenseRequest): Promise<responses.CreateProductLicenseResponse>;
    /**
     * Removes a license record.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteLicenseRecordRequest
     * @return DeleteLicenseRecordResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/DeleteLicenseRecord.ts.html |here} to see how to use DeleteLicenseRecord API.
     */
    deleteLicenseRecord(deleteLicenseRecordRequest: requests.DeleteLicenseRecordRequest): Promise<responses.DeleteLicenseRecordResponse>;
    /**
     * Removes a product license.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteProductLicenseRequest
     * @return DeleteProductLicenseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/DeleteProductLicense.ts.html |here} to see how to use DeleteProductLicense API.
     */
    deleteProductLicense(deleteProductLicenseRequest: requests.DeleteProductLicenseRequest): Promise<responses.DeleteProductLicenseResponse>;
    /**
     * Provides the bulk upload file template.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetBulkUploadTemplateRequest
     * @return GetBulkUploadTemplateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/GetBulkUploadTemplate.ts.html |here} to see how to use GetBulkUploadTemplate API.
     */
    getBulkUploadTemplate(getBulkUploadTemplateRequest: requests.GetBulkUploadTemplateRequest): Promise<responses.GetBulkUploadTemplateResponse>;
    /**
     * Retrieves configuration for a compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetConfigurationRequest
     * @return GetConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/GetConfiguration.ts.html |here} to see how to use GetConfiguration API.
     */
    getConfiguration(getConfigurationRequest: requests.GetConfigurationRequest): Promise<responses.GetConfigurationResponse>;
    /**
     * Retrieves the license metrics for a given compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetLicenseMetricRequest
     * @return GetLicenseMetricResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/GetLicenseMetric.ts.html |here} to see how to use GetLicenseMetric API.
     */
    getLicenseMetric(getLicenseMetricRequest: requests.GetLicenseMetricRequest): Promise<responses.GetLicenseMetricResponse>;
    /**
     * Retrieves license record details by the license record ID in a given compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetLicenseRecordRequest
     * @return GetLicenseRecordResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/GetLicenseRecord.ts.html |here} to see how to use GetLicenseRecord API.
     */
    getLicenseRecord(getLicenseRecordRequest: requests.GetLicenseRecordRequest): Promise<responses.GetLicenseRecordResponse>;
    /**
     * Retrieves product license details by product license ID in a given compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetProductLicenseRequest
     * @return GetProductLicenseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/GetProductLicense.ts.html |here} to see how to use GetProductLicense API.
     */
    getProductLicense(getProductLicenseRequest: requests.GetProductLicenseRequest): Promise<responses.GetProductLicenseResponse>;
    /**
     * Retrieves all license records for a given product license ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListLicenseRecordsRequest
     * @return ListLicenseRecordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/ListLicenseRecords.ts.html |here} to see how to use ListLicenseRecords API.
     */
    listLicenseRecords(listLicenseRecordsRequest: requests.ListLicenseRecordsRequest): Promise<responses.ListLicenseRecordsResponse>;
    /**
     * Retrieves the product license consumers for a particular product license ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListProductLicenseConsumersRequest
     * @return ListProductLicenseConsumersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/ListProductLicenseConsumers.ts.html |here} to see how to use ListProductLicenseConsumers API.
     */
    listProductLicenseConsumers(listProductLicenseConsumersRequest: requests.ListProductLicenseConsumersRequest): Promise<responses.ListProductLicenseConsumersResponse>;
    /**
     * Retrieves all the product licenses from a given compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListProductLicensesRequest
     * @return ListProductLicensesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/ListProductLicenses.ts.html |here} to see how to use ListProductLicenses API.
     */
    listProductLicenses(listProductLicensesRequest: requests.ListProductLicensesRequest): Promise<responses.ListProductLicensesResponse>;
    /**
     * Retrieves the top utilized product licenses for a given compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTopUtilizedProductLicensesRequest
     * @return ListTopUtilizedProductLicensesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/ListTopUtilizedProductLicenses.ts.html |here} to see how to use ListTopUtilizedProductLicenses API.
     */
    listTopUtilizedProductLicenses(listTopUtilizedProductLicensesRequest: requests.ListTopUtilizedProductLicensesRequest): Promise<responses.ListTopUtilizedProductLicensesResponse>;
    /**
     * Retrieves the top utilized resources for a given compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTopUtilizedResourcesRequest
     * @return ListTopUtilizedResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/ListTopUtilizedResources.ts.html |here} to see how to use ListTopUtilizedResources API.
     */
    listTopUtilizedResources(listTopUtilizedResourcesRequest: requests.ListTopUtilizedResourcesRequest): Promise<responses.ListTopUtilizedResourcesResponse>;
    /**
     * Updates the configuration for the compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateConfigurationRequest
     * @return UpdateConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/UpdateConfiguration.ts.html |here} to see how to use UpdateConfiguration API.
     */
    updateConfiguration(updateConfigurationRequest: requests.UpdateConfigurationRequest): Promise<responses.UpdateConfigurationResponse>;
    /**
     * Updates license record entity details.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateLicenseRecordRequest
     * @return UpdateLicenseRecordResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/UpdateLicenseRecord.ts.html |here} to see how to use UpdateLicenseRecord API.
     */
    updateLicenseRecord(updateLicenseRecordRequest: requests.UpdateLicenseRecordRequest): Promise<responses.UpdateLicenseRecordResponse>;
    /**
     * Updates the list of images for a product license.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateProductLicenseRequest
     * @return UpdateProductLicenseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/licensemanager/UpdateProductLicense.ts.html |here} to see how to use UpdateProductLicense API.
     */
    updateProductLicense(updateProductLicenseRequest: requests.UpdateProductLicenseRequest): Promise<responses.UpdateProductLicenseResponse>;
}
export {};
