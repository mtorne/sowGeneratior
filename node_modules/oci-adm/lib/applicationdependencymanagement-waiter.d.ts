/**
 * Application Dependency Management API
 * Use the Application Dependency Management API to create knowledge bases and vulnerability audits.  For more information, see [ADM](https://docs.oracle.com/iaas/Content/application-dependency-management/home.htm).
 * OpenAPI spec version: 20220421
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ApplicationDependencyManagementClient } from "./client";
export declare class ApplicationDependencyManagementWaiter {
    private client;
    private readonly config?;
    constructor(client: ApplicationDependencyManagementClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forKnowledgeBase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetKnowledgeBaseResponse | null (null in case of 404 response)
     */
    forKnowledgeBase(request: serviceRequests.GetKnowledgeBaseRequest, ...targetStates: models.KnowledgeBase.LifecycleState[]): Promise<serviceResponses.GetKnowledgeBaseResponse | null>;
    /**
     * Waits forRemediationRecipe till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRemediationRecipeResponse | null (null in case of 404 response)
     */
    forRemediationRecipe(request: serviceRequests.GetRemediationRecipeRequest, ...targetStates: models.RemediationRecipe.LifecycleState[]): Promise<serviceResponses.GetRemediationRecipeResponse | null>;
    /**
     * Waits forRemediationRun till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRemediationRunResponse | null (null in case of 404 response)
     */
    forRemediationRun(request: serviceRequests.GetRemediationRunRequest, ...targetStates: models.RemediationRun.LifecycleState[]): Promise<serviceResponses.GetRemediationRunResponse | null>;
    /**
     * Waits forVulnerabilityAudit till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVulnerabilityAuditResponse | null (null in case of 404 response)
     */
    forVulnerabilityAudit(request: serviceRequests.GetVulnerabilityAuditRequest, ...targetStates: models.VulnerabilityAudit.LifecycleState[]): Promise<serviceResponses.GetVulnerabilityAuditResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
