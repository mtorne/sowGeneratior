/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](https://docs.oracle.com/iaas/Content/Network/Concepts/overview.htm),
[Compute](https://docs.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](https://docs.oracle.com/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](https://docs.oracle.com/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ComputeClient } from "./client";
import { WorkRequestClient, responses } from "oci-workrequests";
export declare class ComputeWaiter {
    private client;
    private workRequestClient;
    private readonly config?;
    constructor(client: ComputeClient, workRequestClient: WorkRequestClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAttachComputeHostGroupHost
     *
     * @param request the request to send
     * @return response returns AttachComputeHostGroupHostResponse, GetWorkRequestResponse tuple
     */
    forAttachComputeHostGroupHost(request: serviceRequests.AttachComputeHostGroupHostRequest): Promise<{
        response: serviceResponses.AttachComputeHostGroupHostResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeComputeCapacityReservationCompartment
     *
     * @param request the request to send
     * @return response returns ChangeComputeCapacityReservationCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeComputeCapacityReservationCompartment(request: serviceRequests.ChangeComputeCapacityReservationCompartmentRequest): Promise<{
        response: serviceResponses.ChangeComputeCapacityReservationCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeComputeCapacityTopologyCompartment
     *
     * @param request the request to send
     * @return response returns ChangeComputeCapacityTopologyCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeComputeCapacityTopologyCompartment(request: serviceRequests.ChangeComputeCapacityTopologyCompartmentRequest): Promise<{
        response: serviceResponses.ChangeComputeCapacityTopologyCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeComputeHostCompartment
     *
     * @param request the request to send
     * @return response returns ChangeComputeHostCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeComputeHostCompartment(request: serviceRequests.ChangeComputeHostCompartmentRequest): Promise<{
        response: serviceResponses.ChangeComputeHostCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeComputeHostGroupCompartment
     *
     * @param request the request to send
     * @return response returns ChangeComputeHostGroupCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeComputeHostGroupCompartment(request: serviceRequests.ChangeComputeHostGroupCompartmentRequest): Promise<{
        response: serviceResponses.ChangeComputeHostGroupCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeDedicatedVmHostCompartment
     *
     * @param request the request to send
     * @return response returns ChangeDedicatedVmHostCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeDedicatedVmHostCompartment(request: serviceRequests.ChangeDedicatedVmHostCompartmentRequest): Promise<{
        response: serviceResponses.ChangeDedicatedVmHostCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeInstanceCompartment
     *
     * @param request the request to send
     * @return response returns ChangeInstanceCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeInstanceCompartment(request: serviceRequests.ChangeInstanceCompartmentRequest): Promise<{
        response: serviceResponses.ChangeInstanceCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateComputeCapacityReservation
     *
     * @param request the request to send
     * @return response returns CreateComputeCapacityReservationResponse, GetWorkRequestResponse tuple
     */
    forCreateComputeCapacityReservation(request: serviceRequests.CreateComputeCapacityReservationRequest): Promise<{
        response: serviceResponses.CreateComputeCapacityReservationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateComputeCapacityTopology
     *
     * @param request the request to send
     * @return response returns CreateComputeCapacityTopologyResponse, GetWorkRequestResponse tuple
     */
    forCreateComputeCapacityTopology(request: serviceRequests.CreateComputeCapacityTopologyRequest): Promise<{
        response: serviceResponses.CreateComputeCapacityTopologyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateComputeGpuMemoryCluster
     *
     * @param request the request to send
     * @return response returns CreateComputeGpuMemoryClusterResponse, GetWorkRequestResponse tuple
     */
    forCreateComputeGpuMemoryCluster(request: serviceRequests.CreateComputeGpuMemoryClusterRequest): Promise<{
        response: serviceResponses.CreateComputeGpuMemoryClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateComputeHostGroup
     *
     * @param request the request to send
     * @return response returns CreateComputeHostGroupResponse, GetWorkRequestResponse tuple
     */
    forCreateComputeHostGroup(request: serviceRequests.CreateComputeHostGroupRequest): Promise<{
        response: serviceResponses.CreateComputeHostGroupResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateDedicatedVmHost
     *
     * @param request the request to send
     * @return response returns CreateDedicatedVmHostResponse, GetWorkRequestResponse tuple
     */
    forCreateDedicatedVmHost(request: serviceRequests.CreateDedicatedVmHostRequest): Promise<{
        response: serviceResponses.CreateDedicatedVmHostResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateImage
     *
     * @param request the request to send
     * @return response returns CreateImageResponse, GetWorkRequestResponse tuple
     */
    forCreateImage(request: serviceRequests.CreateImageRequest): Promise<{
        response: serviceResponses.CreateImageResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteComputeCapacityReservation
     *
     * @param request the request to send
     * @return response returns DeleteComputeCapacityReservationResponse, GetWorkRequestResponse tuple
     */
    forDeleteComputeCapacityReservation(request: serviceRequests.DeleteComputeCapacityReservationRequest): Promise<{
        response: serviceResponses.DeleteComputeCapacityReservationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteComputeCapacityTopology
     *
     * @param request the request to send
     * @return response returns DeleteComputeCapacityTopologyResponse, GetWorkRequestResponse tuple
     */
    forDeleteComputeCapacityTopology(request: serviceRequests.DeleteComputeCapacityTopologyRequest): Promise<{
        response: serviceResponses.DeleteComputeCapacityTopologyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteComputeGpuMemoryCluster
     *
     * @param request the request to send
     * @return response returns DeleteComputeGpuMemoryClusterResponse, GetWorkRequestResponse tuple
     */
    forDeleteComputeGpuMemoryCluster(request: serviceRequests.DeleteComputeGpuMemoryClusterRequest): Promise<{
        response: serviceResponses.DeleteComputeGpuMemoryClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteDedicatedVmHost
     *
     * @param request the request to send
     * @return response returns DeleteDedicatedVmHostResponse, GetWorkRequestResponse tuple
     */
    forDeleteDedicatedVmHost(request: serviceRequests.DeleteDedicatedVmHostRequest): Promise<{
        response: serviceResponses.DeleteDedicatedVmHostResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDetachComputeHostGroupHost
     *
     * @param request the request to send
     * @return response returns DetachComputeHostGroupHostResponse, GetWorkRequestResponse tuple
     */
    forDetachComputeHostGroupHost(request: serviceRequests.DetachComputeHostGroupHostRequest): Promise<{
        response: serviceResponses.DetachComputeHostGroupHostResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forExportImage
     *
     * @param request the request to send
     * @return response returns ExportImageResponse, GetWorkRequestResponse tuple
     */
    forExportImage(request: serviceRequests.ExportImageRequest): Promise<{
        response: serviceResponses.ExportImageResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forBootVolumeAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBootVolumeAttachmentResponse
     */
    forBootVolumeAttachment(request: serviceRequests.GetBootVolumeAttachmentRequest, ...targetStates: models.BootVolumeAttachment.LifecycleState[]): Promise<serviceResponses.GetBootVolumeAttachmentResponse>;
    /**
     * Waits forComputeCapacityReservation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeCapacityReservationResponse | null (null in case of 404 response)
     */
    forComputeCapacityReservation(request: serviceRequests.GetComputeCapacityReservationRequest, ...targetStates: models.ComputeCapacityReservation.LifecycleState[]): Promise<serviceResponses.GetComputeCapacityReservationResponse | null>;
    /**
     * Waits forComputeCapacityTopology till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeCapacityTopologyResponse | null (null in case of 404 response)
     */
    forComputeCapacityTopology(request: serviceRequests.GetComputeCapacityTopologyRequest, ...targetStates: models.ComputeCapacityTopology.LifecycleState[]): Promise<serviceResponses.GetComputeCapacityTopologyResponse | null>;
    /**
     * Waits forComputeCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeClusterResponse | null (null in case of 404 response)
     */
    forComputeCluster(request: serviceRequests.GetComputeClusterRequest, ...targetStates: models.ComputeCluster.LifecycleState[]): Promise<serviceResponses.GetComputeClusterResponse | null>;
    /**
     * Waits forComputeGpuMemoryCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeGpuMemoryClusterResponse | null (null in case of 404 response)
     */
    forComputeGpuMemoryCluster(request: serviceRequests.GetComputeGpuMemoryClusterRequest, ...targetStates: models.ComputeGpuMemoryCluster.LifecycleState[]): Promise<serviceResponses.GetComputeGpuMemoryClusterResponse | null>;
    /**
     * Waits forComputeGpuMemoryFabric till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeGpuMemoryFabricResponse
     */
    forComputeGpuMemoryFabric(request: serviceRequests.GetComputeGpuMemoryFabricRequest, ...targetStates: models.ComputeGpuMemoryFabric.LifecycleState[]): Promise<serviceResponses.GetComputeGpuMemoryFabricResponse>;
    /**
     * Waits forComputeHost till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeHostResponse
     */
    forComputeHost(request: serviceRequests.GetComputeHostRequest, ...targetStates: models.ComputeHost.LifecycleState[]): Promise<serviceResponses.GetComputeHostResponse>;
    /**
     * Waits forComputeHostGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeHostGroupResponse | null (null in case of 404 response)
     */
    forComputeHostGroup(request: serviceRequests.GetComputeHostGroupRequest, ...targetStates: models.ComputeHostGroup.LifecycleState[]): Promise<serviceResponses.GetComputeHostGroupResponse | null>;
    /**
     * Waits forConsoleHistory till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConsoleHistoryResponse
     */
    forConsoleHistory(request: serviceRequests.GetConsoleHistoryRequest, ...targetStates: models.ConsoleHistory.LifecycleState[]): Promise<serviceResponses.GetConsoleHistoryResponse>;
    /**
     * Waits forDedicatedVmHost till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDedicatedVmHostResponse | null (null in case of 404 response)
     */
    forDedicatedVmHost(request: serviceRequests.GetDedicatedVmHostRequest, ...targetStates: models.DedicatedVmHost.LifecycleState[]): Promise<serviceResponses.GetDedicatedVmHostResponse | null>;
    /**
     * Waits forImage till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetImageResponse | null (null in case of 404 response)
     */
    forImage(request: serviceRequests.GetImageRequest, ...targetStates: models.Image.LifecycleState[]): Promise<serviceResponses.GetImageResponse | null>;
    /**
     * Waits forInstance till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInstanceResponse | null (null in case of 404 response)
     */
    forInstance(request: serviceRequests.GetInstanceRequest, ...targetStates: models.Instance.LifecycleState[]): Promise<serviceResponses.GetInstanceResponse | null>;
    /**
     * Waits forInstanceConsoleConnection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInstanceConsoleConnectionResponse | null (null in case of 404 response)
     */
    forInstanceConsoleConnection(request: serviceRequests.GetInstanceConsoleConnectionRequest, ...targetStates: models.InstanceConsoleConnection.LifecycleState[]): Promise<serviceResponses.GetInstanceConsoleConnectionResponse | null>;
    /**
     * Waits forInstanceMaintenanceEvent till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInstanceMaintenanceEventResponse
     */
    forInstanceMaintenanceEvent(request: serviceRequests.GetInstanceMaintenanceEventRequest, ...targetStates: models.InstanceMaintenanceEvent.LifecycleState[]): Promise<serviceResponses.GetInstanceMaintenanceEventResponse>;
    /**
     * Waits forVnicAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVnicAttachmentResponse
     */
    forVnicAttachment(request: serviceRequests.GetVnicAttachmentRequest, ...targetStates: models.VnicAttachment.LifecycleState[]): Promise<serviceResponses.GetVnicAttachmentResponse>;
    /**
     * Waits forVolumeAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeAttachmentResponse
     */
    forVolumeAttachment(request: serviceRequests.GetVolumeAttachmentRequest, ...targetStates: models.VolumeAttachment.LifecycleState[]): Promise<serviceResponses.GetVolumeAttachmentResponse>;
    /**
     * Waits forLaunchInstance
     *
     * @param request the request to send
     * @return response returns LaunchInstanceResponse, GetWorkRequestResponse tuple
     */
    forLaunchInstance(request: serviceRequests.LaunchInstanceRequest): Promise<{
        response: serviceResponses.LaunchInstanceResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateComputeCapacityReservation
     *
     * @param request the request to send
     * @return response returns UpdateComputeCapacityReservationResponse, GetWorkRequestResponse tuple
     */
    forUpdateComputeCapacityReservation(request: serviceRequests.UpdateComputeCapacityReservationRequest): Promise<{
        response: serviceResponses.UpdateComputeCapacityReservationResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateComputeCapacityTopology
     *
     * @param request the request to send
     * @return response returns UpdateComputeCapacityTopologyResponse, GetWorkRequestResponse tuple
     */
    forUpdateComputeCapacityTopology(request: serviceRequests.UpdateComputeCapacityTopologyRequest): Promise<{
        response: serviceResponses.UpdateComputeCapacityTopologyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateComputeGpuMemoryCluster
     *
     * @param request the request to send
     * @return response returns UpdateComputeGpuMemoryClusterResponse, GetWorkRequestResponse tuple
     */
    forUpdateComputeGpuMemoryCluster(request: serviceRequests.UpdateComputeGpuMemoryClusterRequest): Promise<{
        response: serviceResponses.UpdateComputeGpuMemoryClusterResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateComputeHost
     *
     * @param request the request to send
     * @return response returns UpdateComputeHostResponse, GetWorkRequestResponse tuple
     */
    forUpdateComputeHost(request: serviceRequests.UpdateComputeHostRequest): Promise<{
        response: serviceResponses.UpdateComputeHostResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateComputeHostGroup
     *
     * @param request the request to send
     * @return response returns UpdateComputeHostGroupResponse, GetWorkRequestResponse tuple
     */
    forUpdateComputeHostGroup(request: serviceRequests.UpdateComputeHostGroupRequest): Promise<{
        response: serviceResponses.UpdateComputeHostGroupResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateInstance
     *
     * @param request the request to send
     * @return response returns UpdateInstanceResponse, GetWorkRequestResponse tuple
     */
    forUpdateInstance(request: serviceRequests.UpdateInstanceRequest): Promise<{
        response: serviceResponses.UpdateInstanceResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateInstanceMaintenanceEvent
     *
     * @param request the request to send
     * @return response returns UpdateInstanceMaintenanceEventResponse, GetWorkRequestResponse tuple
     */
    forUpdateInstanceMaintenanceEvent(request: serviceRequests.UpdateInstanceMaintenanceEventRequest): Promise<{
        response: serviceResponses.UpdateInstanceMaintenanceEventResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
}
