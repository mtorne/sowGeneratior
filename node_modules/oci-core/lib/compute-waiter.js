"use strict";
/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](https://docs.oracle.com/iaas/Content/Network/Concepts/overview.htm),
[Compute](https://docs.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](https://docs.oracle.com/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](https://docs.oracle.com/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeWaiter = void 0;
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const oci_workrequests_1 = require("oci-workrequests");
class ComputeWaiter {
    constructor(client, workRequestClient, config) {
        this.client = client;
        this.workRequestClient = workRequestClient;
        this.config = config;
    }
    /**
     * Waits forAttachComputeHostGroupHost
     *
     * @param request the request to send
     * @return response returns AttachComputeHostGroupHostResponse, GetWorkRequestResponse tuple
     */
    forAttachComputeHostGroupHost(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const attachComputeHostGroupHostResponse = yield this.client.attachComputeHostGroupHost(request);
            if (attachComputeHostGroupHostResponse.opcWorkRequestId === undefined)
                return {
                    response: attachComputeHostGroupHostResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, attachComputeHostGroupHostResponse.opcWorkRequestId);
            return {
                response: attachComputeHostGroupHostResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeComputeCapacityReservationCompartment
     *
     * @param request the request to send
     * @return response returns ChangeComputeCapacityReservationCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeComputeCapacityReservationCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeComputeCapacityReservationCompartmentResponse = yield this.client.changeComputeCapacityReservationCompartment(request);
            if (changeComputeCapacityReservationCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeComputeCapacityReservationCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeComputeCapacityReservationCompartmentResponse.opcWorkRequestId);
            return {
                response: changeComputeCapacityReservationCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeComputeCapacityTopologyCompartment
     *
     * @param request the request to send
     * @return response returns ChangeComputeCapacityTopologyCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeComputeCapacityTopologyCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeComputeCapacityTopologyCompartmentResponse = yield this.client.changeComputeCapacityTopologyCompartment(request);
            if (changeComputeCapacityTopologyCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeComputeCapacityTopologyCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeComputeCapacityTopologyCompartmentResponse.opcWorkRequestId);
            return {
                response: changeComputeCapacityTopologyCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeComputeHostCompartment
     *
     * @param request the request to send
     * @return response returns ChangeComputeHostCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeComputeHostCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeComputeHostCompartmentResponse = yield this.client.changeComputeHostCompartment(request);
            if (changeComputeHostCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeComputeHostCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeComputeHostCompartmentResponse.opcWorkRequestId);
            return {
                response: changeComputeHostCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeComputeHostGroupCompartment
     *
     * @param request the request to send
     * @return response returns ChangeComputeHostGroupCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeComputeHostGroupCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeComputeHostGroupCompartmentResponse = yield this.client.changeComputeHostGroupCompartment(request);
            if (changeComputeHostGroupCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeComputeHostGroupCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeComputeHostGroupCompartmentResponse.opcWorkRequestId);
            return {
                response: changeComputeHostGroupCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeDedicatedVmHostCompartment
     *
     * @param request the request to send
     * @return response returns ChangeDedicatedVmHostCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeDedicatedVmHostCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeDedicatedVmHostCompartmentResponse = yield this.client.changeDedicatedVmHostCompartment(request);
            if (changeDedicatedVmHostCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeDedicatedVmHostCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeDedicatedVmHostCompartmentResponse.opcWorkRequestId);
            return {
                response: changeDedicatedVmHostCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeInstanceCompartment
     *
     * @param request the request to send
     * @return response returns ChangeInstanceCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeInstanceCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeInstanceCompartmentResponse = yield this.client.changeInstanceCompartment(request);
            if (changeInstanceCompartmentResponse.opcWorkRequestId === undefined)
                return { response: changeInstanceCompartmentResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeInstanceCompartmentResponse.opcWorkRequestId);
            return {
                response: changeInstanceCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateComputeCapacityReservation
     *
     * @param request the request to send
     * @return response returns CreateComputeCapacityReservationResponse, GetWorkRequestResponse tuple
     */
    forCreateComputeCapacityReservation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createComputeCapacityReservationResponse = yield this.client.createComputeCapacityReservation(request);
            if (createComputeCapacityReservationResponse.opcWorkRequestId === undefined)
                return {
                    response: createComputeCapacityReservationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createComputeCapacityReservationResponse.opcWorkRequestId);
            return {
                response: createComputeCapacityReservationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateComputeCapacityTopology
     *
     * @param request the request to send
     * @return response returns CreateComputeCapacityTopologyResponse, GetWorkRequestResponse tuple
     */
    forCreateComputeCapacityTopology(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createComputeCapacityTopologyResponse = yield this.client.createComputeCapacityTopology(request);
            if (createComputeCapacityTopologyResponse.opcWorkRequestId === undefined)
                return {
                    response: createComputeCapacityTopologyResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createComputeCapacityTopologyResponse.opcWorkRequestId);
            return {
                response: createComputeCapacityTopologyResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateComputeGpuMemoryCluster
     *
     * @param request the request to send
     * @return response returns CreateComputeGpuMemoryClusterResponse, GetWorkRequestResponse tuple
     */
    forCreateComputeGpuMemoryCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createComputeGpuMemoryClusterResponse = yield this.client.createComputeGpuMemoryCluster(request);
            if (createComputeGpuMemoryClusterResponse.opcWorkRequestId === undefined)
                return {
                    response: createComputeGpuMemoryClusterResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createComputeGpuMemoryClusterResponse.opcWorkRequestId);
            return {
                response: createComputeGpuMemoryClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateComputeHostGroup
     *
     * @param request the request to send
     * @return response returns CreateComputeHostGroupResponse, GetWorkRequestResponse tuple
     */
    forCreateComputeHostGroup(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createComputeHostGroupResponse = yield this.client.createComputeHostGroup(request);
            if (createComputeHostGroupResponse.opcWorkRequestId === undefined)
                return { response: createComputeHostGroupResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createComputeHostGroupResponse.opcWorkRequestId);
            return {
                response: createComputeHostGroupResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateDedicatedVmHost
     *
     * @param request the request to send
     * @return response returns CreateDedicatedVmHostResponse, GetWorkRequestResponse tuple
     */
    forCreateDedicatedVmHost(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createDedicatedVmHostResponse = yield this.client.createDedicatedVmHost(request);
            if (createDedicatedVmHostResponse.opcWorkRequestId === undefined)
                return { response: createDedicatedVmHostResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createDedicatedVmHostResponse.opcWorkRequestId);
            return { response: createDedicatedVmHostResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateImage
     *
     * @param request the request to send
     * @return response returns CreateImageResponse, GetWorkRequestResponse tuple
     */
    forCreateImage(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createImageResponse = yield this.client.createImage(request);
            if (createImageResponse.opcWorkRequestId === undefined)
                return { response: createImageResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createImageResponse.opcWorkRequestId);
            return { response: createImageResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteComputeCapacityReservation
     *
     * @param request the request to send
     * @return response returns DeleteComputeCapacityReservationResponse, GetWorkRequestResponse tuple
     */
    forDeleteComputeCapacityReservation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteComputeCapacityReservationResponse = yield this.client.deleteComputeCapacityReservation(request);
            if (deleteComputeCapacityReservationResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteComputeCapacityReservationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteComputeCapacityReservationResponse.opcWorkRequestId);
            return {
                response: deleteComputeCapacityReservationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteComputeCapacityTopology
     *
     * @param request the request to send
     * @return response returns DeleteComputeCapacityTopologyResponse, GetWorkRequestResponse tuple
     */
    forDeleteComputeCapacityTopology(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteComputeCapacityTopologyResponse = yield this.client.deleteComputeCapacityTopology(request);
            if (deleteComputeCapacityTopologyResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteComputeCapacityTopologyResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteComputeCapacityTopologyResponse.opcWorkRequestId);
            return {
                response: deleteComputeCapacityTopologyResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteComputeGpuMemoryCluster
     *
     * @param request the request to send
     * @return response returns DeleteComputeGpuMemoryClusterResponse, GetWorkRequestResponse tuple
     */
    forDeleteComputeGpuMemoryCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteComputeGpuMemoryClusterResponse = yield this.client.deleteComputeGpuMemoryCluster(request);
            if (deleteComputeGpuMemoryClusterResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteComputeGpuMemoryClusterResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteComputeGpuMemoryClusterResponse.opcWorkRequestId);
            return {
                response: deleteComputeGpuMemoryClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteDedicatedVmHost
     *
     * @param request the request to send
     * @return response returns DeleteDedicatedVmHostResponse, GetWorkRequestResponse tuple
     */
    forDeleteDedicatedVmHost(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteDedicatedVmHostResponse = yield this.client.deleteDedicatedVmHost(request);
            if (deleteDedicatedVmHostResponse.opcWorkRequestId === undefined)
                return { response: deleteDedicatedVmHostResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteDedicatedVmHostResponse.opcWorkRequestId);
            return { response: deleteDedicatedVmHostResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDetachComputeHostGroupHost
     *
     * @param request the request to send
     * @return response returns DetachComputeHostGroupHostResponse, GetWorkRequestResponse tuple
     */
    forDetachComputeHostGroupHost(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const detachComputeHostGroupHostResponse = yield this.client.detachComputeHostGroupHost(request);
            if (detachComputeHostGroupHostResponse.opcWorkRequestId === undefined)
                return {
                    response: detachComputeHostGroupHostResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, detachComputeHostGroupHostResponse.opcWorkRequestId);
            return {
                response: detachComputeHostGroupHostResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forExportImage
     *
     * @param request the request to send
     * @return response returns ExportImageResponse, GetWorkRequestResponse tuple
     */
    forExportImage(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const exportImageResponse = yield this.client.exportImage(request);
            if (exportImageResponse.opcWorkRequestId === undefined)
                return { response: exportImageResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, exportImageResponse.opcWorkRequestId);
            return { response: exportImageResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forBootVolumeAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBootVolumeAttachmentResponse
     */
    forBootVolumeAttachment(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getBootVolumeAttachment(request), response => targetStates.includes(response.bootVolumeAttachment.lifecycleState));
        });
    }
    /**
     * Waits forComputeCapacityReservation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeCapacityReservationResponse | null (null in case of 404 response)
     */
    forComputeCapacityReservation(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getComputeCapacityReservation(request), response => targetStates.includes(response.computeCapacityReservation.lifecycleState), targetStates.includes(models.ComputeCapacityReservation.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forComputeCapacityTopology till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeCapacityTopologyResponse | null (null in case of 404 response)
     */
    forComputeCapacityTopology(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getComputeCapacityTopology(request), response => targetStates.includes(response.computeCapacityTopology.lifecycleState), targetStates.includes(models.ComputeCapacityTopology.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forComputeCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeClusterResponse | null (null in case of 404 response)
     */
    forComputeCluster(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getComputeCluster(request), response => targetStates.includes(response.computeCluster.lifecycleState), targetStates.includes(models.ComputeCluster.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forComputeGpuMemoryCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeGpuMemoryClusterResponse | null (null in case of 404 response)
     */
    forComputeGpuMemoryCluster(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getComputeGpuMemoryCluster(request), response => targetStates.includes(response.computeGpuMemoryCluster.lifecycleState), targetStates.includes(models.ComputeGpuMemoryCluster.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forComputeGpuMemoryFabric till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeGpuMemoryFabricResponse
     */
    forComputeGpuMemoryFabric(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getComputeGpuMemoryFabric(request), response => targetStates.includes(response.computeGpuMemoryFabric.lifecycleState));
        });
    }
    /**
     * Waits forComputeHost till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeHostResponse
     */
    forComputeHost(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getComputeHost(request), response => targetStates.includes(response.computeHost.lifecycleState));
        });
    }
    /**
     * Waits forComputeHostGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetComputeHostGroupResponse | null (null in case of 404 response)
     */
    forComputeHostGroup(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getComputeHostGroup(request), response => targetStates.includes(response.computeHostGroup.lifecycleState), targetStates.includes(models.ComputeHostGroup.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forConsoleHistory till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConsoleHistoryResponse
     */
    forConsoleHistory(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getConsoleHistory(request), response => targetStates.includes(response.consoleHistory.lifecycleState));
        });
    }
    /**
     * Waits forDedicatedVmHost till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDedicatedVmHostResponse | null (null in case of 404 response)
     */
    forDedicatedVmHost(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDedicatedVmHost(request), response => targetStates.includes(response.dedicatedVmHost.lifecycleState), targetStates.includes(models.DedicatedVmHost.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forImage till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetImageResponse | null (null in case of 404 response)
     */
    forImage(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getImage(request), response => targetStates.includes(response.image.lifecycleState), targetStates.includes(models.Image.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forInstance till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInstanceResponse | null (null in case of 404 response)
     */
    forInstance(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getInstance(request), response => targetStates.includes(response.instance.lifecycleState), targetStates.includes(models.Instance.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forInstanceConsoleConnection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInstanceConsoleConnectionResponse | null (null in case of 404 response)
     */
    forInstanceConsoleConnection(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getInstanceConsoleConnection(request), response => targetStates.includes(response.instanceConsoleConnection.lifecycleState), targetStates.includes(models.InstanceConsoleConnection.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forInstanceMaintenanceEvent till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInstanceMaintenanceEventResponse
     */
    forInstanceMaintenanceEvent(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getInstanceMaintenanceEvent(request), response => targetStates.includes(response.instanceMaintenanceEvent.lifecycleState));
        });
    }
    /**
     * Waits forVnicAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVnicAttachmentResponse
     */
    forVnicAttachment(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getVnicAttachment(request), response => targetStates.includes(response.vnicAttachment.lifecycleState));
        });
    }
    /**
     * Waits forVolumeAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVolumeAttachmentResponse
     */
    forVolumeAttachment(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getVolumeAttachment(request), response => targetStates.includes(response.volumeAttachment.lifecycleState));
        });
    }
    /**
     * Waits forLaunchInstance
     *
     * @param request the request to send
     * @return response returns LaunchInstanceResponse, GetWorkRequestResponse tuple
     */
    forLaunchInstance(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const launchInstanceResponse = yield this.client.launchInstance(request);
            if (launchInstanceResponse.opcWorkRequestId === undefined)
                return { response: launchInstanceResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, launchInstanceResponse.opcWorkRequestId);
            return { response: launchInstanceResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateComputeCapacityReservation
     *
     * @param request the request to send
     * @return response returns UpdateComputeCapacityReservationResponse, GetWorkRequestResponse tuple
     */
    forUpdateComputeCapacityReservation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateComputeCapacityReservationResponse = yield this.client.updateComputeCapacityReservation(request);
            if (updateComputeCapacityReservationResponse.opcWorkRequestId === undefined)
                return {
                    response: updateComputeCapacityReservationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateComputeCapacityReservationResponse.opcWorkRequestId);
            return {
                response: updateComputeCapacityReservationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateComputeCapacityTopology
     *
     * @param request the request to send
     * @return response returns UpdateComputeCapacityTopologyResponse, GetWorkRequestResponse tuple
     */
    forUpdateComputeCapacityTopology(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateComputeCapacityTopologyResponse = yield this.client.updateComputeCapacityTopology(request);
            if (updateComputeCapacityTopologyResponse.opcWorkRequestId === undefined)
                return {
                    response: updateComputeCapacityTopologyResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateComputeCapacityTopologyResponse.opcWorkRequestId);
            return {
                response: updateComputeCapacityTopologyResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateComputeGpuMemoryCluster
     *
     * @param request the request to send
     * @return response returns UpdateComputeGpuMemoryClusterResponse, GetWorkRequestResponse tuple
     */
    forUpdateComputeGpuMemoryCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateComputeGpuMemoryClusterResponse = yield this.client.updateComputeGpuMemoryCluster(request);
            if (updateComputeGpuMemoryClusterResponse.opcWorkRequestId === undefined)
                return {
                    response: updateComputeGpuMemoryClusterResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateComputeGpuMemoryClusterResponse.opcWorkRequestId);
            return {
                response: updateComputeGpuMemoryClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateComputeHost
     *
     * @param request the request to send
     * @return response returns UpdateComputeHostResponse, GetWorkRequestResponse tuple
     */
    forUpdateComputeHost(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateComputeHostResponse = yield this.client.updateComputeHost(request);
            if (updateComputeHostResponse.opcWorkRequestId === undefined)
                return { response: updateComputeHostResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateComputeHostResponse.opcWorkRequestId);
            return { response: updateComputeHostResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateComputeHostGroup
     *
     * @param request the request to send
     * @return response returns UpdateComputeHostGroupResponse, GetWorkRequestResponse tuple
     */
    forUpdateComputeHostGroup(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateComputeHostGroupResponse = yield this.client.updateComputeHostGroup(request);
            if (updateComputeHostGroupResponse.opcWorkRequestId === undefined)
                return { response: updateComputeHostGroupResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateComputeHostGroupResponse.opcWorkRequestId);
            return {
                response: updateComputeHostGroupResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateInstance
     *
     * @param request the request to send
     * @return response returns UpdateInstanceResponse, GetWorkRequestResponse tuple
     */
    forUpdateInstance(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateInstanceResponse = yield this.client.updateInstance(request);
            if (updateInstanceResponse.opcWorkRequestId === undefined)
                return { response: updateInstanceResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateInstanceResponse.opcWorkRequestId);
            return { response: updateInstanceResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateInstanceMaintenanceEvent
     *
     * @param request the request to send
     * @return response returns UpdateInstanceMaintenanceEventResponse, GetWorkRequestResponse tuple
     */
    forUpdateInstanceMaintenanceEvent(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateInstanceMaintenanceEventResponse = yield this.client.updateInstanceMaintenanceEvent(request);
            if (updateInstanceMaintenanceEventResponse.opcWorkRequestId === undefined)
                return {
                    response: updateInstanceMaintenanceEventResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateInstanceMaintenanceEventResponse.opcWorkRequestId);
            return {
                response: updateInstanceMaintenanceEventResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
}
exports.ComputeWaiter = ComputeWaiter;
//# sourceMappingURL=compute-waiter.js.map