"use strict";
/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](https://docs.oracle.com/iaas/Content/Network/Concepts/overview.htm),
[Compute](https://docs.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](https://docs.oracle.com/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](https://docs.oracle.com/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceMaintenanceEvent = void 0;
var InstanceMaintenanceEvent;
(function (InstanceMaintenanceEvent) {
    let MaintenanceCategory;
    (function (MaintenanceCategory) {
        MaintenanceCategory["Emergency"] = "EMERGENCY";
        MaintenanceCategory["Mandatory"] = "MANDATORY";
        MaintenanceCategory["Flexible"] = "FLEXIBLE";
        MaintenanceCategory["Optional"] = "OPTIONAL";
        MaintenanceCategory["Notification"] = "NOTIFICATION";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        MaintenanceCategory["UnknownValue"] = "UNKNOWN_VALUE";
    })(MaintenanceCategory = InstanceMaintenanceEvent.MaintenanceCategory || (InstanceMaintenanceEvent.MaintenanceCategory = {}));
    let MaintenanceReason;
    (function (MaintenanceReason) {
        MaintenanceReason["Evacuation"] = "EVACUATION";
        MaintenanceReason["EnvironmentalFactors"] = "ENVIRONMENTAL_FACTORS";
        MaintenanceReason["Decommission"] = "DECOMMISSION";
        MaintenanceReason["HardwareReplacement"] = "HARDWARE_REPLACEMENT";
        MaintenanceReason["FirmwareUpdate"] = "FIRMWARE_UPDATE";
        MaintenanceReason["SecurityUpdate"] = "SECURITY_UPDATE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        MaintenanceReason["UnknownValue"] = "UNKNOWN_VALUE";
    })(MaintenanceReason = InstanceMaintenanceEvent.MaintenanceReason || (InstanceMaintenanceEvent.MaintenanceReason = {}));
    let InstanceAction;
    (function (InstanceAction) {
        InstanceAction["RebootMigration"] = "REBOOT_MIGRATION";
        InstanceAction["Terminate"] = "TERMINATE";
        InstanceAction["Stop"] = "STOP";
        InstanceAction["None"] = "NONE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        InstanceAction["UnknownValue"] = "UNKNOWN_VALUE";
    })(InstanceAction = InstanceMaintenanceEvent.InstanceAction || (InstanceMaintenanceEvent.InstanceAction = {}));
    let AlternativeResolutionActions;
    (function (AlternativeResolutionActions) {
        AlternativeResolutionActions["RebootMigration"] = "REBOOT_MIGRATION";
        AlternativeResolutionActions["Terminate"] = "TERMINATE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        AlternativeResolutionActions["UnknownValue"] = "UNKNOWN_VALUE";
    })(AlternativeResolutionActions = InstanceMaintenanceEvent.AlternativeResolutionActions || (InstanceMaintenanceEvent.AlternativeResolutionActions = {}));
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Scheduled"] = "SCHEDULED";
        LifecycleState["Started"] = "STARTED";
        LifecycleState["Processing"] = "PROCESSING";
        LifecycleState["Succeeded"] = "SUCCEEDED";
        LifecycleState["Failed"] = "FAILED";
        LifecycleState["Canceled"] = "CANCELED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = InstanceMaintenanceEvent.LifecycleState || (InstanceMaintenanceEvent.LifecycleState = {}));
    let CreatedBy;
    (function (CreatedBy) {
        CreatedBy["Customer"] = "CUSTOMER";
        CreatedBy["System"] = "SYSTEM";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        CreatedBy["UnknownValue"] = "UNKNOWN_VALUE";
    })(CreatedBy = InstanceMaintenanceEvent.CreatedBy || (InstanceMaintenanceEvent.CreatedBy = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    InstanceMaintenanceEvent.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    InstanceMaintenanceEvent.getDeserializedJsonObj = getDeserializedJsonObj;
})(InstanceMaintenanceEvent = exports.InstanceMaintenanceEvent || (exports.InstanceMaintenanceEvent = {}));
//# sourceMappingURL=instance-maintenance-event.js.map