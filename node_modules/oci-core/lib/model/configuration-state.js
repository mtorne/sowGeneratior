"use strict";
/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](https://docs.oracle.com/iaas/Content/Network/Concepts/overview.htm),
[Compute](https://docs.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](https://docs.oracle.com/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](https://docs.oracle.com/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationState = void 0;
/**
 * The current state of the host configuration. The Host is either
 * CONFORMANT - current state matches the desired configuration
 * NON_CONFORMANT - current state does not match the desired configuration
 * PRE_APPLYING, APPLYING, CHECKING - transitional states
 * UNKNOWN - current state is unknown
 *
 **/
var ConfigurationState;
(function (ConfigurationState) {
    ConfigurationState["Conformant"] = "CONFORMANT";
    ConfigurationState["NonConformant"] = "NON_CONFORMANT";
    ConfigurationState["Checking"] = "CHECKING";
    ConfigurationState["PreApplying"] = "PRE_APPLYING";
    ConfigurationState["Applying"] = "APPLYING";
    ConfigurationState["Unknown"] = "UNKNOWN";
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    ConfigurationState["UnknownValue"] = "UNKNOWN_VALUE";
})(ConfigurationState = exports.ConfigurationState || (exports.ConfigurationState = {}));
(function (ConfigurationState) {
    function getJsonObj(obj) {
        return obj;
    }
    ConfigurationState.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        return obj;
    }
    ConfigurationState.getDeserializedJsonObj = getDeserializedJsonObj;
})(ConfigurationState = exports.ConfigurationState || (exports.ConfigurationState = {}));
//# sourceMappingURL=configuration-state.js.map