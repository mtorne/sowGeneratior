/**
 * Java Management Service Fleets API
 * The APIs for the [Fleet Management](https://docs.oracle.com/en-us/iaas/jms/doc/fleet-management.html) feature of Java Management Service to monitor and manage the usage of Java in your enterprise. Use these APIs to manage fleets, configure managed instances to report to fleets, and gain insights into the Java workloads running on these instances by carrying out basic and advanced features.
 * OpenAPI spec version: 20210610
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * An asynchronous work request. See [Work Requests](https://docs.oracle.com/iaas/Content/General/Concepts/workrequestoverview.htm).
 */
export interface WorkRequest {
    /**
     * The asynchronous operation tracked by this work request.
     */
    "operationType": model.OperationType;
    /**
     * The status of the work request.
     */
    "status": model.OperationStatus;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the work request.
     */
    "id": string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the work request. Work requests should be scoped to
     * the same compartment as the resource the work request affects. If the work request affects multiple resources,
     * and those resources aren't in the same compartment, it's up to the service team to pick the primary
     * resource whose compartment should be used.
     *
     */
    "compartmentId": string;
    /**
     * The resources that are affected by this work request.
     */
    "resources": Array<model.WorkRequestResource>;
    /**
     * The percentage complete of the operation tracked by this work request. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "percentComplete": number;
    /**
     * The date and time the request was created (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     *
     */
    "timeAccepted": Date;
    /**
     * The date and time the work request transitioned from _ACCEPTED_ to _IN_PROGRESS_ (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     *
     */
    "timeStarted"?: Date;
    /**
     * The date and time the work request reached a terminal state, either _FAILED_ or _SUCCEEDED_ (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     *
     */
    "timeFinished"?: Date;
    "createdBy"?: model.Principal;
    /**
     * The date and time the work request percentage was last updated. (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
     *
     */
    "timeLastUpdated"?: Date;
    /**
     * The total number of tasks to be executed for this work request. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "totalTaskCount"?: number;
    /**
     * The number of tasks had been executed to a terminal state. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "completedTaskCount"?: number;
}
export declare namespace WorkRequest {
    function getJsonObj(obj: WorkRequest): object;
    function getDeserializedJsonObj(obj: WorkRequest): object;
}
