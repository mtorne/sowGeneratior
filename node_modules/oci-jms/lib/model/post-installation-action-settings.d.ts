/**
 * Java Management Service Fleets API
 * The APIs for the [Fleet Management](https://docs.oracle.com/en-us/iaas/jms/doc/fleet-management.html) feature of Java Management Service to monitor and manage the usage of Java in your enterprise. Use these APIs to manage fleets, configure managed instances to report to fleets, and gain insights into the Java workloads running on these instances by carrying out basic and advanced features.
 * OpenAPI spec version: 20210610
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * List of available post actions you can execute after the successful Java installation.
 *
 */
export interface PostInstallationActionSettings {
    /**
     * The following post JRE installation actions are supported by the field:
     * - Disable TLS 1.0 , TLS 1.1
     *
     */
    "disabledTlsVersions"?: Array<model.TlsVersions>;
    /**
     * Restores JDK root certificates with the certificates that are available in the operating system.
     * The following action is supported by the field:
     * - Replace JDK root certificates with a list provided by the operating system.
     *
     */
    "shouldReplaceCertificatesOperatingSystem"?: boolean;
    "minimumKeySizeSettings"?: model.MinimumKeySizeSettings;
    /**
     * Sets FileHandler and ConsoleHandler as handlers in logging.properties file.
     *
     */
    "addLoggingHandler"?: boolean;
    /**
     * Sets the logging level in logging.properties file.
     *
     */
    "globalLoggingLevel"?: model.GlobalLoggingLevel;
    "proxies"?: model.Proxies;
}
export declare namespace PostInstallationActionSettings {
    function getJsonObj(obj: PostInstallationActionSettings): object;
    function getDeserializedJsonObj(obj: PostInstallationActionSettings): object;
}
