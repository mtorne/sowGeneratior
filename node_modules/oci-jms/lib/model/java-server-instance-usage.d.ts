/**
 * Java Management Service Fleets API
 * The APIs for the [Fleet Management](https://docs.oracle.com/en-us/iaas/jms/doc/fleet-management.html) feature of Java Management Service to monitor and manage the usage of Java in your enterprise. Use these APIs to manage fleets, configure managed instances to report to fleets, and gain insights into the Java workloads running on these instances by carrying out basic and advanced features.
 * OpenAPI spec version: 20210610
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Java Server instance usage during a specified time period.
 *
 */
export interface JavaServerInstanceUsage {
    /**
     * The internal identifier of the Java Server instance.
     *
     */
    "serverInstanceKey": string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related Fleet.
     *
     */
    "fleetId": string;
    /**
     * The name of the Java Server instance.
     *
     */
    "serverInstanceName": string;
    /**
     * The port of the Java Server instance.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "serverInstancePort"?: number;
    /**
     * The internal identifier of the related Java Server.
     *
     */
    "serverKey": string;
    /**
     * The name of the Java Server.
     *
     */
    "serverName"?: string;
    /**
     * The version of the Java Server.
     *
     */
    "serverVersion"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the related managed instance.
     *
     */
    "managedInstanceId": string;
    /**
     * The host name of the related managed instance.
     *
     */
    "hostName"?: string;
    /**
     * The internal identifier of the related Java Runtime.
     *
     */
    "jvmKey"?: string;
    /**
     * The vendor of the Java Runtime.
     *
     */
    "jvmVendor"?: string;
    /**
     * The distribution of the Java Runtime.
     *
     */
    "jvmDistribution"?: string;
    /**
     * The version of the Java Runtime.
     *
     */
    "jvmVersion"?: string;
    /**
     * The security status of the Java Runtime.
     */
    "jvmSecurityStatus"?: model.JreSecurityStatus;
    /**
     * The approximate count of deployed applications in the Java Server instance.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "approximateDeployedApplicationCount"?: number;
    /**
     * Lower bound of the specified time period filter. JMS provides a view of the data that is _per day_. The query uses only the date element of the parameter.
     */
    "timeStart"?: Date;
    /**
     * Upper bound of the specified time period filter. JMS provides a view of the data that is _per day_. The query uses only the date element of the parameter.
     */
    "timeEnd"?: Date;
    /**
     * The date and time the resource was _first_ reported to JMS.
     * This is potentially _before_ the specified time period provided by the filters.
     * For example, a resource can be first reported to JMS before the start of a specified time period,
     * if it is also reported during the time period.
     *
     */
    "timeFirstSeen"?: Date;
    /**
     * The date and time the resource was _last_ reported to JMS.
     * This is potentially _after_ the specified time period provided by the filters.
     * For example, a resource can be last reported to JMS before the start of a specified time period,
     * if it is also reported during the time period.
     *
     */
    "timeLastSeen"?: Date;
}
export declare namespace JavaServerInstanceUsage {
    function getJsonObj(obj: JavaServerInstanceUsage): object;
    function getDeserializedJsonObj(obj: JavaServerInstanceUsage): object;
}
