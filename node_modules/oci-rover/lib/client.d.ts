/**
 * RoverCloudService API
 * A description of the RoverCloudService API.
 * OpenAPI spec version: 20201210
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { RoverClusterWaiter } from "./rovercluster-waiter";
import { RoverEntitlementWaiter } from "./roverentitlement-waiter";
import { RoverNodeWaiter } from "./rovernode-waiter";
import { WorkRequestsWaiter } from "./workrequests-waiter";
declare const Breaker: any;
export declare enum RoverBundleApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class RoverBundleClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * List all the roverBundleRequests for a given roverClusterId.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRoverClusterRoverBundleRequestsRequest
     * @return ListRoverClusterRoverBundleRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListRoverClusterRoverBundleRequests.ts.html |here} to see how to use ListRoverClusterRoverBundleRequests API.
     */
    listRoverClusterRoverBundleRequests(listRoverClusterRoverBundleRequestsRequest: requests.ListRoverClusterRoverBundleRequestsRequest): Promise<responses.ListRoverClusterRoverBundleRequestsResponse>;
    /**
     * List all the roverBundleRequests for a given roverNodeId.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRoverNodeRoverBundleRequestsRequest
     * @return ListRoverNodeRoverBundleRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListRoverNodeRoverBundleRequests.ts.html |here} to see how to use ListRoverNodeRoverBundleRequests API.
     */
    listRoverNodeRoverBundleRequests(listRoverNodeRoverBundleRequestsRequest: requests.ListRoverNodeRoverBundleRequestsRequest): Promise<responses.ListRoverNodeRoverBundleRequestsResponse>;
    /**
     * Request to get rover bundle to the bucket in customer's tenancy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RequestBundleRoverClusterRequest
     * @return RequestBundleRoverClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RequestBundleRoverCluster.ts.html |here} to see how to use RequestBundleRoverCluster API.
     */
    requestBundleRoverCluster(requestBundleRoverClusterRequest: requests.RequestBundleRoverClusterRequest): Promise<responses.RequestBundleRoverClusterResponse>;
    /**
     * Request to get rover bundle to the bucket in customer's tenancy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RequestBundleRoverNodeRequest
     * @return RequestBundleRoverNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RequestBundleRoverNode.ts.html |here} to see how to use RequestBundleRoverNode API.
     */
    requestBundleRoverNode(requestBundleRoverNodeRequest: requests.RequestBundleRoverNodeRequest): Promise<responses.RequestBundleRoverNodeResponse>;
    /**
     * Retrieve the latest available rover bundle version that can be upgraded to based on current bundle version.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RetrieveAvailableBundleVersionsRoverClusterRequest
     * @return RetrieveAvailableBundleVersionsRoverClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RetrieveAvailableBundleVersionsRoverCluster.ts.html |here} to see how to use RetrieveAvailableBundleVersionsRoverCluster API.
     */
    retrieveAvailableBundleVersionsRoverCluster(retrieveAvailableBundleVersionsRoverClusterRequest: requests.RetrieveAvailableBundleVersionsRoverClusterRequest): Promise<responses.RetrieveAvailableBundleVersionsRoverClusterResponse>;
    /**
     * Retrieve the latest available rover bundle version that can be upgraded to based on current bundle version.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RetrieveAvailableBundleVersionsRoverNodeRequest
     * @return RetrieveAvailableBundleVersionsRoverNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RetrieveAvailableBundleVersionsRoverNode.ts.html |here} to see how to use RetrieveAvailableBundleVersionsRoverNode API.
     */
    retrieveAvailableBundleVersionsRoverNode(retrieveAvailableBundleVersionsRoverNodeRequest: requests.RetrieveAvailableBundleVersionsRoverNodeRequest): Promise<responses.RetrieveAvailableBundleVersionsRoverNodeResponse>;
    /**
     * Retrieve the status and progress of a rover bundle copy request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RetrieveBundleStatusRoverClusterRequest
     * @return RetrieveBundleStatusRoverClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RetrieveBundleStatusRoverCluster.ts.html |here} to see how to use RetrieveBundleStatusRoverCluster API.
     */
    retrieveBundleStatusRoverCluster(retrieveBundleStatusRoverClusterRequest: requests.RetrieveBundleStatusRoverClusterRequest): Promise<responses.RetrieveBundleStatusRoverClusterResponse>;
    /**
     * Retrieve the status and progress of a rover bundle copy request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RetrieveBundleStatusRoverNodeRequest
     * @return RetrieveBundleStatusRoverNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RetrieveBundleStatusRoverNode.ts.html |here} to see how to use RetrieveBundleStatusRoverNode API.
     */
    retrieveBundleStatusRoverNode(retrieveBundleStatusRoverNodeRequest: requests.RetrieveBundleStatusRoverNodeRequest): Promise<responses.RetrieveBundleStatusRoverNodeResponse>;
}
export declare enum RoverClusterApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class RoverClusterClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": RoverClusterWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new RoverClusterWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): RoverClusterWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): RoverClusterWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Moves a cluster into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeRoverClusterCompartmentRequest
     * @return ChangeRoverClusterCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ChangeRoverClusterCompartment.ts.html |here} to see how to use ChangeRoverClusterCompartment API.
     */
    changeRoverClusterCompartment(changeRoverClusterCompartmentRequest: requests.ChangeRoverClusterCompartmentRequest): Promise<responses.ChangeRoverClusterCompartmentResponse>;
    /**
     * Creates a new RoverCluster.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateRoverClusterRequest
     * @return CreateRoverClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/CreateRoverCluster.ts.html |here} to see how to use CreateRoverCluster API.
     */
    createRoverCluster(createRoverClusterRequest: requests.CreateRoverClusterRequest): Promise<responses.CreateRoverClusterResponse>;
    /**
     * Deletes a RoverCluster resource by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteRoverClusterRequest
     * @return DeleteRoverClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/DeleteRoverCluster.ts.html |here} to see how to use DeleteRoverCluster API.
     */
    deleteRoverCluster(deleteRoverClusterRequest: requests.DeleteRoverClusterRequest): Promise<responses.DeleteRoverClusterResponse>;
    /**
     * Gets a RoverCluster by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRoverClusterRequest
     * @return GetRoverClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverCluster.ts.html |here} to see how to use GetRoverCluster API.
     */
    getRoverCluster(getRoverClusterRequest: requests.GetRoverClusterRequest): Promise<responses.GetRoverClusterResponse>;
    /**
     * Get the certificate for a rover cluster
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRoverClusterCertificateRequest
     * @return GetRoverClusterCertificateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverClusterCertificate.ts.html |here} to see how to use GetRoverClusterCertificate API.
     */
    getRoverClusterCertificate(getRoverClusterCertificateRequest: requests.GetRoverClusterCertificateRequest): Promise<responses.GetRoverClusterCertificateResponse>;
    /**
     * Returns a list of RoverClusters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRoverClustersRequest
     * @return ListRoverClustersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListRoverClusters.ts.html |here} to see how to use ListRoverClusters API.
     */
    listRoverClusters(listRoverClustersRequest: requests.ListRoverClustersRequest): Promise<responses.ListRoverClustersResponse>;
    /**
     * Submit additional nodes request for a roverCluster.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RequestAdditionalNodesRequest
     * @return RequestAdditionalNodesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RequestAdditionalNodes.ts.html |here} to see how to use RequestAdditionalNodes API.
     */
    requestAdditionalNodes(requestAdditionalNodesRequest: requests.RequestAdditionalNodesRequest): Promise<responses.RequestAdditionalNodesResponse>;
    /**
     * Updates the RoverCluster
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateRoverClusterRequest
     * @return UpdateRoverClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/UpdateRoverCluster.ts.html |here} to see how to use UpdateRoverCluster API.
     */
    updateRoverCluster(updateRoverClusterRequest: requests.UpdateRoverClusterRequest): Promise<responses.UpdateRoverClusterResponse>;
}
export declare enum RoverEntitlementApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class RoverEntitlementClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": RoverEntitlementWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new RoverEntitlementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): RoverEntitlementWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): RoverEntitlementWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Moves an entitlement into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeRoverEntitlementCompartmentRequest
     * @return ChangeRoverEntitlementCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ChangeRoverEntitlementCompartment.ts.html |here} to see how to use ChangeRoverEntitlementCompartment API.
     */
    changeRoverEntitlementCompartment(changeRoverEntitlementCompartmentRequest: requests.ChangeRoverEntitlementCompartmentRequest): Promise<responses.ChangeRoverEntitlementCompartmentResponse>;
    /**
     * Create the Entitlement to use a Rover Device. It requires some offline process of review and signatures before request is granted.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateRoverEntitlementRequest
     * @return CreateRoverEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/CreateRoverEntitlement.ts.html |here} to see how to use CreateRoverEntitlement API.
     */
    createRoverEntitlement(createRoverEntitlementRequest: requests.CreateRoverEntitlementRequest): Promise<responses.CreateRoverEntitlementResponse>;
    /**
     * Deletes a rover entitlement
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteRoverEntitlementRequest
     * @return DeleteRoverEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/DeleteRoverEntitlement.ts.html |here} to see how to use DeleteRoverEntitlement API.
     */
    deleteRoverEntitlement(deleteRoverEntitlementRequest: requests.DeleteRoverEntitlementRequest): Promise<responses.DeleteRoverEntitlementResponse>;
    /**
     * Describes the Rover Device Entitlement in detail
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRoverEntitlementRequest
     * @return GetRoverEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverEntitlement.ts.html |here} to see how to use GetRoverEntitlement API.
     */
    getRoverEntitlement(getRoverEntitlementRequest: requests.GetRoverEntitlementRequest): Promise<responses.GetRoverEntitlementResponse>;
    /**
     * Returns a list of RoverEntitlements.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRoverEntitlementsRequest
     * @return ListRoverEntitlementsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListRoverEntitlements.ts.html |here} to see how to use ListRoverEntitlements API.
     */
    listRoverEntitlements(listRoverEntitlementsRequest: requests.ListRoverEntitlementsRequest): Promise<responses.ListRoverEntitlementsResponse>;
    /**
     * Updates the RoverEntitlement
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateRoverEntitlementRequest
     * @return UpdateRoverEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/UpdateRoverEntitlement.ts.html |here} to see how to use UpdateRoverEntitlement API.
     */
    updateRoverEntitlement(updateRoverEntitlementRequest: requests.UpdateRoverEntitlementRequest): Promise<responses.UpdateRoverEntitlementResponse>;
}
export declare enum RoverNodeApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class RoverNodeClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": RoverNodeWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new RoverNodeWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): RoverNodeWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): RoverNodeWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Moves a rover node into a different compartment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeRoverNodeCompartmentRequest
     * @return ChangeRoverNodeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ChangeRoverNodeCompartment.ts.html |here} to see how to use ChangeRoverNodeCompartment API.
     */
    changeRoverNodeCompartment(changeRoverNodeCompartmentRequest: requests.ChangeRoverNodeCompartmentRequest): Promise<responses.ChangeRoverNodeCompartmentResponse>;
    /**
     * Creates a new RoverNode.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateRoverNodeRequest
     * @return CreateRoverNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/CreateRoverNode.ts.html |here} to see how to use CreateRoverNode API.
     */
    createRoverNode(createRoverNodeRequest: requests.CreateRoverNodeRequest): Promise<responses.CreateRoverNodeResponse>;
    /**
     * Deletes a RoverNode resource by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteRoverNodeRequest
     * @return DeleteRoverNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/DeleteRoverNode.ts.html |here} to see how to use DeleteRoverNode API.
     */
    deleteRoverNode(deleteRoverNodeRequest: requests.DeleteRoverNodeRequest): Promise<responses.DeleteRoverNodeResponse>;
    /**
     * Gets a RoverNode by identifier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRoverNodeRequest
     * @return GetRoverNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverNode.ts.html |here} to see how to use GetRoverNode API.
     */
    getRoverNode(getRoverNodeRequest: requests.GetRoverNodeRequest): Promise<responses.GetRoverNodeResponse>;
    /**
     * Get the certificate for a rover node
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRoverNodeCertificateRequest
     * @return GetRoverNodeCertificateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverNodeCertificate.ts.html |here} to see how to use GetRoverNodeCertificate API.
     */
    getRoverNodeCertificate(getRoverNodeCertificateRequest: requests.GetRoverNodeCertificateRequest): Promise<responses.GetRoverNodeCertificateResponse>;
    /**
     * Get the data encryption key for a rover node.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRoverNodeEncryptionKeyRequest
     * @return GetRoverNodeEncryptionKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverNodeEncryptionKey.ts.html |here} to see how to use GetRoverNodeEncryptionKey API.
     */
    getRoverNodeEncryptionKey(getRoverNodeEncryptionKeyRequest: requests.GetRoverNodeEncryptionKeyRequest): Promise<responses.GetRoverNodeEncryptionKeyResponse>;
    /**
     * Get the resource principal token for a rover node
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRoverNodeGetRptRequest
     * @return GetRoverNodeGetRptResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetRoverNodeGetRpt.ts.html |here} to see how to use GetRoverNodeGetRpt API.
     */
    getRoverNodeGetRpt(getRoverNodeGetRptRequest: requests.GetRoverNodeGetRptRequest): Promise<responses.GetRoverNodeGetRptResponse>;
    /**
     * Returns a list of RoverNodes.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRoverNodesRequest
     * @return ListRoverNodesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListRoverNodes.ts.html |here} to see how to use ListRoverNodes API.
     */
    listRoverNodes(listRoverNodesRequest: requests.ListRoverNodesRequest): Promise<responses.ListRoverNodesResponse>;
    /**
     * Retrieve Ca Bundle for a rover node
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RoverNodeActionRetrieveCaBundleRequest
     * @return RoverNodeActionRetrieveCaBundleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RoverNodeActionRetrieveCaBundle.ts.html |here} to see how to use RoverNodeActionRetrieveCaBundle API.
     */
    roverNodeActionRetrieveCaBundle(roverNodeActionRetrieveCaBundleRequest: requests.RoverNodeActionRetrieveCaBundleRequest): Promise<responses.RoverNodeActionRetrieveCaBundleResponse>;
    /**
     * Get the resource principal public key for a rover node
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RoverNodeActionSetKeyRequest
     * @return RoverNodeActionSetKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RoverNodeActionSetKey.ts.html |here} to see how to use RoverNodeActionSetKey API.
     */
    roverNodeActionSetKey(roverNodeActionSetKeyRequest: requests.RoverNodeActionSetKeyRequest): Promise<responses.RoverNodeActionSetKeyResponse>;
    /**
     * Request to generate certificate for a roverNode.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RoverNodeGenerateCertificateRequest
     * @return RoverNodeGenerateCertificateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RoverNodeGenerateCertificate.ts.html |here} to see how to use RoverNodeGenerateCertificate API.
     */
    roverNodeGenerateCertificate(roverNodeGenerateCertificateRequest: requests.RoverNodeGenerateCertificateRequest): Promise<responses.RoverNodeGenerateCertificateResponse>;
    /**
     * Request to renew certificate for a roverNode.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RoverNodeRenewCertificateRequest
     * @return RoverNodeRenewCertificateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RoverNodeRenewCertificate.ts.html |here} to see how to use RoverNodeRenewCertificate API.
     */
    roverNodeRenewCertificate(roverNodeRenewCertificateRequest: requests.RoverNodeRenewCertificateRequest): Promise<responses.RoverNodeRenewCertificateResponse>;
    /**
     * Request to replace certificate authority for a roverNode.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RoverNodeReplaceCertificateAuthorityRequest
     * @return RoverNodeReplaceCertificateAuthorityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RoverNodeReplaceCertificateAuthority.ts.html |here} to see how to use RoverNodeReplaceCertificateAuthority API.
     */
    roverNodeReplaceCertificateAuthority(roverNodeReplaceCertificateAuthorityRequest: requests.RoverNodeReplaceCertificateAuthorityRequest): Promise<responses.RoverNodeReplaceCertificateAuthorityResponse>;
    /**
     * Retrieve the leaf certificate info for a rover node
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RoverNodeRetrieveLeafCertificateRequest
     * @return RoverNodeRetrieveLeafCertificateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/RoverNodeRetrieveLeafCertificate.ts.html |here} to see how to use RoverNodeRetrieveLeafCertificate API.
     */
    roverNodeRetrieveLeafCertificate(roverNodeRetrieveLeafCertificateRequest: requests.RoverNodeRetrieveLeafCertificateRequest): Promise<responses.RoverNodeRetrieveLeafCertificateResponse>;
    /**
     * Updates the RoverNode
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateRoverNodeRequest
     * @return UpdateRoverNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/UpdateRoverNode.ts.html |here} to see how to use UpdateRoverNode API.
     */
    updateRoverNode(updateRoverNodeRequest: requests.UpdateRoverNodeRequest): Promise<responses.UpdateRoverNodeResponse>;
}
export declare enum ShapeApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class ShapeClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Returns a list of Shapes.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListShapesRequest
     * @return ListShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListShapes.ts.html |here} to see how to use ListShapes API.
     */
    listShapes(listShapesRequest: requests.ListShapesRequest): Promise<responses.ListShapesResponse>;
}
export declare enum WorkRequestsApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class WorkRequestsClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": WorkRequestsWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new WorkRequestsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): WorkRequestsWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): WorkRequestsWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Cancel the work request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest: requests.CancelWorkRequestRequest): Promise<responses.CancelWorkRequestResponse>;
    /**
     * Gets the status of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/rover/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
}
export {};
