/**
 * DNS API
 * API for the DNS service. Use this API to manage DNS zones, records, and other DNS resources.
For more information, see [Overview of the DNS Service](https://docs.oracle.com/iaas/Content/DNS/Concepts/dnszonemanagement.htm).

 * OpenAPI spec version: 20180115
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { WorkRequestClient } from "oci-workrequests";
import { DnsWaiter } from "./dns-waiter";
declare const Breaker: any;
export declare enum DnsApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DnsClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DnsWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DnsWaiter for resources for this service.
     *
     * @param workRequestClient The work request service client used to query for work request status
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(workRequestClient: WorkRequestClient, config?: common.WaiterConfiguration): DnsWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DnsWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
       * Moves a resolver into a different compartment along with its protected default view and any endpoints.
  * <p>
  Zones in the default view are not moved. VCN-dedicated resolvers are initially created in the same compartment
  * as their corresponding VCN, but can then be moved to a different compartment.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeResolverCompartmentRequest
       * @return ChangeResolverCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ChangeResolverCompartment.ts.html |here} to see how to use ChangeResolverCompartment API.
       */
    changeResolverCompartment(changeResolverCompartmentRequest: requests.ChangeResolverCompartmentRequest): Promise<responses.ChangeResolverCompartmentResponse>;
    /**
     * Moves a steering policy into a different compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeSteeringPolicyCompartmentRequest
     * @return ChangeSteeringPolicyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ChangeSteeringPolicyCompartment.ts.html |here} to see how to use ChangeSteeringPolicyCompartment API.
     */
    changeSteeringPolicyCompartment(changeSteeringPolicyCompartmentRequest: requests.ChangeSteeringPolicyCompartmentRequest): Promise<responses.ChangeSteeringPolicyCompartmentResponse>;
    /**
     * Moves a TSIG key into a different compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeTsigKeyCompartmentRequest
     * @return ChangeTsigKeyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ChangeTsigKeyCompartment.ts.html |here} to see how to use ChangeTsigKeyCompartment API.
     */
    changeTsigKeyCompartment(changeTsigKeyCompartmentRequest: requests.ChangeTsigKeyCompartmentRequest): Promise<responses.ChangeTsigKeyCompartmentResponse>;
    /**
       * Moves a view into a different compartment.
  * <p>
  To change the compartment of a protected view, change the compartment of its corresponding resolver.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeViewCompartmentRequest
       * @return ChangeViewCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ChangeViewCompartment.ts.html |here} to see how to use ChangeViewCompartment API.
       */
    changeViewCompartment(changeViewCompartmentRequest: requests.ChangeViewCompartmentRequest): Promise<responses.ChangeViewCompartmentResponse>;
    /**
       * Moves a zone into a different compartment.
  * <p>
  Protected zones cannot have their compartment changed. When the zone name is provided as a path
  * parameter and `PRIVATE` is used for the scope query parameter then the viewId query parameter is
  * required.
  * <p>
  **Note:** All SteeringPolicyAttachment objects associated with this zone will also be moved into
  * the provided compartment.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ChangeZoneCompartmentRequest
       * @return ChangeZoneCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ChangeZoneCompartment.ts.html |here} to see how to use ChangeZoneCompartment API.
       */
    changeZoneCompartment(changeZoneCompartmentRequest: requests.ChangeZoneCompartmentRequest): Promise<responses.ChangeZoneCompartmentResponse>;
    /**
     * Creates a new resolver endpoint in the same compartment as the resolver.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateResolverEndpointRequest
     * @return CreateResolverEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateResolverEndpoint.ts.html |here} to see how to use CreateResolverEndpoint API.
     */
    createResolverEndpoint(createResolverEndpointRequest: requests.CreateResolverEndpointRequest): Promise<responses.CreateResolverEndpointResponse>;
    /**
     * Creates a new steering policy in the specified compartment. For more information on
     * creating policies with templates, see [Traffic Management API Guide](https://docs.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSteeringPolicyRequest
     * @return CreateSteeringPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateSteeringPolicy.ts.html |here} to see how to use CreateSteeringPolicy API.
     */
    createSteeringPolicy(createSteeringPolicyRequest: requests.CreateSteeringPolicyRequest): Promise<responses.CreateSteeringPolicyResponse>;
    /**
       * Creates a new attachment between a steering policy and a domain, giving the
  * policy permission to answer queries for the specified domain. A steering policy must
  * be attached to a domain for the policy to answer DNS queries for that domain.
  * <p>
  For the purposes of access control, the attachment is automatically placed
  * into the same compartment as the domain's zone.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param CreateSteeringPolicyAttachmentRequest
       * @return CreateSteeringPolicyAttachmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateSteeringPolicyAttachment.ts.html |here} to see how to use CreateSteeringPolicyAttachment API.
       */
    createSteeringPolicyAttachment(createSteeringPolicyAttachmentRequest: requests.CreateSteeringPolicyAttachmentRequest): Promise<responses.CreateSteeringPolicyAttachmentResponse>;
    /**
     * Creates a new TSIG key in the specified compartment. There is no
     * `opc-retry-token` header since TSIG key names must be globally unique.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateTsigKeyRequest
     * @return CreateTsigKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateTsigKey.ts.html |here} to see how to use CreateTsigKey API.
     */
    createTsigKey(createTsigKeyRequest: requests.CreateTsigKeyRequest): Promise<responses.CreateTsigKeyResponse>;
    /**
     * Creates a new view in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateViewRequest
     * @return CreateViewResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateView.ts.html |here} to see how to use CreateView API.
     */
    createView(createViewRequest: requests.CreateViewRequest): Promise<responses.CreateViewResponse>;
    /**
       * Creates a new zone in the specified compartment.
  * <p>
  Private zones must have a zone type of `PRIMARY`. Creating a private zone at or under `oraclevcn.com`
  * within the default protected view of a VCN-dedicated resolver is not permitted.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateZoneRequest
       * @return CreateZoneResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateZone.ts.html |here} to see how to use CreateZone API.
       */
    createZone(createZoneRequest: requests.CreateZoneRequest): Promise<responses.CreateZoneResponse>;
    /**
     * Creates a new zone from a zone file in the specified compartment. Not supported for private zones.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateZoneFromZoneFileRequest
     * @return CreateZoneFromZoneFileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/CreateZoneFromZoneFile.ts.html |here} to see how to use CreateZoneFromZoneFile API.
     */
    createZoneFromZoneFile(createZoneFromZoneFileRequest: requests.CreateZoneFromZoneFileRequest): Promise<responses.CreateZoneFromZoneFileResponse>;
    /**
       * Deletes all records at the specified zone and domain.
  * <p>
  When the zone name is provided as a path parameter and `PRIVATE` is used for the scope query parameter
  * then the viewId query parameter is required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteDomainRecordsRequest
       * @return DeleteDomainRecordsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteDomainRecords.ts.html |here} to see how to use DeleteDomainRecords API.
       */
    deleteDomainRecords(deleteDomainRecordsRequest: requests.DeleteDomainRecordsRequest): Promise<responses.DeleteDomainRecordsResponse>;
    /**
       * Deletes all records in the specified RRSet.
  * <p>
  When the zone name is provided as a path parameter and `PRIVATE` is used for the scope
  * query parameter then the viewId query parameter is required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param DeleteRRSetRequest
       * @return DeleteRRSetResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteRRSet.ts.html |here} to see how to use DeleteRRSet API.
       */
    deleteRRSet(deleteRRSetRequest: requests.DeleteRRSetRequest): Promise<responses.DeleteRRSetResponse>;
    /**
       * Deletes the specified resolver endpoint.
  * <p>
  Note that attempting to delete a resolver endpoint in the DELETED lifecycle state will result in
  * a `404` response to be consistent with other operations of the API. Resolver endpoints may not
  * be deleted if they are referenced by a resolver rule.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DeleteResolverEndpointRequest
       * @return DeleteResolverEndpointResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteResolverEndpoint.ts.html |here} to see how to use DeleteResolverEndpoint API.
       */
    deleteResolverEndpoint(deleteResolverEndpointRequest: requests.DeleteResolverEndpointRequest): Promise<responses.DeleteResolverEndpointResponse>;
    /**
       * Deletes the specified steering policy.
  * <p>
  A `204` response indicates that the delete has been successful.
  * Deletion will fail if the policy is attached to any zones. To detach a
  * policy from a zone, see `DeleteSteeringPolicyAttachment`.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DeleteSteeringPolicyRequest
       * @return DeleteSteeringPolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteSteeringPolicy.ts.html |here} to see how to use DeleteSteeringPolicy API.
       */
    deleteSteeringPolicy(deleteSteeringPolicyRequest: requests.DeleteSteeringPolicyRequest): Promise<responses.DeleteSteeringPolicyResponse>;
    /**
     * Deletes the specified steering policy attachment.
     * A `204` response indicates that the delete has been successful.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSteeringPolicyAttachmentRequest
     * @return DeleteSteeringPolicyAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteSteeringPolicyAttachment.ts.html |here} to see how to use DeleteSteeringPolicyAttachment API.
     */
    deleteSteeringPolicyAttachment(deleteSteeringPolicyAttachmentRequest: requests.DeleteSteeringPolicyAttachmentRequest): Promise<responses.DeleteSteeringPolicyAttachmentResponse>;
    /**
     * Deletes the specified TSIG key.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteTsigKeyRequest
     * @return DeleteTsigKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteTsigKey.ts.html |here} to see how to use DeleteTsigKey API.
     */
    deleteTsigKey(deleteTsigKeyRequest: requests.DeleteTsigKeyRequest): Promise<responses.DeleteTsigKeyResponse>;
    /**
       * Deletes the specified view.
  * <p>
  Note that attempting to delete a view in the DELETED lifecycleState will result in a `404`
  * response to be consistent with other operations of the API. Views cannot be
  * deleted if they are referenced by non-deleted zones or resolvers.
  * Protected views cannot be deleted.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DeleteViewRequest
       * @return DeleteViewResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteView.ts.html |here} to see how to use DeleteView API.
       */
    deleteView(deleteViewRequest: requests.DeleteViewRequest): Promise<responses.DeleteViewResponse>;
    /**
       * Deletes the specified zone and all its steering policy attachments.
  * <p>
  A `204` response indicates that the zone has been successfully deleted. Protected zones cannot be deleted.
  * When the zone name is provided as a path parameter and `PRIVATE` is used for the scope query parameter
  * then the viewId query parameter is required.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DeleteZoneRequest
       * @return DeleteZoneResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/DeleteZone.ts.html |here} to see how to use DeleteZone API.
       */
    deleteZone(deleteZoneRequest: requests.DeleteZoneRequest): Promise<responses.DeleteZoneResponse>;
    /**
       * Gets a list of all records at the specified zone and domain.
  * <p>
  The results are sorted by `rtype` in alphabetical order by default. You can optionally filter and/or sort
  * the results using the listed parameters. When the zone name is provided as a path parameter and `PRIVATE`
  * is used for the scope query parameter then the viewId query parameter is required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetDomainRecordsRequest
       * @return GetDomainRecordsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetDomainRecords.ts.html |here} to see how to use GetDomainRecords API.
       */
    getDomainRecords(getDomainRecordsRequest: requests.GetDomainRecordsRequest): Promise<responses.GetDomainRecordsResponse>;
    /**
     * NOTE: This function is deprecated in favor of getDomainRecordsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Record objects
     * contained in responses from the getDomainRecords operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllDomainRecords(request: requests.GetDomainRecordsRequest): AsyncIterableIterator<model.Record>;
    /**
     * NOTE: This function is deprecated in favor of getDomainRecordsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the getDomainRecords operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllDomainRecordsResponses(request: requests.GetDomainRecordsRequest): AsyncIterableIterator<responses.GetDomainRecordsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.Record objects
     * contained in responses from the getDomainRecords operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getDomainRecordsRecordIterator(request: requests.GetDomainRecordsRequest): AsyncIterableIterator<model.Record>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the getDomainRecords operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getDomainRecordsResponseIterator(request: requests.GetDomainRecordsRequest): AsyncIterableIterator<responses.GetDomainRecordsResponse>;
    /**
       * Gets a list of all records in the specified RRSet.
  * <p>
  The results are sorted by `recordHash` by default. When the zone name is provided as a path parameter
  * and `PRIVATE` is used for the scope query parameter then the viewId query parameter is required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetRRSetRequest
       * @return GetRRSetResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetRRSet.ts.html |here} to see how to use GetRRSet API.
       */
    getRRSet(getRRSetRequest: requests.GetRRSetRequest): Promise<responses.GetRRSetResponse>;
    /**
     * NOTE: This function is deprecated in favor of getRRSetRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Record objects
     * contained in responses from the getRRSet operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllRRSet(request: requests.GetRRSetRequest): AsyncIterableIterator<model.Record>;
    /**
     * NOTE: This function is deprecated in favor of getRRSetResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the getRRSet operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllRRSetResponses(request: requests.GetRRSetRequest): AsyncIterableIterator<responses.GetRRSetResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.Record objects
     * contained in responses from the getRRSet operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getRRSetRecordIterator(request: requests.GetRRSetRequest): AsyncIterableIterator<model.Record>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the getRRSet operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getRRSetResponseIterator(request: requests.GetRRSetRequest): AsyncIterableIterator<responses.GetRRSetResponse>;
    /**
       * Gets information about a specific resolver.
  * <p>
  Note that attempting to get a resolver in the DELETED lifecycleState will result in a `404`
  * response to be consistent with other operations of the API.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetResolverRequest
       * @return GetResolverResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetResolver.ts.html |here} to see how to use GetResolver API.
       */
    getResolver(getResolverRequest: requests.GetResolverRequest): Promise<responses.GetResolverResponse>;
    /**
       * Gets information about a specific resolver endpoint.
  * <p>
  Note that attempting to get a resolver endpoint in the DELETED lifecycle state will result
  * in a `404` response to be consistent with other operations of the API.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetResolverEndpointRequest
       * @return GetResolverEndpointResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetResolverEndpoint.ts.html |here} to see how to use GetResolverEndpoint API.
       */
    getResolverEndpoint(getResolverEndpointRequest: requests.GetResolverEndpointRequest): Promise<responses.GetResolverEndpointResponse>;
    /**
     * Gets information about the specified steering policy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSteeringPolicyRequest
     * @return GetSteeringPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetSteeringPolicy.ts.html |here} to see how to use GetSteeringPolicy API.
     */
    getSteeringPolicy(getSteeringPolicyRequest: requests.GetSteeringPolicyRequest): Promise<responses.GetSteeringPolicyResponse>;
    /**
     * Gets information about the specified steering policy attachment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSteeringPolicyAttachmentRequest
     * @return GetSteeringPolicyAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetSteeringPolicyAttachment.ts.html |here} to see how to use GetSteeringPolicyAttachment API.
     */
    getSteeringPolicyAttachment(getSteeringPolicyAttachmentRequest: requests.GetSteeringPolicyAttachmentRequest): Promise<responses.GetSteeringPolicyAttachmentResponse>;
    /**
     * Gets information about the specified TSIG key.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetTsigKeyRequest
     * @return GetTsigKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetTsigKey.ts.html |here} to see how to use GetTsigKey API.
     */
    getTsigKey(getTsigKeyRequest: requests.GetTsigKeyRequest): Promise<responses.GetTsigKeyResponse>;
    /**
       * Gets information about a specific view.
  * <p>
  Note that attempting to get a
  * view in the DELETED lifecycleState will result in a `404` response to be
  * consistent with other operations of the API.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetViewRequest
       * @return GetViewResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetView.ts.html |here} to see how to use GetView API.
       */
    getView(getViewRequest: requests.GetViewRequest): Promise<responses.GetViewResponse>;
    /**
       * Gets information about the specified zone, including its creation date, zone type, and serial.
  * <p>
  When the zone name is provided as a path parameter and `PRIVATE` is used for the scope query
  * parameter then the viewId query parameter is required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetZoneRequest
       * @return GetZoneResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetZone.ts.html |here} to see how to use GetZone API.
       */
    getZone(getZoneRequest: requests.GetZoneRequest): Promise<responses.GetZoneResponse>;
    /**
     * Gets the requested zone's zone file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetZoneContentRequest
     * @return GetZoneContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetZoneContent.ts.html |here} to see how to use GetZoneContent API.
     */
    getZoneContent(getZoneContentRequest: requests.GetZoneContentRequest): Promise<responses.GetZoneContentResponse>;
    /**
       * Gets all records in the specified zone.
  * <p>
  The results are sorted by `domain` in alphabetical order by default. For more information about records,
  * see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
  * When the zone name is provided as a path parameter and `PRIVATE` is used for the scope query parameter
  * then the viewId query parameter is required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param GetZoneRecordsRequest
       * @return GetZoneRecordsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/GetZoneRecords.ts.html |here} to see how to use GetZoneRecords API.
       */
    getZoneRecords(getZoneRecordsRequest: requests.GetZoneRecordsRequest): Promise<responses.GetZoneRecordsResponse>;
    /**
     * NOTE: This function is deprecated in favor of getZoneRecordsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Record objects
     * contained in responses from the getZoneRecords operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllZoneRecords(request: requests.GetZoneRecordsRequest): AsyncIterableIterator<model.Record>;
    /**
     * NOTE: This function is deprecated in favor of getZoneRecordsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the getZoneRecords operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllZoneRecordsResponses(request: requests.GetZoneRecordsRequest): AsyncIterableIterator<responses.GetZoneRecordsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.Record objects
     * contained in responses from the getZoneRecords operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getZoneRecordsRecordIterator(request: requests.GetZoneRecordsRequest): AsyncIterableIterator<model.Record>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the getZoneRecords operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getZoneRecordsResponseIterator(request: requests.GetZoneRecordsRequest): AsyncIterableIterator<responses.GetZoneRecordsResponse>;
    /**
     * Gets a list of all endpoints within a resolver. The collection can be filtered by name or lifecycle state.
     * It can be sorted on creation time or name both in ASC or DESC order. Note that when no lifecycleState
     * query parameter is provided, the collection does not include resolver endpoints in the DELETED
     * lifecycle state to be consistent with other operations of the API.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListResolverEndpointsRequest
     * @return ListResolverEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListResolverEndpoints.ts.html |here} to see how to use ListResolverEndpoints API.
     */
    listResolverEndpoints(listResolverEndpointsRequest: requests.ListResolverEndpointsRequest): Promise<responses.ListResolverEndpointsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listResolverEndpointsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ResolverEndpointSummary objects
     * contained in responses from the listResolverEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllResolverEndpoints(request: requests.ListResolverEndpointsRequest): AsyncIterableIterator<model.ResolverEndpointSummary>;
    /**
     * NOTE: This function is deprecated in favor of listResolverEndpointsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listResolverEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllResolverEndpointsResponses(request: requests.ListResolverEndpointsRequest): AsyncIterableIterator<responses.ListResolverEndpointsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ResolverEndpointSummary objects
     * contained in responses from the listResolverEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listResolverEndpointsRecordIterator(request: requests.ListResolverEndpointsRequest): AsyncIterableIterator<model.ResolverEndpointSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listResolverEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listResolverEndpointsResponseIterator(request: requests.ListResolverEndpointsRequest): AsyncIterableIterator<responses.ListResolverEndpointsResponse>;
    /**
       * Gets a list of all resolvers within a compartment.
  * <p>
  The collection can be filtered by display name, id, or lifecycle state. It can be sorted
  * on creation time or displayName both in ASC or DESC order. Note that when no lifecycleState
  * query parameter is provided, the collection does not include resolvers in the DELETED
  * lifecycleState to be consistent with other operations of the API.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListResolversRequest
       * @return ListResolversResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListResolvers.ts.html |here} to see how to use ListResolvers API.
       */
    listResolvers(listResolversRequest: requests.ListResolversRequest): Promise<responses.ListResolversResponse>;
    /**
     * NOTE: This function is deprecated in favor of listResolversRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ResolverSummary objects
     * contained in responses from the listResolvers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllResolvers(request: requests.ListResolversRequest): AsyncIterableIterator<model.ResolverSummary>;
    /**
     * NOTE: This function is deprecated in favor of listResolversResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listResolvers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllResolversResponses(request: requests.ListResolversRequest): AsyncIterableIterator<responses.ListResolversResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ResolverSummary objects
     * contained in responses from the listResolvers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listResolversRecordIterator(request: requests.ListResolversRequest): AsyncIterableIterator<model.ResolverSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listResolvers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listResolversResponseIterator(request: requests.ListResolversRequest): AsyncIterableIterator<responses.ListResolversResponse>;
    /**
     * Gets a list of all steering policies in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSteeringPoliciesRequest
     * @return ListSteeringPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListSteeringPolicies.ts.html |here} to see how to use ListSteeringPolicies API.
     */
    listSteeringPolicies(listSteeringPoliciesRequest: requests.ListSteeringPoliciesRequest): Promise<responses.ListSteeringPoliciesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSteeringPoliciesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SteeringPolicySummary objects
     * contained in responses from the listSteeringPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSteeringPolicies(request: requests.ListSteeringPoliciesRequest): AsyncIterableIterator<model.SteeringPolicySummary>;
    /**
     * NOTE: This function is deprecated in favor of listSteeringPoliciesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSteeringPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSteeringPoliciesResponses(request: requests.ListSteeringPoliciesRequest): AsyncIterableIterator<responses.ListSteeringPoliciesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SteeringPolicySummary objects
     * contained in responses from the listSteeringPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSteeringPoliciesRecordIterator(request: requests.ListSteeringPoliciesRequest): AsyncIterableIterator<model.SteeringPolicySummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSteeringPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSteeringPoliciesResponseIterator(request: requests.ListSteeringPoliciesRequest): AsyncIterableIterator<responses.ListSteeringPoliciesResponse>;
    /**
     * Lists the steering policy attachments in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSteeringPolicyAttachmentsRequest
     * @return ListSteeringPolicyAttachmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListSteeringPolicyAttachments.ts.html |here} to see how to use ListSteeringPolicyAttachments API.
     */
    listSteeringPolicyAttachments(listSteeringPolicyAttachmentsRequest: requests.ListSteeringPolicyAttachmentsRequest): Promise<responses.ListSteeringPolicyAttachmentsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSteeringPolicyAttachmentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SteeringPolicyAttachmentSummary objects
     * contained in responses from the listSteeringPolicyAttachments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSteeringPolicyAttachments(request: requests.ListSteeringPolicyAttachmentsRequest): AsyncIterableIterator<model.SteeringPolicyAttachmentSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSteeringPolicyAttachmentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSteeringPolicyAttachments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSteeringPolicyAttachmentsResponses(request: requests.ListSteeringPolicyAttachmentsRequest): AsyncIterableIterator<responses.ListSteeringPolicyAttachmentsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SteeringPolicyAttachmentSummary objects
     * contained in responses from the listSteeringPolicyAttachments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSteeringPolicyAttachmentsRecordIterator(request: requests.ListSteeringPolicyAttachmentsRequest): AsyncIterableIterator<model.SteeringPolicyAttachmentSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSteeringPolicyAttachments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSteeringPolicyAttachmentsResponseIterator(request: requests.ListSteeringPolicyAttachmentsRequest): AsyncIterableIterator<responses.ListSteeringPolicyAttachmentsResponse>;
    /**
     * Gets a list of all TSIG keys in the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListTsigKeysRequest
     * @return ListTsigKeysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListTsigKeys.ts.html |here} to see how to use ListTsigKeys API.
     */
    listTsigKeys(listTsigKeysRequest: requests.ListTsigKeysRequest): Promise<responses.ListTsigKeysResponse>;
    /**
     * NOTE: This function is deprecated in favor of listTsigKeysRecordIterator function.
     * Creates a new async iterator which will iterate over the models.TsigKeySummary objects
     * contained in responses from the listTsigKeys operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTsigKeys(request: requests.ListTsigKeysRequest): AsyncIterableIterator<model.TsigKeySummary>;
    /**
     * NOTE: This function is deprecated in favor of listTsigKeysResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listTsigKeys operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTsigKeysResponses(request: requests.ListTsigKeysRequest): AsyncIterableIterator<responses.ListTsigKeysResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.TsigKeySummary objects
     * contained in responses from the listTsigKeys operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTsigKeysRecordIterator(request: requests.ListTsigKeysRequest): AsyncIterableIterator<model.TsigKeySummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTsigKeys operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listTsigKeysResponseIterator(request: requests.ListTsigKeysRequest): AsyncIterableIterator<responses.ListTsigKeysResponse>;
    /**
       * Gets a list of all views within a compartment.
  * <p>
  The collection can be filtered by display name, id, or lifecycle state. It can be sorted
  * on creation time or displayName both in ASC or DESC order. Note that when no lifecycleState
  * query parameter is provided, the collection does not include views in the DELETED
  * lifecycleState to be consistent with other operations of the API.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListViewsRequest
       * @return ListViewsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListViews.ts.html |here} to see how to use ListViews API.
       */
    listViews(listViewsRequest: requests.ListViewsRequest): Promise<responses.ListViewsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listViewsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ViewSummary objects
     * contained in responses from the listViews operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllViews(request: requests.ListViewsRequest): AsyncIterableIterator<model.ViewSummary>;
    /**
     * NOTE: This function is deprecated in favor of listViewsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listViews operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllViewsResponses(request: requests.ListViewsRequest): AsyncIterableIterator<responses.ListViewsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ViewSummary objects
     * contained in responses from the listViews operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listViewsRecordIterator(request: requests.ListViewsRequest): AsyncIterableIterator<model.ViewSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listViews operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listViewsResponseIterator(request: requests.ListViewsRequest): AsyncIterableIterator<responses.ListViewsResponse>;
    /**
     * Gets a list of IP addresses of OCI nameservers for inbound and outbound transfer of zones in the specified
     * compartment (which must be the root compartment of a tenancy) that transfer zone data with external master or
     * downstream nameservers.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListZoneTransferServersRequest
     * @return ListZoneTransferServersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListZoneTransferServers.ts.html |here} to see how to use ListZoneTransferServers API.
     */
    listZoneTransferServers(listZoneTransferServersRequest: requests.ListZoneTransferServersRequest): Promise<responses.ListZoneTransferServersResponse>;
    /**
     * NOTE: This function is deprecated in favor of listZoneTransferServersRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ZoneTransferServer objects
     * contained in responses from the listZoneTransferServers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllZoneTransferServers(request: requests.ListZoneTransferServersRequest): AsyncIterableIterator<model.ZoneTransferServer>;
    /**
     * NOTE: This function is deprecated in favor of listZoneTransferServersResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listZoneTransferServers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllZoneTransferServersResponses(request: requests.ListZoneTransferServersRequest): AsyncIterableIterator<responses.ListZoneTransferServersResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ZoneTransferServer objects
     * contained in responses from the listZoneTransferServers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listZoneTransferServersRecordIterator(request: requests.ListZoneTransferServersRequest): AsyncIterableIterator<model.ZoneTransferServer>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listZoneTransferServers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listZoneTransferServersResponseIterator(request: requests.ListZoneTransferServersRequest): AsyncIterableIterator<responses.ListZoneTransferServersResponse>;
    /**
       * Gets a list of all zones in the specified compartment.
  * <p>
  The collection can be filtered by name, time created, scope, associated view, and zone type.
  * Filtering by view is only supported for private zones.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListZonesRequest
       * @return ListZonesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/ListZones.ts.html |here} to see how to use ListZones API.
       */
    listZones(listZonesRequest: requests.ListZonesRequest): Promise<responses.ListZonesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listZonesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ZoneSummary objects
     * contained in responses from the listZones operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllZones(request: requests.ListZonesRequest): AsyncIterableIterator<model.ZoneSummary>;
    /**
     * NOTE: This function is deprecated in favor of listZonesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listZones operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllZonesResponses(request: requests.ListZonesRequest): AsyncIterableIterator<responses.ListZonesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ZoneSummary objects
     * contained in responses from the listZones operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listZonesRecordIterator(request: requests.ListZonesRequest): AsyncIterableIterator<model.ZoneSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listZones operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listZonesResponseIterator(request: requests.ListZonesRequest): AsyncIterableIterator<responses.ListZonesResponse>;
    /**
       * Updates records in the specified zone at a domain.
  * <p>
  You can update one record or all records for the specified zone depending on the changes provided in the
  * request body. You can also add or remove records using this function. When the zone name is provided as
  * a path parameter and `PRIVATE` is used for the scope query parameter then the viewId query parameter is
  * required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param PatchDomainRecordsRequest
       * @return PatchDomainRecordsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/PatchDomainRecords.ts.html |here} to see how to use PatchDomainRecords API.
       */
    patchDomainRecords(patchDomainRecordsRequest: requests.PatchDomainRecordsRequest): Promise<responses.PatchDomainRecordsResponse>;
    /**
       * Updates records in the specified RRSet.
  * <p>
  When the zone name is provided as a path parameter and `PRIVATE` is used for the scope query
  * parameter then the viewId query parameter is required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param PatchRRSetRequest
       * @return PatchRRSetResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/PatchRRSet.ts.html |here} to see how to use PatchRRSet API.
       */
    patchRRSet(patchRRSetRequest: requests.PatchRRSetRequest): Promise<responses.PatchRRSetResponse>;
    /**
       * Updates a collection of records in the specified zone.
  * <p>
  You can update one record or all records for the specified zone depending on the changes provided in the
  * request body. You can also add or remove records using this function. When the zone name is provided as
  * a path parameter and `PRIVATE` is used for the scope query parameter then the viewId query parameter is
  * required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param PatchZoneRecordsRequest
       * @return PatchZoneRecordsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/PatchZoneRecords.ts.html |here} to see how to use PatchZoneRecords API.
       */
    patchZoneRecords(patchZoneRecordsRequest: requests.PatchZoneRecordsRequest): Promise<responses.PatchZoneRecordsResponse>;
    /**
       * Promotes a specified `DnssecKeyVersion` on the zone.
  * <p>
  If the `DnssecKeyVersion` identified in the request body is a key signing key (KSK) that is replacing
  * another `DnssecKeyVersion`, then the old `DnssecKeyVersion` is scheduled for removal from the zone.
  * <p>
  For key signing keys (KSKs), you must create the DS record with the new key information **before** promoting
  * the new key to establish a chain of trust. To avoid a service disruption, remove the old DS record as soon
  * as its TTL (time to live) expires.
  * <p>
  For more information, see [DNSSEC](https://docs.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm).
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param PromoteZoneDnssecKeyVersionRequest
       * @return PromoteZoneDnssecKeyVersionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/PromoteZoneDnssecKeyVersion.ts.html |here} to see how to use PromoteZoneDnssecKeyVersion API.
       */
    promoteZoneDnssecKeyVersion(promoteZoneDnssecKeyVersionRequest: requests.PromoteZoneDnssecKeyVersionRequest): Promise<responses.PromoteZoneDnssecKeyVersionResponse>;
    /**
       * Stages a new `DnssecKeyVersion` on the zone. Staging is a process that generates a new \"successor\" key version
  * that replaces an existing \"predecessor\" key version.
  * **Note:** A new key-signing key (KSK) version is inert until you update the parent zone DS records.
  * <p>
  For more information, see the [DNSSEC](https://docs.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm) documentation.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param StageZoneDnssecKeyVersionRequest
       * @return StageZoneDnssecKeyVersionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/StageZoneDnssecKeyVersion.ts.html |here} to see how to use StageZoneDnssecKeyVersion API.
       */
    stageZoneDnssecKeyVersion(stageZoneDnssecKeyVersionRequest: requests.StageZoneDnssecKeyVersionRequest): Promise<responses.StageZoneDnssecKeyVersionResponse>;
    /**
       * Replaces records in the specified zone at a domain with the records specified in the request body.
  * <p>
  If a specified record does not exist, it will be created. If the record exists, then it will be updated to
  * represent the record in the body of the request. If a record in the zone does not exist in the request body,
  * the record will be removed from the zone. When the zone name is provided as a path parameter and `PRIVATE`
  * is used for the scope query parameter then the viewId query parameter is required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateDomainRecordsRequest
       * @return UpdateDomainRecordsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateDomainRecords.ts.html |here} to see how to use UpdateDomainRecords API.
       */
    updateDomainRecords(updateDomainRecordsRequest: requests.UpdateDomainRecordsRequest): Promise<responses.UpdateDomainRecordsResponse>;
    /**
       * Replaces records in the specified RRSet.
  * <p>
  When the zone name is provided as a path parameter and `PRIVATE` is used for the scope
  * query parameter then the viewId query parameter is required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateRRSetRequest
       * @return UpdateRRSetResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateRRSet.ts.html |here} to see how to use UpdateRRSet API.
       */
    updateRRSet(updateRRSetRequest: requests.UpdateRRSetRequest): Promise<responses.UpdateRRSetResponse>;
    /**
     * Updates the specified resolver with your new information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateResolverRequest
     * @return UpdateResolverResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateResolver.ts.html |here} to see how to use UpdateResolver API.
     */
    updateResolver(updateResolverRequest: requests.UpdateResolverRequest): Promise<responses.UpdateResolverResponse>;
    /**
     * Updates the specified resolver endpoint with your new information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateResolverEndpointRequest
     * @return UpdateResolverEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateResolverEndpoint.ts.html |here} to see how to use UpdateResolverEndpoint API.
     */
    updateResolverEndpoint(updateResolverEndpointRequest: requests.UpdateResolverEndpointRequest): Promise<responses.UpdateResolverEndpointResponse>;
    /**
     * Updates the configuration of the specified steering policy.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSteeringPolicyRequest
     * @return UpdateSteeringPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateSteeringPolicy.ts.html |here} to see how to use UpdateSteeringPolicy API.
     */
    updateSteeringPolicy(updateSteeringPolicyRequest: requests.UpdateSteeringPolicyRequest): Promise<responses.UpdateSteeringPolicyResponse>;
    /**
     * Updates the specified steering policy attachment with your new information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSteeringPolicyAttachmentRequest
     * @return UpdateSteeringPolicyAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateSteeringPolicyAttachment.ts.html |here} to see how to use UpdateSteeringPolicyAttachment API.
     */
    updateSteeringPolicyAttachment(updateSteeringPolicyAttachmentRequest: requests.UpdateSteeringPolicyAttachmentRequest): Promise<responses.UpdateSteeringPolicyAttachmentResponse>;
    /**
     * Updates the specified TSIG key.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateTsigKeyRequest
     * @return UpdateTsigKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateTsigKey.ts.html |here} to see how to use UpdateTsigKey API.
     */
    updateTsigKey(updateTsigKeyRequest: requests.UpdateTsigKeyRequest): Promise<responses.UpdateTsigKeyResponse>;
    /**
     * Updates the specified view with your new information.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateViewRequest
     * @return UpdateViewResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateView.ts.html |here} to see how to use UpdateView API.
     */
    updateView(updateViewRequest: requests.UpdateViewRequest): Promise<responses.UpdateViewResponse>;
    /**
       * Updates the zone with the specified information.
  * <p>
  Global secondary zones may have their external masters updated. For more information about secondary
  * zones, see [Manage DNS Service Zone](https://docs.oracle.com/iaas/Content/DNS/Tasks/managingdnszones.htm). When the zone name
  * is provided as a path parameter and `PRIVATE` is used for the scope query parameter then the viewId
  * query parameter is required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateZoneRequest
       * @return UpdateZoneResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateZone.ts.html |here} to see how to use UpdateZone API.
       */
    updateZone(updateZoneRequest: requests.UpdateZoneRequest): Promise<responses.UpdateZoneResponse>;
    /**
       * Replaces records in the specified zone with the records specified in the request body.
  * <p>
  If a specified record does not exist, it will be created. If the record exists, then it will be updated
  * to represent the record in the body of the request. If a record in the zone does not exist in the
  * request body, the record will be removed from the zone. When the zone name is provided as a path
  * parameter and `PRIVATE` is used for the scope query parameter then the viewId query parameter is
  * required.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param UpdateZoneRecordsRequest
       * @return UpdateZoneRecordsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dns/UpdateZoneRecords.ts.html |here} to see how to use UpdateZoneRecords API.
       */
    updateZoneRecords(updateZoneRecordsRequest: requests.UpdateZoneRecordsRequest): Promise<responses.UpdateZoneRecordsResponse>;
}
export {};
