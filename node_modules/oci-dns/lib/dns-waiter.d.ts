/**
 * DNS API
 * API for the DNS service. Use this API to manage DNS zones, records, and other DNS resources.
For more information, see [Overview of the DNS Service](https://docs.oracle.com/iaas/Content/DNS/Concepts/dnszonemanagement.htm).

 * OpenAPI spec version: 20180115
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DnsClient } from "./client";
import { WorkRequestClient, responses } from "oci-workrequests";
export declare class DnsWaiter {
    private client;
    private workRequestClient;
    private readonly config?;
    constructor(client: DnsClient, workRequestClient: WorkRequestClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forChangeResolverCompartment
     *
     * @param request the request to send
     * @return response returns ChangeResolverCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeResolverCompartment(request: serviceRequests.ChangeResolverCompartmentRequest): Promise<{
        response: serviceResponses.ChangeResolverCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeSteeringPolicyCompartment
     *
     * @param request the request to send
     * @return response returns ChangeSteeringPolicyCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeSteeringPolicyCompartment(request: serviceRequests.ChangeSteeringPolicyCompartmentRequest): Promise<{
        response: serviceResponses.ChangeSteeringPolicyCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeViewCompartment
     *
     * @param request the request to send
     * @return response returns ChangeViewCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeViewCompartment(request: serviceRequests.ChangeViewCompartmentRequest): Promise<{
        response: serviceResponses.ChangeViewCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forChangeZoneCompartment
     *
     * @param request the request to send
     * @return response returns ChangeZoneCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeZoneCompartment(request: serviceRequests.ChangeZoneCompartmentRequest): Promise<{
        response: serviceResponses.ChangeZoneCompartmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateResolverEndpoint
     *
     * @param request the request to send
     * @return response returns CreateResolverEndpointResponse, GetWorkRequestResponse tuple
     */
    forCreateResolverEndpoint(request: serviceRequests.CreateResolverEndpointRequest): Promise<{
        response: serviceResponses.CreateResolverEndpointResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateSteeringPolicy
     *
     * @param request the request to send
     * @return response returns CreateSteeringPolicyResponse, GetWorkRequestResponse tuple
     */
    forCreateSteeringPolicy(request: serviceRequests.CreateSteeringPolicyRequest): Promise<{
        response: serviceResponses.CreateSteeringPolicyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateSteeringPolicyAttachment
     *
     * @param request the request to send
     * @return response returns CreateSteeringPolicyAttachmentResponse, GetWorkRequestResponse tuple
     */
    forCreateSteeringPolicyAttachment(request: serviceRequests.CreateSteeringPolicyAttachmentRequest): Promise<{
        response: serviceResponses.CreateSteeringPolicyAttachmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateTsigKey
     *
     * @param request the request to send
     * @return response returns CreateTsigKeyResponse, GetWorkRequestResponse tuple
     */
    forCreateTsigKey(request: serviceRequests.CreateTsigKeyRequest): Promise<{
        response: serviceResponses.CreateTsigKeyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateView
     *
     * @param request the request to send
     * @return response returns CreateViewResponse, GetWorkRequestResponse tuple
     */
    forCreateView(request: serviceRequests.CreateViewRequest): Promise<{
        response: serviceResponses.CreateViewResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateZone
     *
     * @param request the request to send
     * @return response returns CreateZoneResponse, GetWorkRequestResponse tuple
     */
    forCreateZone(request: serviceRequests.CreateZoneRequest): Promise<{
        response: serviceResponses.CreateZoneResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forCreateZoneFromZoneFile
     *
     * @param request the request to send
     * @return response returns CreateZoneFromZoneFileResponse, GetWorkRequestResponse tuple
     */
    forCreateZoneFromZoneFile(request: serviceRequests.CreateZoneFromZoneFileRequest): Promise<{
        response: serviceResponses.CreateZoneFromZoneFileResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteResolverEndpoint
     *
     * @param request the request to send
     * @return response returns DeleteResolverEndpointResponse, GetWorkRequestResponse tuple
     */
    forDeleteResolverEndpoint(request: serviceRequests.DeleteResolverEndpointRequest): Promise<{
        response: serviceResponses.DeleteResolverEndpointResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteSteeringPolicy
     *
     * @param request the request to send
     * @return response returns DeleteSteeringPolicyResponse, GetWorkRequestResponse tuple
     */
    forDeleteSteeringPolicy(request: serviceRequests.DeleteSteeringPolicyRequest): Promise<{
        response: serviceResponses.DeleteSteeringPolicyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteSteeringPolicyAttachment
     *
     * @param request the request to send
     * @return response returns DeleteSteeringPolicyAttachmentResponse, GetWorkRequestResponse tuple
     */
    forDeleteSteeringPolicyAttachment(request: serviceRequests.DeleteSteeringPolicyAttachmentRequest): Promise<{
        response: serviceResponses.DeleteSteeringPolicyAttachmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteTsigKey
     *
     * @param request the request to send
     * @return response returns DeleteTsigKeyResponse, GetWorkRequestResponse tuple
     */
    forDeleteTsigKey(request: serviceRequests.DeleteTsigKeyRequest): Promise<{
        response: serviceResponses.DeleteTsigKeyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteView
     *
     * @param request the request to send
     * @return response returns DeleteViewResponse, GetWorkRequestResponse tuple
     */
    forDeleteView(request: serviceRequests.DeleteViewRequest): Promise<{
        response: serviceResponses.DeleteViewResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forDeleteZone
     *
     * @param request the request to send
     * @return response returns DeleteZoneResponse, GetWorkRequestResponse tuple
     */
    forDeleteZone(request: serviceRequests.DeleteZoneRequest): Promise<{
        response: serviceResponses.DeleteZoneResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forResolver till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResolverResponse | null (null in case of 404 response)
     */
    forResolver(request: serviceRequests.GetResolverRequest, ...targetStates: models.Resolver.LifecycleState[]): Promise<serviceResponses.GetResolverResponse | null>;
    /**
     * Waits forResolverEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResolverEndpointResponse | null (null in case of 404 response)
     */
    forResolverEndpoint(request: serviceRequests.GetResolverEndpointRequest, ...targetStates: models.ResolverEndpoint.LifecycleState[]): Promise<serviceResponses.GetResolverEndpointResponse | null>;
    /**
     * Waits forSteeringPolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSteeringPolicyResponse | null (null in case of 404 response)
     */
    forSteeringPolicy(request: serviceRequests.GetSteeringPolicyRequest, ...targetStates: models.SteeringPolicy.LifecycleState[]): Promise<serviceResponses.GetSteeringPolicyResponse | null>;
    /**
     * Waits forSteeringPolicyAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSteeringPolicyAttachmentResponse
     */
    forSteeringPolicyAttachment(request: serviceRequests.GetSteeringPolicyAttachmentRequest, ...targetStates: models.SteeringPolicyAttachment.LifecycleState[]): Promise<serviceResponses.GetSteeringPolicyAttachmentResponse>;
    /**
     * Waits forTsigKey till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTsigKeyResponse | null (null in case of 404 response)
     */
    forTsigKey(request: serviceRequests.GetTsigKeyRequest, ...targetStates: models.TsigKey.LifecycleState[]): Promise<serviceResponses.GetTsigKeyResponse | null>;
    /**
     * Waits forView till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetViewResponse | null (null in case of 404 response)
     */
    forView(request: serviceRequests.GetViewRequest, ...targetStates: models.View.LifecycleState[]): Promise<serviceResponses.GetViewResponse | null>;
    /**
     * Waits forZone till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetZoneResponse | null (null in case of 404 response)
     */
    forZone(request: serviceRequests.GetZoneRequest, ...targetStates: models.Zone.LifecycleState[]): Promise<serviceResponses.GetZoneResponse | null>;
    /**
     * Waits forPromoteZoneDnssecKeyVersion
     *
     * @param request the request to send
     * @return response returns PromoteZoneDnssecKeyVersionResponse, GetWorkRequestResponse tuple
     */
    forPromoteZoneDnssecKeyVersion(request: serviceRequests.PromoteZoneDnssecKeyVersionRequest): Promise<{
        response: serviceResponses.PromoteZoneDnssecKeyVersionResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forStageZoneDnssecKeyVersion
     *
     * @param request the request to send
     * @return response returns StageZoneDnssecKeyVersionResponse, GetWorkRequestResponse tuple
     */
    forStageZoneDnssecKeyVersion(request: serviceRequests.StageZoneDnssecKeyVersionRequest): Promise<{
        response: serviceResponses.StageZoneDnssecKeyVersionResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateResolver
     *
     * @param request the request to send
     * @return response returns UpdateResolverResponse, GetWorkRequestResponse tuple
     */
    forUpdateResolver(request: serviceRequests.UpdateResolverRequest): Promise<{
        response: serviceResponses.UpdateResolverResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateResolverEndpoint
     *
     * @param request the request to send
     * @return response returns UpdateResolverEndpointResponse, GetWorkRequestResponse tuple
     */
    forUpdateResolverEndpoint(request: serviceRequests.UpdateResolverEndpointRequest): Promise<{
        response: serviceResponses.UpdateResolverEndpointResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateSteeringPolicy
     *
     * @param request the request to send
     * @return response returns UpdateSteeringPolicyResponse, GetWorkRequestResponse tuple
     */
    forUpdateSteeringPolicy(request: serviceRequests.UpdateSteeringPolicyRequest): Promise<{
        response: serviceResponses.UpdateSteeringPolicyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateSteeringPolicyAttachment
     *
     * @param request the request to send
     * @return response returns UpdateSteeringPolicyAttachmentResponse, GetWorkRequestResponse tuple
     */
    forUpdateSteeringPolicyAttachment(request: serviceRequests.UpdateSteeringPolicyAttachmentRequest): Promise<{
        response: serviceResponses.UpdateSteeringPolicyAttachmentResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateTsigKey
     *
     * @param request the request to send
     * @return response returns UpdateTsigKeyResponse, GetWorkRequestResponse tuple
     */
    forUpdateTsigKey(request: serviceRequests.UpdateTsigKeyRequest): Promise<{
        response: serviceResponses.UpdateTsigKeyResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateView
     *
     * @param request the request to send
     * @return response returns UpdateViewResponse, GetWorkRequestResponse tuple
     */
    forUpdateView(request: serviceRequests.UpdateViewRequest): Promise<{
        response: serviceResponses.UpdateViewResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
    /**
     * Waits forUpdateZone
     *
     * @param request the request to send
     * @return response returns UpdateZoneResponse, GetWorkRequestResponse tuple
     */
    forUpdateZone(request: serviceRequests.UpdateZoneRequest): Promise<{
        response: serviceResponses.UpdateZoneResponse;
        workRequestResponse: responses.GetWorkRequestResponse;
    }>;
}
