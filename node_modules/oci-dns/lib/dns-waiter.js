"use strict";
/**
 * DNS API
 * API for the DNS service. Use this API to manage DNS zones, records, and other DNS resources.
For more information, see [Overview of the DNS Service](https://docs.oracle.com/iaas/Content/DNS/Concepts/dnszonemanagement.htm).

 * OpenAPI spec version: 20180115
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnsWaiter = void 0;
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const oci_workrequests_1 = require("oci-workrequests");
class DnsWaiter {
    constructor(client, workRequestClient, config) {
        this.client = client;
        this.workRequestClient = workRequestClient;
        this.config = config;
    }
    /**
     * Waits forChangeResolverCompartment
     *
     * @param request the request to send
     * @return response returns ChangeResolverCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeResolverCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeResolverCompartmentResponse = yield this.client.changeResolverCompartment(request);
            if (changeResolverCompartmentResponse.opcWorkRequestId === undefined)
                return { response: changeResolverCompartmentResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeResolverCompartmentResponse.opcWorkRequestId);
            return {
                response: changeResolverCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeSteeringPolicyCompartment
     *
     * @param request the request to send
     * @return response returns ChangeSteeringPolicyCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeSteeringPolicyCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeSteeringPolicyCompartmentResponse = yield this.client.changeSteeringPolicyCompartment(request);
            if (changeSteeringPolicyCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeSteeringPolicyCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeSteeringPolicyCompartmentResponse.opcWorkRequestId);
            return {
                response: changeSteeringPolicyCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeViewCompartment
     *
     * @param request the request to send
     * @return response returns ChangeViewCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeViewCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeViewCompartmentResponse = yield this.client.changeViewCompartment(request);
            if (changeViewCompartmentResponse.opcWorkRequestId === undefined)
                return { response: changeViewCompartmentResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeViewCompartmentResponse.opcWorkRequestId);
            return { response: changeViewCompartmentResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forChangeZoneCompartment
     *
     * @param request the request to send
     * @return response returns ChangeZoneCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeZoneCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeZoneCompartmentResponse = yield this.client.changeZoneCompartment(request);
            if (changeZoneCompartmentResponse.opcWorkRequestId === undefined)
                return { response: changeZoneCompartmentResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeZoneCompartmentResponse.opcWorkRequestId);
            return { response: changeZoneCompartmentResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateResolverEndpoint
     *
     * @param request the request to send
     * @return response returns CreateResolverEndpointResponse, GetWorkRequestResponse tuple
     */
    forCreateResolverEndpoint(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createResolverEndpointResponse = yield this.client.createResolverEndpoint(request);
            if (createResolverEndpointResponse.opcWorkRequestId === undefined)
                return { response: createResolverEndpointResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createResolverEndpointResponse.opcWorkRequestId);
            return {
                response: createResolverEndpointResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateSteeringPolicy
     *
     * @param request the request to send
     * @return response returns CreateSteeringPolicyResponse, GetWorkRequestResponse tuple
     */
    forCreateSteeringPolicy(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createSteeringPolicyResponse = yield this.client.createSteeringPolicy(request);
            if (createSteeringPolicyResponse.opcWorkRequestId === undefined)
                return { response: createSteeringPolicyResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createSteeringPolicyResponse.opcWorkRequestId);
            return { response: createSteeringPolicyResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateSteeringPolicyAttachment
     *
     * @param request the request to send
     * @return response returns CreateSteeringPolicyAttachmentResponse, GetWorkRequestResponse tuple
     */
    forCreateSteeringPolicyAttachment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createSteeringPolicyAttachmentResponse = yield this.client.createSteeringPolicyAttachment(request);
            if (createSteeringPolicyAttachmentResponse.opcWorkRequestId === undefined)
                return {
                    response: createSteeringPolicyAttachmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createSteeringPolicyAttachmentResponse.opcWorkRequestId);
            return {
                response: createSteeringPolicyAttachmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateTsigKey
     *
     * @param request the request to send
     * @return response returns CreateTsigKeyResponse, GetWorkRequestResponse tuple
     */
    forCreateTsigKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createTsigKeyResponse = yield this.client.createTsigKey(request);
            if (createTsigKeyResponse.opcWorkRequestId === undefined)
                return { response: createTsigKeyResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createTsigKeyResponse.opcWorkRequestId);
            return { response: createTsigKeyResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateView
     *
     * @param request the request to send
     * @return response returns CreateViewResponse, GetWorkRequestResponse tuple
     */
    forCreateView(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createViewResponse = yield this.client.createView(request);
            if (createViewResponse.opcWorkRequestId === undefined)
                return { response: createViewResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createViewResponse.opcWorkRequestId);
            return { response: createViewResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateZone
     *
     * @param request the request to send
     * @return response returns CreateZoneResponse, GetWorkRequestResponse tuple
     */
    forCreateZone(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createZoneResponse = yield this.client.createZone(request);
            if (createZoneResponse.opcWorkRequestId === undefined)
                return { response: createZoneResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createZoneResponse.opcWorkRequestId);
            return { response: createZoneResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateZoneFromZoneFile
     *
     * @param request the request to send
     * @return response returns CreateZoneFromZoneFileResponse, GetWorkRequestResponse tuple
     */
    forCreateZoneFromZoneFile(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createZoneFromZoneFileResponse = yield this.client.createZoneFromZoneFile(request);
            if (createZoneFromZoneFileResponse.opcWorkRequestId === undefined)
                return { response: createZoneFromZoneFileResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createZoneFromZoneFileResponse.opcWorkRequestId);
            return {
                response: createZoneFromZoneFileResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteResolverEndpoint
     *
     * @param request the request to send
     * @return response returns DeleteResolverEndpointResponse, GetWorkRequestResponse tuple
     */
    forDeleteResolverEndpoint(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteResolverEndpointResponse = yield this.client.deleteResolverEndpoint(request);
            if (deleteResolverEndpointResponse.opcWorkRequestId === undefined)
                return { response: deleteResolverEndpointResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteResolverEndpointResponse.opcWorkRequestId);
            return {
                response: deleteResolverEndpointResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteSteeringPolicy
     *
     * @param request the request to send
     * @return response returns DeleteSteeringPolicyResponse, GetWorkRequestResponse tuple
     */
    forDeleteSteeringPolicy(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteSteeringPolicyResponse = yield this.client.deleteSteeringPolicy(request);
            if (deleteSteeringPolicyResponse.opcWorkRequestId === undefined)
                return { response: deleteSteeringPolicyResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteSteeringPolicyResponse.opcWorkRequestId);
            return { response: deleteSteeringPolicyResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteSteeringPolicyAttachment
     *
     * @param request the request to send
     * @return response returns DeleteSteeringPolicyAttachmentResponse, GetWorkRequestResponse tuple
     */
    forDeleteSteeringPolicyAttachment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteSteeringPolicyAttachmentResponse = yield this.client.deleteSteeringPolicyAttachment(request);
            if (deleteSteeringPolicyAttachmentResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteSteeringPolicyAttachmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteSteeringPolicyAttachmentResponse.opcWorkRequestId);
            return {
                response: deleteSteeringPolicyAttachmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteTsigKey
     *
     * @param request the request to send
     * @return response returns DeleteTsigKeyResponse, GetWorkRequestResponse tuple
     */
    forDeleteTsigKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteTsigKeyResponse = yield this.client.deleteTsigKey(request);
            if (deleteTsigKeyResponse.opcWorkRequestId === undefined)
                return { response: deleteTsigKeyResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteTsigKeyResponse.opcWorkRequestId);
            return { response: deleteTsigKeyResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteView
     *
     * @param request the request to send
     * @return response returns DeleteViewResponse, GetWorkRequestResponse tuple
     */
    forDeleteView(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteViewResponse = yield this.client.deleteView(request);
            if (deleteViewResponse.opcWorkRequestId === undefined)
                return { response: deleteViewResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteViewResponse.opcWorkRequestId);
            return { response: deleteViewResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteZone
     *
     * @param request the request to send
     * @return response returns DeleteZoneResponse, GetWorkRequestResponse tuple
     */
    forDeleteZone(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteZoneResponse = yield this.client.deleteZone(request);
            if (deleteZoneResponse.opcWorkRequestId === undefined)
                return { response: deleteZoneResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteZoneResponse.opcWorkRequestId);
            return { response: deleteZoneResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forResolver till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResolverResponse | null (null in case of 404 response)
     */
    forResolver(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getResolver(request), response => targetStates.includes(response.resolver.lifecycleState), targetStates.includes(models.Resolver.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forResolverEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResolverEndpointResponse | null (null in case of 404 response)
     */
    forResolverEndpoint(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getResolverEndpoint(request), response => targetStates.includes(response.resolverEndpoint.lifecycleState), targetStates.includes(models.ResolverEndpoint.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forSteeringPolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSteeringPolicyResponse | null (null in case of 404 response)
     */
    forSteeringPolicy(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getSteeringPolicy(request), response => targetStates.includes(response.steeringPolicy.lifecycleState), targetStates.includes(models.SteeringPolicy.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forSteeringPolicyAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSteeringPolicyAttachmentResponse
     */
    forSteeringPolicyAttachment(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getSteeringPolicyAttachment(request), response => targetStates.includes(response.steeringPolicyAttachment.lifecycleState));
        });
    }
    /**
     * Waits forTsigKey till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTsigKeyResponse | null (null in case of 404 response)
     */
    forTsigKey(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getTsigKey(request), response => targetStates.includes(response.tsigKey.lifecycleState), targetStates.includes(models.TsigKey.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forView till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetViewResponse | null (null in case of 404 response)
     */
    forView(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getView(request), response => targetStates.includes(response.view.lifecycleState), targetStates.includes(models.View.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forZone till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetZoneResponse | null (null in case of 404 response)
     */
    forZone(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getZone(request), response => targetStates.includes(response.zone.lifecycleState), targetStates.includes(models.Zone.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forPromoteZoneDnssecKeyVersion
     *
     * @param request the request to send
     * @return response returns PromoteZoneDnssecKeyVersionResponse, GetWorkRequestResponse tuple
     */
    forPromoteZoneDnssecKeyVersion(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const promoteZoneDnssecKeyVersionResponse = yield this.client.promoteZoneDnssecKeyVersion(request);
            if (promoteZoneDnssecKeyVersionResponse.opcWorkRequestId === undefined)
                return {
                    response: promoteZoneDnssecKeyVersionResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, promoteZoneDnssecKeyVersionResponse.opcWorkRequestId);
            return {
                response: promoteZoneDnssecKeyVersionResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forStageZoneDnssecKeyVersion
     *
     * @param request the request to send
     * @return response returns StageZoneDnssecKeyVersionResponse, GetWorkRequestResponse tuple
     */
    forStageZoneDnssecKeyVersion(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const stageZoneDnssecKeyVersionResponse = yield this.client.stageZoneDnssecKeyVersion(request);
            if (stageZoneDnssecKeyVersionResponse.opcWorkRequestId === undefined)
                return { response: stageZoneDnssecKeyVersionResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, stageZoneDnssecKeyVersionResponse.opcWorkRequestId);
            return {
                response: stageZoneDnssecKeyVersionResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateResolver
     *
     * @param request the request to send
     * @return response returns UpdateResolverResponse, GetWorkRequestResponse tuple
     */
    forUpdateResolver(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateResolverResponse = yield this.client.updateResolver(request);
            if (updateResolverResponse.opcWorkRequestId === undefined)
                return { response: updateResolverResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateResolverResponse.opcWorkRequestId);
            return { response: updateResolverResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateResolverEndpoint
     *
     * @param request the request to send
     * @return response returns UpdateResolverEndpointResponse, GetWorkRequestResponse tuple
     */
    forUpdateResolverEndpoint(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateResolverEndpointResponse = yield this.client.updateResolverEndpoint(request);
            if (updateResolverEndpointResponse.opcWorkRequestId === undefined)
                return { response: updateResolverEndpointResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateResolverEndpointResponse.opcWorkRequestId);
            return {
                response: updateResolverEndpointResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateSteeringPolicy
     *
     * @param request the request to send
     * @return response returns UpdateSteeringPolicyResponse, GetWorkRequestResponse tuple
     */
    forUpdateSteeringPolicy(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateSteeringPolicyResponse = yield this.client.updateSteeringPolicy(request);
            if (updateSteeringPolicyResponse.opcWorkRequestId === undefined)
                return { response: updateSteeringPolicyResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateSteeringPolicyResponse.opcWorkRequestId);
            return { response: updateSteeringPolicyResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateSteeringPolicyAttachment
     *
     * @param request the request to send
     * @return response returns UpdateSteeringPolicyAttachmentResponse, GetWorkRequestResponse tuple
     */
    forUpdateSteeringPolicyAttachment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateSteeringPolicyAttachmentResponse = yield this.client.updateSteeringPolicyAttachment(request);
            if (updateSteeringPolicyAttachmentResponse.opcWorkRequestId === undefined)
                return {
                    response: updateSteeringPolicyAttachmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateSteeringPolicyAttachmentResponse.opcWorkRequestId);
            return {
                response: updateSteeringPolicyAttachmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateTsigKey
     *
     * @param request the request to send
     * @return response returns UpdateTsigKeyResponse, GetWorkRequestResponse tuple
     */
    forUpdateTsigKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateTsigKeyResponse = yield this.client.updateTsigKey(request);
            if (updateTsigKeyResponse.opcWorkRequestId === undefined)
                return { response: updateTsigKeyResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateTsigKeyResponse.opcWorkRequestId);
            return { response: updateTsigKeyResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateView
     *
     * @param request the request to send
     * @return response returns UpdateViewResponse, GetWorkRequestResponse tuple
     */
    forUpdateView(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateViewResponse = yield this.client.updateView(request);
            if (updateViewResponse.opcWorkRequestId === undefined)
                return { response: updateViewResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateViewResponse.opcWorkRequestId);
            return { response: updateViewResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateZone
     *
     * @param request the request to send
     * @return response returns UpdateZoneResponse, GetWorkRequestResponse tuple
     */
    forUpdateZone(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateZoneResponse = yield this.client.updateZone(request);
            if (updateZoneResponse.opcWorkRequestId === undefined)
                return { response: updateZoneResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateZoneResponse.opcWorkRequestId);
            return { response: updateZoneResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
}
exports.DnsWaiter = DnsWaiter;
//# sourceMappingURL=dns-waiter.js.map