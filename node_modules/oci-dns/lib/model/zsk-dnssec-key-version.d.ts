/**
 * DNS API
 * API for the DNS service. Use this API to manage DNS zones, records, and other DNS resources.
For more information, see [Overview of the DNS Service](https://docs.oracle.com/iaas/Content/DNS/Concepts/dnszonemanagement.htm).

 * OpenAPI spec version: 20180115
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * A zone signing key (ZSK) version. The version information contains timing and configuration data for the ZSK that is used to
 * apply DNSSEC on the zone.
 *
 */
export interface ZskDnssecKeyVersion {
    /**
     * The UUID of the {@code DnssecKeyVersion}.
     *
     */
    "uuid"?: string;
    /**
     * The signing algorithm used for the key.
     *
     */
    "algorithm"?: model.DnssecSigningAlgorithm;
    /**
     * The length of the corresponding private key in bytes, expressed as an integer.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "lengthInBytes"?: number;
    /**
     * The date and time the key version was created, expressed in RFC 3339 timestamp format.
     * <p>
     **Example:** {@code 2016-07-22T17:23:59:00Z}
     *
     */
    "timeCreated"?: Date;
    /**
     * The date and time the key version was, or will be, published, expressed in RFC 3339 timestamp format. This is
     * when the zone contents will include a DNSKEY record corresponding to the key material.
     * <p>
     **Example:** {@code 2016-07-22T17:23:59:00Z}
     *
     */
    "timePublished"?: Date;
    /**
     * The date and time the key version went, or will go, active, expressed in RFC 3339 timestamp format. This is
     * when the key material will be used to generate RRSIGs.
     * <p>
     **Example:** {@code 2016-07-22T17:23:59:00Z}
     *
     */
    "timeActivated"?: Date;
    /**
     * The date and time the key version went, or will go, inactive, expressed in RFC 3339 timestamp format. This
     * is when the key material will no longer be used to generate RRSIGs. For a key signing key (KSK) {@code DnssecKeyVersion}, this is
     * populated after {@code PromoteZoneDnssecKeyVersion} has been called on its successor {@code DnssecKeyVersion}.
     * <p>
     **Example:** {@code 2016-07-22T17:23:59:00Z}
     *
     */
    "timeInactivated"?: Date;
    /**
     * The date and time the key version was, or will be, unpublished, expressed in RFC 3339 timestamp format. This
     * is when the corresponding DNSKEY will be removed from zone contents. For a key signing key (KSK) {@code DnssecKeyVersion}, this is
     * populated after {@code PromoteZoneDnssecKeyVersion} has been called on its successor {@code DnssecKeyVersion}.
     * <p>
     **Example:** {@code 2016-07-22T17:23:59:00Z}
     *
     */
    "timeUnpublished"?: Date;
    /**
     * The date and time at which the recommended key version publication/activation lifetime ends, expressed in RFC
     * 3339 timestamp format. This is when the corresponding DNSKEY should no longer exist in zone contents and no
     * longer be used to generate RRSIGs. For a key sigining key (KSK), if {@code PromoteZoneDnssecKeyVersion} has not been called on this
     * {@code DnssecKeyVersion}'s successor then it will remain active for arbitrarily long past its recommended lifetime.
     * This prevents service disruption at the potential increased risk of key compromise.
     * <p>
     **Example:** {@code 2016-07-22T17:23:59:00Z}
     *
     */
    "timeExpired"?: Date;
    /**
     * The date and time the key version was promoted expressed in RFC 3339 timestamp format.
     * <p>
     **Example:** {@code 2016-07-22T17:23:59:00Z}
     *
     */
    "timePromoted"?: Date;
    /**
     * When populated, this is the UUID of the {@code DnssecKeyVersion} that this {@code DnssecKeyVersion} will replace or has
     * replaced.
     *
     */
    "predecessorDnssecKeyVersionUuid"?: string;
    /**
     * When populated, this is the UUID of the {@code DnssecKeyVersion} that will replace, or has replaced, this
     * {@code DnssecKeyVersion}.
     *
     */
    "successorDnssecKeyVersionUuid"?: string;
    /**
     * The key tag associated with the {@code DnssecKeyVersion}. This key tag will be present in the RRSIG and DS records
     * associated with the key material for this {@code DnssecKeyVersion}. For more information about key tags, see
     * [RFC 4034](https://tools.ietf.org/html/rfc4034).
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "keyTag"?: number;
}
export declare namespace ZskDnssecKeyVersion {
    function getJsonObj(obj: ZskDnssecKeyVersion): object;
    function getDeserializedJsonObj(obj: ZskDnssecKeyVersion): object;
}
