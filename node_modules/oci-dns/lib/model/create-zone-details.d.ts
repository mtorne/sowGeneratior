/**
 * DNS API
 * API for the DNS service. Use this API to manage DNS zones, records, and other DNS resources.
For more information, see [Overview of the DNS Service](https://docs.oracle.com/iaas/Content/DNS/Concepts/dnszonemanagement.htm).

 * OpenAPI spec version: 20180115
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The body for defining a new zone.
 * <p>
 **Warning:** Oracle recommends that you avoid using any confidential information when you supply string values using the API.
 *
 */
export interface CreateZoneDetails extends model.CreateZoneBaseDetails {
    /**
     * The type of the zone. Must be either {@code PRIMARY} or {@code SECONDARY}. {@code SECONDARY} is only supported for GLOBAL
     * zones.
     *
     */
    "zoneType"?: CreateZoneDetails.ZoneType;
    /**
     * This value will be null for zones in the global DNS.
     *
     */
    "viewId"?: string;
    /**
     * The scope of the zone.
     */
    "scope"?: model.Scope;
    /**
     * External master servers for the zone. {@code externalMasters} becomes a
     * required parameter when the {@code zoneType} value is {@code SECONDARY}.
     *
     */
    "externalMasters"?: Array<model.ExternalMaster>;
    /**
     * External secondary servers for the zone.
     * This field is currently not supported when {@code zoneType} is {@code SECONDARY} or {@code scope} is {@code PRIVATE}.
     *
     */
    "externalDownstreams"?: Array<model.ExternalDownstream>;
    /**
      * The state of DNSSEC on the zone.
  * <p>
  For DNSSEC to function, every parent zone in the DNS tree up to the top-level domain (or an independent
  * trust anchor) must also have DNSSEC correctly set up.
  * After enabling DNSSEC, you must add a DS record to the zone's parent zone containing the
  * {@code KskDnssecKeyVersion} data. You can find the DS data in the {@code dsData} attribute of the {@code KskDnssecKeyVersion}.
  * Then, use the {@code PromoteZoneDnssecKeyVersion} operation to promote the {@code KskDnssecKeyVersion}.
  * <p>
  New {@code KskDnssecKeyVersion}s are generated annually, a week before the existing {@code KskDnssecKeyVersion}'s expiration.
  * To rollover a {@code KskDnssecKeyVersion}, you must replace the parent zone's DS record containing the old
  * {@code KskDnssecKeyVersion} data with the data from the new {@code KskDnssecKeyVersion}.
  * <p>
  To remove the old DS record without causing service disruption, wait until the old DS record's TTL has
  * expired, and the new DS record has propagated. After the DS replacement has been completed, then the
  * {@code PromoteZoneDnssecKeyVersion} operation must be called.
  * <p>
  Metrics are emitted in the {@code oci_dns} namespace daily for each {@code KskDnssecKeyVersion} indicating how many
  * days are left until expiration.
  * We recommend that you set up alarms and notifications for KskDnssecKeyVersion expiration so that the
  * necessary parent zone updates can be made and the {@code PromoteZoneDnssecKeyVersion} operation can be called.
  * <p>
  Enabling DNSSEC results in additional records in DNS responses which increases their size and can
  * cause higher response latency.
  * <p>
  For more information, see [DNSSEC](https://docs.oracle.com/iaas/Content/DNS/Concepts/dnssec.htm).
  *
      */
    "dnssecState"?: model.ZoneDnssecState;
    "migrationSource": string;
}
export declare namespace CreateZoneDetails {
    enum ZoneType {
        Primary = "PRIMARY",
        Secondary = "SECONDARY"
    }
    function getJsonObj(obj: CreateZoneDetails, isParentJsonObj?: boolean): object;
    const migrationSource = "NONE";
    function getDeserializedJsonObj(obj: CreateZoneDetails, isParentJsonObj?: boolean): object;
}
