"use strict";
/**
 * Kubernetes Engine API
 * API for the Kubernetes Engine service (also known as the Container Engine for Kubernetes service). Use this API to build, deploy,
and manage cloud-native applications. For more information, see
[Overview of Kubernetes Engine](https://docs.oracle.com/iaas/Content/ContEng/Concepts/contengoverview.htm).

 * OpenAPI spec version: 20180222
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CycleMode = void 0;
/**
 * BOOT_VOLUME_REPLACE cycling swaps the boot volume on the same node, while INSTANCE_REPLACE cycling deletes and recreates a new node with the changes applied.
 * Only a subset of fields (kubernetesVersion, imageId, bootVolumeSizeInGBs, nodeMetadata, sshPublicKey) can be changed with BOOT_VOLUME_REPLACE cycling.
 * The cycling operation will attempt to bring all nodes in the NodePool in sync with the NodePool specification. If BOOT_VOLUME_REPLACE cycling mode is chosen, and the node needs changes to fields that can not be updated via a BOOT_VOLUME_REPLACE cycle, the cycle attempt for that node will fail. The operation has to be retried with cycle mode changed to INSTANCE_REPLACE in this case.
 *
 **/
var CycleMode;
(function (CycleMode) {
    CycleMode["BootVolumeReplace"] = "BOOT_VOLUME_REPLACE";
    CycleMode["InstanceReplace"] = "INSTANCE_REPLACE";
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    CycleMode["UnknownValue"] = "UNKNOWN_VALUE";
})(CycleMode = exports.CycleMode || (exports.CycleMode = {}));
(function (CycleMode) {
    function getJsonObj(obj) {
        return obj;
    }
    CycleMode.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        return obj;
    }
    CycleMode.getDeserializedJsonObj = getDeserializedJsonObj;
})(CycleMode = exports.CycleMode || (exports.CycleMode = {}));
//# sourceMappingURL=cycle-mode.js.map