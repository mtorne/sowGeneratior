/**
 * Kubernetes Engine API
 * API for the Kubernetes Engine service (also known as the Container Engine for Kubernetes service). Use this API to build, deploy,
and manage cloud-native applications. For more information, see
[Overview of Kubernetes Engine](https://docs.oracle.com/iaas/Content/ContEng/Concepts/contengoverview.htm).

 * OpenAPI spec version: 20180222
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { ContainerEngineClient } from "./client";
export declare class ContainerEngineWaiter {
    private client;
    private readonly config?;
    constructor(client: ContainerEngineClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAddon till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAddonResponse | null (null in case of 404 response)
     */
    forAddon(request: serviceRequests.GetAddonRequest, ...targetStates: models.AddonLifecycleState[]): Promise<serviceResponses.GetAddonResponse | null>;
    /**
     * Waits forCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetClusterResponse | null (null in case of 404 response)
     */
    forCluster(request: serviceRequests.GetClusterRequest, ...targetStates: models.ClusterLifecycleState[]): Promise<serviceResponses.GetClusterResponse | null>;
    /**
     * Waits forNodePool till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNodePoolResponse | null (null in case of 404 response)
     */
    forNodePool(request: serviceRequests.GetNodePoolRequest, ...targetStates: models.NodePoolLifecycleState[]): Promise<serviceResponses.GetNodePoolResponse | null>;
    /**
     * Waits forVirtualNode till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVirtualNodeResponse | null (null in case of 404 response)
     */
    forVirtualNode(request: serviceRequests.GetVirtualNodeRequest, ...targetStates: models.VirtualNodeLifecycleState[]): Promise<serviceResponses.GetVirtualNodeResponse | null>;
    /**
     * Waits forVirtualNodePool till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVirtualNodePoolResponse | null (null in case of 404 response)
     */
    forVirtualNodePool(request: serviceRequests.GetVirtualNodePoolRequest, ...targetStates: models.VirtualNodePoolLifecycleState[]): Promise<serviceResponses.GetVirtualNodePoolResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
    /**
     * Waits forWorkloadMapping till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetWorkloadMappingResponse | null (null in case of 404 response)
     */
    forWorkloadMapping(request: serviceRequests.GetWorkloadMappingRequest, ...targetStates: models.WorkloadMappingLifecycleState[]): Promise<serviceResponses.GetWorkloadMappingResponse | null>;
}
