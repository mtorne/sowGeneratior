/**
 * VbsControlplaneInstance API
 * A description of the VbsControlplaneInstance API
 * OpenAPI spec version: 20180828
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Visual Builder Studio service instance
 */
export interface VbsInstance {
    /**
     * Unique identifier that is immutable on creation
     */
    "id": string;
    /**
     * Service instance name (unique identifier)
     */
    "name": string;
    /**
     * Service instance display name
     */
    "displayName": string;
    /**
     * Compartment of the service instance
     */
    "compartmentId": string;
    /**
     * Whether the VBS service instance owner explicitly approved VBS to create and use resources in the customer tenancy
     */
    "isResourceUsageAgreementGranted"?: boolean;
    /**
     * Compartment where VBS may create additional resources for the service instance
     */
    "resourceCompartmentId"?: string;
    /**
     * Public web URL for accessing the VBS service instance
     */
    "vbsAccessUrl"?: string;
    /**
     * The time the the VbsInstance was created. An RFC3339 formatted datetime string
     */
    "timeCreated"?: Date;
    /**
     * The time the VbsInstance was updated. An RFC3339 formatted datetime string
     */
    "timeUpdated"?: Date;
    /**
     * The current state of the VbsInstance.
     */
    "lifecycleState"?: model.LifecycleState;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    "lifecyleDetails"?: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace VbsInstance {
    function getJsonObj(obj: VbsInstance): object;
    function getDeserializedJsonObj(obj: VbsInstance): object;
}
