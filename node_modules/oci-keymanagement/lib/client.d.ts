/**
 * Vault Key Management API
 * Use the Key Management API to manage vaults and keys. For more information, see [Managing Vaults](https://docs.oracle.com/iaas/Content/KeyManagement/Tasks/managingvaults.htm) and [Managing Keys](https://docs.oracle.com/iaas/Content/KeyManagement/Tasks/managingkeys.htm).

 * OpenAPI spec version: release
 * Contact: sparta_kms_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { EkmWaiter } from "./ekm-waiter";
import { KmsHsmClusterWaiter } from "./kmshsmcluster-waiter";
import { KmsManagementWaiter } from "./kmsmanagement-waiter";
import { KmsVaultWaiter } from "./kmsvault-waiter";
declare const Breaker: any;
export declare enum EkmApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class EkmClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": EkmWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new EkmWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): EkmWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): EkmWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Create a new EKMS private endpoint used to connect to external key manager system
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateEkmsPrivateEndpointRequest
     * @return CreateEkmsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/CreateEkmsPrivateEndpoint.ts.html |here} to see how to use CreateEkmsPrivateEndpoint API.
     */
    createEkmsPrivateEndpoint(createEkmsPrivateEndpointRequest: requests.CreateEkmsPrivateEndpointRequest): Promise<responses.CreateEkmsPrivateEndpointResponse>;
    /**
     * Deletes EKMS private endpoint by identifier.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteEkmsPrivateEndpointRequest
     * @return DeleteEkmsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/DeleteEkmsPrivateEndpoint.ts.html |here} to see how to use DeleteEkmsPrivateEndpoint API.
     */
    deleteEkmsPrivateEndpoint(deleteEkmsPrivateEndpointRequest: requests.DeleteEkmsPrivateEndpointRequest): Promise<responses.DeleteEkmsPrivateEndpointResponse>;
    /**
     * Gets a specific EKMS private by identifier.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetEkmsPrivateEndpointRequest
     * @return GetEkmsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/GetEkmsPrivateEndpoint.ts.html |here} to see how to use GetEkmsPrivateEndpoint API.
     */
    getEkmsPrivateEndpoint(getEkmsPrivateEndpointRequest: requests.GetEkmsPrivateEndpointRequest): Promise<responses.GetEkmsPrivateEndpointResponse>;
    /**
     * Returns a list of all the EKMS private endpoints in the specified compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListEkmsPrivateEndpointsRequest
     * @return ListEkmsPrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ListEkmsPrivateEndpoints.ts.html |here} to see how to use ListEkmsPrivateEndpoints API.
     */
    listEkmsPrivateEndpoints(listEkmsPrivateEndpointsRequest: requests.ListEkmsPrivateEndpointsRequest): Promise<responses.ListEkmsPrivateEndpointsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listEkmsPrivateEndpointsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.EkmsPrivateEndpointSummary objects
     * contained in responses from the listEkmsPrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllEkmsPrivateEndpoints(request: requests.ListEkmsPrivateEndpointsRequest): AsyncIterableIterator<model.EkmsPrivateEndpointSummary>;
    /**
     * NOTE: This function is deprecated in favor of listEkmsPrivateEndpointsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listEkmsPrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllEkmsPrivateEndpointsResponses(request: requests.ListEkmsPrivateEndpointsRequest): AsyncIterableIterator<responses.ListEkmsPrivateEndpointsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.EkmsPrivateEndpointSummary objects
     * contained in responses from the listEkmsPrivateEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listEkmsPrivateEndpointsRecordIterator(request: requests.ListEkmsPrivateEndpointsRequest): AsyncIterableIterator<model.EkmsPrivateEndpointSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listEkmsPrivateEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listEkmsPrivateEndpointsResponseIterator(request: requests.ListEkmsPrivateEndpointsRequest): AsyncIterableIterator<responses.ListEkmsPrivateEndpointsResponse>;
    /**
     * Updates EKMS private endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateEkmsPrivateEndpointRequest
     * @return UpdateEkmsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/UpdateEkmsPrivateEndpoint.ts.html |here} to see how to use UpdateEkmsPrivateEndpoint API.
     */
    updateEkmsPrivateEndpoint(updateEkmsPrivateEndpointRequest: requests.UpdateEkmsPrivateEndpointRequest): Promise<responses.UpdateEkmsPrivateEndpointResponse>;
}
export declare enum KmsCryptoApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class KmsCryptoClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Decrypts data using the given [DecryptDataDetails](https://docs.oracle.com/iaas/api/#/en/key/latest/datatypes/DecryptDataDetails) resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DecryptRequest
     * @return DecryptResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/Decrypt.ts.html |here} to see how to use Decrypt API.
     */
    decrypt(decryptRequest: requests.DecryptRequest): Promise<responses.DecryptResponse>;
    /**
     * Encrypts data using the given [EncryptDataDetails](https://docs.oracle.com/iaas/api/#/en/key/latest/datatypes/EncryptDataDetails) resource.
     * Plaintext included in the example request is a base64-encoded value of a UTF-8 string.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param EncryptRequest
     * @return EncryptResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/Encrypt.ts.html |here} to see how to use Encrypt API.
     */
    encrypt(encryptRequest: requests.EncryptRequest): Promise<responses.EncryptResponse>;
    /**
     * Exports a specific version of a master encryption key according to the details of the request. For their protection,
     * keys that you create and store on a hardware security module (HSM) can never leave the HSM. You can only export keys
     * stored on the server. For export, the key version is encrypted by an RSA public key that you provide.
     * This operation is not supported for keys having protection mode `EXTERNAL`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ExportKeyRequest
     * @return ExportKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ExportKey.ts.html |here} to see how to use ExportKey API.
     */
    exportKey(exportKeyRequest: requests.ExportKeyRequest): Promise<responses.ExportKeyResponse>;
    /**
     * Generates a key that you can use to encrypt or decrypt data.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GenerateDataEncryptionKeyRequest
     * @return GenerateDataEncryptionKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/GenerateDataEncryptionKey.ts.html |here} to see how to use GenerateDataEncryptionKey API.
     */
    generateDataEncryptionKey(generateDataEncryptionKeyRequest: requests.GenerateDataEncryptionKeyRequest): Promise<responses.GenerateDataEncryptionKeyResponse>;
    /**
     * Creates a digital signature for a message or message digest by using the private key of a public-private key pair,
     * also known as an asymmetric key. To verify the generated signature, you can use the [Verify](https://docs.oracle.com/iaas/api/#/en/key/latest/VerifiedData/Verify)
     * operation. Or, if you want to validate the signature outside of the service, you can do so by using the public key of the same asymmetric key.
     * This operation is not supported for keys having protection mode `EXTERNAL`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SignRequest
     * @return SignResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/Sign.ts.html |here} to see how to use Sign API.
     */
    sign(signRequest: requests.SignRequest): Promise<responses.SignResponse>;
    /**
     * Verifies a digital signature that was generated by the [Sign](https://docs.oracle.com/iaas/api/#/en/key/latest/SignedData/Sign) operation
     * by using the public key of the same asymmetric key that was used to sign the data. If you want to validate the
     * digital signature outside of the service, you can do so by using the public key of the asymmetric key.
     * This operation is not supported for keys having protection mode `EXTERNAL`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param VerifyRequest
     * @return VerifyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/Verify.ts.html |here} to see how to use Verify API.
     */
    verify(verifyRequest: requests.VerifyRequest): Promise<responses.VerifyResponse>;
}
export declare enum KmsHsmClusterApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class KmsHsmClusterClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": KmsHsmClusterWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new KmsHsmClusterWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): KmsHsmClusterWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): KmsHsmClusterWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Cancels deletion of specified HSM Cluster, restores it and associated HSM partitions to pre-deletion states.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelHsmClusterDeletionRequest
     * @return CancelHsmClusterDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/CancelHsmClusterDeletion.ts.html |here} to see how to use CancelHsmClusterDeletion API.
     */
    cancelHsmClusterDeletion(cancelHsmClusterDeletionRequest: requests.CancelHsmClusterDeletionRequest): Promise<responses.CancelHsmClusterDeletionResponse>;
    /**
     * Moves a HSM Cluster resource to a different compartment within the same tenancy.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeHsmClusterCompartmentRequest
     * @return ChangeHsmClusterCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ChangeHsmClusterCompartment.ts.html |here} to see how to use ChangeHsmClusterCompartment API.
     */
    changeHsmClusterCompartment(changeHsmClusterCompartmentRequest: requests.ChangeHsmClusterCompartmentRequest): Promise<responses.ChangeHsmClusterCompartmentResponse>;
    /**
     * Creates a new HSM cluster resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateHsmClusterRequest
     * @return CreateHsmClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/CreateHsmCluster.ts.html |here} to see how to use CreateHsmCluster API.
     */
    createHsmCluster(createHsmClusterRequest: requests.CreateHsmClusterRequest): Promise<responses.CreateHsmClusterResponse>;
    /**
     * Retrieves the certificate signing request for the designated HSM Cluster resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DownloadCertificateSigningRequestRequest
     * @return DownloadCertificateSigningRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/DownloadCertificateSigningRequest.ts.html |here} to see how to use DownloadCertificateSigningRequest API.
     */
    downloadCertificateSigningRequest(downloadCertificateSigningRequestRequest: requests.DownloadCertificateSigningRequestRequest): Promise<responses.DownloadCertificateSigningRequestResponse>;
    /**
       * Retrieves configuration details for the specified HSM Cluster resource.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning read operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * read operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetHsmClusterRequest
       * @return GetHsmClusterResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/GetHsmCluster.ts.html |here} to see how to use GetHsmCluster API.
       */
    getHsmCluster(getHsmClusterRequest: requests.GetHsmClusterRequest): Promise<responses.GetHsmClusterResponse>;
    /**
     * Retrieves HSM partition details for the specified HSM cluster.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetHsmPartitionRequest
     * @return GetHsmPartitionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/GetHsmPartition.ts.html |here} to see how to use GetHsmPartition API.
     */
    getHsmPartition(getHsmPartitionRequest: requests.GetHsmPartitionRequest): Promise<responses.GetHsmPartitionResponse>;
    /**
     * Retrieves Pre Crypto Officer user credentials for the specified HSM cluster.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetPreCoUserCredentialsRequest
     * @return GetPreCoUserCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/GetPreCoUserCredentials.ts.html |here} to see how to use GetPreCoUserCredentials API.
     */
    getPreCoUserCredentials(getPreCoUserCredentialsRequest: requests.GetPreCoUserCredentialsRequest): Promise<responses.GetPreCoUserCredentialsResponse>;
    /**
       * Lists all HSM cluster resources contained within the specified compartment.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning read operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * read operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListHsmClustersRequest
       * @return ListHsmClustersResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ListHsmClusters.ts.html |here} to see how to use ListHsmClusters API.
       */
    listHsmClusters(listHsmClustersRequest: requests.ListHsmClustersRequest): Promise<responses.ListHsmClustersResponse>;
    /**
     * Lists all HSM partitions within the specified HSM Cluster resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListHsmPartitionsRequest
     * @return ListHsmPartitionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ListHsmPartitions.ts.html |here} to see how to use ListHsmPartitions API.
     */
    listHsmPartitions(listHsmPartitionsRequest: requests.ListHsmPartitionsRequest): Promise<responses.ListHsmPartitionsResponse>;
    /**
     * Schedules HSM cluster for deletion, update its lifecycle state to 'PENDING_DELETION'
     * and deletes it after the retention period.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ScheduleHsmClusterDeletionRequest
     * @return ScheduleHsmClusterDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ScheduleHsmClusterDeletion.ts.html |here} to see how to use ScheduleHsmClusterDeletion API.
     */
    scheduleHsmClusterDeletion(scheduleHsmClusterDeletionRequest: requests.ScheduleHsmClusterDeletionRequest): Promise<responses.ScheduleHsmClusterDeletionResponse>;
    /**
       * Modifies properties of an HSM cluster resource, including `displayName`, `freeformTags` and `definedTags`.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param UpdateHsmClusterRequest
       * @return UpdateHsmClusterResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/UpdateHsmCluster.ts.html |here} to see how to use UpdateHsmCluster API.
       */
    updateHsmCluster(updateHsmClusterRequest: requests.UpdateHsmClusterRequest): Promise<responses.UpdateHsmClusterResponse>;
    /**
     * Uploads the partition owner certificates to the HSM Cluster resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UploadPartitionCertificatesRequest
     * @return UploadPartitionCertificatesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/UploadPartitionCertificates.ts.html |here} to see how to use UploadPartitionCertificates API.
     */
    uploadPartitionCertificates(uploadPartitionCertificatesRequest: requests.UploadPartitionCertificatesRequest): Promise<responses.UploadPartitionCertificatesResponse>;
}
export declare enum KmsManagementApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class KmsManagementClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": KmsManagementWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Creates a new KmsManagementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): KmsManagementWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): KmsManagementWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Backs up an encrypted file that contains all key versions and metadata of the specified key so that you can restore
     * the key later. The file also contains the metadata of the vault that the key belonged to.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param BackupKeyRequest
     * @return BackupKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/BackupKey.ts.html |here} to see how to use BackupKey API.
     */
    backupKey(backupKeyRequest: requests.BackupKeyRequest): Promise<responses.BackupKeyResponse>;
    /**
       * Cancels the scheduled deletion of the specified key. Canceling
  * a scheduled deletion restores the key's lifecycle state to what
  * it was before its scheduled deletion.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CancelKeyDeletionRequest
       * @return CancelKeyDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/CancelKeyDeletion.ts.html |here} to see how to use CancelKeyDeletion API.
       */
    cancelKeyDeletion(cancelKeyDeletionRequest: requests.CancelKeyDeletionRequest): Promise<responses.CancelKeyDeletionResponse>;
    /**
       * Cancels the scheduled deletion of the specified key version. Canceling
  * a scheduled deletion restores the key version to its lifecycle state from
  * before its scheduled deletion.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CancelKeyVersionDeletionRequest
       * @return CancelKeyVersionDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/CancelKeyVersionDeletion.ts.html |here} to see how to use CancelKeyVersionDeletion API.
       */
    cancelKeyVersionDeletion(cancelKeyVersionDeletionRequest: requests.CancelKeyVersionDeletionRequest): Promise<responses.CancelKeyVersionDeletionResponse>;
    /**
       * Moves a key into a different compartment within the same tenancy. For information about
  * moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When provided, if-match is checked against the ETag values of the key.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ChangeKeyCompartmentRequest
       * @return ChangeKeyCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ChangeKeyCompartment.ts.html |here} to see how to use ChangeKeyCompartment API.
       */
    changeKeyCompartment(changeKeyCompartmentRequest: requests.ChangeKeyCompartmentRequest): Promise<responses.ChangeKeyCompartmentResponse>;
    /**
       * Creates a new master encryption key.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total
  * number of requests across all management write operations. Key Management might throttle this call
  * to reject an otherwise valid request when the total rate of management write operations exceeds 10
  * requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateKeyRequest
       * @return CreateKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/CreateKey.ts.html |here} to see how to use CreateKey API.
       */
    createKey(createKeyRequest: requests.CreateKeyRequest): Promise<responses.CreateKeyResponse>;
    /**
       * Generates a new [KeyVersion](https://docs.oracle.com/iaas/api/#/en/key/latest/KeyVersion/) resource that provides new cryptographic
  * material for a master encryption key. The key must be in an `ENABLED` state to be rotated.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all  management write operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management write operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateKeyVersionRequest
       * @return CreateKeyVersionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/CreateKeyVersion.ts.html |here} to see how to use CreateKeyVersion API.
       */
    createKeyVersion(createKeyVersionRequest: requests.CreateKeyVersionRequest): Promise<responses.CreateKeyVersionResponse>;
    /**
       * Disables a master encryption key so it can no longer be used for encryption, decryption, or
  * generating new data encryption keys.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management write operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management write operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DisableKeyRequest
       * @return DisableKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/DisableKey.ts.html |here} to see how to use DisableKey API.
       */
    disableKey(disableKeyRequest: requests.DisableKeyRequest): Promise<responses.DisableKeyResponse>;
    /**
       * Enables a master encryption key so it can be used for encryption, decryption, or
  * generating new data encryption keys.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management write operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management write operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param EnableKeyRequest
       * @return EnableKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/EnableKey.ts.html |here} to see how to use EnableKey API.
       */
    enableKey(enableKeyRequest: requests.EnableKeyRequest): Promise<responses.EnableKeyResponse>;
    /**
       * Gets information about the specified master encryption key.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management read operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management read operations exceeds 10 requests per second for
  * a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetKeyRequest
       * @return GetKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/GetKey.ts.html |here} to see how to use GetKey API.
       */
    getKey(getKeyRequest: requests.GetKeyRequest): Promise<responses.GetKeyResponse>;
    /**
       * Gets information about the specified key version.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management read operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management read operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetKeyVersionRequest
       * @return GetKeyVersionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/GetKeyVersion.ts.html |here} to see how to use GetKeyVersion API.
       */
    getKeyVersion(getKeyVersionRequest: requests.GetKeyVersionRequest): Promise<responses.GetKeyVersionResponse>;
    /**
     * When a vault has a replica, each operation on the vault or its resources, such as
     * keys, is replicated and has an associated replicationId. Replication status provides
     * details about whether the operation associated with the given replicationId has been
     * successfully applied across replicas.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetReplicationStatusRequest
     * @return GetReplicationStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/GetReplicationStatus.ts.html |here} to see how to use GetReplicationStatus API.
     */
    getReplicationStatus(getReplicationStatusRequest: requests.GetReplicationStatusRequest): Promise<responses.GetReplicationStatusResponse>;
    /**
     * Gets details about the public RSA wrapping key associated with the vault in the endpoint. Each vault has an RSA key-pair that wraps and
     * unwraps AES key material for import into Key Management.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWrappingKeyRequest
     * @return GetWrappingKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/GetWrappingKey.ts.html |here} to see how to use GetWrappingKey API.
     */
    getWrappingKey(getWrappingKeyRequest: requests.GetWrappingKeyRequest): Promise<responses.GetWrappingKeyResponse>;
    /**
     * Imports AES and RSA keys to create a new key. The key material must be base64-encoded
     * and wrapped by the vault's public RSA wrapping key before you can import it.
     * Key Management supports both RSA and AES keys. The AES keys are symmetric keys
     * of length 128 bits (16 bytes), 192 bits (24 bytes), or 256 bits (32 bytes), and the RSA keys are asymmetric keys of length 2048 bits (256 bytes), 3072 bits (384 bytes), and 4096 bits (512 bytes).
     * Furthermore, the key length must match what you specify at the time of import. When importing an asymmetric key,
     * only private key must be wrapped in PKCS8 format while the corresponding public key is generated internally by KMS.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ImportKeyRequest
     * @return ImportKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ImportKey.ts.html |here} to see how to use ImportKey API.
     */
    importKey(importKeyRequest: requests.ImportKeyRequest): Promise<responses.ImportKeyResponse>;
    /**
     * Imports AES key material to create a new key version and then rotate the key to begin using the new
     * key version. The key material must be base64-encoded and wrapped by the vault's public RSA wrapping key
     * before you can import it. Key Management supports AES symmetric keys that are exactly 16, 24, or 32 bytes.
     * Furthermore, the key length must match the length of the specified key and what you specify as the length
     * at the time of import. When importing an asymmetric key, only the private key must be wrapped in PKCS8 format
     * while the corresponding public key is generated internally by KMS.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ImportKeyVersionRequest
     * @return ImportKeyVersionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ImportKeyVersion.ts.html |here} to see how to use ImportKeyVersion API.
     */
    importKeyVersion(importKeyVersionRequest: requests.ImportKeyVersionRequest): Promise<responses.ImportKeyVersionResponse>;
    /**
       * Lists all [KeyVersion](https://docs.oracle.com/iaas/api/#/en/key/latest/KeyVersion/) resources for the specified
  * master encryption key.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management read operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management read operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListKeyVersionsRequest
       * @return ListKeyVersionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ListKeyVersions.ts.html |here} to see how to use ListKeyVersions API.
       */
    listKeyVersions(listKeyVersionsRequest: requests.ListKeyVersionsRequest): Promise<responses.ListKeyVersionsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listKeyVersionsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.KeyVersionSummary objects
     * contained in responses from the listKeyVersions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllKeyVersions(request: requests.ListKeyVersionsRequest): AsyncIterableIterator<model.KeyVersionSummary>;
    /**
     * NOTE: This function is deprecated in favor of listKeyVersionsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listKeyVersions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllKeyVersionsResponses(request: requests.ListKeyVersionsRequest): AsyncIterableIterator<responses.ListKeyVersionsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.KeyVersionSummary objects
     * contained in responses from the listKeyVersions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listKeyVersionsRecordIterator(request: requests.ListKeyVersionsRequest): AsyncIterableIterator<model.KeyVersionSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listKeyVersions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listKeyVersionsResponseIterator(request: requests.ListKeyVersionsRequest): AsyncIterableIterator<responses.ListKeyVersionsResponse>;
    /**
       * Lists the master encryption keys in the specified vault and compartment.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management read operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management read operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListKeysRequest
       * @return ListKeysResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ListKeys.ts.html |here} to see how to use ListKeys API.
       */
    listKeys(listKeysRequest: requests.ListKeysRequest): Promise<responses.ListKeysResponse>;
    /**
     * NOTE: This function is deprecated in favor of listKeysRecordIterator function.
     * Creates a new async iterator which will iterate over the models.KeySummary objects
     * contained in responses from the listKeys operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllKeys(request: requests.ListKeysRequest): AsyncIterableIterator<model.KeySummary>;
    /**
     * NOTE: This function is deprecated in favor of listKeysResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listKeys operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllKeysResponses(request: requests.ListKeysRequest): AsyncIterableIterator<responses.ListKeysResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.KeySummary objects
     * contained in responses from the listKeys operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listKeysRecordIterator(request: requests.ListKeysRequest): AsyncIterableIterator<model.KeySummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listKeys operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listKeysResponseIterator(request: requests.ListKeysRequest): AsyncIterableIterator<responses.ListKeysResponse>;
    /**
     * Restores the specified key to the specified vault, based on information in the backup file provided.
     * If the vault doesn't exist, the operation returns a response with a 404 HTTP status error code. You
     * need to first restore the vault associated with the key.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RestoreKeyFromFileRequest
     * @return RestoreKeyFromFileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/RestoreKeyFromFile.ts.html |here} to see how to use RestoreKeyFromFile API.
     */
    restoreKeyFromFile(restoreKeyFromFileRequest: requests.RestoreKeyFromFileRequest): Promise<responses.RestoreKeyFromFileResponse>;
    /**
     * Restores the specified key to the specified vault from an Oracle Cloud Infrastructure
     * Object Storage location. If the vault doesn't exist, the operation returns a response with a
     * 404 HTTP status error code. You need to first restore the vault associated with the key.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RestoreKeyFromObjectStoreRequest
     * @return RestoreKeyFromObjectStoreResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/RestoreKeyFromObjectStore.ts.html |here} to see how to use RestoreKeyFromObjectStore API.
     */
    restoreKeyFromObjectStore(restoreKeyFromObjectStoreRequest: requests.RestoreKeyFromObjectStoreRequest): Promise<responses.RestoreKeyFromObjectStoreResponse>;
    /**
       * Schedules the deletion of the specified key. This sets the lifecycle state of the key
  * to `PENDING_DELETION` and then deletes it after the specified retention period ends.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ScheduleKeyDeletionRequest
       * @return ScheduleKeyDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ScheduleKeyDeletion.ts.html |here} to see how to use ScheduleKeyDeletion API.
       */
    scheduleKeyDeletion(scheduleKeyDeletionRequest: requests.ScheduleKeyDeletionRequest): Promise<responses.ScheduleKeyDeletionResponse>;
    /**
       * Schedules the deletion of the specified key version. This sets the lifecycle state of the key version
  * to `PENDING_DELETION` and then deletes it after the specified retention period ends.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ScheduleKeyVersionDeletionRequest
       * @return ScheduleKeyVersionDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ScheduleKeyVersionDeletion.ts.html |here} to see how to use ScheduleKeyVersionDeletion API.
       */
    scheduleKeyVersionDeletion(scheduleKeyVersionDeletionRequest: requests.ScheduleKeyVersionDeletionRequest): Promise<responses.ScheduleKeyVersionDeletionResponse>;
    /**
       * Updates the properties of a master encryption key. Specifically, you can update the
  * `displayName`, `freeformTags`, and `definedTags` properties. Furthermore,
  * the key must be in an `ENABLED` or `CREATING` state to be updated.
  * <p>
  As a management operation, this call is subject to a Key Management limit that applies to the total number
  * of requests across all management write operations. Key Management might throttle this call to reject an
  * otherwise valid request when the total rate of management write operations exceeds 10 requests per second
  * for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param UpdateKeyRequest
       * @return UpdateKeyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/UpdateKey.ts.html |here} to see how to use UpdateKey API.
       */
    updateKey(updateKeyRequest: requests.UpdateKeyRequest): Promise<responses.UpdateKeyResponse>;
}
export declare enum KmsVaultApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class KmsVaultClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": KmsVaultWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new KmsVaultWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): KmsVaultWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): KmsVaultWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Backs up an encrypted file that contains all the metadata of a vault so that you can restore the vault later.
     * You can backup a vault whether or not it contains keys. This operation only backs up the
     * metadata of the vault, and does not include key metadata.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param BackupVaultRequest
     * @return BackupVaultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/BackupVault.ts.html |here} to see how to use BackupVault API.
     */
    backupVault(backupVaultRequest: requests.BackupVaultRequest): Promise<responses.BackupVaultResponse>;
    /**
       * Cancels the scheduled deletion of the specified vault. Canceling a scheduled deletion
  * restores the vault and all keys in it to their respective states from before their
  * scheduled deletion. All keys that were scheduled for deletion prior to vault
  * deletion retain their lifecycle state and time of deletion.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CancelVaultDeletionRequest
       * @return CancelVaultDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/CancelVaultDeletion.ts.html |here} to see how to use CancelVaultDeletion API.
       */
    cancelVaultDeletion(cancelVaultDeletionRequest: requests.CancelVaultDeletionRequest): Promise<responses.CancelVaultDeletionResponse>;
    /**
       * Moves a vault into a different compartment within the same tenancy. For information about
  * moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When provided, if-match is checked against the ETag values of the resource.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ChangeVaultCompartmentRequest
       * @return ChangeVaultCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ChangeVaultCompartment.ts.html |here} to see how to use ChangeVaultCompartment API.
       */
    changeVaultCompartment(changeVaultCompartmentRequest: requests.ChangeVaultCompartmentRequest): Promise<responses.ChangeVaultCompartmentResponse>;
    /**
       * Creates a new vault. The type of vault you create determines key placement, pricing, and
  * available options. Options include storage isolation, a dedicated service endpoint instead
  * of a shared service endpoint for API calls, and either a dedicated hardware security module
  * (HSM) or a multitenant HSM.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateVaultRequest
       * @return CreateVaultResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/CreateVault.ts.html |here} to see how to use CreateVault API.
       */
    createVault(createVaultRequest: requests.CreateVaultRequest): Promise<responses.CreateVaultResponse>;
    /**
       * Creates a replica for the vault in another region in the same realm
  * <p>
  The API is a no-op if called for same region that a vault is already replicated to.
  * 409 if called on a vault that is already replicated to a different region. Users need to delete
  * existing replica first before calling it with a different region.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateVaultReplicaRequest
       * @return CreateVaultReplicaResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/CreateVaultReplica.ts.html |here} to see how to use CreateVaultReplica API.
       */
    createVaultReplica(createVaultReplicaRequest: requests.CreateVaultReplicaRequest): Promise<responses.CreateVaultReplicaResponse>;
    /**
       * Deletes a vault replica
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DeleteVaultReplicaRequest
       * @return DeleteVaultReplicaResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/DeleteVaultReplica.ts.html |here} to see how to use DeleteVaultReplica API.
       */
    deleteVaultReplica(deleteVaultReplicaRequest: requests.DeleteVaultReplicaRequest): Promise<responses.DeleteVaultReplicaResponse>;
    /**
       * Gets the specified vault's configuration information.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning read operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * read operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetVaultRequest
       * @return GetVaultResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/GetVault.ts.html |here} to see how to use GetVault API.
       */
    getVault(getVaultRequest: requests.GetVaultRequest): Promise<responses.GetVaultResponse>;
    /**
     * Gets the count of keys and key versions in the specified vault to calculate usage against service limits.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetVaultUsageRequest
     * @return GetVaultUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/GetVaultUsage.ts.html |here} to see how to use GetVaultUsage API.
     */
    getVaultUsage(getVaultUsageRequest: requests.GetVaultUsageRequest): Promise<responses.GetVaultUsageResponse>;
    /**
       * Lists the replicas for a vault
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListVaultReplicasRequest
       * @return ListVaultReplicasResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ListVaultReplicas.ts.html |here} to see how to use ListVaultReplicas API.
       */
    listVaultReplicas(listVaultReplicasRequest: requests.ListVaultReplicasRequest): Promise<responses.ListVaultReplicasResponse>;
    /**
     * NOTE: This function is deprecated in favor of listVaultReplicasRecordIterator function.
     * Creates a new async iterator which will iterate over the models.VaultReplicaSummary objects
     * contained in responses from the listVaultReplicas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVaultReplicas(request: requests.ListVaultReplicasRequest): AsyncIterableIterator<model.VaultReplicaSummary>;
    /**
     * NOTE: This function is deprecated in favor of listVaultReplicasResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listVaultReplicas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVaultReplicasResponses(request: requests.ListVaultReplicasRequest): AsyncIterableIterator<responses.ListVaultReplicasResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.VaultReplicaSummary objects
     * contained in responses from the listVaultReplicas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listVaultReplicasRecordIterator(request: requests.ListVaultReplicasRequest): AsyncIterableIterator<model.VaultReplicaSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVaultReplicas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listVaultReplicasResponseIterator(request: requests.ListVaultReplicasRequest): AsyncIterableIterator<responses.ListVaultReplicasResponse>;
    /**
       * Lists the vaults in the specified compartment.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning read operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * read operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListVaultsRequest
       * @return ListVaultsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ListVaults.ts.html |here} to see how to use ListVaults API.
       */
    listVaults(listVaultsRequest: requests.ListVaultsRequest): Promise<responses.ListVaultsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listVaultsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.VaultSummary objects
     * contained in responses from the listVaults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVaults(request: requests.ListVaultsRequest): AsyncIterableIterator<model.VaultSummary>;
    /**
     * NOTE: This function is deprecated in favor of listVaultsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listVaults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVaultsResponses(request: requests.ListVaultsRequest): AsyncIterableIterator<responses.ListVaultsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.VaultSummary objects
     * contained in responses from the listVaults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listVaultsRecordIterator(request: requests.ListVaultsRequest): AsyncIterableIterator<model.VaultSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVaults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listVaultsResponseIterator(request: requests.ListVaultsRequest): AsyncIterableIterator<responses.ListVaultsResponse>;
    /**
     * Restores a vault from an encrypted backup file. If a vault
     * with the same OCID already exists, this operation returns a response with a
     * 409 HTTP status error code.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RestoreVaultFromFileRequest
     * @return RestoreVaultFromFileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/RestoreVaultFromFile.ts.html |here} to see how to use RestoreVaultFromFile API.
     */
    restoreVaultFromFile(restoreVaultFromFileRequest: requests.RestoreVaultFromFileRequest): Promise<responses.RestoreVaultFromFileResponse>;
    /**
     * Restores a vault from an encrypted backup file stored in Oracle Cloud Infrastructure Object
     * Storage. If a vault with the same OCID already exists, this operation returns
     * a response with a 409 HTTP status error code.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RestoreVaultFromObjectStoreRequest
     * @return RestoreVaultFromObjectStoreResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/RestoreVaultFromObjectStore.ts.html |here} to see how to use RestoreVaultFromObjectStore API.
     */
    restoreVaultFromObjectStore(restoreVaultFromObjectStoreRequest: requests.RestoreVaultFromObjectStoreRequest): Promise<responses.RestoreVaultFromObjectStoreResponse>;
    /**
       * Schedules the deletion of the specified vault. This sets the lifecycle state of the vault and all keys in it
  * that are not already scheduled for deletion to `PENDING_DELETION` and then deletes them after the
  * retention period ends. The lifecycle state and time of deletion for keys already scheduled for deletion won't
  * change. If any keys in the vault are scheduled to be deleted after the specified time of
  * deletion for the vault, the call is rejected with the error code 409.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ScheduleVaultDeletionRequest
       * @return ScheduleVaultDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/ScheduleVaultDeletion.ts.html |here} to see how to use ScheduleVaultDeletion API.
       */
    scheduleVaultDeletion(scheduleVaultDeletionRequest: requests.ScheduleVaultDeletionRequest): Promise<responses.ScheduleVaultDeletionResponse>;
    /**
       * Updates the properties of a vault. Specifically, you can update the
  * `displayName`, `freeformTags`, and `definedTags` properties. Furthermore,
  * the vault must be in an ACTIVE or CREATING state to be updated.
  * <p>
  As a provisioning operation, this call is subject to a Key Management limit that applies to
  * the total number of requests across all provisioning write operations. Key Management might
  * throttle this call to reject an otherwise valid request when the total rate of provisioning
  * write operations exceeds 10 requests per second for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param UpdateVaultRequest
       * @return UpdateVaultResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/keymanagement/UpdateVault.ts.html |here} to see how to use UpdateVault API.
       */
    updateVault(updateVaultRequest: requests.UpdateVaultRequest): Promise<responses.UpdateVaultResponse>;
}
export {};
