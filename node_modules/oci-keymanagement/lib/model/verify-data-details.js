"use strict";
/**
 * Vault Key Management API
 * Use the Key Management API to manage vaults and keys. For more information, see [Managing Vaults](https://docs.oracle.com/iaas/Content/KeyManagement/Tasks/managingvaults.htm) and [Managing Keys](https://docs.oracle.com/iaas/Content/KeyManagement/Tasks/managingkeys.htm).

 * OpenAPI spec version: release
 * Contact: sparta_kms_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifyDataDetails = void 0;
var VerifyDataDetails;
(function (VerifyDataDetails) {
    let MessageType;
    (function (MessageType) {
        MessageType["Raw"] = "RAW";
        MessageType["Digest"] = "DIGEST";
    })(MessageType = VerifyDataDetails.MessageType || (VerifyDataDetails.MessageType = {}));
    let SigningAlgorithm;
    (function (SigningAlgorithm) {
        SigningAlgorithm["Sha224RsaPkcsPss"] = "SHA_224_RSA_PKCS_PSS";
        SigningAlgorithm["Sha256RsaPkcsPss"] = "SHA_256_RSA_PKCS_PSS";
        SigningAlgorithm["Sha384RsaPkcsPss"] = "SHA_384_RSA_PKCS_PSS";
        SigningAlgorithm["Sha512RsaPkcsPss"] = "SHA_512_RSA_PKCS_PSS";
        SigningAlgorithm["Sha224RsaPkcs1V15"] = "SHA_224_RSA_PKCS1_V1_5";
        SigningAlgorithm["Sha256RsaPkcs1V15"] = "SHA_256_RSA_PKCS1_V1_5";
        SigningAlgorithm["Sha384RsaPkcs1V15"] = "SHA_384_RSA_PKCS1_V1_5";
        SigningAlgorithm["Sha512RsaPkcs1V15"] = "SHA_512_RSA_PKCS1_V1_5";
        SigningAlgorithm["EcdsaSha256"] = "ECDSA_SHA_256";
        SigningAlgorithm["EcdsaSha384"] = "ECDSA_SHA_384";
        SigningAlgorithm["EcdsaSha512"] = "ECDSA_SHA_512";
    })(SigningAlgorithm = VerifyDataDetails.SigningAlgorithm || (VerifyDataDetails.SigningAlgorithm = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    VerifyDataDetails.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    VerifyDataDetails.getDeserializedJsonObj = getDeserializedJsonObj;
})(VerifyDataDetails = exports.VerifyDataDetails || (exports.VerifyDataDetails = {}));
//# sourceMappingURL=verify-data-details.js.map