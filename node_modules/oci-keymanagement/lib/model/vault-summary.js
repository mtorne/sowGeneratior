"use strict";
/**
 * Vault Key Management API
 * Use the Key Management API to manage vaults and keys. For more information, see [Managing Vaults](https://docs.oracle.com/iaas/Content/KeyManagement/Tasks/managingvaults.htm) and [Managing Keys](https://docs.oracle.com/iaas/Content/KeyManagement/Tasks/managingkeys.htm).

 * OpenAPI spec version: release
 * Contact: sparta_kms_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VaultSummary = void 0;
const model = __importStar(require("../model"));
var VaultSummary;
(function (VaultSummary) {
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Creating"] = "CREATING";
        LifecycleState["Active"] = "ACTIVE";
        LifecycleState["Deleting"] = "DELETING";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["PendingDeletion"] = "PENDING_DELETION";
        LifecycleState["SchedulingDeletion"] = "SCHEDULING_DELETION";
        LifecycleState["CancellingDeletion"] = "CANCELLING_DELETION";
        LifecycleState["Updating"] = "UPDATING";
        LifecycleState["BackupInProgress"] = "BACKUP_IN_PROGRESS";
        LifecycleState["Restoring"] = "RESTORING";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = VaultSummary.LifecycleState || (VaultSummary.LifecycleState = {}));
    let VaultType;
    (function (VaultType) {
        VaultType["VirtualPrivate"] = "VIRTUAL_PRIVATE";
        VaultType["External"] = "EXTERNAL";
        VaultType["Default"] = "DEFAULT";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        VaultType["UnknownValue"] = "UNKNOWN_VALUE";
    })(VaultType = VaultSummary.VaultType || (VaultSummary.VaultType = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "externalKeyManagerMetadataSummary": obj.externalKeyManagerMetadataSummary
                ? model.ExternalKeyManagerMetadataSummary.getJsonObj(obj.externalKeyManagerMetadataSummary)
                : undefined
        });
        return jsonObj;
    }
    VaultSummary.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "externalKeyManagerMetadataSummary": obj.externalKeyManagerMetadataSummary
                ? model.ExternalKeyManagerMetadataSummary.getDeserializedJsonObj(obj.externalKeyManagerMetadataSummary)
                : undefined
        });
        return jsonObj;
    }
    VaultSummary.getDeserializedJsonObj = getDeserializedJsonObj;
})(VaultSummary = exports.VaultSummary || (exports.VaultSummary = {}));
//# sourceMappingURL=vault-summary.js.map