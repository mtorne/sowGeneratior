/**
 *
 *
 * OpenAPI spec version: 20241101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
import common = require("oci-common");
/**
 * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/wlms/ListWlsDomains.ts.html |here} to see how to use ListWlsDomainsRequest.
 */
export interface ListWlsDomainsRequest extends common.BaseRequest {
    /**
     * The OCID of the compartment that contains the resources to list. This filter returns
     * only resources contained within the specified compartment.
     *
     */
    "compartmentId"?: string;
    /**
     * A filter to return only resources that match the given lifecycle state. The
     * state value is case-insensitive.
     *
     */
    "lifecycleState"?: string;
    /**
     * The display name.
     */
    "displayName"?: string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the WebLogic domain.
     */
    "id"?: string;
    /**
     * A filter to return WebLogic domains based on the WebLogic version.
     *
     */
    "weblogicVersion"?: ListWlsDomainsRequest.WeblogicVersion;
    /**
     * A filter to return WebLogic domains based on the type of middleware of the WebLogic domain.
     *
     */
    "middlewareType"?: ListWlsDomainsRequest.MiddlewareType;
    /**
     * A filter to return domains based on the patch readiness status.
     *
     */
    "patchReadinessStatus"?: model.PatchReadinessStatus;
    /**
     * The client request ID for tracing.
     */
    "opcRequestId"?: string;
    /**
     * A token that uniquely identifies a request so it can be retried in case of a timeout or
     * server error without risk of executing that same action again. Retry tokens expire after 24
     * hours, but can be invalidated before then due to conflicting operations. For example, if a resource
     * has been deleted and purged from the system, then a retry of the original creation request
     * might be rejected.
     *
     */
    "opcRetryToken"?: string;
    /**
     * The maximum number of items to return.
     */
    "limit"?: number;
    /**
     * The page token that represents the page at which to start retrieving results. The token is usually retrieved from a previous List call.
     */
    "page"?: string;
    /**
     * The sort order is either 'ASC' or 'DESC'.
     */
    "sortOrder"?: ListWlsDomainsRequest.SortOrder;
    /**
     * The field by which to sort the resource. Only one sort order may be provided.
     * Default order for _timeCreated_ is **descending**.
     * Default order for _displayName_ is **ascending**.
     * If no value is specified, _timeCreated_ is default.
     *
     */
    "sortBy"?: ListWlsDomainsRequest.SortBy;
}
export declare namespace ListWlsDomainsRequest {
    enum WeblogicVersion {
        V12214 = "v12.2.1.4",
        V14110 = "v14.1.1.0",
        V14120 = "v14.1.2.0"
    }
    enum MiddlewareType {
        Fmw = "FMW",
        Wls = "WLS"
    }
    enum SortOrder {
        Asc = "ASC",
        Desc = "DESC"
    }
    enum SortBy {
        TimeCreated = "timeCreated",
        DisplayName = "displayName"
    }
}
