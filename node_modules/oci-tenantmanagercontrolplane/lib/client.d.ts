/**
 * Organizations API
 * Use the Organizations API to consolidate multiple OCI tenancies into an organization, and centrally manage your tenancies and organization resources. For more information, see [Organization Management Overview](https://docs.oracle.com/iaas/Content/General/Concepts/organization_management_overview.htm).
 * OpenAPI spec version: 20230401
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { DomainWaiter } from "./domain-waiter";
import { DomainGovernanceWaiter } from "./domaingovernance-waiter";
import { LinkWaiter } from "./link-waiter";
import { OrganizationWaiter } from "./organization-waiter";
import { RecipientInvitationWaiter } from "./recipientinvitation-waiter";
import { SenderInvitationWaiter } from "./senderinvitation-waiter";
import { SubscriptionWaiter } from "./subscription-waiter";
import { WorkRequestWaiter } from "./workrequest-waiter";
declare const Breaker: any;
export declare enum DomainApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DomainClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DomainWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DomainWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DomainWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DomainWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Begins the registration process for claiming a domain.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDomainRequest
     * @return CreateDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/CreateDomain.ts.html |here} to see how to use CreateDomain API.
     */
    createDomain(createDomainRequest: requests.CreateDomainRequest): Promise<responses.CreateDomainResponse>;
    /**
     * Releases the domain, making it available to be claimed again by another tenancy.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDomainRequest
     * @return DeleteDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/DeleteDomain.ts.html |here} to see how to use DeleteDomain API.
     */
    deleteDomain(deleteDomainRequest: requests.DeleteDomainRequest): Promise<responses.DeleteDomainResponse>;
    /**
     * Gets information about the domain.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDomainRequest
     * @return GetDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetDomain.ts.html |here} to see how to use GetDomain API.
     */
    getDomain(getDomainRequest: requests.GetDomainRequest): Promise<responses.GetDomainResponse>;
    /**
     * Return a (paginated) list of domains.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDomainsRequest
     * @return ListDomainsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListDomains.ts.html |here} to see how to use ListDomains API.
     */
    listDomains(listDomainsRequest: requests.ListDomainsRequest): Promise<responses.ListDomainsResponse>;
    /**
     * Updates the domain.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDomainRequest
     * @return UpdateDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/UpdateDomain.ts.html |here} to see how to use UpdateDomain API.
     */
    updateDomain(updateDomainRequest: requests.UpdateDomainRequest): Promise<responses.UpdateDomainResponse>;
}
export declare enum DomainGovernanceApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DomainGovernanceClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DomainGovernanceWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DomainGovernanceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DomainGovernanceWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DomainGovernanceWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Adds domain governance to a claimed domain.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDomainGovernanceRequest
     * @return CreateDomainGovernanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/CreateDomainGovernance.ts.html |here} to see how to use CreateDomainGovernance API.
     */
    createDomainGovernance(createDomainGovernanceRequest: requests.CreateDomainGovernanceRequest): Promise<responses.CreateDomainGovernanceResponse>;
    /**
     * Removes domain governance from a claimed domain.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDomainGovernanceRequest
     * @return DeleteDomainGovernanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/DeleteDomainGovernance.ts.html |here} to see how to use DeleteDomainGovernance API.
     */
    deleteDomainGovernance(deleteDomainGovernanceRequest: requests.DeleteDomainGovernanceRequest): Promise<responses.DeleteDomainGovernanceResponse>;
    /**
     * Gets information about the domain governance entity.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDomainGovernanceRequest
     * @return GetDomainGovernanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetDomainGovernance.ts.html |here} to see how to use GetDomainGovernance API.
     */
    getDomainGovernance(getDomainGovernanceRequest: requests.GetDomainGovernanceRequest): Promise<responses.GetDomainGovernanceResponse>;
    /**
     * Return a (paginated) list of domain governance entities.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDomainGovernancesRequest
     * @return ListDomainGovernancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListDomainGovernances.ts.html |here} to see how to use ListDomainGovernances API.
     */
    listDomainGovernances(listDomainGovernancesRequest: requests.ListDomainGovernancesRequest): Promise<responses.ListDomainGovernancesResponse>;
    /**
     * Updates the domain governance entity.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDomainGovernanceRequest
     * @return UpdateDomainGovernanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/UpdateDomainGovernance.ts.html |here} to see how to use UpdateDomainGovernance API.
     */
    updateDomainGovernance(updateDomainGovernanceRequest: requests.UpdateDomainGovernanceRequest): Promise<responses.UpdateDomainGovernanceResponse>;
}
export declare enum GovernanceApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class GovernanceClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Starts a work request to opt the tenancy in to governance rules.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddGovernanceRequest
     * @return AddGovernanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/AddGovernance.ts.html |here} to see how to use AddGovernance API.
     */
    addGovernance(addGovernanceRequest: requests.AddGovernanceRequest): Promise<responses.AddGovernanceResponse>;
    /**
     * Starts a work request to opt the tenancy out of governance rules.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveGovernanceRequest
     * @return RemoveGovernanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/RemoveGovernance.ts.html |here} to see how to use RemoveGovernance API.
     */
    removeGovernance(removeGovernanceRequest: requests.RemoveGovernanceRequest): Promise<responses.RemoveGovernanceResponse>;
}
export declare enum LinkApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class LinkClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": LinkWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new LinkWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): LinkWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): LinkWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Starts the link termination workflow.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteLinkRequest
     * @return DeleteLinkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/DeleteLink.ts.html |here} to see how to use DeleteLink API.
     */
    deleteLink(deleteLinkRequest: requests.DeleteLinkRequest): Promise<responses.DeleteLinkResponse>;
    /**
     * Gets information about the link.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetLinkRequest
     * @return GetLinkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetLink.ts.html |here} to see how to use GetLink API.
     */
    getLink(getLinkRequest: requests.GetLinkRequest): Promise<responses.GetLinkResponse>;
    /**
     * Return a (paginated) list of links.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListLinksRequest
     * @return ListLinksResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListLinks.ts.html |here} to see how to use ListLinks API.
     */
    listLinks(listLinksRequest: requests.ListLinksRequest): Promise<responses.ListLinksResponse>;
}
export declare enum OrdersApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class OrdersClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Triggers an order activation workflow on behalf of the tenant, given by compartment ID in the body.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ActivateOrderRequest
     * @return ActivateOrderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ActivateOrder.ts.html |here} to see how to use ActivateOrder API.
     */
    activateOrder(activateOrderRequest: requests.ActivateOrderRequest): Promise<responses.ActivateOrderResponse>;
    /**
     * Returns the order details given by the order ID in the JWT.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetOrderRequest
     * @return GetOrderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetOrder.ts.html |here} to see how to use GetOrder API.
     */
    getOrder(getOrderRequest: requests.GetOrderRequest): Promise<responses.GetOrderResponse>;
}
export declare enum OrganizationApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class OrganizationClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": OrganizationWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new OrganizationWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): OrganizationWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): OrganizationWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Approve an organization's child tenancy for transfer.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ApproveOrganizationTenancyForTransferRequest
     * @return ApproveOrganizationTenancyForTransferResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ApproveOrganizationTenancyForTransfer.ts.html |here} to see how to use ApproveOrganizationTenancyForTransfer API.
     */
    approveOrganizationTenancyForTransfer(approveOrganizationTenancyForTransferRequest: requests.ApproveOrganizationTenancyForTransferRequest): Promise<responses.ApproveOrganizationTenancyForTransferResponse>;
    /**
     * Creates a child tenancy asynchronously.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateChildTenancyRequest
     * @return CreateChildTenancyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/CreateChildTenancy.ts.html |here} to see how to use CreateChildTenancy API.
     */
    createChildTenancy(createChildTenancyRequest: requests.CreateChildTenancyRequest): Promise<responses.CreateChildTenancyResponse>;
    /**
     * If certain validations are successful, initiate tenancy termination.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteOrganizationTenancyRequest
     * @return DeleteOrganizationTenancyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/DeleteOrganizationTenancy.ts.html |here} to see how to use DeleteOrganizationTenancy API.
     */
    deleteOrganizationTenancy(deleteOrganizationTenancyRequest: requests.DeleteOrganizationTenancyRequest): Promise<responses.DeleteOrganizationTenancyResponse>;
    /**
     * Gets information about the organization.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetOrganizationRequest
     * @return GetOrganizationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetOrganization.ts.html |here} to see how to use GetOrganization API.
     */
    getOrganization(getOrganizationRequest: requests.GetOrganizationRequest): Promise<responses.GetOrganizationResponse>;
    /**
     * Gets information about the organization's tenancy.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetOrganizationTenancyRequest
     * @return GetOrganizationTenancyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetOrganizationTenancy.ts.html |here} to see how to use GetOrganizationTenancy API.
     */
    getOrganizationTenancy(getOrganizationTenancyRequest: requests.GetOrganizationTenancyRequest): Promise<responses.GetOrganizationTenancyResponse>;
    /**
     * Gets a list of tenancies in the organization.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListOrganizationTenanciesRequest
     * @return ListOrganizationTenanciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListOrganizationTenancies.ts.html |here} to see how to use ListOrganizationTenancies API.
     */
    listOrganizationTenancies(listOrganizationTenanciesRequest: requests.ListOrganizationTenanciesRequest): Promise<responses.ListOrganizationTenanciesResponse>;
    /**
     * Lists organizations associated with the caller.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListOrganizationsRequest
     * @return ListOrganizationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListOrganizations.ts.html |here} to see how to use ListOrganizations API.
     */
    listOrganizations(listOrganizationsRequest: requests.ListOrganizationsRequest): Promise<responses.ListOrganizationsResponse>;
    /**
     * An asynchronous API to restore a tenancy.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RestoreOrganizationTenancyRequest
     * @return RestoreOrganizationTenancyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/RestoreOrganizationTenancy.ts.html |here} to see how to use RestoreOrganizationTenancy API.
     */
    restoreOrganizationTenancy(restoreOrganizationTenancyRequest: requests.RestoreOrganizationTenancyRequest): Promise<responses.RestoreOrganizationTenancyResponse>;
    /**
     * Cancel an organization's child tenancy for transfer.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UnapproveOrganizationTenancyForTransferRequest
     * @return UnapproveOrganizationTenancyForTransferResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/UnapproveOrganizationTenancyForTransfer.ts.html |here} to see how to use UnapproveOrganizationTenancyForTransfer API.
     */
    unapproveOrganizationTenancyForTransfer(unapproveOrganizationTenancyForTransferRequest: requests.UnapproveOrganizationTenancyForTransferRequest): Promise<responses.UnapproveOrganizationTenancyForTransferResponse>;
    /**
     * Map the default subscription to the organization.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateOrganizationRequest
     * @return UpdateOrganizationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/UpdateOrganization.ts.html |here} to see how to use UpdateOrganization API.
     */
    updateOrganization(updateOrganizationRequest: requests.UpdateOrganizationRequest): Promise<responses.UpdateOrganizationResponse>;
}
export declare enum RecipientInvitationApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class RecipientInvitationClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": RecipientInvitationWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new RecipientInvitationWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): RecipientInvitationWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): RecipientInvitationWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Accepts a recipient invitation.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AcceptRecipientInvitationRequest
     * @return AcceptRecipientInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/AcceptRecipientInvitation.ts.html |here} to see how to use AcceptRecipientInvitation API.
     */
    acceptRecipientInvitation(acceptRecipientInvitationRequest: requests.AcceptRecipientInvitationRequest): Promise<responses.AcceptRecipientInvitationResponse>;
    /**
     * Gets information about the recipient invitation.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetRecipientInvitationRequest
     * @return GetRecipientInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetRecipientInvitation.ts.html |here} to see how to use GetRecipientInvitation API.
     */
    getRecipientInvitation(getRecipientInvitationRequest: requests.GetRecipientInvitationRequest): Promise<responses.GetRecipientInvitationResponse>;
    /**
     * Ignores a recipient invitation.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param IgnoreRecipientInvitationRequest
     * @return IgnoreRecipientInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/IgnoreRecipientInvitation.ts.html |here} to see how to use IgnoreRecipientInvitation API.
     */
    ignoreRecipientInvitation(ignoreRecipientInvitationRequest: requests.IgnoreRecipientInvitationRequest): Promise<responses.IgnoreRecipientInvitationResponse>;
    /**
     * Return a (paginated) list of recipient invitations.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListRecipientInvitationsRequest
     * @return ListRecipientInvitationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListRecipientInvitations.ts.html |here} to see how to use ListRecipientInvitations API.
     */
    listRecipientInvitations(listRecipientInvitationsRequest: requests.ListRecipientInvitationsRequest): Promise<responses.ListRecipientInvitationsResponse>;
    /**
     * Updates the recipient invitation.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateRecipientInvitationRequest
     * @return UpdateRecipientInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/UpdateRecipientInvitation.ts.html |here} to see how to use UpdateRecipientInvitation API.
     */
    updateRecipientInvitation(updateRecipientInvitationRequest: requests.UpdateRecipientInvitationRequest): Promise<responses.UpdateRecipientInvitationResponse>;
}
export declare enum SenderInvitationApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class SenderInvitationClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": SenderInvitationWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new SenderInvitationWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): SenderInvitationWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): SenderInvitationWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Cancels a sender invitation.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelSenderInvitationRequest
     * @return CancelSenderInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/CancelSenderInvitation.ts.html |here} to see how to use CancelSenderInvitation API.
     */
    cancelSenderInvitation(cancelSenderInvitationRequest: requests.CancelSenderInvitationRequest): Promise<responses.CancelSenderInvitationResponse>;
    /**
     * Creates a sender invitation and asynchronously sends the invitation to the recipient.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSenderInvitationRequest
     * @return CreateSenderInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/CreateSenderInvitation.ts.html |here} to see how to use CreateSenderInvitation API.
     */
    createSenderInvitation(createSenderInvitationRequest: requests.CreateSenderInvitationRequest): Promise<responses.CreateSenderInvitationResponse>;
    /**
     * Gets information about the sender invitation.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSenderInvitationRequest
     * @return GetSenderInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetSenderInvitation.ts.html |here} to see how to use GetSenderInvitation API.
     */
    getSenderInvitation(getSenderInvitationRequest: requests.GetSenderInvitationRequest): Promise<responses.GetSenderInvitationResponse>;
    /**
     * Return a (paginated) list of sender invitations.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSenderInvitationsRequest
     * @return ListSenderInvitationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListSenderInvitations.ts.html |here} to see how to use ListSenderInvitations API.
     */
    listSenderInvitations(listSenderInvitationsRequest: requests.ListSenderInvitationsRequest): Promise<responses.ListSenderInvitationsResponse>;
    /**
     * Updates the sender invitation.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateSenderInvitationRequest
     * @return UpdateSenderInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/UpdateSenderInvitation.ts.html |here} to see how to use UpdateSenderInvitation API.
     */
    updateSenderInvitation(updateSenderInvitationRequest: requests.UpdateSenderInvitationRequest): Promise<responses.UpdateSenderInvitationResponse>;
}
export declare enum SubscriptionApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class SubscriptionClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": SubscriptionWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new SubscriptionWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): SubscriptionWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): SubscriptionWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Assign the tenancy record identified by the compartment ID to the given subscription ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSubscriptionMappingRequest
     * @return CreateSubscriptionMappingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/CreateSubscriptionMapping.ts.html |here} to see how to use CreateSubscriptionMapping API.
     */
    createSubscriptionMapping(createSubscriptionMappingRequest: requests.CreateSubscriptionMappingRequest): Promise<responses.CreateSubscriptionMappingResponse>;
    /**
     * Delete the subscription mapping details by subscription mapping ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSubscriptionMappingRequest
     * @return DeleteSubscriptionMappingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/DeleteSubscriptionMapping.ts.html |here} to see how to use DeleteSubscriptionMapping API.
     */
    deleteSubscriptionMapping(deleteSubscriptionMappingRequest: requests.DeleteSubscriptionMappingRequest): Promise<responses.DeleteSubscriptionMappingResponse>;
    /**
     * Get the assigned subscription details by assigned subscription ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetAssignedSubscriptionRequest
     * @return GetAssignedSubscriptionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetAssignedSubscription.ts.html |here} to see how to use GetAssignedSubscription API.
     */
    getAssignedSubscription(getAssignedSubscriptionRequest: requests.GetAssignedSubscriptionRequest): Promise<responses.GetAssignedSubscriptionResponse>;
    /**
     * Gets the subscription details by subscription ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSubscriptionRequest
     * @return GetSubscriptionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetSubscription.ts.html |here} to see how to use GetSubscription API.
     */
    getSubscription(getSubscriptionRequest: requests.GetSubscriptionRequest): Promise<responses.GetSubscriptionResponse>;
    /**
     * Get the subscription mapping details by subscription mapping ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSubscriptionMappingRequest
     * @return GetSubscriptionMappingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetSubscriptionMapping.ts.html |here} to see how to use GetSubscriptionMapping API.
     */
    getSubscriptionMapping(getSubscriptionMappingRequest: requests.GetSubscriptionMappingRequest): Promise<responses.GetSubscriptionMappingResponse>;
    /**
     * List line item summaries that a assigned subscription owns.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAssignedSubscriptionLineItemsRequest
     * @return ListAssignedSubscriptionLineItemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListAssignedSubscriptionLineItems.ts.html |here} to see how to use ListAssignedSubscriptionLineItems API.
     */
    listAssignedSubscriptionLineItems(listAssignedSubscriptionLineItemsRequest: requests.ListAssignedSubscriptionLineItemsRequest): Promise<responses.ListAssignedSubscriptionLineItemsResponse>;
    /**
     * Lists subscriptions that are consumed by the compartment. Only the root compartment is allowed.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAssignedSubscriptionsRequest
     * @return ListAssignedSubscriptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListAssignedSubscriptions.ts.html |here} to see how to use ListAssignedSubscriptions API.
     */
    listAssignedSubscriptions(listAssignedSubscriptionsRequest: requests.ListAssignedSubscriptionsRequest): Promise<responses.ListAssignedSubscriptionsResponse>;
    /**
     * List the available regions based on subscription ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAvailableRegionsRequest
     * @return ListAvailableRegionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListAvailableRegions.ts.html |here} to see how to use ListAvailableRegions API.
     */
    listAvailableRegions(listAvailableRegionsRequest: requests.ListAvailableRegionsRequest): Promise<responses.ListAvailableRegionsResponse>;
    /**
     * Lists the line items in a subscription.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSubscriptionLineItemsRequest
     * @return ListSubscriptionLineItemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListSubscriptionLineItems.ts.html |here} to see how to use ListSubscriptionLineItems API.
     */
    listSubscriptionLineItems(listSubscriptionLineItemsRequest: requests.ListSubscriptionLineItemsRequest): Promise<responses.ListSubscriptionLineItemsResponse>;
    /**
     * Lists the subscription mappings for all the subscriptions owned by a given compartmentId. Only the root compartment is allowed.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSubscriptionMappingsRequest
     * @return ListSubscriptionMappingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListSubscriptionMappings.ts.html |here} to see how to use ListSubscriptionMappings API.
     */
    listSubscriptionMappings(listSubscriptionMappingsRequest: requests.ListSubscriptionMappingsRequest): Promise<responses.ListSubscriptionMappingsResponse>;
    /**
     * List the subscriptions that a compartment owns. Only the root compartment is allowed.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSubscriptionsRequest
     * @return ListSubscriptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListSubscriptions.ts.html |here} to see how to use ListSubscriptions API.
     */
    listSubscriptions(listSubscriptionsRequest: requests.ListSubscriptionsRequest): Promise<responses.ListSubscriptionsResponse>;
}
export declare enum WorkRequestApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class WorkRequestClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": WorkRequestWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new WorkRequestWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): WorkRequestWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): WorkRequestWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Gets the status of the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/tenantmanagercontrolplane/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
}
export {};
