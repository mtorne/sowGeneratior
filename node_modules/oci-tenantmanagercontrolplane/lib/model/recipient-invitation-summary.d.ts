/**
 * Organizations API
 * Use the Organizations API to consolidate multiple OCI tenancies into an organization, and centrally manage your tenancies and organization resources. For more information, see [Organization Management Overview](https://docs.oracle.com/iaas/Content/General/Concepts/organization_management_overview.htm).
 * OpenAPI spec version: 20230401
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The summary of the invitation model that the recipient owns.
 */
export interface RecipientInvitationSummary {
    /**
     * OCID of the recipient invitation.
     */
    "id": string;
    /**
     * OCID of the recipient tenancy.
     */
    "compartmentId": string;
    /**
     * A user-created name to describe the invitation. Avoid entering confidential information.
     */
    "displayName": string;
    /**
     * The list of subjects the invitation contains.
     */
    "subjects": Array<model.InvitationSubject>;
    /**
     * OCID of the corresponding sender invitation.
     */
    "senderInvitationId": string;
    /**
     * OCID of the sender tenancy.
     */
    "senderTenancyId": string;
    /**
     * Lifecycle state of the recipient invitation.
     */
    "lifecycleState": model.LifecycleState;
    /**
     * Status of the recipient invitation.
     */
    "status": model.RecipientInvitationStatus;
    /**
     * Date and time when the recipient invitation was created.
     */
    "timeCreated": Date;
    /**
     * Date and time when the recipient invitation was last updated.
     */
    "timeUpdated"?: Date;
    /**
     * Email address of the recipient.
     */
    "recipientEmailAddress"?: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * Usage of system tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace RecipientInvitationSummary {
    function getJsonObj(obj: RecipientInvitationSummary): object;
    function getDeserializedJsonObj(obj: RecipientInvitationSummary): object;
}
