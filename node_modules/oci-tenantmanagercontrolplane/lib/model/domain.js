"use strict";
/**
 * Organizations API
 * Use the Organizations API to consolidate multiple OCI tenancies into an organization, and centrally manage your tenancies and organization resources. For more information, see [Organization Management Overview](https://docs.oracle.com/iaas/Content/General/Concepts/organization_management_overview.htm).
 * OpenAPI spec version: 20230401
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = void 0;
var Domain;
(function (Domain) {
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Active"] = "ACTIVE";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = Domain.LifecycleState || (Domain.LifecycleState = {}));
    let Status;
    (function (Status) {
        Status["Pending"] = "PENDING";
        Status["Releasing"] = "RELEASING";
        Status["Released"] = "RELEASED";
        Status["Expiring"] = "EXPIRING";
        Status["Revoking"] = "REVOKING";
        Status["Revoked"] = "REVOKED";
        Status["Active"] = "ACTIVE";
        Status["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Status["UnknownValue"] = "UNKNOWN_VALUE";
    })(Status = Domain.Status || (Domain.Status = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    Domain.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    Domain.getDeserializedJsonObj = getDeserializedJsonObj;
})(Domain = exports.Domain || (exports.Domain = {}));
//# sourceMappingURL=domain.js.map