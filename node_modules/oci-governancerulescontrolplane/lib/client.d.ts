/**
 * GovernanceRulesControlPlane API
 * A description of the GovernanceRulesControlPlane API
 * OpenAPI spec version: 20220504
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { GovernanceRuleWaiter } from "./governancerule-waiter";
import { WorkRequestWaiter } from "./workrequest-waiter";
declare const Breaker: any;
export declare enum GovernanceRuleApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class GovernanceRuleClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": GovernanceRuleWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new GovernanceRuleWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): GovernanceRuleWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): GovernanceRuleWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Create governance rule in the root compartment only. Either relatedResourceId or template must be supplied.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateGovernanceRuleRequest
     * @return CreateGovernanceRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/CreateGovernanceRule.ts.html |here} to see how to use CreateGovernanceRule API.
     */
    createGovernanceRule(createGovernanceRuleRequest: requests.CreateGovernanceRuleRequest): Promise<responses.CreateGovernanceRuleResponse>;
    /**
     * Create inclusion criterion of type tenancy or tag for the governance rule.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateInclusionCriterionRequest
     * @return CreateInclusionCriterionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/CreateInclusionCriterion.ts.html |here} to see how to use CreateInclusionCriterion API.
     */
    createInclusionCriterion(createInclusionCriterionRequest: requests.CreateInclusionCriterionRequest): Promise<responses.CreateInclusionCriterionResponse>;
    /**
     * Delete the specified governance rule.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteGovernanceRuleRequest
     * @return DeleteGovernanceRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/DeleteGovernanceRule.ts.html |here} to see how to use DeleteGovernanceRule API.
     */
    deleteGovernanceRule(deleteGovernanceRuleRequest: requests.DeleteGovernanceRuleRequest): Promise<responses.DeleteGovernanceRuleResponse>;
    /**
     * Delete the specified inclusion criterion.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteInclusionCriterionRequest
     * @return DeleteInclusionCriterionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/DeleteInclusionCriterion.ts.html |here} to see how to use DeleteInclusionCriterion API.
     */
    deleteInclusionCriterion(deleteInclusionCriterionRequest: requests.DeleteInclusionCriterionRequest): Promise<responses.DeleteInclusionCriterionResponse>;
    /**
     * Get the specified enforced governance rule's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetEnforcedGovernanceRuleRequest
     * @return GetEnforcedGovernanceRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/GetEnforcedGovernanceRule.ts.html |here} to see how to use GetEnforcedGovernanceRule API.
     */
    getEnforcedGovernanceRule(getEnforcedGovernanceRuleRequest: requests.GetEnforcedGovernanceRuleRequest): Promise<responses.GetEnforcedGovernanceRuleResponse>;
    /**
     * Get the specified governance rule's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetGovernanceRuleRequest
     * @return GetGovernanceRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/GetGovernanceRule.ts.html |here} to see how to use GetGovernanceRule API.
     */
    getGovernanceRule(getGovernanceRuleRequest: requests.GetGovernanceRuleRequest): Promise<responses.GetGovernanceRuleResponse>;
    /**
     * Get the specified inclusion criterion's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetInclusionCriterionRequest
     * @return GetInclusionCriterionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/GetInclusionCriterion.ts.html |here} to see how to use GetInclusionCriterion API.
     */
    getInclusionCriterion(getInclusionCriterionRequest: requests.GetInclusionCriterionRequest): Promise<responses.GetInclusionCriterionResponse>;
    /**
     * Get the specified tenancy attachment's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetTenancyAttachmentRequest
     * @return GetTenancyAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/GetTenancyAttachment.ts.html |here} to see how to use GetTenancyAttachment API.
     */
    getTenancyAttachment(getTenancyAttachmentRequest: requests.GetTenancyAttachmentRequest): Promise<responses.GetTenancyAttachmentResponse>;
    /**
     * List enforced governance rules. Either compartment id or enforced governance rule id must be supplied.
     * An optional governance rule type or a display name can also be supplied.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListEnforcedGovernanceRulesRequest
     * @return ListEnforcedGovernanceRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/ListEnforcedGovernanceRules.ts.html |here} to see how to use ListEnforcedGovernanceRules API.
     */
    listEnforcedGovernanceRules(listEnforcedGovernanceRulesRequest: requests.ListEnforcedGovernanceRulesRequest): Promise<responses.ListEnforcedGovernanceRulesResponse>;
    /**
     * List governance rules. Either compartment id or governance rule id must be supplied.
     * An optional lifecycle state, display name or a governance rule type can also be supplied.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListGovernanceRulesRequest
     * @return ListGovernanceRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/ListGovernanceRules.ts.html |here} to see how to use ListGovernanceRules API.
     */
    listGovernanceRules(listGovernanceRulesRequest: requests.ListGovernanceRulesRequest): Promise<responses.ListGovernanceRulesResponse>;
    /**
     * List inclusion criteria associated with a governance rule. Governance rule id must be supplied.
     * An optional inclusion criterion id or a lifecycle state can also be supplied.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListInclusionCriteriaRequest
     * @return ListInclusionCriteriaResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/ListInclusionCriteria.ts.html |here} to see how to use ListInclusionCriteria API.
     */
    listInclusionCriteria(listInclusionCriteriaRequest: requests.ListInclusionCriteriaRequest): Promise<responses.ListInclusionCriteriaResponse>;
    /**
     * List tenancy attachments. Either compartment id, governance rule id or tenancy attachment id must be supplied.
     * An optional lifecycle state or a child tenancy id can also be supplied.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListTenancyAttachmentsRequest
     * @return ListTenancyAttachmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/ListTenancyAttachments.ts.html |here} to see how to use ListTenancyAttachments API.
     */
    listTenancyAttachments(listTenancyAttachmentsRequest: requests.ListTenancyAttachmentsRequest): Promise<responses.ListTenancyAttachmentsResponse>;
    /**
     * Retry the creation of the specified governance rule.
     * Used by the tenancy admins when all the workflow retries have exhausted.
     * When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RetryGovernanceRuleRequest
     * @return RetryGovernanceRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/RetryGovernanceRule.ts.html |here} to see how to use RetryGovernanceRule API.
     */
    retryGovernanceRule(retryGovernanceRuleRequest: requests.RetryGovernanceRuleRequest): Promise<responses.RetryGovernanceRuleResponse>;
    /**
     * Retry governance rule application for the specified tenancy attachment id.
     * Used by the tenancy admins when all the workflow retries have exhausted.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RetryTenancyAttachmentRequest
     * @return RetryTenancyAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/RetryTenancyAttachment.ts.html |here} to see how to use RetryTenancyAttachment API.
     */
    retryTenancyAttachment(retryTenancyAttachmentRequest: requests.RetryTenancyAttachmentRequest): Promise<responses.RetryTenancyAttachmentResponse>;
    /**
     * Update the specified governance rule.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateGovernanceRuleRequest
     * @return UpdateGovernanceRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/UpdateGovernanceRule.ts.html |here} to see how to use UpdateGovernanceRule API.
     */
    updateGovernanceRule(updateGovernanceRuleRequest: requests.UpdateGovernanceRuleRequest): Promise<responses.UpdateGovernanceRuleResponse>;
}
export declare enum WorkRequestApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class WorkRequestClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": WorkRequestWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new WorkRequestWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): WorkRequestWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): WorkRequestWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Cancels the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest: requests.CancelWorkRequestRequest): Promise<responses.CancelWorkRequestResponse>;
    /**
     * Gets details of the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Returns a (paginated) list of errors for the work request with the given ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Returns a (paginated) list of logs for the work request with the given ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/governancerulescontrolplane/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
}
export {};
