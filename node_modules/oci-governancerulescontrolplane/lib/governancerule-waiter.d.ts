/**
 * GovernanceRulesControlPlane API
 * A description of the GovernanceRulesControlPlane API
 * OpenAPI spec version: 20220504
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { GovernanceRuleClient } from "./client";
export declare class GovernanceRuleWaiter {
    private client;
    private readonly config?;
    constructor(client: GovernanceRuleClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forEnforcedGovernanceRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetEnforcedGovernanceRuleResponse | null (null in case of 404 response)
     */
    forEnforcedGovernanceRule(request: serviceRequests.GetEnforcedGovernanceRuleRequest, ...targetStates: models.GovernanceRuleLifecycleState[]): Promise<serviceResponses.GetEnforcedGovernanceRuleResponse | null>;
    /**
     * Waits forGovernanceRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetGovernanceRuleResponse | null (null in case of 404 response)
     */
    forGovernanceRule(request: serviceRequests.GetGovernanceRuleRequest, ...targetStates: models.GovernanceRuleLifecycleState[]): Promise<serviceResponses.GetGovernanceRuleResponse | null>;
    /**
     * Waits forInclusionCriterion till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetInclusionCriterionResponse | null (null in case of 404 response)
     */
    forInclusionCriterion(request: serviceRequests.GetInclusionCriterionRequest, ...targetStates: models.InclusionCriterion.LifecycleState[]): Promise<serviceResponses.GetInclusionCriterionResponse | null>;
    /**
     * Waits forTenancyAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTenancyAttachmentResponse | null (null in case of 404 response)
     */
    forTenancyAttachment(request: serviceRequests.GetTenancyAttachmentRequest, ...targetStates: models.TenancyAttachment.LifecycleState[]): Promise<serviceResponses.GetTenancyAttachmentResponse | null>;
}
