"use strict";
/**
 * Generative AI Service Management API
 * OCI Generative AI is a fully managed service that provides a set of state-of-the-art, customizable large language models (LLMs) that cover a wide range of use cases for text generation, summarization, and text embeddings.

Use the Generative AI service management API to create and manage {@link DedicatedAiCluster}, {@link Endpoint}, {@link Model}, and {@link WorkRequest} in the Generative AI service. For example, create a custom model by fine-tuning an out-of-the-box model using your own data, on a fine-tuning dedicated AI cluster. Then, create a hosting dedicated AI cluster with an endpoint to host your custom model.

To access your custom model endpoints, or to try the out-of-the-box models to generate text, summarize, and create text embeddings see the [Generative AI Inference API](https://docs.oracle.com/iaas/api/#/en/generative-ai-inference/latest/).

To learn more about the service, see the [Generative AI documentation](https://docs.oracle.com/iaas/Content/generative-ai/home.htm).

 * OpenAPI spec version: 20231130
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VanillaTrainingConfig = exports.TextGenerationModelMetrics = exports.TFewTrainingConfig = exports.ObjectStorageDataset = exports.LoraTrainingConfig = exports.DedicatedAiClusterHostingCapacity = exports.ChatModelMetrics = exports.WorkRequestSummaryCollection = exports.WorkRequestSummary = exports.WorkRequestResourceMetadataKey = exports.WorkRequestResource = exports.WorkRequestLogEntryCollection = exports.WorkRequestLogEntry = exports.WorkRequestErrorCollection = exports.WorkRequestError = exports.WorkRequest = exports.UpdateModelDetails = exports.UpdateEndpointDetails = exports.UpdateDedicatedAiClusterDetails = exports.TrainingConfig = exports.SortOrder = exports.OperationType = exports.OperationStatus = exports.ModelSummary = exports.ModelMetrics = exports.ModelCollection = exports.ModelCapability = exports.Model = exports.FineTuneDetails = exports.EndpointSummary = exports.EndpointCollection = exports.Endpoint = exports.DedicatedAiClusterSummary = exports.DedicatedAiClusterCollection = exports.DedicatedAiClusterCapacity = exports.DedicatedAiCluster = exports.Dataset = exports.CreateModelDetails = exports.CreateEndpointDetails = exports.CreateDedicatedAiClusterDetails = exports.ContentModerationConfig = exports.ChangeModelCompartmentDetails = exports.ChangeEndpointCompartmentDetails = exports.ChangeDedicatedAiClusterCompartmentDetails = exports.ActionType = void 0;
const ActionType = __importStar(require("./action-type"));
exports.ActionType = ActionType.ActionType;
const ChangeDedicatedAiClusterCompartmentDetails = __importStar(require("./change-dedicated-ai-cluster-compartment-details"));
exports.ChangeDedicatedAiClusterCompartmentDetails = ChangeDedicatedAiClusterCompartmentDetails.ChangeDedicatedAiClusterCompartmentDetails;
const ChangeEndpointCompartmentDetails = __importStar(require("./change-endpoint-compartment-details"));
exports.ChangeEndpointCompartmentDetails = ChangeEndpointCompartmentDetails.ChangeEndpointCompartmentDetails;
const ChangeModelCompartmentDetails = __importStar(require("./change-model-compartment-details"));
exports.ChangeModelCompartmentDetails = ChangeModelCompartmentDetails.ChangeModelCompartmentDetails;
const ContentModerationConfig = __importStar(require("./content-moderation-config"));
exports.ContentModerationConfig = ContentModerationConfig.ContentModerationConfig;
const CreateDedicatedAiClusterDetails = __importStar(require("./create-dedicated-ai-cluster-details"));
exports.CreateDedicatedAiClusterDetails = CreateDedicatedAiClusterDetails.CreateDedicatedAiClusterDetails;
const CreateEndpointDetails = __importStar(require("./create-endpoint-details"));
exports.CreateEndpointDetails = CreateEndpointDetails.CreateEndpointDetails;
const CreateModelDetails = __importStar(require("./create-model-details"));
exports.CreateModelDetails = CreateModelDetails.CreateModelDetails;
const Dataset = __importStar(require("./dataset"));
exports.Dataset = Dataset.Dataset;
const DedicatedAiCluster = __importStar(require("./dedicated-ai-cluster"));
exports.DedicatedAiCluster = DedicatedAiCluster.DedicatedAiCluster;
const DedicatedAiClusterCapacity = __importStar(require("./dedicated-ai-cluster-capacity"));
exports.DedicatedAiClusterCapacity = DedicatedAiClusterCapacity.DedicatedAiClusterCapacity;
const DedicatedAiClusterCollection = __importStar(require("./dedicated-ai-cluster-collection"));
exports.DedicatedAiClusterCollection = DedicatedAiClusterCollection.DedicatedAiClusterCollection;
const DedicatedAiClusterSummary = __importStar(require("./dedicated-ai-cluster-summary"));
exports.DedicatedAiClusterSummary = DedicatedAiClusterSummary.DedicatedAiClusterSummary;
const Endpoint = __importStar(require("./endpoint"));
exports.Endpoint = Endpoint.Endpoint;
const EndpointCollection = __importStar(require("./endpoint-collection"));
exports.EndpointCollection = EndpointCollection.EndpointCollection;
const EndpointSummary = __importStar(require("./endpoint-summary"));
exports.EndpointSummary = EndpointSummary.EndpointSummary;
const FineTuneDetails = __importStar(require("./fine-tune-details"));
exports.FineTuneDetails = FineTuneDetails.FineTuneDetails;
const Model = __importStar(require("./model"));
exports.Model = Model.Model;
const ModelCapability = __importStar(require("./model-capability"));
exports.ModelCapability = ModelCapability.ModelCapability;
const ModelCollection = __importStar(require("./model-collection"));
exports.ModelCollection = ModelCollection.ModelCollection;
const ModelMetrics = __importStar(require("./model-metrics"));
exports.ModelMetrics = ModelMetrics.ModelMetrics;
const ModelSummary = __importStar(require("./model-summary"));
exports.ModelSummary = ModelSummary.ModelSummary;
const OperationStatus = __importStar(require("./operation-status"));
exports.OperationStatus = OperationStatus.OperationStatus;
const OperationType = __importStar(require("./operation-type"));
exports.OperationType = OperationType.OperationType;
const SortOrder = __importStar(require("./sort-order"));
exports.SortOrder = SortOrder.SortOrder;
const TrainingConfig = __importStar(require("./training-config"));
exports.TrainingConfig = TrainingConfig.TrainingConfig;
const UpdateDedicatedAiClusterDetails = __importStar(require("./update-dedicated-ai-cluster-details"));
exports.UpdateDedicatedAiClusterDetails = UpdateDedicatedAiClusterDetails.UpdateDedicatedAiClusterDetails;
const UpdateEndpointDetails = __importStar(require("./update-endpoint-details"));
exports.UpdateEndpointDetails = UpdateEndpointDetails.UpdateEndpointDetails;
const UpdateModelDetails = __importStar(require("./update-model-details"));
exports.UpdateModelDetails = UpdateModelDetails.UpdateModelDetails;
const WorkRequest = __importStar(require("./work-request"));
exports.WorkRequest = WorkRequest.WorkRequest;
const WorkRequestError = __importStar(require("./work-request-error"));
exports.WorkRequestError = WorkRequestError.WorkRequestError;
const WorkRequestErrorCollection = __importStar(require("./work-request-error-collection"));
exports.WorkRequestErrorCollection = WorkRequestErrorCollection.WorkRequestErrorCollection;
const WorkRequestLogEntry = __importStar(require("./work-request-log-entry"));
exports.WorkRequestLogEntry = WorkRequestLogEntry.WorkRequestLogEntry;
const WorkRequestLogEntryCollection = __importStar(require("./work-request-log-entry-collection"));
exports.WorkRequestLogEntryCollection = WorkRequestLogEntryCollection.WorkRequestLogEntryCollection;
const WorkRequestResource = __importStar(require("./work-request-resource"));
exports.WorkRequestResource = WorkRequestResource.WorkRequestResource;
const WorkRequestResourceMetadataKey = __importStar(require("./work-request-resource-metadata-key"));
exports.WorkRequestResourceMetadataKey = WorkRequestResourceMetadataKey.WorkRequestResourceMetadataKey;
const WorkRequestSummary = __importStar(require("./work-request-summary"));
exports.WorkRequestSummary = WorkRequestSummary.WorkRequestSummary;
const WorkRequestSummaryCollection = __importStar(require("./work-request-summary-collection"));
exports.WorkRequestSummaryCollection = WorkRequestSummaryCollection.WorkRequestSummaryCollection;
const ChatModelMetrics = __importStar(require("./chat-model-metrics"));
exports.ChatModelMetrics = ChatModelMetrics.ChatModelMetrics;
const DedicatedAiClusterHostingCapacity = __importStar(require("./dedicated-ai-cluster-hosting-capacity"));
exports.DedicatedAiClusterHostingCapacity = DedicatedAiClusterHostingCapacity.DedicatedAiClusterHostingCapacity;
const LoraTrainingConfig = __importStar(require("./lora-training-config"));
exports.LoraTrainingConfig = LoraTrainingConfig.LoraTrainingConfig;
const ObjectStorageDataset = __importStar(require("./object-storage-dataset"));
exports.ObjectStorageDataset = ObjectStorageDataset.ObjectStorageDataset;
const TFewTrainingConfig = __importStar(require("./t-few-training-config"));
exports.TFewTrainingConfig = TFewTrainingConfig.TFewTrainingConfig;
const TextGenerationModelMetrics = __importStar(require("./text-generation-model-metrics"));
exports.TextGenerationModelMetrics = TextGenerationModelMetrics.TextGenerationModelMetrics;
const VanillaTrainingConfig = __importStar(require("./vanilla-training-config"));
exports.VanillaTrainingConfig = VanillaTrainingConfig.VanillaTrainingConfig;
//# sourceMappingURL=index.js.map