/**
 * Globally Distributed Database
 * Use the Globally Distributed Database service APIs to create and manage distributed databases.
 * OpenAPI spec version: 20230301
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { ShardedDatabaseServiceWaiter } from "./shardeddatabaseservice-waiter";
declare const Breaker: any;
export declare enum ShardedDatabaseServiceApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class ShardedDatabaseServiceClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": ShardedDatabaseServiceWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new ShardedDatabaseServiceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): ShardedDatabaseServiceWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): ShardedDatabaseServiceWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Move the private endpoint to the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangePrivateEndpointCompartmentRequest
     * @return ChangePrivateEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ChangePrivateEndpointCompartment.ts.html |here} to see how to use ChangePrivateEndpointCompartment API.
     */
    changePrivateEndpointCompartment(changePrivateEndpointCompartmentRequest: requests.ChangePrivateEndpointCompartmentRequest): Promise<responses.ChangePrivateEndpointCompartmentResponse>;
    /**
     * Move the sharded database database and its dependent resources to the specified compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeShardedDatabaseCompartmentRequest
     * @return ChangeShardedDatabaseCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ChangeShardedDatabaseCompartment.ts.html |here} to see how to use ChangeShardedDatabaseCompartment API.
     */
    changeShardedDatabaseCompartment(changeShardedDatabaseCompartmentRequest: requests.ChangeShardedDatabaseCompartmentRequest): Promise<responses.ChangeShardedDatabaseCompartmentResponse>;
    /**
     * Configure new Global Service Manager(GSM aka shard manager) instances for the sharded database. Specify the names
     * of old GSM instances that need to be replaced via parameter oldGsmNames in the request payload. Also specify
     * whether rotated GSM instances shall be provisioned with latest image of GSM software or the image used by
     * existing GSM instances shall be used.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ConfigureShardedDatabaseGsmsRequest
     * @return ConfigureShardedDatabaseGsmsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ConfigureShardedDatabaseGsms.ts.html |here} to see how to use ConfigureShardedDatabaseGsms API.
     */
    configureShardedDatabaseGsms(configureShardedDatabaseGsmsRequest: requests.ConfigureShardedDatabaseGsmsRequest): Promise<responses.ConfigureShardedDatabaseGsmsResponse>;
    /**
     * Once all components of sharded database are provisioned, and signed GSM certificates are successfully uploaded, this
     * api shall be invoked to configure sharding on the sharded database. Note that this 'ConfigureSharding' API also needs to be
     * invoked after successfully adding a new shard to the sharded database using PATCH api. If this API is not
     * invoked after successfully adding a new shard, then that new shard will not be a participant in sharding topology of
     * the sharded database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ConfigureShardingRequest
     * @return ConfigureShardingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ConfigureSharding.ts.html |here} to see how to use ConfigureSharding API.
     */
    configureSharding(configureShardingRequest: requests.ConfigureShardingRequest): Promise<responses.ConfigureShardingResponse>;
    /**
     * Creates a PrivateEndpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreatePrivateEndpointRequest
     * @return CreatePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/CreatePrivateEndpoint.ts.html |here} to see how to use CreatePrivateEndpoint API.
     */
    createPrivateEndpoint(createPrivateEndpointRequest: requests.CreatePrivateEndpointRequest): Promise<responses.CreatePrivateEndpointResponse>;
    /**
     * Creates a Sharded Database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateShardedDatabaseRequest
     * @return CreateShardedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/CreateShardedDatabase.ts.html |here} to see how to use CreateShardedDatabase API.
     */
    createShardedDatabase(createShardedDatabaseRequest: requests.CreateShardedDatabaseRequest): Promise<responses.CreateShardedDatabaseResponse>;
    /**
     * Delete the given private endpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeletePrivateEndpointRequest
     * @return DeletePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/DeletePrivateEndpoint.ts.html |here} to see how to use DeletePrivateEndpoint API.
     */
    deletePrivateEndpoint(deletePrivateEndpointRequest: requests.DeletePrivateEndpointRequest): Promise<responses.DeletePrivateEndpointResponse>;
    /**
     * Terminate the given sharded databases.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteShardedDatabaseRequest
     * @return DeleteShardedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/DeleteShardedDatabase.ts.html |here} to see how to use DeleteShardedDatabase API.
     */
    deleteShardedDatabase(deleteShardedDatabaseRequest: requests.DeleteShardedDatabaseRequest): Promise<responses.DeleteShardedDatabaseResponse>;
    /**
     * Generate the common certificate signing request for GSMs. Download the <sdb-prefix>.csr file from
     * API response. Users can use this .csr file to generate the CA signed certificate, and as a next step
     * use 'uploadSignedCertificateAndGenerateWallet' API to upload the CA signed certificate to GSM, and
     * generate wallets for the GSM instances of the sharded database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadGsmCertificateSigningRequestRequest
     * @return DownloadGsmCertificateSigningRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/DownloadGsmCertificateSigningRequest.ts.html |here} to see how to use DownloadGsmCertificateSigningRequest API.
     */
    downloadGsmCertificateSigningRequest(downloadGsmCertificateSigningRequestRequest: requests.DownloadGsmCertificateSigningRequestRequest): Promise<responses.DownloadGsmCertificateSigningRequestResponse>;
    /**
     * Gets the Sharded Database Connection Strings.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param FetchConnectionStringRequest
     * @return FetchConnectionStringResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/FetchConnectionString.ts.html |here} to see how to use FetchConnectionString API.
     */
    fetchConnectionString(fetchConnectionStringRequest: requests.FetchConnectionStringRequest): Promise<responses.FetchConnectionStringResponse>;
    /**
     * List of cloudAutonomousVMClusters for the given tenancy, that can be sharded.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param FetchShardableCloudAutonomousVmClustersRequest
     * @return FetchShardableCloudAutonomousVmClustersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/FetchShardableCloudAutonomousVmClusters.ts.html |here} to see how to use FetchShardableCloudAutonomousVmClusters API.
     */
    fetchShardableCloudAutonomousVmClusters(fetchShardableCloudAutonomousVmClustersRequest: requests.FetchShardableCloudAutonomousVmClustersRequest): Promise<responses.FetchShardableCloudAutonomousVmClustersResponse>;
    /**
     * Generate the certificate signing request for GSM instances of the sharded database. Once certificate signing
     * request is generated, then customers can download the certificate signing request using
     * 'downloadGsmCertificateSigningRequest' api call.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateGsmCertificateSigningRequestRequest
     * @return GenerateGsmCertificateSigningRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/GenerateGsmCertificateSigningRequest.ts.html |here} to see how to use GenerateGsmCertificateSigningRequest API.
     */
    generateGsmCertificateSigningRequest(generateGsmCertificateSigningRequestRequest: requests.GenerateGsmCertificateSigningRequestRequest): Promise<responses.GenerateGsmCertificateSigningRequestResponse>;
    /**
     * Generate the wallet associated with sharded database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GenerateWalletRequest
     * @return GenerateWalletResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/GenerateWallet.ts.html |here} to see how to use GenerateWallet API.
     */
    generateWallet(generateWalletRequest: requests.GenerateWalletRequest): Promise<responses.GenerateWalletResponse>;
    /**
     * Get the PrivateEndpoint resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPrivateEndpointRequest
     * @return GetPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/GetPrivateEndpoint.ts.html |here} to see how to use GetPrivateEndpoint API.
     */
    getPrivateEndpoint(getPrivateEndpointRequest: requests.GetPrivateEndpointRequest): Promise<responses.GetPrivateEndpointResponse>;
    /**
     * Gets the details of the Sharded database identified by given id.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetShardedDatabaseRequest
     * @return GetShardedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/GetShardedDatabase.ts.html |here} to see how to use GetShardedDatabase API.
     */
    getShardedDatabase(getShardedDatabaseRequest: requests.GetShardedDatabaseRequest): Promise<responses.GetShardedDatabaseResponse>;
    /**
     * Gets details of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * List of PrivateEndpoints.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPrivateEndpointsRequest
     * @return ListPrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ListPrivateEndpoints.ts.html |here} to see how to use ListPrivateEndpoints API.
     */
    listPrivateEndpoints(listPrivateEndpointsRequest: requests.ListPrivateEndpointsRequest): Promise<responses.ListPrivateEndpointsResponse>;
    /**
     * List of Sharded databases.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListShardedDatabasesRequest
     * @return ListShardedDatabasesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ListShardedDatabases.ts.html |here} to see how to use ListShardedDatabases API.
     */
    listShardedDatabases(listShardedDatabasesRequest: requests.ListShardedDatabasesRequest): Promise<responses.ListShardedDatabasesResponse>;
    /**
     * Returns a (paginated) list of errors for the work request with the given ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Returns a (paginated) list of logs for the work request with the given ID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * Patch operation to add, remove or update shards to the sharded database topology. In single patch
     * operation, multiple shards can be either added, or removed or updated. Combination of inserts, update
     * and remove in single operation is not allowed.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchShardedDatabaseRequest
     * @return PatchShardedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/PatchShardedDatabase.ts.html |here} to see how to use PatchShardedDatabase API.
     */
    patchShardedDatabase(patchShardedDatabaseRequest: requests.PatchShardedDatabaseRequest): Promise<responses.PatchShardedDatabaseResponse>;
    /**
     * Sharded database pre-validation request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PrevalidateShardedDatabaseRequest
     * @return PrevalidateShardedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/PrevalidateShardedDatabase.ts.html |here} to see how to use PrevalidateShardedDatabase API.
     */
    prevalidateShardedDatabase(prevalidateShardedDatabaseRequest: requests.PrevalidateShardedDatabaseRequest): Promise<responses.PrevalidateShardedDatabaseResponse>;
    /**
     * API to reinstate the proxy instances associated with the private endpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ReinstateProxyInstanceRequest
     * @return ReinstateProxyInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ReinstateProxyInstance.ts.html |here} to see how to use ReinstateProxyInstance API.
     */
    reinstateProxyInstance(reinstateProxyInstanceRequest: requests.ReinstateProxyInstanceRequest): Promise<responses.ReinstateProxyInstanceResponse>;
    /**
     * Start the shards, catalog and GSMs of Sharded Database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StartShardedDatabaseRequest
     * @return StartShardedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/StartShardedDatabase.ts.html |here} to see how to use StartShardedDatabase API.
     */
    startShardedDatabase(startShardedDatabaseRequest: requests.StartShardedDatabaseRequest): Promise<responses.StartShardedDatabaseResponse>;
    /**
     * Stop the shards, catalog and GSM instances for the sharded database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StopShardedDatabaseRequest
     * @return StopShardedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/StopShardedDatabase.ts.html |here} to see how to use StopShardedDatabase API.
     */
    stopShardedDatabase(stopShardedDatabaseRequest: requests.StopShardedDatabaseRequest): Promise<responses.StopShardedDatabaseResponse>;
    /**
     * Updates the configuration of privateendpoint.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdatePrivateEndpointRequest
     * @return UpdatePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/UpdatePrivateEndpoint.ts.html |here} to see how to use UpdatePrivateEndpoint API.
     */
    updatePrivateEndpoint(updatePrivateEndpointRequest: requests.UpdatePrivateEndpointRequest): Promise<responses.UpdatePrivateEndpointResponse>;
    /**
     * Updates the configuration of sharded database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateShardedDatabaseRequest
     * @return UpdateShardedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/UpdateShardedDatabase.ts.html |here} to see how to use UpdateShardedDatabase API.
     */
    updateShardedDatabase(updateShardedDatabaseRequest: requests.UpdateShardedDatabaseRequest): Promise<responses.UpdateShardedDatabaseResponse>;
    /**
     * Upload the CA signed certificate to the GSM instances and generate wallets for GSM instances of the
     * sharded database. Customer shall provide the CA signed certificate key details by adding the certificate
     * in request body.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UploadSignedCertificateAndGenerateWalletRequest
     * @return UploadSignedCertificateAndGenerateWalletResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/UploadSignedCertificateAndGenerateWallet.ts.html |here} to see how to use UploadSignedCertificateAndGenerateWallet API.
     */
    uploadSignedCertificateAndGenerateWallet(uploadSignedCertificateAndGenerateWalletRequest: requests.UploadSignedCertificateAndGenerateWalletRequest): Promise<responses.UploadSignedCertificateAndGenerateWalletResponse>;
    /**
     * Validate the network connectivity between components of sharded database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ValidateNetworkRequest
     * @return ValidateNetworkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/globallydistributeddatabase/ValidateNetwork.ts.html |here} to see how to use ValidateNetwork API.
     */
    validateNetwork(validateNetworkRequest: requests.ValidateNetworkRequest): Promise<responses.ValidateNetworkResponse>;
}
export {};
