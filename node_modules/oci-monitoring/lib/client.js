"use strict";
/**
 * Monitoring API
 * Use the Monitoring API to manage metric queries and alarms for assessing the health, capacity, and performance of your cloud resources.
Endpoints vary by operation. For PostMetricData, use the {@code telemetry-ingestion} endpoints; for all other operations, use the {@code telemetry} endpoints.
For more information, see
[the Monitoring documentation](https://docs.oracle.com/iaas/Content/Monitoring/home.htm).

 * OpenAPI spec version: 20180401
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringClient = exports.MonitoringApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const monitoring_waiter_1 = require("./monitoring-waiter");
const oci_common_2 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var MonitoringApiKeys;
(function (MonitoringApiKeys) {
})(MonitoringApiKeys = exports.MonitoringApiKeys || (exports.MonitoringApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class MonitoringClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "Monitoring";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("monitoring")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("monitoring");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20180401";
        if (this.logger)
            this.logger.info(`MonitoringClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(MonitoringClient.serviceEndpointTemplate, this._region, MonitoringClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(MonitoringClient.serviceEndpointTemplate, this._regionId, MonitoringClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(MonitoringClient.serviceEndpointTemplate, region, MonitoringClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(MonitoringClient.serviceEndpointTemplate, regionId, MonitoringClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new MonitoringWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new monitoring_waiter_1.MonitoringWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Moves an alarm into a different compartment within the same tenancy.
     * For more information, see
     * [Moving an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/change-compartment-alarm.htm).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeAlarmCompartmentRequest
     * @return ChangeAlarmCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ChangeAlarmCompartment.ts.html |here} to see how to use ChangeAlarmCompartment API.
     */
    changeAlarmCompartment(changeAlarmCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#changeAlarmCompartment.");
            const operationName = "changeAlarmCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Alarm/ChangeAlarmCompartment";
            const pathParams = {
                "{alarmId}": changeAlarmCompartmentRequest.alarmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAlarmCompartmentRequest.ifMatch,
                "opc-request-id": changeAlarmCompartmentRequest.opcRequestId,
                "opc-retry-token": changeAlarmCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAlarmCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAlarmCompartmentRequest.changeAlarmCompartmentDetails, "ChangeAlarmCompartmentDetails", model.ChangeAlarmCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new alarm in the specified compartment.
  * For more information, see
  * [Creating an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/create-alarm.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateAlarmRequest
       * @return CreateAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/CreateAlarm.ts.html |here} to see how to use CreateAlarm API.
       */
    createAlarm(createAlarmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#createAlarm.");
            const operationName = "createAlarm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Alarm/CreateAlarm";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createAlarmRequest.opcRequestId,
                "opc-retry-token": createAlarmRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAlarmRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAlarmRequest.createAlarmDetails, "CreateAlarmDetails", model.CreateAlarmDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarm",
                    bodyModel: model.Alarm,
                    type: "model.Alarm",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new alarm suppression at the specified level (alarm-wide or dimension-specific).
  * For more information, see
  * [Adding an Alarm-wide Suppression](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/add-alarm-suppression.htm) and
  * [Adding a Dimension-Specific Alarm Suppression](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/create-alarm-suppression.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateAlarmSuppressionRequest
       * @return CreateAlarmSuppressionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/CreateAlarmSuppression.ts.html |here} to see how to use CreateAlarmSuppression API.
       */
    createAlarmSuppression(createAlarmSuppressionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#createAlarmSuppression.");
            const operationName = "createAlarmSuppression";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmSuppression/CreateAlarmSuppression";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createAlarmSuppressionRequest.opcRequestId,
                "opc-retry-token": createAlarmSuppressionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAlarmSuppressionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarmSuppressions",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAlarmSuppressionRequest.createAlarmSuppressionDetails, "CreateAlarmSuppressionDetails", model.CreateAlarmSuppressionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarmSuppression",
                    bodyModel: model.AlarmSuppression,
                    type: "model.AlarmSuppression",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified alarm.
  * For more information, see
  * [Deleting an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/delete-alarm.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DeleteAlarmRequest
       * @return DeleteAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/DeleteAlarm.ts.html |here} to see how to use DeleteAlarm API.
       */
    deleteAlarm(deleteAlarmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#deleteAlarm.");
            const operationName = "deleteAlarm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Alarm/DeleteAlarm";
            const pathParams = {
                "{alarmId}": deleteAlarmRequest.alarmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAlarmRequest.ifMatch,
                "opc-request-id": deleteAlarmRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAlarmRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified alarm suppression. For more information, see
  * [Removing an Alarm-wide Suppression](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/remove-alarm-suppression.htm) and
  * [Removing a Dimension-Specific Alarm Suppression](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/delete-alarm-suppression.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DeleteAlarmSuppressionRequest
       * @return DeleteAlarmSuppressionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/DeleteAlarmSuppression.ts.html |here} to see how to use DeleteAlarmSuppression API.
       */
    deleteAlarmSuppression(deleteAlarmSuppressionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#deleteAlarmSuppression.");
            const operationName = "deleteAlarmSuppression";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmSuppression/DeleteAlarmSuppression";
            const pathParams = {
                "{alarmSuppressionId}": deleteAlarmSuppressionRequest.alarmSuppressionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteAlarmSuppressionRequest.opcRequestId,
                "if-match": deleteAlarmSuppressionRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAlarmSuppressionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarmSuppressions/{alarmSuppressionId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets the specified alarm.
  * For more information, see
  * [Getting an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetAlarmRequest
       * @return GetAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/GetAlarm.ts.html |here} to see how to use GetAlarm API.
       */
    getAlarm(getAlarmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#getAlarm.");
            const operationName = "getAlarm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Alarm/GetAlarm";
            const pathParams = {
                "{alarmId}": getAlarmRequest.alarmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAlarmRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAlarmRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarm",
                    bodyModel: model.Alarm,
                    type: "model.Alarm",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Get the history of the specified alarm.
  * For more information, see
  * [Getting History of an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm-history.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetAlarmHistoryRequest
       * @return GetAlarmHistoryResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/GetAlarmHistory.ts.html |here} to see how to use GetAlarmHistory API.
       */
    getAlarmHistory(getAlarmHistoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#getAlarmHistory.");
            const operationName = "getAlarmHistory";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmHistoryCollection/GetAlarmHistory";
            const pathParams = {
                "{alarmId}": getAlarmHistoryRequest.alarmId
            };
            const queryParams = {
                "alarmHistorytype": getAlarmHistoryRequest.alarmHistorytype,
                "page": getAlarmHistoryRequest.page,
                "limit": getAlarmHistoryRequest.limit,
                "timestampGreaterThanOrEqualTo": getAlarmHistoryRequest.timestampGreaterThanOrEqualTo,
                "timestampLessThan": getAlarmHistoryRequest.timestampLessThan
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAlarmHistoryRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAlarmHistoryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}/history",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarmHistoryCollection",
                    bodyModel: model.AlarmHistoryCollection,
                    type: "model.AlarmHistoryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets the specified alarm suppression. For more information, see
  * [Getting an Alarm-wide Suppression](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm-suppression.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetAlarmSuppressionRequest
       * @return GetAlarmSuppressionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/GetAlarmSuppression.ts.html |here} to see how to use GetAlarmSuppression API.
       */
    getAlarmSuppression(getAlarmSuppressionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#getAlarmSuppression.");
            const operationName = "getAlarmSuppression";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmSuppression/GetAlarmSuppression";
            const pathParams = {
                "{alarmSuppressionId}": getAlarmSuppressionRequest.alarmSuppressionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAlarmSuppressionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAlarmSuppressionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarmSuppressions/{alarmSuppressionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarmSuppression",
                    bodyModel: model.AlarmSuppression,
                    type: "model.AlarmSuppression",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists alarm suppressions for the specified alarm. For more information, see
  * [Listing Alarm Suppressions](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/list-alarm-suppression.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListAlarmSuppressionsRequest
       * @return ListAlarmSuppressionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ListAlarmSuppressions.ts.html |here} to see how to use ListAlarmSuppressions API.
       */
    listAlarmSuppressions(listAlarmSuppressionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#listAlarmSuppressions.");
            const operationName = "listAlarmSuppressions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmSuppressionCollection/ListAlarmSuppressions";
            const pathParams = {};
            const queryParams = {
                "alarmId": listAlarmSuppressionsRequest.alarmId,
                "displayName": listAlarmSuppressionsRequest.displayName,
                "lifecycleState": listAlarmSuppressionsRequest.lifecycleState,
                "level": listAlarmSuppressionsRequest.level,
                "compartmentId": listAlarmSuppressionsRequest.compartmentId,
                "compartmentIdInSubtree": listAlarmSuppressionsRequest.compartmentIdInSubtree,
                "targetType": listAlarmSuppressionsRequest.targetType,
                "isAllSuppressions": listAlarmSuppressionsRequest.isAllSuppressions,
                "sortBy": listAlarmSuppressionsRequest.sortBy,
                "sortOrder": listAlarmSuppressionsRequest.sortOrder,
                "page": listAlarmSuppressionsRequest.page,
                "limit": listAlarmSuppressionsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAlarmSuppressionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAlarmSuppressionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarmSuppressions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarmSuppressionCollection",
                    bodyModel: model.AlarmSuppressionCollection,
                    type: "model.AlarmSuppressionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-previous-page"),
                            key: "opcPreviousPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists the alarms for the specified compartment.
  * For more information, see
  * [Listing Alarms](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/list-alarm.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListAlarmsRequest
       * @return ListAlarmsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ListAlarms.ts.html |here} to see how to use ListAlarms API.
       */
    listAlarms(listAlarmsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#listAlarms.");
            const operationName = "listAlarms";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmSummary/ListAlarms";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAlarmsRequest.compartmentId,
                "page": listAlarmsRequest.page,
                "limit": listAlarmsRequest.limit,
                "displayName": listAlarmsRequest.displayName,
                "lifecycleState": listAlarmsRequest.lifecycleState,
                "sortBy": listAlarmsRequest.sortBy,
                "sortOrder": listAlarmsRequest.sortOrder,
                "compartmentIdInSubtree": listAlarmsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAlarmsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAlarmsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.AlarmSummary,
                    type: "Array<model.AlarmSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listAlarmsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AlarmSummary objects
     * contained in responses from the listAlarms operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarms(request) {
        return oci_common_1.paginateRecords(request, req => this.listAlarms(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listAlarmsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAlarms operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarmsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAlarms(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.AlarmSummary objects
     * contained in responses from the listAlarms operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAlarmsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listAlarms(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAlarms operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAlarmsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listAlarms(req));
    }
    /**
       * List the status of each alarm in the specified compartment.
  * Status is collective, across all metric streams in the alarm.
  * To list alarm status for each metric stream, use {@link #retrieveDimensionStates(RetrieveDimensionStatesRequest) retrieveDimensionStates}.
  * Optionally filter by resource or status value.
  * <p>
  For more information, see
  * [Listing Alarm Statuses](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/list-alarm-status.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAlarmsStatusRequest
       * @return ListAlarmsStatusResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ListAlarmsStatus.ts.html |here} to see how to use ListAlarmsStatus API.
       */
    listAlarmsStatus(listAlarmsStatusRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#listAlarmsStatus.");
            const operationName = "listAlarmsStatus";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmStatusSummary/ListAlarmsStatus";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAlarmsStatusRequest.compartmentId,
                "compartmentIdInSubtree": listAlarmsStatusRequest.compartmentIdInSubtree,
                "page": listAlarmsStatusRequest.page,
                "limit": listAlarmsStatusRequest.limit,
                "displayName": listAlarmsStatusRequest.displayName,
                "sortBy": listAlarmsStatusRequest.sortBy,
                "sortOrder": listAlarmsStatusRequest.sortOrder,
                "resourceId": listAlarmsStatusRequest.resourceId,
                "serviceName": listAlarmsStatusRequest.serviceName,
                "entityId": listAlarmsStatusRequest.entityId,
                "status": listAlarmsStatusRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAlarmsStatusRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAlarmsStatusRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/status",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.AlarmStatusSummary,
                    type: "Array<model.AlarmStatusSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listAlarmsStatusRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AlarmStatusSummary objects
     * contained in responses from the listAlarmsStatus operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarmsStatus(request) {
        return oci_common_1.paginateRecords(request, req => this.listAlarmsStatus(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listAlarmsStatusResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAlarmsStatus operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarmsStatusResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAlarmsStatus(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.AlarmStatusSummary objects
     * contained in responses from the listAlarmsStatus operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAlarmsStatusRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listAlarmsStatus(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAlarmsStatus operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAlarmsStatusResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listAlarmsStatus(req));
    }
    /**
       * Returns metric definitions that match the criteria specified in the request. Compartment OCID required.
  * For more information, see
  * [Listing Metric Definitions](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/list-metric.htm).
  * For information about metrics, see
  * [Metrics Overview](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#MetricsOverview).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListMetricsRequest
       * @return ListMetricsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ListMetrics.ts.html |here} to see how to use ListMetrics API.
       */
    listMetrics(listMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#listMetrics.");
            const operationName = "listMetrics";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Metric/ListMetrics";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMetricsRequest.compartmentId,
                "page": listMetricsRequest.page,
                "limit": listMetricsRequest.limit,
                "compartmentIdInSubtree": listMetricsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metrics/actions/listMetrics",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(listMetricsRequest.listMetricsDetails, "ListMetricsDetails", model.ListMetricsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.Metric,
                    type: "Array<model.Metric>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listMetricsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Metric objects
     * contained in responses from the listMetrics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMetrics(request) {
        return oci_common_1.paginateRecords(request, req => this.listMetrics(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listMetricsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listMetrics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMetricsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listMetrics(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.Metric objects
     * contained in responses from the listMetrics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMetricsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listMetrics(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMetrics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMetricsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listMetrics(req));
    }
    /**
       * Publishes raw metric data points to the Monitoring service.
  * For a data point to be posted, its timestamp must be near current time (less than two hours in the past and less than 10 minutes in the future).
  * <p>
  For more information about publishing metrics, see
  * [Publishing Custom Metrics](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/publishingcustommetrics.htm)
  * and
  * [Custom Metrics Walkthrough](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/custom-metrics-walkthrough.htm).
  * For information about developing a metric-posting client, see
  * [Developer Guide](https://docs.oracle.com/iaas/Content/API/Concepts/devtoolslanding.htm).
  * For an example client, see
  * [MonitoringMetricPostExample.java](https://github.com/oracle/oci-java-sdk/blob/master/bmc-examples/src/main/java/MonitoringMetricPostExample.java).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  Per-call limits information follows.
  * <p>
  * Dimensions per metric group*. Maximum: 20. Minimum: 1.
  * * Unique metric streams*. Maximum: 50.
  * * Transactions Per Second (TPS) per-tenancy limit for this operation: 50.
  * <p>
  *A metric group is the combination of a given metric, metric namespace, and tenancy for the purpose of determining limits.
  * A dimension is a qualifier provided in a metric definition.
  * A metric stream is an individual set of aggregated data for a metric with zero or more dimension values.
  * For more information about metric-related concepts, see
  * [Monitoring Concepts](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#concepts).
  * <p>
  **Note:** The endpoints for this operation differ from other Monitoring operations. Replace the string `telemetry` with `telemetry-ingestion` in the endpoint, as in the following example:
  * <p>
  https://telemetry-ingestion.eu-frankfurt-1.oraclecloud.com
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param PostMetricDataRequest
       * @return PostMetricDataResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/PostMetricData.ts.html |here} to see how to use PostMetricData API.
       */
    postMetricData(postMetricDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#postMetricData.");
            const operationName = "postMetricData";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/MetricData/PostMetricData";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": postMetricDataRequest.opcRequestId,
                "content-encoding": postMetricDataRequest.contentEncoding
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, postMetricDataRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metrics",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(postMetricDataRequest.postMetricDataDetails, "PostMetricDataDetails", model.PostMetricDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "postMetricDataResponseDetails",
                    bodyModel: model.PostMetricDataResponseDetails,
                    type: "model.PostMetricDataResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Removes any existing suppression for the specified alarm.
  * For more information, see
  * [Removing Suppression from an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/remove-alarm-suppression.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param RemoveAlarmSuppressionRequest
       * @return RemoveAlarmSuppressionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/RemoveAlarmSuppression.ts.html |here} to see how to use RemoveAlarmSuppression API.
       */
    removeAlarmSuppression(removeAlarmSuppressionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#removeAlarmSuppression.");
            const operationName = "removeAlarmSuppression";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Suppression/RemoveAlarmSuppression";
            const pathParams = {
                "{alarmId}": removeAlarmSuppressionRequest.alarmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removeAlarmSuppressionRequest.ifMatch,
                "opc-request-id": removeAlarmSuppressionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeAlarmSuppressionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}/actions/removeSuppression",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists the current alarm status of each metric stream, where status is derived from the metric stream's last associated transition.
  * Optionally filter by status value and one or more dimension key-value pairs.
  * <p>
  For more information, see
  * [Listing Metric Stream Status in an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/list-alarm-status-metric-stream.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param RetrieveDimensionStatesRequest
       * @return RetrieveDimensionStatesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/RetrieveDimensionStates.ts.html |here} to see how to use RetrieveDimensionStates API.
       */
    retrieveDimensionStates(retrieveDimensionStatesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#retrieveDimensionStates.");
            const operationName = "retrieveDimensionStates";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmDimensionStatesCollection/RetrieveDimensionStates";
            const pathParams = {
                "{alarmId}": retrieveDimensionStatesRequest.alarmId
            };
            const queryParams = {
                "page": retrieveDimensionStatesRequest.page,
                "limit": retrieveDimensionStatesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": retrieveDimensionStatesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, retrieveDimensionStatesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}/actions/retrieveDimensionStates",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(retrieveDimensionStatesRequest.retrieveDimensionStatesDetails, "RetrieveDimensionStatesDetails", model.RetrieveDimensionStatesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarmDimensionStatesCollection",
                    bodyModel: model.AlarmDimensionStatesCollection,
                    type: "model.AlarmDimensionStatesCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns history of suppressions for the specified alarm, including both dimension-specific and and alarm-wide suppressions. For more information, see
  * [Getting Suppression History for an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/summarize-alarm-suppression-history.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param SummarizeAlarmSuppressionHistoryRequest
       * @return SummarizeAlarmSuppressionHistoryResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/SummarizeAlarmSuppressionHistory.ts.html |here} to see how to use SummarizeAlarmSuppressionHistory API.
       */
    summarizeAlarmSuppressionHistory(summarizeAlarmSuppressionHistoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#summarizeAlarmSuppressionHistory.");
            const operationName = "summarizeAlarmSuppressionHistory";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmSuppression/SummarizeAlarmSuppressionHistory";
            const pathParams = {
                "{alarmId}": summarizeAlarmSuppressionHistoryRequest.alarmId
            };
            const queryParams = {
                "page": summarizeAlarmSuppressionHistoryRequest.page,
                "limit": summarizeAlarmSuppressionHistoryRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAlarmSuppressionHistoryRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAlarmSuppressionHistoryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}/actions/summarizeAlarmSuppressionHistory",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(summarizeAlarmSuppressionHistoryRequest.summarizeAlarmSuppressionHistoryDetails, "SummarizeAlarmSuppressionHistoryDetails", model.SummarizeAlarmSuppressionHistoryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarmSuppressionHistoryItemCollection",
                    bodyModel: model.AlarmSuppressionHistoryItemCollection,
                    type: "model.AlarmSuppressionHistoryItemCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-previous-page"),
                            key: "opcPreviousPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns aggregated data that match the criteria specified in the request. Compartment OCID required.
  * For more information, see
  * [Querying Metric Data](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-landing.htm)
  * and
  * [Creating a Query](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/query-metric.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param SummarizeMetricsDataRequest
       * @return SummarizeMetricsDataResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/SummarizeMetricsData.ts.html |here} to see how to use SummarizeMetricsData API.
       */
    summarizeMetricsData(summarizeMetricsDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#summarizeMetricsData.");
            const operationName = "summarizeMetricsData";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/MetricData/SummarizeMetricsData";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeMetricsDataRequest.compartmentId,
                "compartmentIdInSubtree": summarizeMetricsDataRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeMetricsDataRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeMetricsDataRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metrics/actions/summarizeMetricsData",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(summarizeMetricsDataRequest.summarizeMetricsDataDetails, "SummarizeMetricsDataDetails", model.SummarizeMetricsDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.MetricData,
                    type: "Array<model.MetricData>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified alarm.
  * For more information, see
  * [Updating an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/update-alarm.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param UpdateAlarmRequest
       * @return UpdateAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/UpdateAlarm.ts.html |here} to see how to use UpdateAlarm API.
       */
    updateAlarm(updateAlarmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#updateAlarm.");
            const operationName = "updateAlarm";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Alarm/UpdateAlarm";
            const pathParams = {
                "{alarmId}": updateAlarmRequest.alarmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAlarmRequest.ifMatch,
                "opc-request-id": updateAlarmRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAlarmRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAlarmRequest.updateAlarmDetails, "UpdateAlarmDetails", model.UpdateAlarmDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarm",
                    bodyModel: model.Alarm,
                    type: "model.Alarm",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.MonitoringClient = MonitoringClient;
MonitoringClient.serviceEndpointTemplate = "https://telemetry.{region}.{secondLevelDomain}";
MonitoringClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map