/**
 * Monitoring API
 * Use the Monitoring API to manage metric queries and alarms for assessing the health, capacity, and performance of your cloud resources.
Endpoints vary by operation. For PostMetricData, use the {@code telemetry-ingestion} endpoints; for all other operations, use the {@code telemetry} endpoints.
For more information, see
[the Monitoring documentation](https://docs.oracle.com/iaas/Content/Monitoring/home.htm).

 * OpenAPI spec version: 20180401
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { MonitoringWaiter } from "./monitoring-waiter";
declare const Breaker: any;
export declare enum MonitoringApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class MonitoringClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": MonitoringWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new MonitoringWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): MonitoringWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): MonitoringWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Moves an alarm into a different compartment within the same tenancy.
     * For more information, see
     * [Moving an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/change-compartment-alarm.htm).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeAlarmCompartmentRequest
     * @return ChangeAlarmCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ChangeAlarmCompartment.ts.html |here} to see how to use ChangeAlarmCompartment API.
     */
    changeAlarmCompartment(changeAlarmCompartmentRequest: requests.ChangeAlarmCompartmentRequest): Promise<responses.ChangeAlarmCompartmentResponse>;
    /**
       * Creates a new alarm in the specified compartment.
  * For more information, see
  * [Creating an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/create-alarm.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateAlarmRequest
       * @return CreateAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/CreateAlarm.ts.html |here} to see how to use CreateAlarm API.
       */
    createAlarm(createAlarmRequest: requests.CreateAlarmRequest): Promise<responses.CreateAlarmResponse>;
    /**
       * Creates a new alarm suppression at the specified level (alarm-wide or dimension-specific).
  * For more information, see
  * [Adding an Alarm-wide Suppression](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/add-alarm-suppression.htm) and
  * [Adding a Dimension-Specific Alarm Suppression](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/create-alarm-suppression.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateAlarmSuppressionRequest
       * @return CreateAlarmSuppressionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/CreateAlarmSuppression.ts.html |here} to see how to use CreateAlarmSuppression API.
       */
    createAlarmSuppression(createAlarmSuppressionRequest: requests.CreateAlarmSuppressionRequest): Promise<responses.CreateAlarmSuppressionResponse>;
    /**
       * Deletes the specified alarm.
  * For more information, see
  * [Deleting an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/delete-alarm.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DeleteAlarmRequest
       * @return DeleteAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/DeleteAlarm.ts.html |here} to see how to use DeleteAlarm API.
       */
    deleteAlarm(deleteAlarmRequest: requests.DeleteAlarmRequest): Promise<responses.DeleteAlarmResponse>;
    /**
       * Deletes the specified alarm suppression. For more information, see
  * [Removing an Alarm-wide Suppression](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/remove-alarm-suppression.htm) and
  * [Removing a Dimension-Specific Alarm Suppression](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/delete-alarm-suppression.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param DeleteAlarmSuppressionRequest
       * @return DeleteAlarmSuppressionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/DeleteAlarmSuppression.ts.html |here} to see how to use DeleteAlarmSuppression API.
       */
    deleteAlarmSuppression(deleteAlarmSuppressionRequest: requests.DeleteAlarmSuppressionRequest): Promise<responses.DeleteAlarmSuppressionResponse>;
    /**
       * Gets the specified alarm.
  * For more information, see
  * [Getting an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetAlarmRequest
       * @return GetAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/GetAlarm.ts.html |here} to see how to use GetAlarm API.
       */
    getAlarm(getAlarmRequest: requests.GetAlarmRequest): Promise<responses.GetAlarmResponse>;
    /**
       * Get the history of the specified alarm.
  * For more information, see
  * [Getting History of an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm-history.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetAlarmHistoryRequest
       * @return GetAlarmHistoryResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/GetAlarmHistory.ts.html |here} to see how to use GetAlarmHistory API.
       */
    getAlarmHistory(getAlarmHistoryRequest: requests.GetAlarmHistoryRequest): Promise<responses.GetAlarmHistoryResponse>;
    /**
       * Gets the specified alarm suppression. For more information, see
  * [Getting an Alarm-wide Suppression](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/get-alarm-suppression.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param GetAlarmSuppressionRequest
       * @return GetAlarmSuppressionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/GetAlarmSuppression.ts.html |here} to see how to use GetAlarmSuppression API.
       */
    getAlarmSuppression(getAlarmSuppressionRequest: requests.GetAlarmSuppressionRequest): Promise<responses.GetAlarmSuppressionResponse>;
    /**
       * Lists alarm suppressions for the specified alarm. For more information, see
  * [Listing Alarm Suppressions](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/list-alarm-suppression.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListAlarmSuppressionsRequest
       * @return ListAlarmSuppressionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ListAlarmSuppressions.ts.html |here} to see how to use ListAlarmSuppressions API.
       */
    listAlarmSuppressions(listAlarmSuppressionsRequest: requests.ListAlarmSuppressionsRequest): Promise<responses.ListAlarmSuppressionsResponse>;
    /**
       * Lists the alarms for the specified compartment.
  * For more information, see
  * [Listing Alarms](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/list-alarm.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListAlarmsRequest
       * @return ListAlarmsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ListAlarms.ts.html |here} to see how to use ListAlarms API.
       */
    listAlarms(listAlarmsRequest: requests.ListAlarmsRequest): Promise<responses.ListAlarmsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listAlarmsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AlarmSummary objects
     * contained in responses from the listAlarms operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarms(request: requests.ListAlarmsRequest): AsyncIterableIterator<model.AlarmSummary>;
    /**
     * NOTE: This function is deprecated in favor of listAlarmsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAlarms operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarmsResponses(request: requests.ListAlarmsRequest): AsyncIterableIterator<responses.ListAlarmsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.AlarmSummary objects
     * contained in responses from the listAlarms operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAlarmsRecordIterator(request: requests.ListAlarmsRequest): AsyncIterableIterator<model.AlarmSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAlarms operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAlarmsResponseIterator(request: requests.ListAlarmsRequest): AsyncIterableIterator<responses.ListAlarmsResponse>;
    /**
       * List the status of each alarm in the specified compartment.
  * Status is collective, across all metric streams in the alarm.
  * To list alarm status for each metric stream, use {@link #retrieveDimensionStates(RetrieveDimensionStatesRequest) retrieveDimensionStates}.
  * Optionally filter by resource or status value.
  * <p>
  For more information, see
  * [Listing Alarm Statuses](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/list-alarm-status.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListAlarmsStatusRequest
       * @return ListAlarmsStatusResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ListAlarmsStatus.ts.html |here} to see how to use ListAlarmsStatus API.
       */
    listAlarmsStatus(listAlarmsStatusRequest: requests.ListAlarmsStatusRequest): Promise<responses.ListAlarmsStatusResponse>;
    /**
     * NOTE: This function is deprecated in favor of listAlarmsStatusRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AlarmStatusSummary objects
     * contained in responses from the listAlarmsStatus operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarmsStatus(request: requests.ListAlarmsStatusRequest): AsyncIterableIterator<model.AlarmStatusSummary>;
    /**
     * NOTE: This function is deprecated in favor of listAlarmsStatusResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAlarmsStatus operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarmsStatusResponses(request: requests.ListAlarmsStatusRequest): AsyncIterableIterator<responses.ListAlarmsStatusResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.AlarmStatusSummary objects
     * contained in responses from the listAlarmsStatus operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAlarmsStatusRecordIterator(request: requests.ListAlarmsStatusRequest): AsyncIterableIterator<model.AlarmStatusSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAlarmsStatus operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAlarmsStatusResponseIterator(request: requests.ListAlarmsStatusRequest): AsyncIterableIterator<responses.ListAlarmsStatusResponse>;
    /**
       * Returns metric definitions that match the criteria specified in the request. Compartment OCID required.
  * For more information, see
  * [Listing Metric Definitions](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/list-metric.htm).
  * For information about metrics, see
  * [Metrics Overview](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#MetricsOverview).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListMetricsRequest
       * @return ListMetricsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ListMetrics.ts.html |here} to see how to use ListMetrics API.
       */
    listMetrics(listMetricsRequest: requests.ListMetricsRequest): Promise<responses.ListMetricsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listMetricsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.Metric objects
     * contained in responses from the listMetrics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMetrics(request: requests.ListMetricsRequest): AsyncIterableIterator<model.Metric>;
    /**
     * NOTE: This function is deprecated in favor of listMetricsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listMetrics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMetricsResponses(request: requests.ListMetricsRequest): AsyncIterableIterator<responses.ListMetricsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.Metric objects
     * contained in responses from the listMetrics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMetricsRecordIterator(request: requests.ListMetricsRequest): AsyncIterableIterator<model.Metric>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMetrics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMetricsResponseIterator(request: requests.ListMetricsRequest): AsyncIterableIterator<responses.ListMetricsResponse>;
    /**
       * Publishes raw metric data points to the Monitoring service.
  * For a data point to be posted, its timestamp must be near current time (less than two hours in the past and less than 10 minutes in the future).
  * <p>
  For more information about publishing metrics, see
  * [Publishing Custom Metrics](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/publishingcustommetrics.htm)
  * and
  * [Custom Metrics Walkthrough](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/custom-metrics-walkthrough.htm).
  * For information about developing a metric-posting client, see
  * [Developer Guide](https://docs.oracle.com/iaas/Content/API/Concepts/devtoolslanding.htm).
  * For an example client, see
  * [MonitoringMetricPostExample.java](https://github.com/oracle/oci-java-sdk/blob/master/bmc-examples/src/main/java/MonitoringMetricPostExample.java).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  Per-call limits information follows.
  * <p>
  * Dimensions per metric group*. Maximum: 20. Minimum: 1.
  * * Unique metric streams*. Maximum: 50.
  * * Transactions Per Second (TPS) per-tenancy limit for this operation: 50.
  * <p>
  *A metric group is the combination of a given metric, metric namespace, and tenancy for the purpose of determining limits.
  * A dimension is a qualifier provided in a metric definition.
  * A metric stream is an individual set of aggregated data for a metric with zero or more dimension values.
  * For more information about metric-related concepts, see
  * [Monitoring Concepts](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#concepts).
  * <p>
  **Note:** The endpoints for this operation differ from other Monitoring operations. Replace the string `telemetry` with `telemetry-ingestion` in the endpoint, as in the following example:
  * <p>
  https://telemetry-ingestion.eu-frankfurt-1.oraclecloud.com
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param PostMetricDataRequest
       * @return PostMetricDataResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/PostMetricData.ts.html |here} to see how to use PostMetricData API.
       */
    postMetricData(postMetricDataRequest: requests.PostMetricDataRequest): Promise<responses.PostMetricDataResponse>;
    /**
       * Removes any existing suppression for the specified alarm.
  * For more information, see
  * [Removing Suppression from an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/remove-alarm-suppression.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param RemoveAlarmSuppressionRequest
       * @return RemoveAlarmSuppressionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/RemoveAlarmSuppression.ts.html |here} to see how to use RemoveAlarmSuppression API.
       */
    removeAlarmSuppression(removeAlarmSuppressionRequest: requests.RemoveAlarmSuppressionRequest): Promise<responses.RemoveAlarmSuppressionResponse>;
    /**
       * Lists the current alarm status of each metric stream, where status is derived from the metric stream's last associated transition.
  * Optionally filter by status value and one or more dimension key-value pairs.
  * <p>
  For more information, see
  * [Listing Metric Stream Status in an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/list-alarm-status-metric-stream.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param RetrieveDimensionStatesRequest
       * @return RetrieveDimensionStatesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/RetrieveDimensionStates.ts.html |here} to see how to use RetrieveDimensionStates API.
       */
    retrieveDimensionStates(retrieveDimensionStatesRequest: requests.RetrieveDimensionStatesRequest): Promise<responses.RetrieveDimensionStatesResponse>;
    /**
       * Returns history of suppressions for the specified alarm, including both dimension-specific and and alarm-wide suppressions. For more information, see
  * [Getting Suppression History for an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/summarize-alarm-suppression-history.htm).
  * <p>
  For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param SummarizeAlarmSuppressionHistoryRequest
       * @return SummarizeAlarmSuppressionHistoryResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/SummarizeAlarmSuppressionHistory.ts.html |here} to see how to use SummarizeAlarmSuppressionHistory API.
       */
    summarizeAlarmSuppressionHistory(summarizeAlarmSuppressionHistoryRequest: requests.SummarizeAlarmSuppressionHistoryRequest): Promise<responses.SummarizeAlarmSuppressionHistoryResponse>;
    /**
       * Returns aggregated data that match the criteria specified in the request. Compartment OCID required.
  * For more information, see
  * [Querying Metric Data](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/query-metric-landing.htm)
  * and
  * [Creating a Query](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/query-metric.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param SummarizeMetricsDataRequest
       * @return SummarizeMetricsDataResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/SummarizeMetricsData.ts.html |here} to see how to use SummarizeMetricsData API.
       */
    summarizeMetricsData(summarizeMetricsDataRequest: requests.SummarizeMetricsDataRequest): Promise<responses.SummarizeMetricsDataResponse>;
    /**
       * Updates the specified alarm.
  * For more information, see
  * [Updating an Alarm](https://docs.oracle.com/iaas/Content/Monitoring/Tasks/update-alarm.htm).
  * For important limits information, see
  * [Limits on Monitoring](https://docs.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param UpdateAlarmRequest
       * @return UpdateAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/UpdateAlarm.ts.html |here} to see how to use UpdateAlarm API.
       */
    updateAlarm(updateAlarmRequest: requests.UpdateAlarmRequest): Promise<responses.UpdateAlarmResponse>;
}
export {};
