"use strict";
/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](https://docs.oracle.com/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecutionAction = void 0;
const model = __importStar(require("../model"));
var ExecutionAction;
(function (ExecutionAction) {
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Scheduled"] = "SCHEDULED";
        LifecycleState["InProgress"] = "IN_PROGRESS";
        LifecycleState["Failed"] = "FAILED";
        LifecycleState["Canceled"] = "CANCELED";
        LifecycleState["Updating"] = "UPDATING";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["Succeeded"] = "SUCCEEDED";
        LifecycleState["PartialSuccess"] = "PARTIAL_SUCCESS";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = ExecutionAction.LifecycleState || (ExecutionAction.LifecycleState = {}));
    let LifecycleSubstate;
    (function (LifecycleSubstate) {
        LifecycleSubstate["DurationExceeded"] = "DURATION_EXCEEDED";
        LifecycleSubstate["MaintenanceInProgress"] = "MAINTENANCE_IN_PROGRESS";
        LifecycleSubstate["Waiting"] = "WAITING";
        LifecycleSubstate["Rescheduled"] = "RESCHEDULED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleSubstate["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleSubstate = ExecutionAction.LifecycleSubstate || (ExecutionAction.LifecycleSubstate = {}));
    let ActionType;
    (function (ActionType) {
        ActionType["DbServerFullSoftwareUpdate"] = "DB_SERVER_FULL_SOFTWARE_UPDATE";
        ActionType["StorageServerFullSoftwareUpdate"] = "STORAGE_SERVER_FULL_SOFTWARE_UPDATE";
        ActionType["NetworkSwitchFullSoftwareUpdate"] = "NETWORK_SWITCH_FULL_SOFTWARE_UPDATE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ActionType["UnknownValue"] = "UNKNOWN_VALUE";
    })(ActionType = ExecutionAction.ActionType || (ExecutionAction.ActionType = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "actionMembers": obj.actionMembers
                ? obj.actionMembers.map(item => {
                    return model.ExecutionActionMember.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    ExecutionAction.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "actionMembers": obj.actionMembers
                ? obj.actionMembers.map(item => {
                    return model.ExecutionActionMember.getDeserializedJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    ExecutionAction.getDeserializedJsonObj = getDeserializedJsonObj;
})(ExecutionAction = exports.ExecutionAction || (exports.ExecutionAction = {}));
//# sourceMappingURL=execution-action.js.map