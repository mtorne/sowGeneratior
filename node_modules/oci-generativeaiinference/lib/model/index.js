"use strict";
/**
 * Generative AI Service Inference API
 * OCI Generative AI is a fully managed service that provides a set of state-of-the-art, customizable large language models (LLMs) that cover a wide range of use cases for text generation, summarization, and text embeddings.

Use the Generative AI service inference API to access your custom model endpoints, or to try the out-of-the-box models to {@link #eNGenerative-ai-inferenceLatestChatResultChat(ENGenerative-ai-inferenceLatestChatResultChatRequest) eNGenerative-ai-inferenceLatestChatResultChat}, {@link #eNGenerative-ai-inferenceLatestGenerateTextResultGenerateText(ENGenerative-ai-inferenceLatestGenerateTextResultGenerateTextRequest) eNGenerative-ai-inferenceLatestGenerateTextResultGenerateText}, {@link #eNGenerative-ai-inferenceLatestSummarizeTextResultSummarizeText(ENGenerative-ai-inferenceLatestSummarizeTextResultSummarizeTextRequest) eNGenerative-ai-inferenceLatestSummarizeTextResultSummarizeText}, and {@link #eNGenerative-ai-inferenceLatestEmbedTextResultEmbedText(ENGenerative-ai-inferenceLatestEmbedTextResultEmbedTextRequest) eNGenerative-ai-inferenceLatestEmbedTextResultEmbedText}.

To use a Generative AI custom model for inference, you must first create an endpoint for that model. Use the {@link #eNGenerative-aiLatest(ENGenerative-aiLatestRequest) eNGenerative-aiLatest} to {@link #eNGenerative-aiLatestModel(ENGenerative-aiLatestModelRequest) eNGenerative-aiLatestModel} by fine-tuning an out-of-the-box model, or a previous version of a custom model, using your own data. Fine-tune the custom model on a {@link #eNGenerative-aiLatestDedicatedAiCluster(ENGenerative-aiLatestDedicatedAiClusterRequest) eNGenerative-aiLatestDedicatedAiCluster}. Then, create a {@link #eNGenerative-aiLatestDedicatedAiCluster(ENGenerative-aiLatestDedicatedAiClusterRequest) eNGenerative-aiLatestDedicatedAiCluster} with an {@link Endpoint} to host your custom model. For resource management in the Generative AI service, use the {@link #eNGenerative-aiLatest(ENGenerative-aiLatestRequest) eNGenerative-aiLatest}.

To learn more about the service, see the [Generative AI documentation](https://docs.oracle.com/iaas/Content/generative-ai/home.htm).

 * OpenAPI spec version: 20231130
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolChoice = exports.ToolCall = exports.TokenLikelihood = exports.SummarizeTextResult = exports.SummarizeTextDetails = exports.StreamOptions = exports.ServingMode = exports.SearchQuery = exports.RerankTextResult = exports.RerankTextDetails = exports.PromptTokensDetails = exports.PromptInjectionProtectionResult = exports.PromptInjectionConfiguration = exports.PersonallyIdentifiableInformationResult = exports.PersonallyIdentifiableInformationConfiguration = exports.Message = exports.Logprobs = exports.LlmInferenceResponse = exports.LlmInferenceRequest = exports.ImageUrl = exports.GuardrailsResults = exports.GuardrailsInput = exports.GuardrailConfigs = exports.GeneratedText = exports.GenerateTextResult = exports.GenerateTextDetails = exports.EmbedTextResult = exports.EmbedTextDetails = exports.DocumentRank = exports.Document = exports.ContentModerationResult = exports.ContentModerationConfiguration = exports.CompletionTokensDetails = exports.CohereToolResult = exports.CohereToolCall = exports.CohereTool = exports.CohereResponseFormat = exports.CohereParameterDefinition = exports.CohereMessage = exports.Citation = exports.Choice = exports.ChatResult = exports.ChatDetails = exports.ChatContent = exports.ChatChoice = exports.CategoryScore = exports.BaseChatResponse = exports.BaseChatRequest = exports.ApplyGuardrailsResult = exports.ApplyGuardrailsDetails = void 0;
exports.UserMessage = exports.ToolMessage = exports.ToolChoiceRequired = exports.ToolChoiceNone = exports.ToolChoiceFunction = exports.ToolChoiceAuto = exports.TextContent = exports.SystemMessage = exports.OnDemandServingMode = exports.LlamaLlmInferenceResponse = exports.LlamaLlmInferenceRequest = exports.ImageContent = exports.GuardrailsTextInput = exports.GenericChatResponse = exports.GenericChatRequest = exports.FunctionDefinition = exports.FunctionCall = exports.DedicatedServingMode = exports.CohereUserMessage = exports.CohereToolMessage = exports.CohereSystemMessage = exports.CohereResponseTextFormat = exports.CohereResponseJsonFormat = exports.CohereLlmInferenceResponse = exports.CohereLlmInferenceRequest = exports.CohereChatResponse = exports.CohereChatRequest = exports.CohereChatBotMessage = exports.AssistantMessage = exports.Usage = exports.ToolDefinition = void 0;
const ApplyGuardrailsDetails = __importStar(require("./apply-guardrails-details"));
exports.ApplyGuardrailsDetails = ApplyGuardrailsDetails.ApplyGuardrailsDetails;
const ApplyGuardrailsResult = __importStar(require("./apply-guardrails-result"));
exports.ApplyGuardrailsResult = ApplyGuardrailsResult.ApplyGuardrailsResult;
const BaseChatRequest = __importStar(require("./base-chat-request"));
exports.BaseChatRequest = BaseChatRequest.BaseChatRequest;
const BaseChatResponse = __importStar(require("./base-chat-response"));
exports.BaseChatResponse = BaseChatResponse.BaseChatResponse;
const CategoryScore = __importStar(require("./category-score"));
exports.CategoryScore = CategoryScore.CategoryScore;
const ChatChoice = __importStar(require("./chat-choice"));
exports.ChatChoice = ChatChoice.ChatChoice;
const ChatContent = __importStar(require("./chat-content"));
exports.ChatContent = ChatContent.ChatContent;
const ChatDetails = __importStar(require("./chat-details"));
exports.ChatDetails = ChatDetails.ChatDetails;
const ChatResult = __importStar(require("./chat-result"));
exports.ChatResult = ChatResult.ChatResult;
const Choice = __importStar(require("./choice"));
exports.Choice = Choice.Choice;
const Citation = __importStar(require("./citation"));
exports.Citation = Citation.Citation;
const CohereMessage = __importStar(require("./cohere-message"));
exports.CohereMessage = CohereMessage.CohereMessage;
const CohereParameterDefinition = __importStar(require("./cohere-parameter-definition"));
exports.CohereParameterDefinition = CohereParameterDefinition.CohereParameterDefinition;
const CohereResponseFormat = __importStar(require("./cohere-response-format"));
exports.CohereResponseFormat = CohereResponseFormat.CohereResponseFormat;
const CohereTool = __importStar(require("./cohere-tool"));
exports.CohereTool = CohereTool.CohereTool;
const CohereToolCall = __importStar(require("./cohere-tool-call"));
exports.CohereToolCall = CohereToolCall.CohereToolCall;
const CohereToolResult = __importStar(require("./cohere-tool-result"));
exports.CohereToolResult = CohereToolResult.CohereToolResult;
const CompletionTokensDetails = __importStar(require("./completion-tokens-details"));
exports.CompletionTokensDetails = CompletionTokensDetails.CompletionTokensDetails;
const ContentModerationConfiguration = __importStar(require("./content-moderation-configuration"));
exports.ContentModerationConfiguration = ContentModerationConfiguration.ContentModerationConfiguration;
const ContentModerationResult = __importStar(require("./content-moderation-result"));
exports.ContentModerationResult = ContentModerationResult.ContentModerationResult;
const Document = __importStar(require("./document"));
exports.Document = Document.Document;
const DocumentRank = __importStar(require("./document-rank"));
exports.DocumentRank = DocumentRank.DocumentRank;
const EmbedTextDetails = __importStar(require("./embed-text-details"));
exports.EmbedTextDetails = EmbedTextDetails.EmbedTextDetails;
const EmbedTextResult = __importStar(require("./embed-text-result"));
exports.EmbedTextResult = EmbedTextResult.EmbedTextResult;
const GenerateTextDetails = __importStar(require("./generate-text-details"));
exports.GenerateTextDetails = GenerateTextDetails.GenerateTextDetails;
const GenerateTextResult = __importStar(require("./generate-text-result"));
exports.GenerateTextResult = GenerateTextResult.GenerateTextResult;
const GeneratedText = __importStar(require("./generated-text"));
exports.GeneratedText = GeneratedText.GeneratedText;
const GuardrailConfigs = __importStar(require("./guardrail-configs"));
exports.GuardrailConfigs = GuardrailConfigs.GuardrailConfigs;
const GuardrailsInput = __importStar(require("./guardrails-input"));
exports.GuardrailsInput = GuardrailsInput.GuardrailsInput;
const GuardrailsResults = __importStar(require("./guardrails-results"));
exports.GuardrailsResults = GuardrailsResults.GuardrailsResults;
const ImageUrl = __importStar(require("./image-url"));
exports.ImageUrl = ImageUrl.ImageUrl;
const LlmInferenceRequest = __importStar(require("./llm-inference-request"));
exports.LlmInferenceRequest = LlmInferenceRequest.LlmInferenceRequest;
const LlmInferenceResponse = __importStar(require("./llm-inference-response"));
exports.LlmInferenceResponse = LlmInferenceResponse.LlmInferenceResponse;
const Logprobs = __importStar(require("./logprobs"));
exports.Logprobs = Logprobs.Logprobs;
const Message = __importStar(require("./message"));
exports.Message = Message.Message;
const PersonallyIdentifiableInformationConfiguration = __importStar(require("./personally-identifiable-information-configuration"));
exports.PersonallyIdentifiableInformationConfiguration = PersonallyIdentifiableInformationConfiguration.PersonallyIdentifiableInformationConfiguration;
const PersonallyIdentifiableInformationResult = __importStar(require("./personally-identifiable-information-result"));
exports.PersonallyIdentifiableInformationResult = PersonallyIdentifiableInformationResult.PersonallyIdentifiableInformationResult;
const PromptInjectionConfiguration = __importStar(require("./prompt-injection-configuration"));
exports.PromptInjectionConfiguration = PromptInjectionConfiguration.PromptInjectionConfiguration;
const PromptInjectionProtectionResult = __importStar(require("./prompt-injection-protection-result"));
exports.PromptInjectionProtectionResult = PromptInjectionProtectionResult.PromptInjectionProtectionResult;
const PromptTokensDetails = __importStar(require("./prompt-tokens-details"));
exports.PromptTokensDetails = PromptTokensDetails.PromptTokensDetails;
const RerankTextDetails = __importStar(require("./rerank-text-details"));
exports.RerankTextDetails = RerankTextDetails.RerankTextDetails;
const RerankTextResult = __importStar(require("./rerank-text-result"));
exports.RerankTextResult = RerankTextResult.RerankTextResult;
const SearchQuery = __importStar(require("./search-query"));
exports.SearchQuery = SearchQuery.SearchQuery;
const ServingMode = __importStar(require("./serving-mode"));
exports.ServingMode = ServingMode.ServingMode;
const StreamOptions = __importStar(require("./stream-options"));
exports.StreamOptions = StreamOptions.StreamOptions;
const SummarizeTextDetails = __importStar(require("./summarize-text-details"));
exports.SummarizeTextDetails = SummarizeTextDetails.SummarizeTextDetails;
const SummarizeTextResult = __importStar(require("./summarize-text-result"));
exports.SummarizeTextResult = SummarizeTextResult.SummarizeTextResult;
const TokenLikelihood = __importStar(require("./token-likelihood"));
exports.TokenLikelihood = TokenLikelihood.TokenLikelihood;
const ToolCall = __importStar(require("./tool-call"));
exports.ToolCall = ToolCall.ToolCall;
const ToolChoice = __importStar(require("./tool-choice"));
exports.ToolChoice = ToolChoice.ToolChoice;
const ToolDefinition = __importStar(require("./tool-definition"));
exports.ToolDefinition = ToolDefinition.ToolDefinition;
const Usage = __importStar(require("./usage"));
exports.Usage = Usage.Usage;
const AssistantMessage = __importStar(require("./assistant-message"));
exports.AssistantMessage = AssistantMessage.AssistantMessage;
const CohereChatBotMessage = __importStar(require("./cohere-chat-bot-message"));
exports.CohereChatBotMessage = CohereChatBotMessage.CohereChatBotMessage;
const CohereChatRequest = __importStar(require("./cohere-chat-request"));
exports.CohereChatRequest = CohereChatRequest.CohereChatRequest;
const CohereChatResponse = __importStar(require("./cohere-chat-response"));
exports.CohereChatResponse = CohereChatResponse.CohereChatResponse;
const CohereLlmInferenceRequest = __importStar(require("./cohere-llm-inference-request"));
exports.CohereLlmInferenceRequest = CohereLlmInferenceRequest.CohereLlmInferenceRequest;
const CohereLlmInferenceResponse = __importStar(require("./cohere-llm-inference-response"));
exports.CohereLlmInferenceResponse = CohereLlmInferenceResponse.CohereLlmInferenceResponse;
const CohereResponseJsonFormat = __importStar(require("./cohere-response-json-format"));
exports.CohereResponseJsonFormat = CohereResponseJsonFormat.CohereResponseJsonFormat;
const CohereResponseTextFormat = __importStar(require("./cohere-response-text-format"));
exports.CohereResponseTextFormat = CohereResponseTextFormat.CohereResponseTextFormat;
const CohereSystemMessage = __importStar(require("./cohere-system-message"));
exports.CohereSystemMessage = CohereSystemMessage.CohereSystemMessage;
const CohereToolMessage = __importStar(require("./cohere-tool-message"));
exports.CohereToolMessage = CohereToolMessage.CohereToolMessage;
const CohereUserMessage = __importStar(require("./cohere-user-message"));
exports.CohereUserMessage = CohereUserMessage.CohereUserMessage;
const DedicatedServingMode = __importStar(require("./dedicated-serving-mode"));
exports.DedicatedServingMode = DedicatedServingMode.DedicatedServingMode;
const FunctionCall = __importStar(require("./function-call"));
exports.FunctionCall = FunctionCall.FunctionCall;
const FunctionDefinition = __importStar(require("./function-definition"));
exports.FunctionDefinition = FunctionDefinition.FunctionDefinition;
const GenericChatRequest = __importStar(require("./generic-chat-request"));
exports.GenericChatRequest = GenericChatRequest.GenericChatRequest;
const GenericChatResponse = __importStar(require("./generic-chat-response"));
exports.GenericChatResponse = GenericChatResponse.GenericChatResponse;
const GuardrailsTextInput = __importStar(require("./guardrails-text-input"));
exports.GuardrailsTextInput = GuardrailsTextInput.GuardrailsTextInput;
const ImageContent = __importStar(require("./image-content"));
exports.ImageContent = ImageContent.ImageContent;
const LlamaLlmInferenceRequest = __importStar(require("./llama-llm-inference-request"));
exports.LlamaLlmInferenceRequest = LlamaLlmInferenceRequest.LlamaLlmInferenceRequest;
const LlamaLlmInferenceResponse = __importStar(require("./llama-llm-inference-response"));
exports.LlamaLlmInferenceResponse = LlamaLlmInferenceResponse.LlamaLlmInferenceResponse;
const OnDemandServingMode = __importStar(require("./on-demand-serving-mode"));
exports.OnDemandServingMode = OnDemandServingMode.OnDemandServingMode;
const SystemMessage = __importStar(require("./system-message"));
exports.SystemMessage = SystemMessage.SystemMessage;
const TextContent = __importStar(require("./text-content"));
exports.TextContent = TextContent.TextContent;
const ToolChoiceAuto = __importStar(require("./tool-choice-auto"));
exports.ToolChoiceAuto = ToolChoiceAuto.ToolChoiceAuto;
const ToolChoiceFunction = __importStar(require("./tool-choice-function"));
exports.ToolChoiceFunction = ToolChoiceFunction.ToolChoiceFunction;
const ToolChoiceNone = __importStar(require("./tool-choice-none"));
exports.ToolChoiceNone = ToolChoiceNone.ToolChoiceNone;
const ToolChoiceRequired = __importStar(require("./tool-choice-required"));
exports.ToolChoiceRequired = ToolChoiceRequired.ToolChoiceRequired;
const ToolMessage = __importStar(require("./tool-message"));
exports.ToolMessage = ToolMessage.ToolMessage;
const UserMessage = __importStar(require("./user-message"));
exports.UserMessage = UserMessage.UserMessage;
//# sourceMappingURL=index.js.map