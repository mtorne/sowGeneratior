/**
 * Generative AI Service Inference API
 * OCI Generative AI is a fully managed service that provides a set of state-of-the-art, customizable large language models (LLMs) that cover a wide range of use cases for text generation, summarization, and text embeddings.

Use the Generative AI service inference API to access your custom model endpoints, or to try the out-of-the-box models to {@link #eNGenerative-ai-inferenceLatestChatResultChat(ENGenerative-ai-inferenceLatestChatResultChatRequest) eNGenerative-ai-inferenceLatestChatResultChat}, {@link #eNGenerative-ai-inferenceLatestGenerateTextResultGenerateText(ENGenerative-ai-inferenceLatestGenerateTextResultGenerateTextRequest) eNGenerative-ai-inferenceLatestGenerateTextResultGenerateText}, {@link #eNGenerative-ai-inferenceLatestSummarizeTextResultSummarizeText(ENGenerative-ai-inferenceLatestSummarizeTextResultSummarizeTextRequest) eNGenerative-ai-inferenceLatestSummarizeTextResultSummarizeText}, and {@link #eNGenerative-ai-inferenceLatestEmbedTextResultEmbedText(ENGenerative-ai-inferenceLatestEmbedTextResultEmbedTextRequest) eNGenerative-ai-inferenceLatestEmbedTextResultEmbedText}.

To use a Generative AI custom model for inference, you must first create an endpoint for that model. Use the {@link #eNGenerative-aiLatest(ENGenerative-aiLatestRequest) eNGenerative-aiLatest} to {@link #eNGenerative-aiLatestModel(ENGenerative-aiLatestModelRequest) eNGenerative-aiLatestModel} by fine-tuning an out-of-the-box model, or a previous version of a custom model, using your own data. Fine-tune the custom model on a {@link #eNGenerative-aiLatestDedicatedAiCluster(ENGenerative-aiLatestDedicatedAiClusterRequest) eNGenerative-aiLatestDedicatedAiCluster}. Then, create a {@link #eNGenerative-aiLatestDedicatedAiCluster(ENGenerative-aiLatestDedicatedAiClusterRequest) eNGenerative-aiLatestDedicatedAiCluster} with an {@link Endpoint} to host your custom model. For resource management in the Generative AI service, use the {@link #eNGenerative-aiLatest(ENGenerative-aiLatestRequest) eNGenerative-aiLatest}.

To learn more about the service, see the [Generative AI documentation](https://docs.oracle.com/iaas/Content/generative-ai/home.htm).

 * OpenAPI spec version: 20231130
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Details for the request to summarize text.
 */
export interface SummarizeTextDetails {
    /**
     * The input string to be summarized.
     */
    "input": string;
    "servingMode": model.DedicatedServingMode | model.OnDemandServingMode;
    /**
     * The OCID of compartment in which to call the Generative AI service to summarize text.
     */
    "compartmentId": string;
    /**
     * Whether or not to include the original inputs in the response.
     */
    "isEcho"?: boolean;
    /**
      * A number that sets the randomness of the generated output. Lower temperatures mean less random generations.
  * <p>
  Use lower numbers for tasks with a correct answer such as question answering or summarizing. High temperatures can generate hallucinations or factually incorrect information. Start with temperatures lower than 1.0, and increase the temperature for more creative outputs, as you regenerate the prompts to refine the outputs.
  *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
      */
    "temperature"?: number;
    /**
     * A free-form instruction for modifying how the summaries get generated. Should complete the sentence \"Generate a summary _\". For example, \"focusing on the next steps\" or \"written by Yoda\".
     */
    "additionalCommand"?: string;
    /**
     * Indicates the approximate length of the summary. If \"AUTO\" is selected, the best option will be picked based on the input text.
     */
    "length"?: SummarizeTextDetails.Length;
    /**
     * Indicates the style in which the summary will be delivered - in a free form paragraph or in bullet points. If \"AUTO\" is selected, the best option will be picked based on the input text.
     */
    "format"?: SummarizeTextDetails.Format;
    /**
     * Controls how close to the original text the summary is. High extractiveness summaries will lean towards reusing sentences verbatim, while low extractiveness summaries will tend to paraphrase more.
     */
    "extractiveness"?: SummarizeTextDetails.Extractiveness;
}
export declare namespace SummarizeTextDetails {
    enum Length {
        Short = "SHORT",
        Medium = "MEDIUM",
        Long = "LONG",
        Auto = "AUTO"
    }
    enum Format {
        Paragraph = "PARAGRAPH",
        Bullets = "BULLETS",
        Auto = "AUTO"
    }
    enum Extractiveness {
        Low = "LOW",
        Medium = "MEDIUM",
        High = "HIGH",
        Auto = "AUTO"
    }
    function getJsonObj(obj: SummarizeTextDetails): object;
    function getDeserializedJsonObj(obj: SummarizeTextDetails): object;
}
