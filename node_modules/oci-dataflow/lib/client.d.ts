/**
 * Data Flow API
 * Use the Data Flow APIs to run any Apache Spark application at any scale without deploying or managing any infrastructure.

 * OpenAPI spec version: 20200129
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DataFlowWaiter } from "./dataflow-waiter";
declare const Breaker: any;
export declare enum DataFlowApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class DataFlowClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DataFlowWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DataFlowWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DataFlowWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DataFlowWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Deletes an application using an `applicationId` and terminates related runs. This operation will timeout in approximate 30 minutes if any related Runs are not terminated successfully.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CascadingDeleteApplicationRequest
     * @return CascadingDeleteApplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/CascadingDeleteApplication.ts.html |here} to see how to use CascadingDeleteApplication API.
     */
    cascadingDeleteApplication(cascadingDeleteApplicationRequest: requests.CascadingDeleteApplicationRequest): Promise<responses.CascadingDeleteApplicationResponse>;
    /**
     * Moves an application into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * Associated resources, like runs, will not be automatically moved.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeApplicationCompartmentRequest
     * @return ChangeApplicationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ChangeApplicationCompartment.ts.html |here} to see how to use ChangeApplicationCompartment API.
     */
    changeApplicationCompartment(changeApplicationCompartmentRequest: requests.ChangeApplicationCompartmentRequest): Promise<responses.ChangeApplicationCompartmentResponse>;
    /**
     * Moves a pool into a different compartment. When provided, If-Match is checked against ETag
     * values of the resource. Associated resources, like historical metrics, will not be
     * automatically moved. The pool must be in a terminal state (STOPPED, FAILED) in
     * order for it to be moved to a different compartment
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangePoolCompartmentRequest
     * @return ChangePoolCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ChangePoolCompartment.ts.html |here} to see how to use ChangePoolCompartment API.
     */
    changePoolCompartment(changePoolCompartmentRequest: requests.ChangePoolCompartmentRequest): Promise<responses.ChangePoolCompartmentResponse>;
    /**
     * Moves a private endpoint into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangePrivateEndpointCompartmentRequest
     * @return ChangePrivateEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ChangePrivateEndpointCompartment.ts.html |here} to see how to use ChangePrivateEndpointCompartment API.
     */
    changePrivateEndpointCompartment(changePrivateEndpointCompartmentRequest: requests.ChangePrivateEndpointCompartmentRequest): Promise<responses.ChangePrivateEndpointCompartmentResponse>;
    /**
     * Moves a run into a different compartment. When provided, If-Match is checked against ETag
     * values of the resource. Associated resources, like historical metrics, will not be
     * automatically moved. The run must be in a terminal state (CANCELED, FAILED, SUCCEEDED) in
     * order for it to be moved to a different compartment
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeRunCompartmentRequest
     * @return ChangeRunCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ChangeRunCompartment.ts.html |here} to see how to use ChangeRunCompartment API.
     */
    changeRunCompartment(changeRunCompartmentRequest: requests.ChangeRunCompartmentRequest): Promise<responses.ChangeRunCompartmentResponse>;
    /**
     * Moves an Sql Endpoint from one compartment to another. When provided, If-Match is checked against ETag values of the Sql Endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeSqlEndpointCompartmentRequest
     * @return ChangeSqlEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ChangeSqlEndpointCompartment.ts.html |here} to see how to use ChangeSqlEndpointCompartment API.
     */
    changeSqlEndpointCompartment(changeSqlEndpointCompartmentRequest: requests.ChangeSqlEndpointCompartmentRequest): Promise<responses.ChangeSqlEndpointCompartmentResponse>;
    /**
     * Creates an application.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateApplicationRequest
     * @return CreateApplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/CreateApplication.ts.html |here} to see how to use CreateApplication API.
     */
    createApplication(createApplicationRequest: requests.CreateApplicationRequest): Promise<responses.CreateApplicationResponse>;
    /**
     * Create a pool to be used by dataflow runs or applications.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreatePoolRequest
     * @return CreatePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/CreatePool.ts.html |here} to see how to use CreatePool API.
     */
    createPool(createPoolRequest: requests.CreatePoolRequest): Promise<responses.CreatePoolResponse>;
    /**
     * Creates a private endpoint to be used by applications.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreatePrivateEndpointRequest
     * @return CreatePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/CreatePrivateEndpoint.ts.html |here} to see how to use CreatePrivateEndpoint API.
     */
    createPrivateEndpoint(createPrivateEndpointRequest: requests.CreatePrivateEndpointRequest): Promise<responses.CreatePrivateEndpointResponse>;
    /**
     * Creates a run for an application.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateRunRequest
     * @return CreateRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/CreateRun.ts.html |here} to see how to use CreateRun API.
     */
    createRun(createRunRequest: requests.CreateRunRequest): Promise<responses.CreateRunResponse>;
    /**
     * Create a new Sql Endpoint.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSqlEndpointRequest
     * @return CreateSqlEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/CreateSqlEndpoint.ts.html |here} to see how to use CreateSqlEndpoint API.
     */
    createSqlEndpoint(createSqlEndpointRequest: requests.CreateSqlEndpointRequest): Promise<responses.CreateSqlEndpointResponse>;
    /**
     * Executes a statement for a Session run.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateStatementRequest
     * @return CreateStatementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/CreateStatement.ts.html |here} to see how to use CreateStatement API.
     */
    createStatement(createStatementRequest: requests.CreateStatementRequest): Promise<responses.CreateStatementResponse>;
    /**
     * Deletes an application using an `applicationId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteApplicationRequest
     * @return DeleteApplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/DeleteApplication.ts.html |here} to see how to use DeleteApplication API.
     */
    deleteApplication(deleteApplicationRequest: requests.DeleteApplicationRequest): Promise<responses.DeleteApplicationResponse>;
    /**
     * Deletes a pool using a `poolId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeletePoolRequest
     * @return DeletePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/DeletePool.ts.html |here} to see how to use DeletePool API.
     */
    deletePool(deletePoolRequest: requests.DeletePoolRequest): Promise<responses.DeletePoolResponse>;
    /**
     * Deletes a private endpoint using a `privateEndpointId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeletePrivateEndpointRequest
     * @return DeletePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/DeletePrivateEndpoint.ts.html |here} to see how to use DeletePrivateEndpoint API.
     */
    deletePrivateEndpoint(deletePrivateEndpointRequest: requests.DeletePrivateEndpointRequest): Promise<responses.DeletePrivateEndpointResponse>;
    /**
     * Cancels the specified run if it has not already completed or was previously cancelled.
     * If a run is in progress, the executing job will be killed.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteRunRequest
     * @return DeleteRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/DeleteRun.ts.html |here} to see how to use DeleteRun API.
     */
    deleteRun(deleteRunRequest: requests.DeleteRunRequest): Promise<responses.DeleteRunResponse>;
    /**
     * Delete a Sql Endpoint resource, identified by the SqlEndpoint id.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSqlEndpointRequest
     * @return DeleteSqlEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/DeleteSqlEndpoint.ts.html |here} to see how to use DeleteSqlEndpoint API.
     */
    deleteSqlEndpoint(deleteSqlEndpointRequest: requests.DeleteSqlEndpointRequest): Promise<responses.DeleteSqlEndpointResponse>;
    /**
     * Cancels the specified statement for a Session run.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteStatementRequest
     * @return DeleteStatementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/DeleteStatement.ts.html |here} to see how to use DeleteStatement API.
     */
    deleteStatement(deleteStatementRequest: requests.DeleteStatementRequest): Promise<responses.DeleteStatementResponse>;
    /**
     * Retrieves an application using an `applicationId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetApplicationRequest
     * @return GetApplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/GetApplication.ts.html |here} to see how to use GetApplication API.
     */
    getApplication(getApplicationRequest: requests.GetApplicationRequest): Promise<responses.GetApplicationResponse>;
    /**
     * Retrieves a pool using a `poolId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPoolRequest
     * @return GetPoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/GetPool.ts.html |here} to see how to use GetPool API.
     */
    getPool(getPoolRequest: requests.GetPoolRequest): Promise<responses.GetPoolResponse>;
    /**
     * Retrieves an private endpoint using a `privateEndpointId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPrivateEndpointRequest
     * @return GetPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/GetPrivateEndpoint.ts.html |here} to see how to use GetPrivateEndpoint API.
     */
    getPrivateEndpoint(getPrivateEndpointRequest: requests.GetPrivateEndpointRequest): Promise<responses.GetPrivateEndpointResponse>;
    /**
     * Retrieves the run for the specified `runId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRunRequest
     * @return GetRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/GetRun.ts.html |here} to see how to use GetRun API.
     */
    getRun(getRunRequest: requests.GetRunRequest): Promise<responses.GetRunResponse>;
    /**
     * Retrieves the content of an run log.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetRunLogRequest
     * @return GetRunLogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/GetRunLog.ts.html |here} to see how to use GetRunLog API.
     */
    getRunLog(getRunLogRequest: requests.GetRunLogRequest): Promise<responses.GetRunLogResponse>;
    /**
     * Retrieves a SQL Endpoint using a sqlEndpointId.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSqlEndpointRequest
     * @return GetSqlEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/GetSqlEndpoint.ts.html |here} to see how to use GetSqlEndpoint API.
     */
    getSqlEndpoint(getSqlEndpointRequest: requests.GetSqlEndpointRequest): Promise<responses.GetSqlEndpointResponse>;
    /**
     * Retrieves the statement corresponding to the `statementId` for a Session run specified by `runId`.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetStatementRequest
     * @return GetStatementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/GetStatement.ts.html |here} to see how to use GetStatement API.
     */
    getStatement(getStatementRequest: requests.GetStatementRequest): Promise<responses.GetStatementResponse>;
    /**
     * Gets the status of the work request with the given OCID.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Lists all applications in the specified compartment. Only one parameter other than compartmentId may also be included in a query. The query must include compartmentId. If the query does not include compartmentId, or includes compartmentId but two or more other parameters an error is returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListApplicationsRequest
     * @return ListApplicationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ListApplications.ts.html |here} to see how to use ListApplications API.
     */
    listApplications(listApplicationsRequest: requests.ListApplicationsRequest): Promise<responses.ListApplicationsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listApplicationsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ApplicationSummary objects
     * contained in responses from the listApplications operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllApplications(request: requests.ListApplicationsRequest): AsyncIterableIterator<model.ApplicationSummary>;
    /**
     * NOTE: This function is deprecated in favor of listApplicationsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listApplications operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllApplicationsResponses(request: requests.ListApplicationsRequest): AsyncIterableIterator<responses.ListApplicationsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ApplicationSummary objects
     * contained in responses from the listApplications operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listApplicationsRecordIterator(request: requests.ListApplicationsRequest): AsyncIterableIterator<model.ApplicationSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listApplications operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listApplicationsResponseIterator(request: requests.ListApplicationsRequest): AsyncIterableIterator<responses.ListApplicationsResponse>;
    /**
     * Lists all pools in the specified compartment. The query must include compartmentId. The query may also include one other parameter. If the query does not include compartmentId, or includes compartmentId, but with two or more other parameters, an error is returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPoolsRequest
     * @return ListPoolsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ListPools.ts.html |here} to see how to use ListPools API.
     */
    listPools(listPoolsRequest: requests.ListPoolsRequest): Promise<responses.ListPoolsResponse>;
    /**
     * Lists all private endpoints in the specified compartment. The query must include compartmentId. The query may also include one other parameter. If the query does not include compartmentId, or includes compartmentId, but with two or more other parameters, an error is returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPrivateEndpointsRequest
     * @return ListPrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ListPrivateEndpoints.ts.html |here} to see how to use ListPrivateEndpoints API.
     */
    listPrivateEndpoints(listPrivateEndpointsRequest: requests.ListPrivateEndpointsRequest): Promise<responses.ListPrivateEndpointsResponse>;
    /**
     * Retrieves summaries of the run's logs.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRunLogsRequest
     * @return ListRunLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ListRunLogs.ts.html |here} to see how to use ListRunLogs API.
     */
    listRunLogs(listRunLogsRequest: requests.ListRunLogsRequest): Promise<responses.ListRunLogsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listRunLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.RunLogSummary objects
     * contained in responses from the listRunLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRunLogs(request: requests.ListRunLogsRequest): AsyncIterableIterator<model.RunLogSummary>;
    /**
     * NOTE: This function is deprecated in favor of listRunLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listRunLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRunLogsResponses(request: requests.ListRunLogsRequest): AsyncIterableIterator<responses.ListRunLogsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.RunLogSummary objects
     * contained in responses from the listRunLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRunLogsRecordIterator(request: requests.ListRunLogsRequest): AsyncIterableIterator<model.RunLogSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listRunLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRunLogsResponseIterator(request: requests.ListRunLogsRequest): AsyncIterableIterator<responses.ListRunLogsResponse>;
    /**
     * Lists all runs of an application in the specified compartment.  Only one parameter other than compartmentId may also be included in a query. The query must include compartmentId. If the query does not include compartmentId, or includes compartmentId but two or more other parameters an error is returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListRunsRequest
     * @return ListRunsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ListRuns.ts.html |here} to see how to use ListRuns API.
     */
    listRuns(listRunsRequest: requests.ListRunsRequest): Promise<responses.ListRunsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listRunsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.RunSummary objects
     * contained in responses from the listRuns operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRuns(request: requests.ListRunsRequest): AsyncIterableIterator<model.RunSummary>;
    /**
     * NOTE: This function is deprecated in favor of listRunsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listRuns operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRunsResponses(request: requests.ListRunsRequest): AsyncIterableIterator<responses.ListRunsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.RunSummary objects
     * contained in responses from the listRuns operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRunsRecordIterator(request: requests.ListRunsRequest): AsyncIterableIterator<model.RunSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listRuns operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listRunsResponseIterator(request: requests.ListRunsRequest): AsyncIterableIterator<responses.ListRunsResponse>;
    /**
     * Lists all Sql Endpoints in the specified compartment.
     * The query must include compartmentId or sqlEndpointId.
     * If the query does not include either compartmentId or sqlEndpointId, an error is returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlEndpointsRequest
     * @return ListSqlEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ListSqlEndpoints.ts.html |here} to see how to use ListSqlEndpoints API.
     */
    listSqlEndpoints(listSqlEndpointsRequest: requests.ListSqlEndpointsRequest): Promise<responses.ListSqlEndpointsResponse>;
    /**
     * Lists all statements for a Session run.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListStatementsRequest
     * @return ListStatementsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ListStatements.ts.html |here} to see how to use ListStatements API.
     */
    listStatements(listStatementsRequest: requests.ListStatementsRequest): Promise<responses.ListStatementsResponse>;
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Return a paginated list of logs for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * Starts the dataflow pool for a given `poolId`. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StartPoolRequest
     * @return StartPoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/StartPool.ts.html |here} to see how to use StartPool API.
     */
    startPool(startPoolRequest: requests.StartPoolRequest): Promise<responses.StartPoolResponse>;
    /**
     * Starts the SqlEndpoint for a given `SqlEndpointId`. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StartSqlEndpointRequest
     * @return StartSqlEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/StartSqlEndpoint.ts.html |here} to see how to use StartSqlEndpoint API.
     */
    startSqlEndpoint(startSqlEndpointRequest: requests.StartSqlEndpointRequest): Promise<responses.StartSqlEndpointResponse>;
    /**
     * Stops the dataflow pool for a given `poolId`. When provided, If-Match is checked against ETag values of the resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StopPoolRequest
     * @return StopPoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/StopPool.ts.html |here} to see how to use StopPool API.
     */
    stopPool(stopPoolRequest: requests.StopPoolRequest): Promise<responses.StopPoolResponse>;
    /**
     * Stops the SqlEndpoint for a given `SqlEndpointId`. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param StopSqlEndpointRequest
     * @return StopSqlEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/StopSqlEndpoint.ts.html |here} to see how to use StopSqlEndpoint API.
     */
    stopSqlEndpoint(stopSqlEndpointRequest: requests.StopSqlEndpointRequest): Promise<responses.StopSqlEndpointResponse>;
    /**
     * Updates an application using an `applicationId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateApplicationRequest
     * @return UpdateApplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/UpdateApplication.ts.html |here} to see how to use UpdateApplication API.
     */
    updateApplication(updateApplicationRequest: requests.UpdateApplicationRequest): Promise<responses.UpdateApplicationResponse>;
    /**
     * Updates a pool using a `poolId`.If changes to a pool doesn't match
     * a previously defined pool,then a 409 status code will be returned.This indicates
     * that a conflict has been detected.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdatePoolRequest
     * @return UpdatePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/UpdatePool.ts.html |here} to see how to use UpdatePool API.
     */
    updatePool(updatePoolRequest: requests.UpdatePoolRequest): Promise<responses.UpdatePoolResponse>;
    /**
     * Updates a private endpoint using a `privateEndpointId`.  If changes to a private endpoint match
     * a previously defined private endpoint, then a 409 status code will be returned.  This indicates
     * that a conflict has been detected.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdatePrivateEndpointRequest
     * @return UpdatePrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/UpdatePrivateEndpoint.ts.html |here} to see how to use UpdatePrivateEndpoint API.
     */
    updatePrivateEndpoint(updatePrivateEndpointRequest: requests.UpdatePrivateEndpointRequest): Promise<responses.UpdatePrivateEndpointResponse>;
    /**
     * Updates a run using a `runId`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateRunRequest
     * @return UpdateRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/UpdateRun.ts.html |here} to see how to use UpdateRun API.
     */
    updateRun(updateRunRequest: requests.UpdateRunRequest): Promise<responses.UpdateRunResponse>;
    /**
     * Update a Sql Endpoint resource, identified by the SqlEndpoint id.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateSqlEndpointRequest
     * @return UpdateSqlEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataflow/UpdateSqlEndpoint.ts.html |here} to see how to use UpdateSqlEndpoint API.
     */
    updateSqlEndpoint(updateSqlEndpointRequest: requests.UpdateSqlEndpointRequest): Promise<responses.UpdateSqlEndpointResponse>;
}
export {};
