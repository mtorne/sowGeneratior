/**
 * Ops Insights API
 * Use the Ops Insights API to perform data extraction operations to obtain database
resource utilization, performance statistics, and reference information. For more information,
see [About Oracle Cloud Infrastructure Ops Insights](https://docs.oracle.com/iaas/en-us/iaas/operations-insights/doc/operations-insights.html).

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { OperationsInsightsClient } from "./client";
export declare class OperationsInsightsWaiter {
    private client;
    private readonly config?;
    constructor(client: OperationsInsightsClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAwrHub till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAwrHubResponse | null (null in case of 404 response)
     */
    forAwrHub(request: serviceRequests.GetAwrHubRequest, ...targetStates: models.AwrHubLifecycleState[]): Promise<serviceResponses.GetAwrHubResponse | null>;
    /**
     * Waits forAwrHubSource till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAwrHubSourceResponse | null (null in case of 404 response)
     */
    forAwrHubSource(request: serviceRequests.GetAwrHubSourceRequest, ...targetStates: models.AwrHubSourceLifecycleState[]): Promise<serviceResponses.GetAwrHubSourceResponse | null>;
    /**
     * Waits forDatabaseInsight till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDatabaseInsightResponse | null (null in case of 404 response)
     */
    forDatabaseInsight(request: serviceRequests.GetDatabaseInsightRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDatabaseInsightResponse | null>;
    /**
     * Waits forEnterpriseManagerBridge till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetEnterpriseManagerBridgeResponse | null (null in case of 404 response)
     */
    forEnterpriseManagerBridge(request: serviceRequests.GetEnterpriseManagerBridgeRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetEnterpriseManagerBridgeResponse | null>;
    /**
     * Waits forExadataInsight till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExadataInsightResponse | null (null in case of 404 response)
     */
    forExadataInsight(request: serviceRequests.GetExadataInsightRequest, ...targetStates: models.ExadataInsightLifecycleState[]): Promise<serviceResponses.GetExadataInsightResponse | null>;
    /**
     * Waits forHostInsight till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetHostInsightResponse | null (null in case of 404 response)
     */
    forHostInsight(request: serviceRequests.GetHostInsightRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetHostInsightResponse | null>;
    /**
     * Waits forNewsReport till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNewsReportResponse | null (null in case of 404 response)
     */
    forNewsReport(request: serviceRequests.GetNewsReportRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetNewsReportResponse | null>;
    /**
     * Waits forOperationsInsightsPrivateEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOperationsInsightsPrivateEndpointResponse | null (null in case of 404 response)
     */
    forOperationsInsightsPrivateEndpoint(request: serviceRequests.GetOperationsInsightsPrivateEndpointRequest, ...targetStates: models.OperationsInsightsPrivateEndpointLifecycleState[]): Promise<serviceResponses.GetOperationsInsightsPrivateEndpointResponse | null>;
    /**
     * Waits forOperationsInsightsWarehouse till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOperationsInsightsWarehouseResponse | null (null in case of 404 response)
     */
    forOperationsInsightsWarehouse(request: serviceRequests.GetOperationsInsightsWarehouseRequest, ...targetStates: models.OperationsInsightsWarehouseLifecycleState[]): Promise<serviceResponses.GetOperationsInsightsWarehouseResponse | null>;
    /**
     * Waits forOperationsInsightsWarehouseUser till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOperationsInsightsWarehouseUserResponse | null (null in case of 404 response)
     */
    forOperationsInsightsWarehouseUser(request: serviceRequests.GetOperationsInsightsWarehouseUserRequest, ...targetStates: models.OperationsInsightsWarehouseUserLifecycleState[]): Promise<serviceResponses.GetOperationsInsightsWarehouseUserResponse | null>;
    /**
     * Waits forOpsiConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOpsiConfigurationResponse | null (null in case of 404 response)
     */
    forOpsiConfiguration(request: serviceRequests.GetOpsiConfigurationRequest, ...targetStates: models.OpsiConfigurationLifecycleState[]): Promise<serviceResponses.GetOpsiConfigurationResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
