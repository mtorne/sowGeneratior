"use strict";
/**
 * Ops Insights API
 * Use the Ops Insights API to perform data extraction operations to obtain database
resource utilization, performance statistics, and reference information. For more information,
see [About Oracle Cloud Infrastructure Ops Insights](https://docs.oracle.com/iaas/en-us/iaas/operations-insights/doc/operations-insights.html).

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationType = void 0;
/**
 * Possible operation types.
 **/
var OperationType;
(function (OperationType) {
    OperationType["EnableDatabaseInsight"] = "ENABLE_DATABASE_INSIGHT";
    OperationType["DisableDatabaseInsight"] = "DISABLE_DATABASE_INSIGHT";
    OperationType["UpdateDatabaseInsight"] = "UPDATE_DATABASE_INSIGHT";
    OperationType["CreateDatabaseInsight"] = "CREATE_DATABASE_INSIGHT";
    OperationType["MoveDatabaseInsight"] = "MOVE_DATABASE_INSIGHT";
    OperationType["DeleteDatabaseInsight"] = "DELETE_DATABASE_INSIGHT";
    OperationType["CreateEnterpriseManagerBridge"] = "CREATE_ENTERPRISE_MANAGER_BRIDGE";
    OperationType["UdpateEnterpriseManagerBridge"] = "UDPATE_ENTERPRISE_MANAGER_BRIDGE";
    OperationType["MoveEnterpriseManagerBridge"] = "MOVE_ENTERPRISE_MANAGER_BRIDGE";
    OperationType["DeleteEnterpriseManagerBridge"] = "DELETE_ENTERPRISE_MANAGER_BRIDGE";
    OperationType["EnableHostInsight"] = "ENABLE_HOST_INSIGHT";
    OperationType["DisableHostInsight"] = "DISABLE_HOST_INSIGHT";
    OperationType["UpdateHostInsight"] = "UPDATE_HOST_INSIGHT";
    OperationType["CreateHostInsight"] = "CREATE_HOST_INSIGHT";
    OperationType["MoveHostInsight"] = "MOVE_HOST_INSIGHT";
    OperationType["DeleteHostInsight"] = "DELETE_HOST_INSIGHT";
    OperationType["CreateExadataInsight"] = "CREATE_EXADATA_INSIGHT";
    OperationType["EnableExadataInsight"] = "ENABLE_EXADATA_INSIGHT";
    OperationType["DisableExadataInsight"] = "DISABLE_EXADATA_INSIGHT";
    OperationType["UpdateExadataInsight"] = "UPDATE_EXADATA_INSIGHT";
    OperationType["MoveExadataInsight"] = "MOVE_EXADATA_INSIGHT";
    OperationType["DeleteExadataInsight"] = "DELETE_EXADATA_INSIGHT";
    OperationType["AddExadataInsightMembers"] = "ADD_EXADATA_INSIGHT_MEMBERS";
    OperationType["ExadataAutoSync"] = "EXADATA_AUTO_SYNC";
    OperationType["UpdateOpsiWarehouse"] = "UPDATE_OPSI_WAREHOUSE";
    OperationType["CreateOpsiWarehouse"] = "CREATE_OPSI_WAREHOUSE";
    OperationType["MoveOpsiWarehouse"] = "MOVE_OPSI_WAREHOUSE";
    OperationType["DeleteOpsiWarehouse"] = "DELETE_OPSI_WAREHOUSE";
    OperationType["RotateOpsiWarehouseWallet"] = "ROTATE_OPSI_WAREHOUSE_WALLET";
    OperationType["UpdateOpsiWarehouseUser"] = "UPDATE_OPSI_WAREHOUSE_USER";
    OperationType["CreateOpsiWarehouseUser"] = "CREATE_OPSI_WAREHOUSE_USER";
    OperationType["MoveOpsiWarehouseUser"] = "MOVE_OPSI_WAREHOUSE_USER";
    OperationType["DeleteOpsiWarehouseUser"] = "DELETE_OPSI_WAREHOUSE_USER";
    OperationType["UpdateAwrhub"] = "UPDATE_AWRHUB";
    OperationType["CreateAwrhub"] = "CREATE_AWRHUB";
    OperationType["MoveAwrhub"] = "MOVE_AWRHUB";
    OperationType["DeleteAwrhub"] = "DELETE_AWRHUB";
    OperationType["UpdatePrivateEndpoint"] = "UPDATE_PRIVATE_ENDPOINT";
    OperationType["CreatePrivateEndpoint"] = "CREATE_PRIVATE_ENDPOINT";
    OperationType["MovePrivateEndpoint"] = "MOVE_PRIVATE_ENDPOINT";
    OperationType["DeletePrivateEndpoint"] = "DELETE_PRIVATE_ENDPOINT";
    OperationType["ChangePeComanagedDatabaseInsightDetails"] = "CHANGE_PE_COMANAGED_DATABASE_INSIGHT_DETAILS";
    OperationType["UpdateOpsiConfiguration"] = "UPDATE_OPSI_CONFIGURATION";
    OperationType["CreateOpsiConfiguration"] = "CREATE_OPSI_CONFIGURATION";
    OperationType["MoveOpsiConfiguration"] = "MOVE_OPSI_CONFIGURATION";
    OperationType["DeleteOpsiConfiguration"] = "DELETE_OPSI_CONFIGURATION";
    OperationType["EnableAdbAdvancedFeatures"] = "ENABLE_ADB_ADVANCED_FEATURES";
    OperationType["DisableAdbAdvancedFeatures"] = "DISABLE_ADB_ADVANCED_FEATURES";
    OperationType["UpdateAdbAdvancedFeatures"] = "UPDATE_ADB_ADVANCED_FEATURES";
    OperationType["CreateNewsReport"] = "CREATE_NEWS_REPORT";
    OperationType["EnableNewsReport"] = "ENABLE_NEWS_REPORT";
    OperationType["DisableNewsReport"] = "DISABLE_NEWS_REPORT";
    OperationType["UpdateNewsReport"] = "UPDATE_NEWS_REPORT";
    OperationType["MoveNewsReport"] = "MOVE_NEWS_REPORT";
    OperationType["DeleteNewsReport"] = "DELETE_NEWS_REPORT";
    OperationType["CreateAwrhubSource"] = "CREATE_AWRHUB_SOURCE";
    OperationType["DeleteAwrhubSource"] = "DELETE_AWRHUB_SOURCE";
    OperationType["UpdateAwrhubSource"] = "UPDATE_AWRHUB_SOURCE";
    OperationType["MoveAwrhubSource"] = "MOVE_AWRHUB_SOURCE";
    OperationType["EnableAwrhubSource"] = "ENABLE_AWRHUB_SOURCE";
    OperationType["DisableAwrhubSource"] = "DISABLE_AWRHUB_SOURCE";
    OperationType["ChangeMacsManagedCloudDatabaseInsightConnectionDetails"] = "CHANGE_MACS_MANAGED_CLOUD_DATABASE_INSIGHT_CONNECTION_DETAILS";
    OperationType["TestMacsManagedCloudDatabaseInsightConnectionDetails"] = "TEST_MACS_MANAGED_CLOUD_DATABASE_INSIGHT_CONNECTION_DETAILS";
    OperationType["ChangeExternalMysqlDatabaseInsightConnectionDetails"] = "CHANGE_EXTERNAL_MYSQL_DATABASE_INSIGHT_CONNECTION_DETAILS";
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    OperationType["UnknownValue"] = "UNKNOWN_VALUE";
})(OperationType = exports.OperationType || (exports.OperationType = {}));
(function (OperationType) {
    function getJsonObj(obj) {
        return obj;
    }
    OperationType.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        return obj;
    }
    OperationType.getDeserializedJsonObj = getDeserializedJsonObj;
})(OperationType = exports.OperationType || (exports.OperationType = {}));
//# sourceMappingURL=operation-type.js.map