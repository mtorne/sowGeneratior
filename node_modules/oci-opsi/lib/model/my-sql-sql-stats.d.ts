/**
 * Ops Insights API
 * Use the Ops Insights API to perform data extraction operations to obtain database
resource utilization, performance statistics, and reference information. For more information,
see [About Oracle Cloud Infrastructure Ops Insights](https://docs.oracle.com/iaas/en-us/iaas/operations-insights/doc/operations-insights.html).

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * MySql Sql Stats type object.
 */
export interface MySqlSqlStats {
    /**
     * Unique SQL ID Digest for a MySql Statement.
     * Example: {@code \"c20fcea11911be36651b7ca7bd3712d4ed9ac1134cee9c6620039e1fb13b5eff\"}
     *
     */
    "digest": string;
    /**
     * Collection timestamp.
     * Example: {@code \"2020-03-31T00:00:00.000Z\"}
     *
     */
    "timeCollected": Date;
    /**
     * Type of statement such as select, update or delete.
     */
    "commandType"?: string;
    /**
     * Total number of SQL statements used in collection ranking calculation. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "totalRows"?: number;
    /**
     * Percent of SQL statements in the perf schema table relative to max or overflow count set in @@GLOBAL.performance_schema_digests_size. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "perfSchemaUsedPercent"?: number;
    /**
     * Name of Database Schema.
     * Example: {@code \"performance_schema\"}
     *
     */
    "schemaName"?: string;
    /**
     * The total number of times the statement has executed. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "execCount"?: number;
    /**
     * The total wait time (in picoseconds) of timed occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "totalLatencyInPs"?: number;
    /**
     * The total time waiting (in picoseconds) for locks by timed occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "lockLatencyInPs"?: number;
    /**
     * The total number of errors produced by occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "errCount"?: number;
    /**
     * The total number of warnings produced by occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "warnCount"?: number;
    /**
     * The total number of rows affected by occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "rowsAffected"?: number;
    /**
     * The total number of rows returned by occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "rowsSent"?: number;
    /**
     * The total number of rows read from storage engines by occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "rowsExamined"?: number;
    /**
     * The total number of internal on-disk temporary tables created by occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "tmpDiskTables"?: number;
    /**
     * The total number of internal in-memory temporary tables created by occurrences of the statement Count Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "tmpTables"?: number;
    /**
     * The total number of joins that perform table scans because they do not use indexes by occurrences of the statement. If this value is not 0 Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "selectFullJoin"?: number;
    /**
     * The total number of joins that used a range search on a reference table by occurrences of the statement Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "selectFullRangeJoin"?: number;
    /**
     * The total number of joins that used ranges on the first table by occurrences of the statement. This is normally not a critical issue even if the value is quite large. Count Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "selectRange"?: number;
    /**
     * The total number of joins without keys that check for key usage after each row by occurrences of the statement. If this is not 0 Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "selectRangeCheck"?: number;
    /**
     * The total number of joins that did a full scan of the first table by occurrences of the statement Count Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "selectScan"?: number;
    /**
     * The total number of sort merge passes by occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "sortMergePasses"?: number;
    /**
     * The total number of sorts that were done using ranges by occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "sortRange"?: number;
    /**
     * The total number of rows sorted by occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "rowsSorted"?: number;
    /**
     * The total number of sorts that were done by scanning the table by occurrences of the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "sortScan"?: number;
    /**
     * The number of occurences of the statement which performed a table scan without using an index Count Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "noIndexUsedCount"?: number;
    /**
     * The number of occurences of the statement where the server found no good index to use Count Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "noGoodIndexUsedCount"?: number;
    /**
     * The total time spent on CPU (in picoseconds) for the current thread. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "cpuLatencyInPs"?: number;
    /**
     * The maximum amount of controlled memory (in bytes) used by the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "maxControlledMemoryInBytes"?: number;
    /**
     * The maximum amount of memory (in bytes) used by the statement. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "maxTotalMemoryInBytes"?: number;
    /**
     * The total number of times a query was processed on the secondary engine (HEATWAVE) for occurrences of this statement Count. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "execCountSecondary"?: number;
    /**
     * The time at which statement was first seen.
     * Example: {@code \"2023-01-16 08:04:31.533577\"}
     *
     */
    "timeFirstSeen"?: Date;
    /**
     * The time at which statement was most recently seen for all occurrences of the statement.
     * Example: {@code \"2023-01-30 02:17:08.067961\"}
     *
     */
    "timeLastSeen"?: Date;
}
export declare namespace MySqlSqlStats {
    function getJsonObj(obj: MySqlSqlStats): object;
    function getDeserializedJsonObj(obj: MySqlSqlStats): object;
}
