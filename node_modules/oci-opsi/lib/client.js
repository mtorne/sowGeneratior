"use strict";
/**
 * Ops Insights API
 * Use the Ops Insights API to perform data extraction operations to obtain database
resource utilization, performance statistics, and reference information. For more information,
see [About Oracle Cloud Infrastructure Ops Insights](https://docs.oracle.com/iaas/en-us/iaas/operations-insights/doc/operations-insights.html).

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationsInsightsClient = exports.OperationsInsightsApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const operationsinsights_waiter_1 = require("./operationsinsights-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var OperationsInsightsApiKeys;
(function (OperationsInsightsApiKeys) {
})(OperationsInsightsApiKeys = exports.OperationsInsightsApiKeys || (exports.OperationsInsightsApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class OperationsInsightsClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "OperationsInsights";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("opsi")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("opsi");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20200630";
        if (this.logger)
            this.logger.info(`OperationsInsightsClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(OperationsInsightsClient.serviceEndpointTemplate, this._region, OperationsInsightsClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(OperationsInsightsClient.serviceEndpointTemplate, this._regionId, OperationsInsightsClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(OperationsInsightsClient.serviceEndpointTemplate, region, OperationsInsightsClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(OperationsInsightsClient.serviceEndpointTemplate, regionId, OperationsInsightsClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new OperationsInsightsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new operationsinsights_waiter_1.OperationsInsightsWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Add new members (e.g. databases and hosts) to an Exadata system in Operations Insights. Exadata-related metric collection and analysis will be started.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AddExadataInsightMembersRequest
     * @return AddExadataInsightMembersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/AddExadataInsightMembers.ts.html |here} to see how to use AddExadataInsightMembers API.
     */
    addExadataInsightMembers(addExadataInsightMembersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#addExadataInsightMembers.");
            const operationName = "addExadataInsightMembers";
            const apiReferenceLink = "";
            const pathParams = {
                "{exadataInsightId}": addExadataInsightMembersRequest.exadataInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": addExadataInsightMembersRequest.ifMatch,
                "opc-request-id": addExadataInsightMembersRequest.opcRequestId,
                "opc-retry-token": addExadataInsightMembersRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, addExadataInsightMembersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/{exadataInsightId}/actions/addMembers",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addExadataInsightMembersRequest.addExadataInsightMembersDetails, "AddExadataInsightMembersDetails", model.AddExadataInsightMembersDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update connection detail for advanced features of Autonomous Database in Operations Insights.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAutonomousDatabaseInsightAdvancedFeaturesRequest
     * @return ChangeAutonomousDatabaseInsightAdvancedFeaturesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeAutonomousDatabaseInsightAdvancedFeatures.ts.html |here} to see how to use ChangeAutonomousDatabaseInsightAdvancedFeatures API.
     */
    changeAutonomousDatabaseInsightAdvancedFeatures(changeAutonomousDatabaseInsightAdvancedFeaturesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeAutonomousDatabaseInsightAdvancedFeatures.");
            const operationName = "changeAutonomousDatabaseInsightAdvancedFeatures";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": changeAutonomousDatabaseInsightAdvancedFeaturesRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAutonomousDatabaseInsightAdvancedFeaturesRequest.ifMatch,
                "opc-request-id": changeAutonomousDatabaseInsightAdvancedFeaturesRequest.opcRequestId,
                "opc-retry-token": changeAutonomousDatabaseInsightAdvancedFeaturesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAutonomousDatabaseInsightAdvancedFeaturesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/changeAutonomousDatabaseInsightAdvancedFeatures",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAutonomousDatabaseInsightAdvancedFeaturesRequest.changeAutonomousDatabaseInsightAdvancedFeaturesDetails, "ChangeAutonomousDatabaseInsightAdvancedFeaturesDetails", model.ChangeAutonomousDatabaseInsightAdvancedFeaturesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves an AwrHubSource resource from one compartment to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAwrHubSourceCompartmentRequest
     * @return ChangeAwrHubSourceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeAwrHubSourceCompartment.ts.html |here} to see how to use ChangeAwrHubSourceCompartment API.
     */
    changeAwrHubSourceCompartment(changeAwrHubSourceCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeAwrHubSourceCompartment.");
            const operationName = "changeAwrHubSourceCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubSourceId}": changeAwrHubSourceCompartmentRequest.awrHubSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAwrHubSourceCompartmentRequest.ifMatch,
                "opc-request-id": changeAwrHubSourceCompartmentRequest.opcRequestId,
                "opc-retry-token": changeAwrHubSourceCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAwrHubSourceCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubSources/{awrHubSourceId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAwrHubSourceCompartmentRequest.changeAwrHubSourceCompartmentDetails, "ChangeAwrHubSourceCompartmentDetails", model.ChangeAwrHubSourceCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a DatabaseInsight resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeDatabaseInsightCompartmentRequest
     * @return ChangeDatabaseInsightCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeDatabaseInsightCompartment.ts.html |here} to see how to use ChangeDatabaseInsightCompartment API.
     */
    changeDatabaseInsightCompartment(changeDatabaseInsightCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeDatabaseInsightCompartment.");
            const operationName = "changeDatabaseInsightCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": changeDatabaseInsightCompartmentRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeDatabaseInsightCompartmentRequest.ifMatch,
                "opc-request-id": changeDatabaseInsightCompartmentRequest.opcRequestId,
                "opc-retry-token": changeDatabaseInsightCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeDatabaseInsightCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDatabaseInsightCompartmentRequest.changeDatabaseInsightCompartmentDetails, "ChangeDatabaseInsightCompartmentDetails", model.ChangeDatabaseInsightCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a EnterpriseManagerBridge resource from one compartment to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeEnterpriseManagerBridgeCompartmentRequest
     * @return ChangeEnterpriseManagerBridgeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeEnterpriseManagerBridgeCompartment.ts.html |here} to see how to use ChangeEnterpriseManagerBridgeCompartment API.
     */
    changeEnterpriseManagerBridgeCompartment(changeEnterpriseManagerBridgeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeEnterpriseManagerBridgeCompartment.");
            const operationName = "changeEnterpriseManagerBridgeCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{enterpriseManagerBridgeId}": changeEnterpriseManagerBridgeCompartmentRequest.enterpriseManagerBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeEnterpriseManagerBridgeCompartmentRequest.ifMatch,
                "opc-request-id": changeEnterpriseManagerBridgeCompartmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeEnterpriseManagerBridgeCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges/{enterpriseManagerBridgeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeEnterpriseManagerBridgeCompartmentRequest.changeEnterpriseManagerBridgeCompartmentDetails, "ChangeEnterpriseManagerBridgeCompartmentDetails", model.ChangeEnterpriseManagerBridgeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves an Exadata insight resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeExadataInsightCompartmentRequest
     * @return ChangeExadataInsightCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeExadataInsightCompartment.ts.html |here} to see how to use ChangeExadataInsightCompartment API.
     */
    changeExadataInsightCompartment(changeExadataInsightCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeExadataInsightCompartment.");
            const operationName = "changeExadataInsightCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{exadataInsightId}": changeExadataInsightCompartmentRequest.exadataInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeExadataInsightCompartmentRequest.ifMatch,
                "opc-request-id": changeExadataInsightCompartmentRequest.opcRequestId,
                "opc-retry-token": changeExadataInsightCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeExadataInsightCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/{exadataInsightId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeExadataInsightCompartmentRequest.changeExadataInsightCompartmentDetails, "ChangeExadataInsightCompartmentDetails", model.ChangeExadataInsightCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Change the connection details of an External MySQL database insight. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeExternalMysqlDatabaseInsightConnectionRequest
     * @return ChangeExternalMysqlDatabaseInsightConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeExternalMysqlDatabaseInsightConnection.ts.html |here} to see how to use ChangeExternalMysqlDatabaseInsightConnection API.
     */
    changeExternalMysqlDatabaseInsightConnection(changeExternalMysqlDatabaseInsightConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeExternalMysqlDatabaseInsightConnection.");
            const operationName = "changeExternalMysqlDatabaseInsightConnection";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": changeExternalMysqlDatabaseInsightConnectionRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeExternalMysqlDatabaseInsightConnectionRequest.ifMatch,
                "opc-request-id": changeExternalMysqlDatabaseInsightConnectionRequest.opcRequestId,
                "opc-retry-token": changeExternalMysqlDatabaseInsightConnectionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeExternalMysqlDatabaseInsightConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/changeExternalMysqlDatabaseInsightConnectionDetails",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeExternalMysqlDatabaseInsightConnectionRequest.changeExternalMysqlDatabaseInsightConnectionDetails, "ChangeExternalMysqlDatabaseInsightConnectionDetails", model.ChangeExternalMysqlDatabaseInsightConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostInsight resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeHostInsightCompartmentRequest
     * @return ChangeHostInsightCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeHostInsightCompartment.ts.html |here} to see how to use ChangeHostInsightCompartment API.
     */
    changeHostInsightCompartment(changeHostInsightCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeHostInsightCompartment.");
            const operationName = "changeHostInsightCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{hostInsightId}": changeHostInsightCompartmentRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostInsightCompartmentRequest.ifMatch,
                "opc-request-id": changeHostInsightCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostInsightCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeHostInsightCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostInsightCompartmentRequest.changeHostInsightCompartmentDetails, "ChangeHostInsightCompartmentDetails", model.ChangeHostInsightCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Change the connection details of a Cloud MACS-managed database insight. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeMacsManagedCloudDatabaseInsightConnectionRequest
     * @return ChangeMacsManagedCloudDatabaseInsightConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeMacsManagedCloudDatabaseInsightConnection.ts.html |here} to see how to use ChangeMacsManagedCloudDatabaseInsightConnection API.
     */
    changeMacsManagedCloudDatabaseInsightConnection(changeMacsManagedCloudDatabaseInsightConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeMacsManagedCloudDatabaseInsightConnection.");
            const operationName = "changeMacsManagedCloudDatabaseInsightConnection";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": changeMacsManagedCloudDatabaseInsightConnectionRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeMacsManagedCloudDatabaseInsightConnectionRequest.ifMatch,
                "opc-request-id": changeMacsManagedCloudDatabaseInsightConnectionRequest.opcRequestId,
                "opc-retry-token": changeMacsManagedCloudDatabaseInsightConnectionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeMacsManagedCloudDatabaseInsightConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/changeMacsManagedCloudDatabaseInsightConnectionDetails",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMacsManagedCloudDatabaseInsightConnectionRequest.changeMacsManagedCloudDatabaseInsightConnectionDetails, "ChangeMacsManagedCloudDatabaseInsightConnectionDetails", model.ChangeMacsManagedCloudDatabaseInsightConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a news report resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeNewsReportCompartmentRequest
     * @return ChangeNewsReportCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeNewsReportCompartment.ts.html |here} to see how to use ChangeNewsReportCompartment API.
     */
    changeNewsReportCompartment(changeNewsReportCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeNewsReportCompartment.");
            const operationName = "changeNewsReportCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{newsReportId}": changeNewsReportCompartmentRequest.newsReportId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeNewsReportCompartmentRequest.ifMatch,
                "opc-request-id": changeNewsReportCompartmentRequest.opcRequestId,
                "opc-retry-token": changeNewsReportCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeNewsReportCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/newsReports/{newsReportId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeNewsReportCompartmentRequest.changeNewsReportCompartmentDetails, "ChangeNewsReportCompartmentDetails", model.ChangeNewsReportCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a private endpoint from one compartment to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeOperationsInsightsPrivateEndpointCompartmentRequest
     * @return ChangeOperationsInsightsPrivateEndpointCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeOperationsInsightsPrivateEndpointCompartment.ts.html |here} to see how to use ChangeOperationsInsightsPrivateEndpointCompartment API.
     */
    changeOperationsInsightsPrivateEndpointCompartment(changeOperationsInsightsPrivateEndpointCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeOperationsInsightsPrivateEndpointCompartment.");
            const operationName = "changeOperationsInsightsPrivateEndpointCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsPrivateEndpointId}": changeOperationsInsightsPrivateEndpointCompartmentRequest.operationsInsightsPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeOperationsInsightsPrivateEndpointCompartmentRequest.ifMatch,
                "opc-request-id": changeOperationsInsightsPrivateEndpointCompartmentRequest.opcRequestId,
                "opc-retry-token": changeOperationsInsightsPrivateEndpointCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeOperationsInsightsPrivateEndpointCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsPrivateEndpoints/{operationsInsightsPrivateEndpointId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeOperationsInsightsPrivateEndpointCompartmentRequest.changeOperationsInsightsPrivateEndpointCompartmentDetails, "ChangeOperationsInsightsPrivateEndpointCompartmentDetails", model.ChangeOperationsInsightsPrivateEndpointCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a Operations Insights Warehouse resource from one compartment to another. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeOperationsInsightsWarehouseCompartmentRequest
     * @return ChangeOperationsInsightsWarehouseCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeOperationsInsightsWarehouseCompartment.ts.html |here} to see how to use ChangeOperationsInsightsWarehouseCompartment API.
     */
    changeOperationsInsightsWarehouseCompartment(changeOperationsInsightsWarehouseCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeOperationsInsightsWarehouseCompartment.");
            const operationName = "changeOperationsInsightsWarehouseCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsWarehouseId}": changeOperationsInsightsWarehouseCompartmentRequest.operationsInsightsWarehouseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeOperationsInsightsWarehouseCompartmentRequest.ifMatch,
                "opc-request-id": changeOperationsInsightsWarehouseCompartmentRequest.opcRequestId,
                "opc-retry-token": changeOperationsInsightsWarehouseCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeOperationsInsightsWarehouseCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouses/{operationsInsightsWarehouseId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeOperationsInsightsWarehouseCompartmentRequest.changeOperationsInsightsWarehouseCompartmentDetails, "ChangeOperationsInsightsWarehouseCompartmentDetails", model.ChangeOperationsInsightsWarehouseCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves an OpsiConfiguration resource from one compartment to another.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeOpsiConfigurationCompartmentRequest
     * @return ChangeOpsiConfigurationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangeOpsiConfigurationCompartment.ts.html |here} to see how to use ChangeOpsiConfigurationCompartment API.
     */
    changeOpsiConfigurationCompartment(changeOpsiConfigurationCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeOpsiConfigurationCompartment.");
            const operationName = "changeOpsiConfigurationCompartment";
            const apiReferenceLink = "";
            const pathParams = {
                "{opsiConfigurationId}": changeOpsiConfigurationCompartmentRequest.opsiConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeOpsiConfigurationCompartmentRequest.ifMatch,
                "opc-request-id": changeOpsiConfigurationCompartmentRequest.opcRequestId,
                "opc-retry-token": changeOpsiConfigurationCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeOpsiConfigurationCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/opsiConfigurations/{opsiConfigurationId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeOpsiConfigurationCompartmentRequest.changeOpsiConfigurationCompartmentDetails, "ChangeOpsiConfigurationCompartmentDetails", model.ChangeOpsiConfigurationCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Change the connection details of a co-managed  database insight. When provided, If-Match is checked against ETag values of the resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangePeComanagedDatabaseInsightRequest
     * @return ChangePeComanagedDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ChangePeComanagedDatabaseInsight.ts.html |here} to see how to use ChangePeComanagedDatabaseInsight API.
     */
    changePeComanagedDatabaseInsight(changePeComanagedDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changePeComanagedDatabaseInsight.");
            const operationName = "changePeComanagedDatabaseInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": changePeComanagedDatabaseInsightRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changePeComanagedDatabaseInsightRequest.ifMatch,
                "opc-request-id": changePeComanagedDatabaseInsightRequest.opcRequestId,
                "opc-retry-token": changePeComanagedDatabaseInsightRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changePeComanagedDatabaseInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/changePeComanagedDatabaseInsightDetails",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changePeComanagedDatabaseInsightRequest.changePeComanagedDatabaseInsightDetails, "ChangePeComanagedDatabaseInsightDetails", model.ChangePeComanagedDatabaseInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a AWR hub resource for the tenant in Operations Insights.
     * This resource will be created in root compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAwrHubRequest
     * @return CreateAwrHubResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/CreateAwrHub.ts.html |here} to see how to use CreateAwrHub API.
     */
    createAwrHub(createAwrHubRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createAwrHub.");
            const operationName = "createAwrHub";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createAwrHubRequest.opcRetryToken,
                "opc-request-id": createAwrHubRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAwrHubRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAwrHubRequest.createAwrHubDetails, "CreateAwrHubDetails", model.CreateAwrHubDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrHub",
                    bodyModel: model.AwrHub,
                    type: "model.AwrHub",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Register Awr Hub source
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAwrHubSourceRequest
     * @return CreateAwrHubSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/CreateAwrHubSource.ts.html |here} to see how to use CreateAwrHubSource API.
     */
    createAwrHubSource(createAwrHubSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createAwrHubSource.");
            const operationName = "createAwrHubSource";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createAwrHubSourceRequest.opcRetryToken,
                "opc-request-id": createAwrHubSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createAwrHubSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubSources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAwrHubSourceRequest.createAwrHubSourceDetails, "CreateAwrHubSourceDetails", model.CreateAwrHubSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrHubSource",
                    bodyModel: model.AwrHubSource,
                    type: "model.AwrHubSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a Database Insight resource for a database in Operations Insights. The database will be enabled in Operations Insights. Database metric collection and analysis will be started.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateDatabaseInsightRequest
     * @return CreateDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/CreateDatabaseInsight.ts.html |here} to see how to use CreateDatabaseInsight API.
     */
    createDatabaseInsight(createDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createDatabaseInsight.");
            const operationName = "createDatabaseInsight";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDatabaseInsightRequest.opcRetryToken,
                "opc-request-id": createDatabaseInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDatabaseInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDatabaseInsightRequest.createDatabaseInsightDetails, "CreateDatabaseInsightDetails", model.CreateDatabaseInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseInsight",
                    bodyModel: model.DatabaseInsight,
                    type: "model.DatabaseInsight",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a Enterprise Manager bridge in Operations Insights.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateEnterpriseManagerBridgeRequest
     * @return CreateEnterpriseManagerBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/CreateEnterpriseManagerBridge.ts.html |here} to see how to use CreateEnterpriseManagerBridge API.
     */
    createEnterpriseManagerBridge(createEnterpriseManagerBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createEnterpriseManagerBridge.");
            const operationName = "createEnterpriseManagerBridge";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createEnterpriseManagerBridgeRequest.opcRetryToken,
                "opc-request-id": createEnterpriseManagerBridgeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createEnterpriseManagerBridgeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createEnterpriseManagerBridgeRequest.createEnterpriseManagerBridgeDetails, "CreateEnterpriseManagerBridgeDetails", model.CreateEnterpriseManagerBridgeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "enterpriseManagerBridge",
                    bodyModel: model.EnterpriseManagerBridge,
                    type: "model.EnterpriseManagerBridge",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create an Exadata insight resource for an Exadata system in Operations Insights. The Exadata system will be enabled in Operations Insights. Exadata-related metric collection and analysis will be started.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateExadataInsightRequest
     * @return CreateExadataInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/CreateExadataInsight.ts.html |here} to see how to use CreateExadataInsight API.
     */
    createExadataInsight(createExadataInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createExadataInsight.");
            const operationName = "createExadataInsight";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createExadataInsightRequest.opcRetryToken,
                "opc-request-id": createExadataInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createExadataInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createExadataInsightRequest.createExadataInsightDetails, "CreateExadataInsightDetails", model.CreateExadataInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "exadataInsight",
                    bodyModel: model.ExadataInsight,
                    type: "model.ExadataInsight",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a Host Insight resource for a host in Ops Insights. The host will be enabled in Ops Insights. Host metric collection and analysis will be started.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateHostInsightRequest
     * @return CreateHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/CreateHostInsight.ts.html |here} to see how to use CreateHostInsight API.
     */
    createHostInsight(createHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createHostInsight.");
            const operationName = "createHostInsight";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createHostInsightRequest.opcRetryToken,
                "opc-request-id": createHostInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createHostInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createHostInsightRequest.createHostInsightDetails, "CreateHostInsightDetails", model.CreateHostInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostInsight",
                    bodyModel: model.HostInsight,
                    type: "model.HostInsight",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a news report in Ops Insights. The report will be enabled in Ops Insights. Insights will be emailed as per selected frequency.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateNewsReportRequest
     * @return CreateNewsReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/CreateNewsReport.ts.html |here} to see how to use CreateNewsReport API.
     */
    createNewsReport(createNewsReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createNewsReport.");
            const operationName = "createNewsReport";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createNewsReportRequest.opcRetryToken,
                "opc-request-id": createNewsReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createNewsReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/newsReports",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createNewsReportRequest.createNewsReportDetails, "CreateNewsReportDetails", model.CreateNewsReportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "newsReport",
                    bodyModel: model.NewsReport,
                    type: "model.NewsReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a private endpoint resource for the tenant in Ops Insights.
     * This resource will be created in customer compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOperationsInsightsPrivateEndpointRequest
     * @return CreateOperationsInsightsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/CreateOperationsInsightsPrivateEndpoint.ts.html |here} to see how to use CreateOperationsInsightsPrivateEndpoint API.
     */
    createOperationsInsightsPrivateEndpoint(createOperationsInsightsPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createOperationsInsightsPrivateEndpoint.");
            const operationName = "createOperationsInsightsPrivateEndpoint";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOperationsInsightsPrivateEndpointRequest.opcRetryToken,
                "opc-request-id": createOperationsInsightsPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOperationsInsightsPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsPrivateEndpoints",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOperationsInsightsPrivateEndpointRequest.createOperationsInsightsPrivateEndpointDetails, "CreateOperationsInsightsPrivateEndpointDetails", model.CreateOperationsInsightsPrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "operationsInsightsPrivateEndpoint",
                    bodyModel: model.OperationsInsightsPrivateEndpoint,
                    type: "model.OperationsInsightsPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a Ops Insights Warehouse resource for the tenant in Ops Insights. New ADW will be provisioned for this tenant.
     * There is only expected to be 1 warehouse per tenant. The warehouse is expected to be in the root compartment. If the 'opsi-warehouse-type'
     * header is passed to the API, a warehouse resource without ADW or Schema provisioning is created.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOperationsInsightsWarehouseRequest
     * @return CreateOperationsInsightsWarehouseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/CreateOperationsInsightsWarehouse.ts.html |here} to see how to use CreateOperationsInsightsWarehouse API.
     */
    createOperationsInsightsWarehouse(createOperationsInsightsWarehouseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createOperationsInsightsWarehouse.");
            const operationName = "createOperationsInsightsWarehouse";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOperationsInsightsWarehouseRequest.opcRetryToken,
                "opc-request-id": createOperationsInsightsWarehouseRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOperationsInsightsWarehouseRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouses",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOperationsInsightsWarehouseRequest.createOperationsInsightsWarehouseDetails, "CreateOperationsInsightsWarehouseDetails", model.CreateOperationsInsightsWarehouseDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "operationsInsightsWarehouse",
                    bodyModel: model.OperationsInsightsWarehouse,
                    type: "model.OperationsInsightsWarehouse",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a Operations Insights Warehouse user resource for the tenant in Operations Insights.
     * This resource will be created in root compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOperationsInsightsWarehouseUserRequest
     * @return CreateOperationsInsightsWarehouseUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/CreateOperationsInsightsWarehouseUser.ts.html |here} to see how to use CreateOperationsInsightsWarehouseUser API.
     */
    createOperationsInsightsWarehouseUser(createOperationsInsightsWarehouseUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createOperationsInsightsWarehouseUser.");
            const operationName = "createOperationsInsightsWarehouseUser";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOperationsInsightsWarehouseUserRequest.opcRetryToken,
                "opc-request-id": createOperationsInsightsWarehouseUserRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOperationsInsightsWarehouseUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouseUsers",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOperationsInsightsWarehouseUserRequest.createOperationsInsightsWarehouseUserDetails, "CreateOperationsInsightsWarehouseUserDetails", model.CreateOperationsInsightsWarehouseUserDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "operationsInsightsWarehouseUser",
                    bodyModel: model.OperationsInsightsWarehouseUser,
                    type: "model.OperationsInsightsWarehouseUser",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create an OPSI configuration resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOpsiConfigurationRequest
     * @return CreateOpsiConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/CreateOpsiConfiguration.ts.html |here} to see how to use CreateOpsiConfiguration API.
     */
    createOpsiConfiguration(createOpsiConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createOpsiConfiguration.");
            const operationName = "createOpsiConfiguration";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "opsiConfigField": createOpsiConfigurationRequest.opsiConfigField,
                "configItemCustomStatus": createOpsiConfigurationRequest.configItemCustomStatus,
                "configItemsApplicableContext": createOpsiConfigurationRequest.configItemsApplicableContext,
                "configItemField": createOpsiConfigurationRequest.configItemField
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOpsiConfigurationRequest.opcRetryToken,
                "opc-request-id": createOpsiConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOpsiConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/opsiConfigurations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOpsiConfigurationRequest.createOpsiConfigurationDetails, "CreateOpsiConfigurationDetails", model.CreateOpsiConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "opsiConfiguration",
                    bodyModel: model.OpsiConfiguration,
                    type: "model.OpsiConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an AWR hub.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAwrHubRequest
     * @return DeleteAwrHubResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteAwrHub.ts.html |here} to see how to use DeleteAwrHub API.
     */
    deleteAwrHub(deleteAwrHubRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteAwrHub.");
            const operationName = "deleteAwrHub";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": deleteAwrHubRequest.awrHubId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAwrHubRequest.ifMatch,
                "opc-request-id": deleteAwrHubRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAwrHubRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an Awr Hub object.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAwrHubObjectRequest
     * @return DeleteAwrHubObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteAwrHubObject.ts.html |here} to see how to use DeleteAwrHubObject API.
     */
    deleteAwrHubObject(deleteAwrHubObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteAwrHubObject.");
            const operationName = "deleteAwrHubObject";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubSourceId}": deleteAwrHubObjectRequest.awrHubSourceId,
                "{objectName}": deleteAwrHubObjectRequest.objectName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAwrHubObjectRequest.ifMatch,
                "opc-request-id": deleteAwrHubObjectRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAwrHubObjectRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubObjects/awrHubSources/{awrHubSourceId}/o/{objectName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("version-id"),
                            key: "versionId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("is-delete-marker"),
                            key: "isDeleteMarker",
                            dataType: "boolean"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an Awr Hub source object.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAwrHubSourceRequest
     * @return DeleteAwrHubSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteAwrHubSource.ts.html |here} to see how to use DeleteAwrHubSource API.
     */
    deleteAwrHubSource(deleteAwrHubSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteAwrHubSource.");
            const operationName = "deleteAwrHubSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubSourceId}": deleteAwrHubSourceRequest.awrHubSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAwrHubSourceRequest.ifMatch,
                "opc-request-id": deleteAwrHubSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteAwrHubSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubSources/{awrHubSourceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a database insight. The database insight will be deleted and cannot be enabled again.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteDatabaseInsightRequest
     * @return DeleteDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteDatabaseInsight.ts.html |here} to see how to use DeleteDatabaseInsight API.
     */
    deleteDatabaseInsight(deleteDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteDatabaseInsight.");
            const operationName = "deleteDatabaseInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": deleteDatabaseInsightRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDatabaseInsightRequest.ifMatch,
                "opc-request-id": deleteDatabaseInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDatabaseInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an Operations Insights Enterprise Manager bridge. If any database insight is still referencing this bridge, the operation will fail.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteEnterpriseManagerBridgeRequest
     * @return DeleteEnterpriseManagerBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteEnterpriseManagerBridge.ts.html |here} to see how to use DeleteEnterpriseManagerBridge API.
     */
    deleteEnterpriseManagerBridge(deleteEnterpriseManagerBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteEnterpriseManagerBridge.");
            const operationName = "deleteEnterpriseManagerBridge";
            const apiReferenceLink = "";
            const pathParams = {
                "{enterpriseManagerBridgeId}": deleteEnterpriseManagerBridgeRequest.enterpriseManagerBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteEnterpriseManagerBridgeRequest.ifMatch,
                "opc-request-id": deleteEnterpriseManagerBridgeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteEnterpriseManagerBridgeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges/{enterpriseManagerBridgeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an Exadata insight. The Exadata insight will be deleted and cannot be enabled again.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteExadataInsightRequest
     * @return DeleteExadataInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteExadataInsight.ts.html |here} to see how to use DeleteExadataInsight API.
     */
    deleteExadataInsight(deleteExadataInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteExadataInsight.");
            const operationName = "deleteExadataInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{exadataInsightId}": deleteExadataInsightRequest.exadataInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteExadataInsightRequest.ifMatch,
                "opc-request-id": deleteExadataInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteExadataInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/{exadataInsightId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a host insight. The host insight will be deleted and cannot be enabled again.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteHostInsightRequest
     * @return DeleteHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteHostInsight.ts.html |here} to see how to use DeleteHostInsight API.
     */
    deleteHostInsight(deleteHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteHostInsight.");
            const operationName = "deleteHostInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{hostInsightId}": deleteHostInsightRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostInsightRequest.ifMatch,
                "opc-request-id": deleteHostInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteHostInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a news report. The news report will be deleted and cannot be enabled again.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteNewsReportRequest
     * @return DeleteNewsReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteNewsReport.ts.html |here} to see how to use DeleteNewsReport API.
     */
    deleteNewsReport(deleteNewsReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteNewsReport.");
            const operationName = "deleteNewsReport";
            const apiReferenceLink = "";
            const pathParams = {
                "{newsReportId}": deleteNewsReportRequest.newsReportId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteNewsReportRequest.ifMatch,
                "opc-request-id": deleteNewsReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteNewsReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/newsReports/{newsReportId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a private endpoint.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOperationsInsightsPrivateEndpointRequest
     * @return DeleteOperationsInsightsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteOperationsInsightsPrivateEndpoint.ts.html |here} to see how to use DeleteOperationsInsightsPrivateEndpoint API.
     */
    deleteOperationsInsightsPrivateEndpoint(deleteOperationsInsightsPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteOperationsInsightsPrivateEndpoint.");
            const operationName = "deleteOperationsInsightsPrivateEndpoint";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsPrivateEndpointId}": deleteOperationsInsightsPrivateEndpointRequest.operationsInsightsPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOperationsInsightsPrivateEndpointRequest.ifMatch,
                "opc-request-id": deleteOperationsInsightsPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOperationsInsightsPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsPrivateEndpoints/{operationsInsightsPrivateEndpointId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an Operations Insights Warehouse. There is only expected to be 1 warehouse per tenant.
     * The warehouse is expected to be in the root compartment.
     * User must delete AWR Hub resource for this warehouse before calling this operation.
     * User must delete the warehouse users before calling this operation.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOperationsInsightsWarehouseRequest
     * @return DeleteOperationsInsightsWarehouseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteOperationsInsightsWarehouse.ts.html |here} to see how to use DeleteOperationsInsightsWarehouse API.
     */
    deleteOperationsInsightsWarehouse(deleteOperationsInsightsWarehouseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteOperationsInsightsWarehouse.");
            const operationName = "deleteOperationsInsightsWarehouse";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsWarehouseId}": deleteOperationsInsightsWarehouseRequest.operationsInsightsWarehouseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOperationsInsightsWarehouseRequest.ifMatch,
                "opc-request-id": deleteOperationsInsightsWarehouseRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOperationsInsightsWarehouseRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouses/{operationsInsightsWarehouseId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an Operations Insights Warehouse User.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOperationsInsightsWarehouseUserRequest
     * @return DeleteOperationsInsightsWarehouseUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteOperationsInsightsWarehouseUser.ts.html |here} to see how to use DeleteOperationsInsightsWarehouseUser API.
     */
    deleteOperationsInsightsWarehouseUser(deleteOperationsInsightsWarehouseUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteOperationsInsightsWarehouseUser.");
            const operationName = "deleteOperationsInsightsWarehouseUser";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsWarehouseUserId}": deleteOperationsInsightsWarehouseUserRequest.operationsInsightsWarehouseUserId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOperationsInsightsWarehouseUserRequest.ifMatch,
                "opc-request-id": deleteOperationsInsightsWarehouseUserRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOperationsInsightsWarehouseUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouseUsers/{operationsInsightsWarehouseUserId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an OPSI configuration resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOpsiConfigurationRequest
     * @return DeleteOpsiConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DeleteOpsiConfiguration.ts.html |here} to see how to use DeleteOpsiConfiguration API.
     */
    deleteOpsiConfiguration(deleteOpsiConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteOpsiConfiguration.");
            const operationName = "deleteOpsiConfiguration";
            const apiReferenceLink = "";
            const pathParams = {
                "{opsiConfigurationId}": deleteOpsiConfigurationRequest.opsiConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOpsiConfigurationRequest.ifMatch,
                "opc-request-id": deleteOpsiConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOpsiConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/opsiConfigurations/{opsiConfigurationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disable advanced features for an Autonomous Database in Operations Insights. The connection detail and advanced features will be removed.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DisableAutonomousDatabaseInsightAdvancedFeaturesRequest
     * @return DisableAutonomousDatabaseInsightAdvancedFeaturesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DisableAutonomousDatabaseInsightAdvancedFeatures.ts.html |here} to see how to use DisableAutonomousDatabaseInsightAdvancedFeatures API.
     */
    disableAutonomousDatabaseInsightAdvancedFeatures(disableAutonomousDatabaseInsightAdvancedFeaturesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#disableAutonomousDatabaseInsightAdvancedFeatures.");
            const operationName = "disableAutonomousDatabaseInsightAdvancedFeatures";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": disableAutonomousDatabaseInsightAdvancedFeaturesRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": disableAutonomousDatabaseInsightAdvancedFeaturesRequest.ifMatch,
                "opc-request-id": disableAutonomousDatabaseInsightAdvancedFeaturesRequest.opcRequestId,
                "opc-retry-token": disableAutonomousDatabaseInsightAdvancedFeaturesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableAutonomousDatabaseInsightAdvancedFeaturesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/disableAutonomousDatabaseInsightAdvancedFeatures",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables a Awr Hub source database in Operations Insights. This will stop the Awr data flow for the given Awr Hub source.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DisableAwrHubSourceRequest
     * @return DisableAwrHubSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DisableAwrHubSource.ts.html |here} to see how to use DisableAwrHubSource API.
     */
    disableAwrHubSource(disableAwrHubSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#disableAwrHubSource.");
            const operationName = "disableAwrHubSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubSourceId}": disableAwrHubSourceRequest.awrHubSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": disableAwrHubSourceRequest.ifMatch,
                "opc-request-id": disableAwrHubSourceRequest.opcRequestId,
                "opc-retry-token": disableAwrHubSourceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableAwrHubSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubSources/{awrHubSourceId}/actions/disable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables a database in Operations Insights. Database metric collection and analysis will be stopped.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DisableDatabaseInsightRequest
     * @return DisableDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DisableDatabaseInsight.ts.html |here} to see how to use DisableDatabaseInsight API.
     */
    disableDatabaseInsight(disableDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#disableDatabaseInsight.");
            const operationName = "disableDatabaseInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": disableDatabaseInsightRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": disableDatabaseInsightRequest.ifMatch,
                "opc-request-id": disableDatabaseInsightRequest.opcRequestId,
                "opc-retry-token": disableDatabaseInsightRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableDatabaseInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/disable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables an Exadata system in Operations Insights. Exadata-related metric collection and analysis will be stopped.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DisableExadataInsightRequest
     * @return DisableExadataInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DisableExadataInsight.ts.html |here} to see how to use DisableExadataInsight API.
     */
    disableExadataInsight(disableExadataInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#disableExadataInsight.");
            const operationName = "disableExadataInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{exadataInsightId}": disableExadataInsightRequest.exadataInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": disableExadataInsightRequest.ifMatch,
                "opc-request-id": disableExadataInsightRequest.opcRequestId,
                "opc-retry-token": disableExadataInsightRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableExadataInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/{exadataInsightId}/actions/disable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables a host in Ops Insights. Host metric collection and analysis will be stopped.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DisableHostInsightRequest
     * @return DisableHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DisableHostInsight.ts.html |here} to see how to use DisableHostInsight API.
     */
    disableHostInsight(disableHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#disableHostInsight.");
            const operationName = "disableHostInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{hostInsightId}": disableHostInsightRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": disableHostInsightRequest.ifMatch,
                "opc-request-id": disableHostInsightRequest.opcRequestId,
                "opc-retry-token": disableHostInsightRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableHostInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}/actions/disable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Download the ADW wallet for Operations Insights Warehouse using which the Hub data is exposed.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DownloadOperationsInsightsWarehouseWalletRequest
     * @return DownloadOperationsInsightsWarehouseWalletResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/DownloadOperationsInsightsWarehouseWallet.ts.html |here} to see how to use DownloadOperationsInsightsWarehouseWallet API.
     */
    downloadOperationsInsightsWarehouseWallet(downloadOperationsInsightsWarehouseWalletRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#downloadOperationsInsightsWarehouseWallet.");
            const operationName = "downloadOperationsInsightsWarehouseWallet";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsWarehouseId}": downloadOperationsInsightsWarehouseWalletRequest.operationsInsightsWarehouseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": downloadOperationsInsightsWarehouseWalletRequest.opcRequestId,
                "opc-retry-token": downloadOperationsInsightsWarehouseWalletRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, downloadOperationsInsightsWarehouseWalletRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouses/{operationsInsightsWarehouseId}/actions/downloadWarehouseWallet",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(downloadOperationsInsightsWarehouseWalletRequest.downloadOperationsInsightsWarehouseWalletDetails, "DownloadOperationsInsightsWarehouseWalletDetails", model.DownloadOperationsInsightsWarehouseWalletDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables advanced features for an Autonomous Database in Operations Insights. A direct connection will be available for further collection.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableAutonomousDatabaseInsightAdvancedFeaturesRequest
     * @return EnableAutonomousDatabaseInsightAdvancedFeaturesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/EnableAutonomousDatabaseInsightAdvancedFeatures.ts.html |here} to see how to use EnableAutonomousDatabaseInsightAdvancedFeatures API.
     */
    enableAutonomousDatabaseInsightAdvancedFeatures(enableAutonomousDatabaseInsightAdvancedFeaturesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#enableAutonomousDatabaseInsightAdvancedFeatures.");
            const operationName = "enableAutonomousDatabaseInsightAdvancedFeatures";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": enableAutonomousDatabaseInsightAdvancedFeaturesRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": enableAutonomousDatabaseInsightAdvancedFeaturesRequest.ifMatch,
                "opc-request-id": enableAutonomousDatabaseInsightAdvancedFeaturesRequest.opcRequestId,
                "opc-retry-token": enableAutonomousDatabaseInsightAdvancedFeaturesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableAutonomousDatabaseInsightAdvancedFeaturesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/enableAutonomousDatabaseInsightAdvancedFeatures",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableAutonomousDatabaseInsightAdvancedFeaturesRequest.enableAutonomousDatabaseInsightAdvancedFeaturesDetails, "EnableAutonomousDatabaseInsightAdvancedFeaturesDetails", model.EnableAutonomousDatabaseInsightAdvancedFeaturesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables a Awr Hub source database in Operations Insights. This will resume the Awr data flow for the given Awr Hub source if it was stopped earlier.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableAwrHubSourceRequest
     * @return EnableAwrHubSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/EnableAwrHubSource.ts.html |here} to see how to use EnableAwrHubSource API.
     */
    enableAwrHubSource(enableAwrHubSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#enableAwrHubSource.");
            const operationName = "enableAwrHubSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubSourceId}": enableAwrHubSourceRequest.awrHubSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": enableAwrHubSourceRequest.ifMatch,
                "opc-request-id": enableAwrHubSourceRequest.opcRequestId,
                "opc-retry-token": enableAwrHubSourceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableAwrHubSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubSources/{awrHubSourceId}/actions/enable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables a database in Operations Insights. Database metric collection and analysis will be started.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableDatabaseInsightRequest
     * @return EnableDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/EnableDatabaseInsight.ts.html |here} to see how to use EnableDatabaseInsight API.
     */
    enableDatabaseInsight(enableDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#enableDatabaseInsight.");
            const operationName = "enableDatabaseInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": enableDatabaseInsightRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": enableDatabaseInsightRequest.ifMatch,
                "opc-request-id": enableDatabaseInsightRequest.opcRequestId,
                "opc-retry-token": enableDatabaseInsightRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableDatabaseInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/enable",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableDatabaseInsightRequest.enableDatabaseInsightDetails, "EnableDatabaseInsightDetails", model.EnableDatabaseInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables an Exadata system in Operations Insights. Exadata-related metric collection and analysis will be started.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableExadataInsightRequest
     * @return EnableExadataInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/EnableExadataInsight.ts.html |here} to see how to use EnableExadataInsight API.
     */
    enableExadataInsight(enableExadataInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#enableExadataInsight.");
            const operationName = "enableExadataInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{exadataInsightId}": enableExadataInsightRequest.exadataInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": enableExadataInsightRequest.ifMatch,
                "opc-request-id": enableExadataInsightRequest.opcRequestId,
                "opc-retry-token": enableExadataInsightRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableExadataInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/{exadataInsightId}/actions/enable",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableExadataInsightRequest.enableExadataInsightDetails, "EnableExadataInsightDetails", model.EnableExadataInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables a host in Ops Insights. Host metric collection and analysis will be started.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableHostInsightRequest
     * @return EnableHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/EnableHostInsight.ts.html |here} to see how to use EnableHostInsight API.
     */
    enableHostInsight(enableHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#enableHostInsight.");
            const operationName = "enableHostInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{hostInsightId}": enableHostInsightRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": enableHostInsightRequest.ifMatch,
                "opc-request-id": enableHostInsightRequest.opcRequestId,
                "opc-retry-token": enableHostInsightRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableHostInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}/actions/enable",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableHostInsightRequest.enableHostInsightDetails, "EnableHostInsightDetails", model.EnableHostInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the AWR report for the specified database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAwrDatabaseReportRequest
     * @return GetAwrDatabaseReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetAwrDatabaseReport.ts.html |here} to see how to use GetAwrDatabaseReport API.
     */
    getAwrDatabaseReport(getAwrDatabaseReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getAwrDatabaseReport.");
            const operationName = "getAwrDatabaseReport";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": getAwrDatabaseReportRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": getAwrDatabaseReportRequest.awrSourceDatabaseIdentifier,
                "instanceNumber": getAwrDatabaseReportRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": getAwrDatabaseReportRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": getAwrDatabaseReportRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": getAwrDatabaseReportRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": getAwrDatabaseReportRequest.timeLessThanOrEqualTo,
                "reportType": getAwrDatabaseReportRequest.reportType,
                "reportFormat": getAwrDatabaseReportRequest.reportFormat
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAwrDatabaseReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAwrDatabaseReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseReport",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseReport",
                    bodyModel: model.AwrDatabaseReport,
                    type: "model.AwrDatabaseReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the SQL health check report for one SQL of the specified database.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAwrDatabaseSqlReportRequest
     * @return GetAwrDatabaseSqlReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetAwrDatabaseSqlReport.ts.html |here} to see how to use GetAwrDatabaseSqlReport API.
     */
    getAwrDatabaseSqlReport(getAwrDatabaseSqlReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getAwrDatabaseSqlReport.");
            const operationName = "getAwrDatabaseSqlReport";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": getAwrDatabaseSqlReportRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": getAwrDatabaseSqlReportRequest.awrSourceDatabaseIdentifier,
                "instanceNumber": getAwrDatabaseSqlReportRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": getAwrDatabaseSqlReportRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": getAwrDatabaseSqlReportRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": getAwrDatabaseSqlReportRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": getAwrDatabaseSqlReportRequest.timeLessThanOrEqualTo,
                "sqlId": getAwrDatabaseSqlReportRequest.sqlId,
                "reportFormat": getAwrDatabaseSqlReportRequest.reportFormat
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAwrDatabaseSqlReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAwrDatabaseSqlReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseSqlReport",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseSqlReport",
                    bodyModel: model.AwrDatabaseSqlReport,
                    type: "model.AwrDatabaseSqlReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of an AWR hub.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAwrHubRequest
     * @return GetAwrHubResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetAwrHub.ts.html |here} to see how to use GetAwrHub API.
     */
    getAwrHub(getAwrHubRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getAwrHub.");
            const operationName = "getAwrHub";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": getAwrHubRequest.awrHubId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAwrHubRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAwrHubRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrHub",
                    bodyModel: model.AwrHub,
                    type: "model.AwrHub",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the Awr Hub object metadata and body.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAwrHubObjectRequest
     * @return GetAwrHubObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetAwrHubObject.ts.html |here} to see how to use GetAwrHubObject API.
     */
    getAwrHubObject(getAwrHubObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getAwrHubObject.");
            const operationName = "getAwrHubObject";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubSourceId}": getAwrHubObjectRequest.awrHubSourceId,
                "{objectName}": getAwrHubObjectRequest.objectName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAwrHubObjectRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAwrHubObjectRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubObjects/awrHubSources/{awrHubSourceId}/o/{objectName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-range"),
                            key: "contentRange",
                            dataType: "common.Range"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-multipart-md5"),
                            key: "opcMultipartMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-type"),
                            key: "contentType",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-language"),
                            key: "contentLanguage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-encoding"),
                            key: "contentEncoding",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("cache-control"),
                            key: "cacheControl",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("storage-tier"),
                            key: "storageTier",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("archival-state"),
                            key: "archivalState",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("time-of-archival"),
                            key: "timeOfArchival",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("version-id"),
                            key: "versionId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("expires"),
                            key: "expires",
                            dataType: "Date"
                        }
                    ]
                });
                const opcMeta = {};
                const pattern = "opc-meta-";
                response.headers.forEach((v, k) => {
                    if (k.startsWith(pattern)) {
                        Object.assign(opcMeta, { [k]: v });
                    }
                });
                sdkResponse.opcMeta = opcMeta;
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the Awr Hub source object.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAwrHubSourceRequest
     * @return GetAwrHubSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetAwrHubSource.ts.html |here} to see how to use GetAwrHubSource API.
     */
    getAwrHubSource(getAwrHubSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getAwrHubSource.");
            const operationName = "getAwrHubSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubSourceId}": getAwrHubSourceRequest.awrHubSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAwrHubSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAwrHubSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubSources/{awrHubSourceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrHubSource",
                    bodyModel: model.AwrHubSource,
                    type: "model.AwrHubSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the AWR report for the specified source database in the AWR hub. The difference between the timeGreaterThanOrEqualTo and timeLessThanOrEqualTo should not be greater than 7 days.
     * Either beginSnapshotIdentifierGreaterThanOrEqualTo & endSnapshotIdentifierLessThanOrEqualTo params Or timeGreaterThanOrEqualTo & timeLessThanOrEqualTo params are required.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAwrReportRequest
     * @return GetAwrReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetAwrReport.ts.html |here} to see how to use GetAwrReport API.
     */
    getAwrReport(getAwrReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getAwrReport.");
            const operationName = "getAwrReport";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": getAwrReportRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": getAwrReportRequest.awrSourceDatabaseIdentifier,
                "reportFormat": getAwrReportRequest.reportFormat,
                "instanceNumber": getAwrReportRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": getAwrReportRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": getAwrReportRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": getAwrReportRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": getAwrReportRequest.timeLessThanOrEqualTo
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAwrReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAwrReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrReport",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrReport",
                    bodyModel: model.AwrReport,
                    type: "model.AwrReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of a database insight.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetDatabaseInsightRequest
     * @return GetDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetDatabaseInsight.ts.html |here} to see how to use GetDatabaseInsight API.
     */
    getDatabaseInsight(getDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getDatabaseInsight.");
            const operationName = "getDatabaseInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": getDatabaseInsightRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDatabaseInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDatabaseInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseInsight",
                    bodyModel: model.DatabaseInsight,
                    type: "model.DatabaseInsight",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of an Operations Insights Enterprise Manager bridge.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetEnterpriseManagerBridgeRequest
     * @return GetEnterpriseManagerBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetEnterpriseManagerBridge.ts.html |here} to see how to use GetEnterpriseManagerBridge API.
     */
    getEnterpriseManagerBridge(getEnterpriseManagerBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getEnterpriseManagerBridge.");
            const operationName = "getEnterpriseManagerBridge";
            const apiReferenceLink = "";
            const pathParams = {
                "{enterpriseManagerBridgeId}": getEnterpriseManagerBridgeRequest.enterpriseManagerBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getEnterpriseManagerBridgeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getEnterpriseManagerBridgeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges/{enterpriseManagerBridgeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "enterpriseManagerBridge",
                    bodyModel: model.EnterpriseManagerBridge,
                    type: "model.EnterpriseManagerBridge",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of an Exadata insight.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetExadataInsightRequest
     * @return GetExadataInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetExadataInsight.ts.html |here} to see how to use GetExadataInsight API.
     */
    getExadataInsight(getExadataInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getExadataInsight.");
            const operationName = "getExadataInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{exadataInsightId}": getExadataInsightRequest.exadataInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExadataInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getExadataInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/{exadataInsightId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "exadataInsight",
                    bodyModel: model.ExadataInsight,
                    type: "model.ExadataInsight",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of a host insight.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetHostInsightRequest
     * @return GetHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetHostInsight.ts.html |here} to see how to use GetHostInsight API.
     */
    getHostInsight(getHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getHostInsight.");
            const operationName = "getHostInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{hostInsightId}": getHostInsightRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getHostInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostInsight",
                    bodyModel: model.HostInsight,
                    type: "model.HostInsight",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of a news report.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetNewsReportRequest
     * @return GetNewsReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetNewsReport.ts.html |here} to see how to use GetNewsReport API.
     */
    getNewsReport(getNewsReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getNewsReport.");
            const operationName = "getNewsReport";
            const apiReferenceLink = "";
            const pathParams = {
                "{newsReportId}": getNewsReportRequest.newsReportId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getNewsReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getNewsReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/newsReports/{newsReportId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "newsReport",
                    bodyModel: model.NewsReport,
                    type: "model.NewsReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of the specified private endpoint.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOperationsInsightsPrivateEndpointRequest
     * @return GetOperationsInsightsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetOperationsInsightsPrivateEndpoint.ts.html |here} to see how to use GetOperationsInsightsPrivateEndpoint API.
     */
    getOperationsInsightsPrivateEndpoint(getOperationsInsightsPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getOperationsInsightsPrivateEndpoint.");
            const operationName = "getOperationsInsightsPrivateEndpoint";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsPrivateEndpointId}": getOperationsInsightsPrivateEndpointRequest.operationsInsightsPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOperationsInsightsPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOperationsInsightsPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsPrivateEndpoints/{operationsInsightsPrivateEndpointId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "operationsInsightsPrivateEndpoint",
                    bodyModel: model.OperationsInsightsPrivateEndpoint,
                    type: "model.OperationsInsightsPrivateEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of an Ops Insights Warehouse.
     * There is only expected to be 1 warehouse per tenant. The warehouse is expected to be in the root compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOperationsInsightsWarehouseRequest
     * @return GetOperationsInsightsWarehouseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetOperationsInsightsWarehouse.ts.html |here} to see how to use GetOperationsInsightsWarehouse API.
     */
    getOperationsInsightsWarehouse(getOperationsInsightsWarehouseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getOperationsInsightsWarehouse.");
            const operationName = "getOperationsInsightsWarehouse";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsWarehouseId}": getOperationsInsightsWarehouseRequest.operationsInsightsWarehouseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOperationsInsightsWarehouseRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOperationsInsightsWarehouseRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouses/{operationsInsightsWarehouseId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "operationsInsightsWarehouse",
                    bodyModel: model.OperationsInsightsWarehouse,
                    type: "model.OperationsInsightsWarehouse",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of an Operations Insights Warehouse User.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOperationsInsightsWarehouseUserRequest
     * @return GetOperationsInsightsWarehouseUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetOperationsInsightsWarehouseUser.ts.html |here} to see how to use GetOperationsInsightsWarehouseUser API.
     */
    getOperationsInsightsWarehouseUser(getOperationsInsightsWarehouseUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getOperationsInsightsWarehouseUser.");
            const operationName = "getOperationsInsightsWarehouseUser";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsWarehouseUserId}": getOperationsInsightsWarehouseUserRequest.operationsInsightsWarehouseUserId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOperationsInsightsWarehouseUserRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOperationsInsightsWarehouseUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouseUsers/{operationsInsightsWarehouseUserId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "operationsInsightsWarehouseUser",
                    bodyModel: model.OperationsInsightsWarehouseUser,
                    type: "model.OperationsInsightsWarehouseUser",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of an OPSI configuration resource.
     * Values specified in configItemField and configItemCustomStatus query params will be considered, only if configItems field is requested as part of opsiConfigField query param.
     * Values specified in configItemCustomStatus will determine whether only customized configuration items or only non-customized configuration items or both have to be returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOpsiConfigurationRequest
     * @return GetOpsiConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetOpsiConfiguration.ts.html |here} to see how to use GetOpsiConfiguration API.
     */
    getOpsiConfiguration(getOpsiConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getOpsiConfiguration.");
            const operationName = "getOpsiConfiguration";
            const apiReferenceLink = "";
            const pathParams = {
                "{opsiConfigurationId}": getOpsiConfigurationRequest.opsiConfigurationId
            };
            const queryParams = {
                "opsiConfigField": getOpsiConfigurationRequest.opsiConfigField,
                "configItemCustomStatus": getOpsiConfigurationRequest.configItemCustomStatus,
                "configItemsApplicableContext": getOpsiConfigurationRequest.configItemsApplicableContext,
                "configItemField": getOpsiConfigurationRequest.configItemField
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOpsiConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOpsiConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/opsiConfigurations/{opsiConfigurationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "opsiConfiguration",
                    bodyModel: model.OpsiConfiguration,
                    type: "model.OpsiConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of an OPSI data object.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOpsiDataObjectRequest
     * @return GetOpsiDataObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetOpsiDataObject.ts.html |here} to see how to use GetOpsiDataObject API.
     */
    getOpsiDataObject(getOpsiDataObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getOpsiDataObject.");
            const operationName = "getOpsiDataObject";
            const apiReferenceLink = "";
            const pathParams = {
                "{opsiDataObjectIdentifier}": getOpsiDataObjectRequest.opsiDataObjectIdentifier
            };
            const queryParams = {
                "compartmentId": getOpsiDataObjectRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOpsiDataObjectRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOpsiDataObjectRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/opsiDataObjects/{opsiDataObjectIdentifier}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "opsiDataObject",
                    bodyModel: model.OpsiDataObject,
                    type: "model.OpsiDataObject",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the work request with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the Awr Hub object's user-defined metadata and entity tag (ETag).
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param HeadAwrHubObjectRequest
     * @return HeadAwrHubObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/HeadAwrHubObject.ts.html |here} to see how to use HeadAwrHubObject API.
     */
    headAwrHubObject(headAwrHubObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#headAwrHubObject.");
            const operationName = "headAwrHubObject";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubSourceId}": headAwrHubObjectRequest.awrHubSourceId,
                "{objectName}": headAwrHubObjectRequest.objectName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": headAwrHubObjectRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, headAwrHubObjectRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubObjects/awrHubSources/{awrHubSourceId}/o/{objectName}",
                method: "HEAD",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-multipart-md5"),
                            key: "opcMultipartMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-type"),
                            key: "contentType",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-language"),
                            key: "contentLanguage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-encoding"),
                            key: "contentEncoding",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("cache-control"),
                            key: "cacheControl",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("storage-tier"),
                            key: "storageTier",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("archival-state"),
                            key: "archivalState",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("time-of-archival"),
                            key: "timeOfArchival",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("version-id"),
                            key: "versionId",
                            dataType: "string"
                        }
                    ]
                });
                const opcMeta = {};
                const pattern = "opc-meta-";
                response.headers.forEach((v, k) => {
                    if (k.startsWith(pattern)) {
                        Object.assign(opcMeta, { [k]: v });
                    }
                });
                sdkResponse.opcMeta = opcMeta;
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This endpoint takes in a JSON payload, persists it in Operation Insights ingest pipeline.
     * Either databaseId or id must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param IngestAddmReportsRequest
     * @return IngestAddmReportsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestAddmReports.ts.html |here} to see how to use IngestAddmReports API.
     */
    ingestAddmReports(ingestAddmReportsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestAddmReports.");
            const operationName = "ingestAddmReports";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "databaseId": ingestAddmReportsRequest.databaseId,
                "id": ingestAddmReportsRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestAddmReportsRequest.opcRequestId,
                "if-match": ingestAddmReportsRequest.ifMatch,
                "opc-retry-token": ingestAddmReportsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, ingestAddmReportsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestAddmReports",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestAddmReportsRequest.ingestAddmReportsDetails, "IngestAddmReportsDetails", model.IngestAddmReportsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestAddmReportsResponseDetails",
                    bodyModel: model.IngestAddmReportsResponseDetails,
                    type: "model.IngestAddmReportsResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a generic ingest endpoint for all database configuration metrics.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param IngestDatabaseConfigurationRequest
     * @return IngestDatabaseConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestDatabaseConfiguration.ts.html |here} to see how to use IngestDatabaseConfiguration API.
     */
    ingestDatabaseConfiguration(ingestDatabaseConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestDatabaseConfiguration.");
            const operationName = "ingestDatabaseConfiguration";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "databaseId": ingestDatabaseConfigurationRequest.databaseId,
                "id": ingestDatabaseConfigurationRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestDatabaseConfigurationRequest.opcRequestId,
                "if-match": ingestDatabaseConfigurationRequest.ifMatch,
                "opc-retry-token": ingestDatabaseConfigurationRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, ingestDatabaseConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestDatabaseConfiguration",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestDatabaseConfigurationRequest.ingestDatabaseConfigurationDetails, "IngestDatabaseConfigurationDetails", model.IngestDatabaseConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestDatabaseConfigurationResponseDetails",
                    bodyModel: model.IngestDatabaseConfigurationResponseDetails,
                    type: "model.IngestDatabaseConfigurationResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a generic ingest endpoint for all the host configuration metrics
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param IngestHostConfigurationRequest
     * @return IngestHostConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestHostConfiguration.ts.html |here} to see how to use IngestHostConfiguration API.
     */
    ingestHostConfiguration(ingestHostConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestHostConfiguration.");
            const operationName = "ingestHostConfiguration";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "id": ingestHostConfigurationRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestHostConfigurationRequest.opcRequestId,
                "if-match": ingestHostConfigurationRequest.ifMatch,
                "opc-retry-token": ingestHostConfigurationRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, ingestHostConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/actions/ingestHostConfiguration",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestHostConfigurationRequest.ingestHostConfigurationDetails, "IngestHostConfigurationDetails", model.IngestHostConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestHostConfigurationResponseDetails",
                    bodyModel: model.IngestHostConfigurationResponseDetails,
                    type: "model.IngestHostConfigurationResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a generic ingest endpoint for all the host performance metrics
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param IngestHostMetricsRequest
     * @return IngestHostMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestHostMetrics.ts.html |here} to see how to use IngestHostMetrics API.
     */
    ingestHostMetrics(ingestHostMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestHostMetrics.");
            const operationName = "ingestHostMetrics";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "id": ingestHostMetricsRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestHostMetricsRequest.opcRequestId,
                "if-match": ingestHostMetricsRequest.ifMatch,
                "opc-retry-token": ingestHostMetricsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, ingestHostMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/actions/ingestHostMetrics",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestHostMetricsRequest.ingestHostMetricsDetails, "IngestHostMetricsDetails", model.IngestHostMetricsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestHostMetricsResponseDetails",
                    bodyModel: model.IngestHostMetricsResponseDetails,
                    type: "model.IngestHostMetricsResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The MySql SQL Stats endpoint takes in a JSON payload, persists it in Ops Insights ingest pipeline.
     * Either databaseId or id must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param IngestMySqlSqlStatsRequest
     * @return IngestMySqlSqlStatsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestMySqlSqlStats.ts.html |here} to see how to use IngestMySqlSqlStats API.
     */
    ingestMySqlSqlStats(ingestMySqlSqlStatsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestMySqlSqlStats.");
            const operationName = "ingestMySqlSqlStats";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "databaseId": ingestMySqlSqlStatsRequest.databaseId,
                "id": ingestMySqlSqlStatsRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestMySqlSqlStatsRequest.opcRequestId,
                "if-match": ingestMySqlSqlStatsRequest.ifMatch,
                "opc-retry-token": ingestMySqlSqlStatsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, ingestMySqlSqlStatsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestMySqlSqlStatsMetric",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestMySqlSqlStatsRequest.ingestMySqlSqlStatsDetails, "IngestMySqlSqlStatsDetails", model.IngestMySqlSqlStatsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestMySqlSqlStatsResponseDetails",
                    bodyModel: model.IngestMySqlSqlStatsResponseDetails,
                    type: "model.IngestMySqlSqlStatsResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The SqlText endpoint takes in a JSON payload, persists it in Operation Insights ingest pipeline.
     * Either databaseId or id must be specified.
     * Disclaimer: SQL text being uploaded explicitly via APIs is already masked. All sensitive literals contained in the sqlFullText column are masked prior to ingestion.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param IngestMySqlSqlTextRequest
     * @return IngestMySqlSqlTextResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestMySqlSqlText.ts.html |here} to see how to use IngestMySqlSqlText API.
     */
    ingestMySqlSqlText(ingestMySqlSqlTextRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestMySqlSqlText.");
            const operationName = "ingestMySqlSqlText";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": ingestMySqlSqlTextRequest.compartmentId,
                "databaseId": ingestMySqlSqlTextRequest.databaseId,
                "id": ingestMySqlSqlTextRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestMySqlSqlTextRequest.opcRequestId,
                "if-match": ingestMySqlSqlTextRequest.ifMatch,
                "opc-retry-token": ingestMySqlSqlTextRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, ingestMySqlSqlTextRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestMySqlSqlText",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestMySqlSqlTextRequest.ingestMySqlSqlTextDetails, "IngestMySqlSqlTextDetails", model.IngestMySqlSqlTextDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestMySqlSqlTextResponseDetails",
                    bodyModel: model.IngestMySqlSqlTextResponseDetails,
                    type: "model.IngestMySqlSqlTextResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The sqlbucket endpoint takes in a JSON payload, persists it in Ops Insights ingest pipeline.
     * Either databaseId or id must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param IngestSqlBucketRequest
     * @return IngestSqlBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestSqlBucket.ts.html |here} to see how to use IngestSqlBucket API.
     */
    ingestSqlBucket(ingestSqlBucketRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestSqlBucket.");
            const operationName = "ingestSqlBucket";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": ingestSqlBucketRequest.compartmentId,
                "databaseId": ingestSqlBucketRequest.databaseId,
                "id": ingestSqlBucketRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestSqlBucketRequest.opcRequestId,
                "if-match": ingestSqlBucketRequest.ifMatch,
                "opc-retry-token": ingestSqlBucketRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, ingestSqlBucketRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestSqlBucket",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestSqlBucketRequest.ingestSqlBucketDetails, "IngestSqlBucketDetails", model.IngestSqlBucketDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestSqlBucketResponseDetails",
                    bodyModel: model.IngestSqlBucketResponseDetails,
                    type: "model.IngestSqlBucketResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The SqlPlanLines endpoint takes in a JSON payload, persists it in Operation Insights ingest pipeline.
     * Either databaseId or id must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param IngestSqlPlanLinesRequest
     * @return IngestSqlPlanLinesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestSqlPlanLines.ts.html |here} to see how to use IngestSqlPlanLines API.
     */
    ingestSqlPlanLines(ingestSqlPlanLinesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestSqlPlanLines.");
            const operationName = "ingestSqlPlanLines";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": ingestSqlPlanLinesRequest.compartmentId,
                "databaseId": ingestSqlPlanLinesRequest.databaseId,
                "id": ingestSqlPlanLinesRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestSqlPlanLinesRequest.opcRequestId,
                "if-match": ingestSqlPlanLinesRequest.ifMatch,
                "opc-retry-token": ingestSqlPlanLinesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, ingestSqlPlanLinesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestSqlPlanLines",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestSqlPlanLinesRequest.ingestSqlPlanLinesDetails, "IngestSqlPlanLinesDetails", model.IngestSqlPlanLinesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestSqlPlanLinesResponseDetails",
                    bodyModel: model.IngestSqlPlanLinesResponseDetails,
                    type: "model.IngestSqlPlanLinesResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The SQL Stats endpoint takes in a JSON payload, persists it in Ops Insights ingest pipeline.
     * Either databaseId or id must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param IngestSqlStatsRequest
     * @return IngestSqlStatsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestSqlStats.ts.html |here} to see how to use IngestSqlStats API.
     */
    ingestSqlStats(ingestSqlStatsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestSqlStats.");
            const operationName = "ingestSqlStats";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "databaseId": ingestSqlStatsRequest.databaseId,
                "id": ingestSqlStatsRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestSqlStatsRequest.opcRequestId,
                "if-match": ingestSqlStatsRequest.ifMatch,
                "opc-retry-token": ingestSqlStatsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, ingestSqlStatsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestSqlStatsMetric",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestSqlStatsRequest.ingestSqlStatsDetails, "IngestSqlStatsDetails", model.IngestSqlStatsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestSqlStatsResponseDetails",
                    bodyModel: model.IngestSqlStatsResponseDetails,
                    type: "model.IngestSqlStatsResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The SqlText endpoint takes in a JSON payload, persists it in Operation Insights ingest pipeline.
     * Either databaseId or id must be specified.
     * Disclaimer: SQL text being uploaded explicitly via APIs is not masked. Any sensitive literals contained in the sqlFullText column should be masked prior to ingestion.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param IngestSqlTextRequest
     * @return IngestSqlTextResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/IngestSqlText.ts.html |here} to see how to use IngestSqlText API.
     */
    ingestSqlText(ingestSqlTextRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestSqlText.");
            const operationName = "ingestSqlText";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": ingestSqlTextRequest.compartmentId,
                "databaseId": ingestSqlTextRequest.databaseId,
                "id": ingestSqlTextRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestSqlTextRequest.opcRequestId,
                "if-match": ingestSqlTextRequest.ifMatch,
                "opc-retry-token": ingestSqlTextRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, ingestSqlTextRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestSqlText",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestSqlTextRequest.ingestSqlTextDetails, "IngestSqlTextDetails", model.IngestSqlTextDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestSqlTextResponseDetails",
                    bodyModel: model.IngestSqlTextResponseDetails,
                    type: "model.IngestSqlTextResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets list of ADDM finding categories.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAddmDbFindingCategoriesRequest
     * @return ListAddmDbFindingCategoriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAddmDbFindingCategories.ts.html |here} to see how to use ListAddmDbFindingCategories API.
     */
    listAddmDbFindingCategories(listAddmDbFindingCategoriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAddmDbFindingCategories.");
            const operationName = "listAddmDbFindingCategories";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAddmDbFindingCategoriesRequest.compartmentId,
                "databaseId": listAddmDbFindingCategoriesRequest.databaseId,
                "id": listAddmDbFindingCategoriesRequest.id,
                "limit": listAddmDbFindingCategoriesRequest.limit,
                "page": listAddmDbFindingCategoriesRequest.page,
                "sortOrder": listAddmDbFindingCategoriesRequest.sortOrder,
                "sortBy": listAddmDbFindingCategoriesRequest.sortBy,
                "definedTagEquals": listAddmDbFindingCategoriesRequest.definedTagEquals,
                "freeformTagEquals": listAddmDbFindingCategoriesRequest.freeformTagEquals,
                "definedTagExists": listAddmDbFindingCategoriesRequest.definedTagExists,
                "freeformTagExists": listAddmDbFindingCategoriesRequest.freeformTagExists,
                "compartmentIdInSubtree": listAddmDbFindingCategoriesRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAddmDbFindingCategoriesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAddmDbFindingCategoriesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbFindingCategories",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbFindingCategoryCollection",
                    bodyModel: model.AddmDbFindingCategoryCollection,
                    type: "model.AddmDbFindingCategoryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the ADDM findings time series for the specified databases for a given time period.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAddmDbFindingsTimeSeriesRequest
     * @return ListAddmDbFindingsTimeSeriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAddmDbFindingsTimeSeries.ts.html |here} to see how to use ListAddmDbFindingsTimeSeries API.
     */
    listAddmDbFindingsTimeSeries(listAddmDbFindingsTimeSeriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAddmDbFindingsTimeSeries.");
            const operationName = "listAddmDbFindingsTimeSeries";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAddmDbFindingsTimeSeriesRequest.compartmentId,
                "databaseId": listAddmDbFindingsTimeSeriesRequest.databaseId,
                "id": listAddmDbFindingsTimeSeriesRequest.id,
                "instanceNumber": listAddmDbFindingsTimeSeriesRequest.instanceNumber,
                "timeIntervalStart": listAddmDbFindingsTimeSeriesRequest.timeIntervalStart,
                "timeIntervalEnd": listAddmDbFindingsTimeSeriesRequest.timeIntervalEnd,
                "categoryName": listAddmDbFindingsTimeSeriesRequest.categoryName,
                "limit": listAddmDbFindingsTimeSeriesRequest.limit,
                "page": listAddmDbFindingsTimeSeriesRequest.page,
                "sortOrder": listAddmDbFindingsTimeSeriesRequest.sortOrder,
                "sortBy": listAddmDbFindingsTimeSeriesRequest.sortBy,
                "definedTagEquals": listAddmDbFindingsTimeSeriesRequest.definedTagEquals,
                "freeformTagEquals": listAddmDbFindingsTimeSeriesRequest.freeformTagEquals,
                "definedTagExists": listAddmDbFindingsTimeSeriesRequest.definedTagExists,
                "freeformTagExists": listAddmDbFindingsTimeSeriesRequest.freeformTagExists,
                "compartmentIdInSubtree": listAddmDbFindingsTimeSeriesRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAddmDbFindingsTimeSeriesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAddmDbFindingsTimeSeriesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbFindingsTimeSeries",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbFindingsTimeSeriesCollection",
                    bodyModel: model.AddmDbFindingsTimeSeriesCollection,
                    type: "model.AddmDbFindingsTimeSeriesCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets list of ADDM database parameter categories for the specified databases.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAddmDbParameterCategoriesRequest
     * @return ListAddmDbParameterCategoriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAddmDbParameterCategories.ts.html |here} to see how to use ListAddmDbParameterCategories API.
     */
    listAddmDbParameterCategories(listAddmDbParameterCategoriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAddmDbParameterCategories.");
            const operationName = "listAddmDbParameterCategories";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAddmDbParameterCategoriesRequest.compartmentId,
                "databaseId": listAddmDbParameterCategoriesRequest.databaseId,
                "id": listAddmDbParameterCategoriesRequest.id,
                "limit": listAddmDbParameterCategoriesRequest.limit,
                "page": listAddmDbParameterCategoriesRequest.page,
                "sortOrder": listAddmDbParameterCategoriesRequest.sortOrder,
                "sortBy": listAddmDbParameterCategoriesRequest.sortBy,
                "definedTagEquals": listAddmDbParameterCategoriesRequest.definedTagEquals,
                "freeformTagEquals": listAddmDbParameterCategoriesRequest.freeformTagEquals,
                "definedTagExists": listAddmDbParameterCategoriesRequest.definedTagExists,
                "freeformTagExists": listAddmDbParameterCategoriesRequest.freeformTagExists,
                "compartmentIdInSubtree": listAddmDbParameterCategoriesRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAddmDbParameterCategoriesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAddmDbParameterCategoriesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbParameterCategories",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbParameterCategoryCollection",
                    bodyModel: model.AddmDbParameterCategoryCollection,
                    type: "model.AddmDbParameterCategoryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets list of ADDM recommendation categories for the specified databases.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAddmDbRecommendationCategoriesRequest
     * @return ListAddmDbRecommendationCategoriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAddmDbRecommendationCategories.ts.html |here} to see how to use ListAddmDbRecommendationCategories API.
     */
    listAddmDbRecommendationCategories(listAddmDbRecommendationCategoriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAddmDbRecommendationCategories.");
            const operationName = "listAddmDbRecommendationCategories";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAddmDbRecommendationCategoriesRequest.compartmentId,
                "databaseId": listAddmDbRecommendationCategoriesRequest.databaseId,
                "id": listAddmDbRecommendationCategoriesRequest.id,
                "limit": listAddmDbRecommendationCategoriesRequest.limit,
                "page": listAddmDbRecommendationCategoriesRequest.page,
                "sortOrder": listAddmDbRecommendationCategoriesRequest.sortOrder,
                "sortBy": listAddmDbRecommendationCategoriesRequest.sortBy,
                "definedTagEquals": listAddmDbRecommendationCategoriesRequest.definedTagEquals,
                "freeformTagEquals": listAddmDbRecommendationCategoriesRequest.freeformTagEquals,
                "definedTagExists": listAddmDbRecommendationCategoriesRequest.definedTagExists,
                "freeformTagExists": listAddmDbRecommendationCategoriesRequest.freeformTagExists,
                "compartmentIdInSubtree": listAddmDbRecommendationCategoriesRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAddmDbRecommendationCategoriesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAddmDbRecommendationCategoriesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbRecommendationCategories",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbRecommendationCategoryCollection",
                    bodyModel: model.AddmDbRecommendationCategoryCollection,
                    type: "model.AddmDbRecommendationCategoryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets time series data for ADDM recommendations for the specified databases.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAddmDbRecommendationsTimeSeriesRequest
     * @return ListAddmDbRecommendationsTimeSeriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAddmDbRecommendationsTimeSeries.ts.html |here} to see how to use ListAddmDbRecommendationsTimeSeries API.
     */
    listAddmDbRecommendationsTimeSeries(listAddmDbRecommendationsTimeSeriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAddmDbRecommendationsTimeSeries.");
            const operationName = "listAddmDbRecommendationsTimeSeries";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAddmDbRecommendationsTimeSeriesRequest.compartmentId,
                "databaseId": listAddmDbRecommendationsTimeSeriesRequest.databaseId,
                "id": listAddmDbRecommendationsTimeSeriesRequest.id,
                "instanceNumber": listAddmDbRecommendationsTimeSeriesRequest.instanceNumber,
                "timeIntervalStart": listAddmDbRecommendationsTimeSeriesRequest.timeIntervalStart,
                "timeIntervalEnd": listAddmDbRecommendationsTimeSeriesRequest.timeIntervalEnd,
                "categoryName": listAddmDbRecommendationsTimeSeriesRequest.categoryName,
                "sqlIdentifier": listAddmDbRecommendationsTimeSeriesRequest.sqlIdentifier,
                "ownerOrNameContains": listAddmDbRecommendationsTimeSeriesRequest.ownerOrNameContains,
                "nameContains": listAddmDbRecommendationsTimeSeriesRequest.nameContains,
                "name": listAddmDbRecommendationsTimeSeriesRequest.name,
                "limit": listAddmDbRecommendationsTimeSeriesRequest.limit,
                "page": listAddmDbRecommendationsTimeSeriesRequest.page,
                "sortOrder": listAddmDbRecommendationsTimeSeriesRequest.sortOrder,
                "sortBy": listAddmDbRecommendationsTimeSeriesRequest.sortBy,
                "definedTagEquals": listAddmDbRecommendationsTimeSeriesRequest.definedTagEquals,
                "freeformTagEquals": listAddmDbRecommendationsTimeSeriesRequest.freeformTagEquals,
                "definedTagExists": listAddmDbRecommendationsTimeSeriesRequest.definedTagExists,
                "freeformTagExists": listAddmDbRecommendationsTimeSeriesRequest.freeformTagExists,
                "compartmentIdInSubtree": listAddmDbRecommendationsTimeSeriesRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAddmDbRecommendationsTimeSeriesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAddmDbRecommendationsTimeSeriesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbRecommendationsTimeSeries",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbRecommendationsTimeSeriesCollection",
                    bodyModel: model.AddmDbRecommendationsTimeSeriesCollection,
                    type: "model.AddmDbRecommendationsTimeSeriesCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of ADDM database information
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAddmDbsRequest
     * @return ListAddmDbsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAddmDbs.ts.html |here} to see how to use ListAddmDbs API.
     */
    listAddmDbs(listAddmDbsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAddmDbs.");
            const operationName = "listAddmDbs";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAddmDbsRequest.compartmentId,
                "databaseId": listAddmDbsRequest.databaseId,
                "id": listAddmDbsRequest.id,
                "timeIntervalStart": listAddmDbsRequest.timeIntervalStart,
                "timeIntervalEnd": listAddmDbsRequest.timeIntervalEnd,
                "limit": listAddmDbsRequest.limit,
                "page": listAddmDbsRequest.page,
                "sortOrder": listAddmDbsRequest.sortOrder,
                "sortBy": listAddmDbsRequest.sortBy,
                "definedTagEquals": listAddmDbsRequest.definedTagEquals,
                "freeformTagEquals": listAddmDbsRequest.freeformTagEquals,
                "definedTagExists": listAddmDbsRequest.definedTagExists,
                "freeformTagExists": listAddmDbsRequest.freeformTagExists,
                "compartmentIdInSubtree": listAddmDbsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAddmDbsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAddmDbsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbCollection",
                    bodyModel: model.AddmDbCollection,
                    type: "model.AddmDbCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists AWR snapshots for the specified database in the AWR.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAwrDatabaseSnapshotsRequest
     * @return ListAwrDatabaseSnapshotsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAwrDatabaseSnapshots.ts.html |here} to see how to use ListAwrDatabaseSnapshots API.
     */
    listAwrDatabaseSnapshots(listAwrDatabaseSnapshotsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAwrDatabaseSnapshots.");
            const operationName = "listAwrDatabaseSnapshots";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": listAwrDatabaseSnapshotsRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": listAwrDatabaseSnapshotsRequest.awrSourceDatabaseIdentifier,
                "instanceNumber": listAwrDatabaseSnapshotsRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": listAwrDatabaseSnapshotsRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": listAwrDatabaseSnapshotsRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": listAwrDatabaseSnapshotsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": listAwrDatabaseSnapshotsRequest.timeLessThanOrEqualTo,
                "page": listAwrDatabaseSnapshotsRequest.page,
                "limit": listAwrDatabaseSnapshotsRequest.limit,
                "sortBy": listAwrDatabaseSnapshotsRequest.sortBy,
                "sortOrder": listAwrDatabaseSnapshotsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAwrDatabaseSnapshotsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAwrDatabaseSnapshotsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseSnapshots",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseSnapshotCollection",
                    bodyModel: model.AwrDatabaseSnapshotCollection,
                    type: "model.AwrDatabaseSnapshotCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of databases and their snapshot summary details available in the AWRHub.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAwrDatabasesRequest
     * @return ListAwrDatabasesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAwrDatabases.ts.html |here} to see how to use ListAwrDatabases API.
     */
    listAwrDatabases(listAwrDatabasesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAwrDatabases.");
            const operationName = "listAwrDatabases";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": listAwrDatabasesRequest.awrHubId
            };
            const queryParams = {
                "name": listAwrDatabasesRequest.name,
                "timeGreaterThanOrEqualTo": listAwrDatabasesRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": listAwrDatabasesRequest.timeLessThanOrEqualTo,
                "page": listAwrDatabasesRequest.page,
                "limit": listAwrDatabasesRequest.limit,
                "sortBy": listAwrDatabasesRequest.sortBy,
                "sortOrder": listAwrDatabasesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAwrDatabasesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAwrDatabasesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabases",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseCollection",
                    bodyModel: model.AwrDatabaseCollection,
                    type: "model.AwrDatabaseCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of Awr Hub objects. Awr Hub id needs to specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAwrHubObjectsRequest
     * @return ListAwrHubObjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAwrHubObjects.ts.html |here} to see how to use ListAwrHubObjects API.
     */
    listAwrHubObjects(listAwrHubObjectsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAwrHubObjects.");
            const operationName = "listAwrHubObjects";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubSourceId}": listAwrHubObjectsRequest.awrHubSourceId
            };
            const queryParams = {
                "prefix": listAwrHubObjectsRequest.prefix,
                "start": listAwrHubObjectsRequest.start,
                "end": listAwrHubObjectsRequest.end,
                "delimiter": listAwrHubObjectsRequest.delimiter,
                "startAfter": listAwrHubObjectsRequest.startAfter,
                "page": listAwrHubObjectsRequest.page,
                "limit": listAwrHubObjectsRequest.limit,
                "fields": listAwrHubObjectsRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAwrHubObjectsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAwrHubObjectsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubObjects/awrHubSources/{awrHubSourceId}/o",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "listObjects",
                    bodyModel: model.ListObjects,
                    type: "model.ListObjects",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of Awr Hub source objects.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAwrHubSourcesRequest
     * @return ListAwrHubSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAwrHubSources.ts.html |here} to see how to use ListAwrHubSources API.
     */
    listAwrHubSources(listAwrHubSourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAwrHubSources.");
            const operationName = "listAwrHubSources";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "awrHubId": listAwrHubSourcesRequest.awrHubId,
                "compartmentId": listAwrHubSourcesRequest.compartmentId,
                "awrHubSourceId": listAwrHubSourcesRequest.awrHubSourceId,
                "sourceType": listAwrHubSourcesRequest.sourceType,
                "name": listAwrHubSourcesRequest.name,
                "status": listAwrHubSourcesRequest.status,
                "lifecycleState": listAwrHubSourcesRequest.lifecycleState,
                "limit": listAwrHubSourcesRequest.limit,
                "page": listAwrHubSourcesRequest.page,
                "sortOrder": listAwrHubSourcesRequest.sortOrder,
                "sortBy": listAwrHubSourcesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAwrHubSourcesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAwrHubSourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubSources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrHubSourceSummaryCollection",
                    bodyModel: model.AwrHubSourceSummaryCollection,
                    type: "model.AwrHubSourceSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of AWR hubs. Either compartmentId or id must be specified. All these resources are expected to be in root compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAwrHubsRequest
     * @return ListAwrHubsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAwrHubs.ts.html |here} to see how to use ListAwrHubs API.
     */
    listAwrHubs(listAwrHubsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAwrHubs.");
            const operationName = "listAwrHubs";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAwrHubsRequest.compartmentId,
                "displayName": listAwrHubsRequest.displayName,
                "id": listAwrHubsRequest.id,
                "operationsInsightsWarehouseId": listAwrHubsRequest.operationsInsightsWarehouseId,
                "lifecycleState": listAwrHubsRequest.lifecycleState,
                "limit": listAwrHubsRequest.limit,
                "page": listAwrHubsRequest.page,
                "sortOrder": listAwrHubsRequest.sortOrder,
                "sortBy": listAwrHubsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAwrHubsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAwrHubsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrHubSummaryCollection",
                    bodyModel: model.AwrHubSummaryCollection,
                    type: "model.AwrHubSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists AWR snapshots for the specified source database in the AWR hub. The difference between the timeGreaterThanOrEqualTo and timeLessThanOrEqualTo should not exceed an elapsed range of 1 day.
     * The timeGreaterThanOrEqualTo & timeLessThanOrEqualTo params are optional. If these params are not provided, by default last 1 day snapshots will be returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAwrSnapshotsRequest
     * @return ListAwrSnapshotsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListAwrSnapshots.ts.html |here} to see how to use ListAwrSnapshots API.
     */
    listAwrSnapshots(listAwrSnapshotsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listAwrSnapshots.");
            const operationName = "listAwrSnapshots";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": listAwrSnapshotsRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": listAwrSnapshotsRequest.awrSourceDatabaseIdentifier,
                "timeGreaterThanOrEqualTo": listAwrSnapshotsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": listAwrSnapshotsRequest.timeLessThanOrEqualTo,
                "limit": listAwrSnapshotsRequest.limit,
                "page": listAwrSnapshotsRequest.page,
                "sortOrder": listAwrSnapshotsRequest.sortOrder,
                "sortBy": listAwrSnapshotsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAwrSnapshotsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAwrSnapshotsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrSnapshots",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrSnapshotCollection",
                    bodyModel: model.AwrSnapshotCollection,
                    type: "model.AwrSnapshotCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of database insight configurations based on the query parameters specified. Either compartmentId or databaseInsightId query parameter must be specified.
     * When both compartmentId and compartmentIdInSubtree are specified, a list of database insight configurations in that compartment and in all sub-compartments will be returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDatabaseConfigurationsRequest
     * @return ListDatabaseConfigurationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListDatabaseConfigurations.ts.html |here} to see how to use ListDatabaseConfigurations API.
     */
    listDatabaseConfigurations(listDatabaseConfigurationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listDatabaseConfigurations.");
            const operationName = "listDatabaseConfigurations";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDatabaseConfigurationsRequest.compartmentId,
                "enterpriseManagerBridgeId": listDatabaseConfigurationsRequest.enterpriseManagerBridgeId,
                "id": listDatabaseConfigurationsRequest.id,
                "databaseId": listDatabaseConfigurationsRequest.databaseId,
                "exadataInsightId": listDatabaseConfigurationsRequest.exadataInsightId,
                "cdbName": listDatabaseConfigurationsRequest.cdbName,
                "databaseType": listDatabaseConfigurationsRequest.databaseType,
                "limit": listDatabaseConfigurationsRequest.limit,
                "page": listDatabaseConfigurationsRequest.page,
                "sortOrder": listDatabaseConfigurationsRequest.sortOrder,
                "sortBy": listDatabaseConfigurationsRequest.sortBy,
                "hostName": listDatabaseConfigurationsRequest.hostName,
                "definedTagEquals": listDatabaseConfigurationsRequest.definedTagEquals,
                "freeformTagEquals": listDatabaseConfigurationsRequest.freeformTagEquals,
                "definedTagExists": listDatabaseConfigurationsRequest.definedTagExists,
                "freeformTagExists": listDatabaseConfigurationsRequest.freeformTagExists,
                "compartmentIdInSubtree": listDatabaseConfigurationsRequest.compartmentIdInSubtree,
                "vmclusterName": listDatabaseConfigurationsRequest.vmclusterName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDatabaseConfigurationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDatabaseConfigurationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/databaseConfigurations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseConfigurationCollection",
                    bodyModel: model.DatabaseConfigurationCollection,
                    type: "model.DatabaseConfigurationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of database insights based on the query parameters specified. Either compartmentId or id query parameter must be specified.
     * When both compartmentId and compartmentIdInSubtree are specified, a list of database insights in that compartment and in all sub-compartments will be returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListDatabaseInsightsRequest
     * @return ListDatabaseInsightsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListDatabaseInsights.ts.html |here} to see how to use ListDatabaseInsights API.
     */
    listDatabaseInsights(listDatabaseInsightsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listDatabaseInsights.");
            const operationName = "listDatabaseInsights";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDatabaseInsightsRequest.compartmentId,
                "enterpriseManagerBridgeId": listDatabaseInsightsRequest.enterpriseManagerBridgeId,
                "id": listDatabaseInsightsRequest.id,
                "status": listDatabaseInsightsRequest.status,
                "lifecycleState": listDatabaseInsightsRequest.lifecycleState,
                "databaseType": listDatabaseInsightsRequest.databaseType,
                "databaseId": listDatabaseInsightsRequest.databaseId,
                "fields": listDatabaseInsightsRequest.fields,
                "limit": listDatabaseInsightsRequest.limit,
                "page": listDatabaseInsightsRequest.page,
                "sortOrder": listDatabaseInsightsRequest.sortOrder,
                "sortBy": listDatabaseInsightsRequest.sortBy,
                "exadataInsightId": listDatabaseInsightsRequest.exadataInsightId,
                "compartmentIdInSubtree": listDatabaseInsightsRequest.compartmentIdInSubtree,
                "opsiPrivateEndpointId": listDatabaseInsightsRequest.opsiPrivateEndpointId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDatabaseInsightsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDatabaseInsightsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseInsightsCollection",
                    bodyModel: model.DatabaseInsightsCollection,
                    type: "model.DatabaseInsightsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of Ops Insights Enterprise Manager bridges. Either compartmentId or id must be specified.
     * When both compartmentId and compartmentIdInSubtree are specified, a list of bridges in that compartment and in all sub-compartments will be returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListEnterpriseManagerBridgesRequest
     * @return ListEnterpriseManagerBridgesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListEnterpriseManagerBridges.ts.html |here} to see how to use ListEnterpriseManagerBridges API.
     */
    listEnterpriseManagerBridges(listEnterpriseManagerBridgesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listEnterpriseManagerBridges.");
            const operationName = "listEnterpriseManagerBridges";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listEnterpriseManagerBridgesRequest.compartmentId,
                "displayName": listEnterpriseManagerBridgesRequest.displayName,
                "id": listEnterpriseManagerBridgesRequest.id,
                "lifecycleState": listEnterpriseManagerBridgesRequest.lifecycleState,
                "limit": listEnterpriseManagerBridgesRequest.limit,
                "page": listEnterpriseManagerBridgesRequest.page,
                "sortOrder": listEnterpriseManagerBridgesRequest.sortOrder,
                "sortBy": listEnterpriseManagerBridgesRequest.sortBy,
                "compartmentIdInSubtree": listEnterpriseManagerBridgesRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listEnterpriseManagerBridgesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listEnterpriseManagerBridgesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "enterpriseManagerBridgeCollection",
                    bodyModel: model.EnterpriseManagerBridgeCollection,
                    type: "model.EnterpriseManagerBridgeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of exadata insight configurations. Either compartmentId or exadataInsightsId query parameter must be specified.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExadataConfigurationsRequest
     * @return ListExadataConfigurationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListExadataConfigurations.ts.html |here} to see how to use ListExadataConfigurations API.
     */
    listExadataConfigurations(listExadataConfigurationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listExadataConfigurations.");
            const operationName = "listExadataConfigurations";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExadataConfigurationsRequest.compartmentId,
                "exadataInsightId": listExadataConfigurationsRequest.exadataInsightId,
                "exadataType": listExadataConfigurationsRequest.exadataType,
                "limit": listExadataConfigurationsRequest.limit,
                "page": listExadataConfigurationsRequest.page,
                "sortOrder": listExadataConfigurationsRequest.sortOrder,
                "sortBy": listExadataConfigurationsRequest.sortBy,
                "definedTagEquals": listExadataConfigurationsRequest.definedTagEquals,
                "freeformTagEquals": listExadataConfigurationsRequest.freeformTagEquals,
                "definedTagExists": listExadataConfigurationsRequest.definedTagExists,
                "freeformTagExists": listExadataConfigurationsRequest.freeformTagExists,
                "compartmentIdInSubtree": listExadataConfigurationsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExadataConfigurationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExadataConfigurationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/exadataConfigurations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "exadataConfigurationCollection",
                    bodyModel: model.ExadataConfigurationCollection,
                    type: "model.ExadataConfigurationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of Exadata insights based on the query parameters specified. Either compartmentId or id query parameter must be specified.
     * When both compartmentId and compartmentIdInSubtree are specified, a list of Exadata insights in that compartment and in all sub-compartments will be returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListExadataInsightsRequest
     * @return ListExadataInsightsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListExadataInsights.ts.html |here} to see how to use ListExadataInsights API.
     */
    listExadataInsights(listExadataInsightsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listExadataInsights.");
            const operationName = "listExadataInsights";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExadataInsightsRequest.compartmentId,
                "enterpriseManagerBridgeId": listExadataInsightsRequest.enterpriseManagerBridgeId,
                "id": listExadataInsightsRequest.id,
                "status": listExadataInsightsRequest.status,
                "lifecycleState": listExadataInsightsRequest.lifecycleState,
                "exadataType": listExadataInsightsRequest.exadataType,
                "limit": listExadataInsightsRequest.limit,
                "page": listExadataInsightsRequest.page,
                "sortOrder": listExadataInsightsRequest.sortOrder,
                "sortBy": listExadataInsightsRequest.sortBy,
                "compartmentIdInSubtree": listExadataInsightsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExadataInsightsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listExadataInsightsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "exadataInsightSummaryCollection",
                    bodyModel: model.ExadataInsightSummaryCollection,
                    type: "model.ExadataInsightSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of host insight configurations based on the query parameters specified. Either compartmentId or hostInsightId query parameter must be specified.
     * When both compartmentId and compartmentIdInSubtree are specified, a list of host insight configurations in that compartment and in all sub-compartments will be returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListHostConfigurationsRequest
     * @return ListHostConfigurationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListHostConfigurations.ts.html |here} to see how to use ListHostConfigurations API.
     */
    listHostConfigurations(listHostConfigurationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listHostConfigurations.");
            const operationName = "listHostConfigurations";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostConfigurationsRequest.compartmentId,
                "enterpriseManagerBridgeId": listHostConfigurationsRequest.enterpriseManagerBridgeId,
                "id": listHostConfigurationsRequest.id,
                "exadataInsightId": listHostConfigurationsRequest.exadataInsightId,
                "platformType": listHostConfigurationsRequest.platformType,
                "limit": listHostConfigurationsRequest.limit,
                "page": listHostConfigurationsRequest.page,
                "sortOrder": listHostConfigurationsRequest.sortOrder,
                "sortBy": listHostConfigurationsRequest.sortBy,
                "definedTagEquals": listHostConfigurationsRequest.definedTagEquals,
                "freeformTagEquals": listHostConfigurationsRequest.freeformTagEquals,
                "definedTagExists": listHostConfigurationsRequest.definedTagExists,
                "freeformTagExists": listHostConfigurationsRequest.freeformTagExists,
                "compartmentIdInSubtree": listHostConfigurationsRequest.compartmentIdInSubtree,
                "hostType": listHostConfigurationsRequest.hostType,
                "hostId": listHostConfigurationsRequest.hostId,
                "vmclusterName": listHostConfigurationsRequest.vmclusterName,
                "status": listHostConfigurationsRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostConfigurationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostConfigurationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/hostConfigurations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostConfigurationCollection",
                    bodyModel: model.HostConfigurationCollection,
                    type: "model.HostConfigurationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of host insights based on the query parameters specified. Either compartmentId or id query parameter must be specified.
     * When both compartmentId and compartmentIdInSubtree are specified, a list of host insights in that compartment and in all sub-compartments will be returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListHostInsightsRequest
     * @return ListHostInsightsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListHostInsights.ts.html |here} to see how to use ListHostInsights API.
     */
    listHostInsights(listHostInsightsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listHostInsights.");
            const operationName = "listHostInsights";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostInsightsRequest.compartmentId,
                "id": listHostInsightsRequest.id,
                "status": listHostInsightsRequest.status,
                "lifecycleState": listHostInsightsRequest.lifecycleState,
                "hostType": listHostInsightsRequest.hostType,
                "platformType": listHostInsightsRequest.platformType,
                "limit": listHostInsightsRequest.limit,
                "page": listHostInsightsRequest.page,
                "sortOrder": listHostInsightsRequest.sortOrder,
                "sortBy": listHostInsightsRequest.sortBy,
                "enterpriseManagerBridgeId": listHostInsightsRequest.enterpriseManagerBridgeId,
                "exadataInsightId": listHostInsightsRequest.exadataInsightId,
                "compartmentIdInSubtree": listHostInsightsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostInsightsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostInsightsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostInsightSummaryCollection",
                    bodyModel: model.HostInsightSummaryCollection,
                    type: "model.HostInsightSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a list of hosted entities details.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListHostedEntitiesRequest
     * @return ListHostedEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListHostedEntities.ts.html |here} to see how to use ListHostedEntities API.
     */
    listHostedEntities(listHostedEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listHostedEntities.");
            const operationName = "listHostedEntities";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostedEntitiesRequest.compartmentId,
                "analysisTimeInterval": listHostedEntitiesRequest.analysisTimeInterval,
                "timeIntervalStart": listHostedEntitiesRequest.timeIntervalStart,
                "timeIntervalEnd": listHostedEntitiesRequest.timeIntervalEnd,
                "platformType": listHostedEntitiesRequest.platformType,
                "id": listHostedEntitiesRequest.id,
                "exadataInsightId": listHostedEntitiesRequest.exadataInsightId,
                "limit": listHostedEntitiesRequest.limit,
                "page": listHostedEntitiesRequest.page,
                "sortOrder": listHostedEntitiesRequest.sortOrder,
                "sortBy": listHostedEntitiesRequest.sortBy,
                "hostType": listHostedEntitiesRequest.hostType,
                "hostId": listHostedEntitiesRequest.hostId,
                "status": listHostedEntitiesRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostedEntitiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listHostedEntitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/hostedEntities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostedEntityCollection",
                    bodyModel: model.HostedEntityCollection,
                    type: "model.HostedEntityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of agent entities available to add a new hostInsight.  An agent entity is \"available\"
     * and will be shown if all the following conditions are true:
     *    1.  The agent OCID is not already being used for an existing hostInsight.
     *    2.  The agent availabilityStatus = 'ACTIVE'
     *    3.  The agent lifecycleState = 'ACTIVE'
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListImportableAgentEntitiesRequest
     * @return ListImportableAgentEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListImportableAgentEntities.ts.html |here} to see how to use ListImportableAgentEntities API.
     */
    listImportableAgentEntities(listImportableAgentEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listImportableAgentEntities.");
            const operationName = "listImportableAgentEntities";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listImportableAgentEntitiesRequest.compartmentId,
                "limit": listImportableAgentEntitiesRequest.limit,
                "page": listImportableAgentEntitiesRequest.page,
                "sortOrder": listImportableAgentEntitiesRequest.sortOrder,
                "sortBy": listImportableAgentEntitiesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listImportableAgentEntitiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listImportableAgentEntitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/importableAgentEntities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "importableAgentEntitySummaryCollection",
                    bodyModel: model.ImportableAgentEntitySummaryCollection,
                    type: "model.ImportableAgentEntitySummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of available compute intances running cloud agent to add a new hostInsight.  An Compute entity is \"available\"
     * and will be shown if all the following conditions are true:
     *    1. Compute is running OCA
     *    2. OCI Management Agent is not enabled or If OCI Management Agent is enabled
     *       2.1 The agent OCID is not already being used for an existing hostInsight.
     *       2.2 The agent availabilityStatus = 'ACTIVE'
     *       2.3 The agent lifecycleState = 'ACTIVE'
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListImportableComputeEntitiesRequest
     * @return ListImportableComputeEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListImportableComputeEntities.ts.html |here} to see how to use ListImportableComputeEntities API.
     */
    listImportableComputeEntities(listImportableComputeEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listImportableComputeEntities.");
            const operationName = "listImportableComputeEntities";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listImportableComputeEntitiesRequest.compartmentId,
                "limit": listImportableComputeEntitiesRequest.limit,
                "page": listImportableComputeEntitiesRequest.page,
                "sortOrder": listImportableComputeEntitiesRequest.sortOrder,
                "sortBy": listImportableComputeEntitiesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listImportableComputeEntitiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listImportableComputeEntitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/importableComputeEntities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "importableComputeEntitySummaryCollection",
                    bodyModel: model.ImportableComputeEntitySummaryCollection,
                    type: "model.ImportableComputeEntitySummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of importable entities for an Operations Insights Enterprise Manager bridge that have not been imported before.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListImportableEnterpriseManagerEntitiesRequest
     * @return ListImportableEnterpriseManagerEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListImportableEnterpriseManagerEntities.ts.html |here} to see how to use ListImportableEnterpriseManagerEntities API.
     */
    listImportableEnterpriseManagerEntities(listImportableEnterpriseManagerEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listImportableEnterpriseManagerEntities.");
            const operationName = "listImportableEnterpriseManagerEntities";
            const apiReferenceLink = "";
            const pathParams = {
                "{enterpriseManagerBridgeId}": listImportableEnterpriseManagerEntitiesRequest.enterpriseManagerBridgeId
            };
            const queryParams = {
                "limit": listImportableEnterpriseManagerEntitiesRequest.limit,
                "page": listImportableEnterpriseManagerEntitiesRequest.page,
                "enterpriseManagerEntityType": listImportableEnterpriseManagerEntitiesRequest.enterpriseManagerEntityType,
                "enterpriseManagerIdentifier": listImportableEnterpriseManagerEntitiesRequest.enterpriseManagerIdentifier,
                "enterpriseManagerParentEntityIdentifier": listImportableEnterpriseManagerEntitiesRequest.enterpriseManagerParentEntityIdentifier
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listImportableEnterpriseManagerEntitiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listImportableEnterpriseManagerEntitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges/{enterpriseManagerBridgeId}/importableEnterpriseManagerEntities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "importableEnterpriseManagerEntityCollection",
                    bodyModel: model.ImportableEnterpriseManagerEntityCollection,
                    type: "model.ImportableEnterpriseManagerEntityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of news reports based on the query parameters specified. Either compartmentId or id query parameter must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListNewsReportsRequest
     * @return ListNewsReportsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListNewsReports.ts.html |here} to see how to use ListNewsReports API.
     */
    listNewsReports(listNewsReportsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listNewsReports.");
            const operationName = "listNewsReports";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listNewsReportsRequest.compartmentId,
                "newsReportId": listNewsReportsRequest.newsReportId,
                "status": listNewsReportsRequest.status,
                "lifecycleState": listNewsReportsRequest.lifecycleState,
                "limit": listNewsReportsRequest.limit,
                "page": listNewsReportsRequest.page,
                "sortOrder": listNewsReportsRequest.sortOrder,
                "sortBy": listNewsReportsRequest.sortBy,
                "compartmentIdInSubtree": listNewsReportsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listNewsReportsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listNewsReportsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/newsReports",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "newsReportCollection",
                    bodyModel: model.NewsReportCollection,
                    type: "model.NewsReportCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of Operation Insights private endpoints.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOperationsInsightsPrivateEndpointsRequest
     * @return ListOperationsInsightsPrivateEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListOperationsInsightsPrivateEndpoints.ts.html |here} to see how to use ListOperationsInsightsPrivateEndpoints API.
     */
    listOperationsInsightsPrivateEndpoints(listOperationsInsightsPrivateEndpointsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listOperationsInsightsPrivateEndpoints.");
            const operationName = "listOperationsInsightsPrivateEndpoints";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOperationsInsightsPrivateEndpointsRequest.compartmentId,
                "displayName": listOperationsInsightsPrivateEndpointsRequest.displayName,
                "opsiPrivateEndpointId": listOperationsInsightsPrivateEndpointsRequest.opsiPrivateEndpointId,
                "isUsedForRacDbs": listOperationsInsightsPrivateEndpointsRequest.isUsedForRacDbs,
                "vcnId": listOperationsInsightsPrivateEndpointsRequest.vcnId,
                "lifecycleState": listOperationsInsightsPrivateEndpointsRequest.lifecycleState,
                "limit": listOperationsInsightsPrivateEndpointsRequest.limit,
                "page": listOperationsInsightsPrivateEndpointsRequest.page,
                "sortOrder": listOperationsInsightsPrivateEndpointsRequest.sortOrder,
                "sortBy": listOperationsInsightsPrivateEndpointsRequest.sortBy,
                "compartmentIdInSubtree": listOperationsInsightsPrivateEndpointsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOperationsInsightsPrivateEndpointsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOperationsInsightsPrivateEndpointsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsPrivateEndpoints",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "operationsInsightsPrivateEndpointCollection",
                    bodyModel: model.OperationsInsightsPrivateEndpointCollection,
                    type: "model.OperationsInsightsPrivateEndpointCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of Operations Insights Warehouse users. Either compartmentId or id must be specified. All these resources are expected to be in root compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOperationsInsightsWarehouseUsersRequest
     * @return ListOperationsInsightsWarehouseUsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListOperationsInsightsWarehouseUsers.ts.html |here} to see how to use ListOperationsInsightsWarehouseUsers API.
     */
    listOperationsInsightsWarehouseUsers(listOperationsInsightsWarehouseUsersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listOperationsInsightsWarehouseUsers.");
            const operationName = "listOperationsInsightsWarehouseUsers";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOperationsInsightsWarehouseUsersRequest.compartmentId,
                "displayName": listOperationsInsightsWarehouseUsersRequest.displayName,
                "id": listOperationsInsightsWarehouseUsersRequest.id,
                "operationsInsightsWarehouseId": listOperationsInsightsWarehouseUsersRequest.operationsInsightsWarehouseId,
                "lifecycleState": listOperationsInsightsWarehouseUsersRequest.lifecycleState,
                "limit": listOperationsInsightsWarehouseUsersRequest.limit,
                "page": listOperationsInsightsWarehouseUsersRequest.page,
                "sortOrder": listOperationsInsightsWarehouseUsersRequest.sortOrder,
                "sortBy": listOperationsInsightsWarehouseUsersRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOperationsInsightsWarehouseUsersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOperationsInsightsWarehouseUsersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouseUsers",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "operationsInsightsWarehouseUserSummaryCollection",
                    bodyModel: model.OperationsInsightsWarehouseUserSummaryCollection,
                    type: "model.OperationsInsightsWarehouseUserSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of Ops Insights warehouses. Either compartmentId or id must be specified.
     * There is only expected to be 1 warehouse per tenant. The warehouse is expected to be in the root compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOperationsInsightsWarehousesRequest
     * @return ListOperationsInsightsWarehousesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListOperationsInsightsWarehouses.ts.html |here} to see how to use ListOperationsInsightsWarehouses API.
     */
    listOperationsInsightsWarehouses(listOperationsInsightsWarehousesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listOperationsInsightsWarehouses.");
            const operationName = "listOperationsInsightsWarehouses";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOperationsInsightsWarehousesRequest.compartmentId,
                "displayName": listOperationsInsightsWarehousesRequest.displayName,
                "id": listOperationsInsightsWarehousesRequest.id,
                "lifecycleState": listOperationsInsightsWarehousesRequest.lifecycleState,
                "limit": listOperationsInsightsWarehousesRequest.limit,
                "page": listOperationsInsightsWarehousesRequest.page,
                "sortOrder": listOperationsInsightsWarehousesRequest.sortOrder,
                "sortBy": listOperationsInsightsWarehousesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOperationsInsightsWarehousesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOperationsInsightsWarehousesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouses",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "operationsInsightsWarehouseSummaryCollection",
                    bodyModel: model.OperationsInsightsWarehouseSummaryCollection,
                    type: "model.OperationsInsightsWarehouseSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of OPSI configuration resources based on the query parameters specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOpsiConfigurationsRequest
     * @return ListOpsiConfigurationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListOpsiConfigurations.ts.html |here} to see how to use ListOpsiConfigurations API.
     */
    listOpsiConfigurations(listOpsiConfigurationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listOpsiConfigurations.");
            const operationName = "listOpsiConfigurations";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOpsiConfigurationsRequest.compartmentId,
                "displayName": listOpsiConfigurationsRequest.displayName,
                "lifecycleState": listOpsiConfigurationsRequest.lifecycleState,
                "opsiConfigType": listOpsiConfigurationsRequest.opsiConfigType,
                "limit": listOpsiConfigurationsRequest.limit,
                "page": listOpsiConfigurationsRequest.page,
                "sortOrder": listOpsiConfigurationsRequest.sortOrder,
                "sortBy": listOpsiConfigurationsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOpsiConfigurationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOpsiConfigurationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/opsiConfigurations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "opsiConfigurationsCollection",
                    bodyModel: model.OpsiConfigurationsCollection,
                    type: "model.OpsiConfigurationsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of OPSI data objects based on the query parameters specified. CompartmentId id query parameter must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOpsiDataObjectsRequest
     * @return ListOpsiDataObjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListOpsiDataObjects.ts.html |here} to see how to use ListOpsiDataObjects API.
     */
    listOpsiDataObjects(listOpsiDataObjectsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listOpsiDataObjects.");
            const operationName = "listOpsiDataObjects";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOpsiDataObjectsRequest.compartmentId,
                "dataObjectType": listOpsiDataObjectsRequest.dataObjectType,
                "displayName": listOpsiDataObjectsRequest.displayName,
                "limit": listOpsiDataObjectsRequest.limit,
                "page": listOpsiDataObjectsRequest.page,
                "sortOrder": listOpsiDataObjectsRequest.sortOrder,
                "sortBy": listOpsiDataObjectsRequest.sortBy,
                "groupName": listOpsiDataObjectsRequest.groupName,
                "name": listOpsiDataObjectsRequest.name
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOpsiDataObjectsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOpsiDataObjectsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/opsiDataObjects",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "opsiDataObjectsCollection",
                    bodyModel: model.OpsiDataObjectsCollection,
                    type: "model.OpsiDataObjectsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to list the plan xml for a given SQL execution plan. This returns a SqlPlanCollection object, but is currently limited to a single plan.
     * Either databaseId or id must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlPlansRequest
     * @return ListSqlPlansResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListSqlPlans.ts.html |here} to see how to use ListSqlPlans API.
     */
    listSqlPlans(listSqlPlansRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listSqlPlans.");
            const operationName = "listSqlPlans";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSqlPlansRequest.compartmentId,
                "databaseId": listSqlPlansRequest.databaseId,
                "id": listSqlPlansRequest.id,
                "sqlIdentifier": listSqlPlansRequest.sqlIdentifier,
                "planHash": listSqlPlansRequest.planHash,
                "page": listSqlPlansRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSqlPlansRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSqlPlansRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlPlans",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlPlanCollection",
                    bodyModel: model.SqlPlanCollection,
                    type: "model.SqlPlanCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search SQL by SQL Identifier across databases in a compartment and in all sub-compartments if specified.
     * And get the SQL Text and the details of the databases executing the SQL for a given time period.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlSearchesRequest
     * @return ListSqlSearchesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListSqlSearches.ts.html |here} to see how to use ListSqlSearches API.
     */
    listSqlSearches(listSqlSearchesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listSqlSearches.");
            const operationName = "listSqlSearches";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSqlSearchesRequest.compartmentId,
                "sqlIdentifier": listSqlSearchesRequest.sqlIdentifier,
                "analysisTimeInterval": listSqlSearchesRequest.analysisTimeInterval,
                "timeIntervalStart": listSqlSearchesRequest.timeIntervalStart,
                "timeIntervalEnd": listSqlSearchesRequest.timeIntervalEnd,
                "page": listSqlSearchesRequest.page,
                "definedTagEquals": listSqlSearchesRequest.definedTagEquals,
                "freeformTagEquals": listSqlSearchesRequest.freeformTagEquals,
                "definedTagExists": listSqlSearchesRequest.definedTagExists,
                "freeformTagExists": listSqlSearchesRequest.freeformTagExists,
                "compartmentIdInSubtree": listSqlSearchesRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSqlSearchesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSqlSearchesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlSearches",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlSearchCollection",
                    bodyModel: model.SqlSearchCollection,
                    type: "model.SqlSearchCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the full SQL Text for a SQL in a compartment and in all sub-compartments if specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSqlTextsRequest
     * @return ListSqlTextsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListSqlTexts.ts.html |here} to see how to use ListSqlTexts API.
     */
    listSqlTexts(listSqlTextsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listSqlTexts.");
            const operationName = "listSqlTexts";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSqlTextsRequest.compartmentId,
                "databaseId": listSqlTextsRequest.databaseId,
                "id": listSqlTextsRequest.id,
                "sqlIdentifier": listSqlTextsRequest.sqlIdentifier,
                "page": listSqlTextsRequest.page,
                "definedTagEquals": listSqlTextsRequest.definedTagEquals,
                "freeformTagEquals": listSqlTextsRequest.freeformTagEquals,
                "definedTagExists": listSqlTextsRequest.definedTagExists,
                "freeformTagExists": listSqlTextsRequest.freeformTagExists,
                "compartmentIdInSubtree": listSqlTextsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSqlTextsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSqlTextsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlTexts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlTextCollection",
                    bodyModel: model.SqlTextCollection,
                    type: "model.SqlTextCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of Warehouse data objects (e.g: views, tables), based on the query parameters specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWarehouseDataObjectsRequest
     * @return ListWarehouseDataObjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListWarehouseDataObjects.ts.html |here} to see how to use ListWarehouseDataObjects API.
     */
    listWarehouseDataObjects(listWarehouseDataObjectsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listWarehouseDataObjects.");
            const operationName = "listWarehouseDataObjects";
            const apiReferenceLink = "";
            const pathParams = {
                "{warehouseType}": listWarehouseDataObjectsRequest.warehouseType,
                "{warehouseId}": listWarehouseDataObjectsRequest.warehouseId
            };
            const queryParams = {
                "dataObjectType": listWarehouseDataObjectsRequest.dataObjectType,
                "name": listWarehouseDataObjectsRequest.name,
                "owner": listWarehouseDataObjectsRequest.owner,
                "limit": listWarehouseDataObjectsRequest.limit,
                "page": listWarehouseDataObjectsRequest.page,
                "sortOrder": listWarehouseDataObjectsRequest.sortOrder,
                "sortBy": listWarehouseDataObjectsRequest.sortBy,
                "summaryField": listWarehouseDataObjectsRequest.summaryField
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWarehouseDataObjectsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWarehouseDataObjectsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/{warehouseType}/{warehouseId}/dataObjects",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "warehouseDataObjectCollection",
                    bodyModel: model.WarehouseDataObjectCollection,
                    type: "model.WarehouseDataObjectCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit,
                "sortBy": listWorkRequestErrorsRequest.sortBy,
                "sortOrder": listWorkRequestErrorsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: model.WorkRequestErrorCollection,
                    type: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit,
                "sortBy": listWorkRequestLogsRequest.sortBy,
                "sortOrder": listWorkRequestLogsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestLogEntryCollection",
                    bodyModel: model.WorkRequestLogEntryCollection,
                    type: "model.WorkRequestLogEntryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the work requests in a compartment. Either compartmentId or id must be specified. Only one of id, resourceId or relatedResourceId can be specified optionally.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit,
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "id": listWorkRequestsRequest.id,
                "status": listWorkRequestsRequest.status,
                "resourceId": listWorkRequestsRequest.resourceId,
                "relatedResourceId": listWorkRequestsRequest.relatedResourceId,
                "sortOrder": listWorkRequestsRequest.sortOrder,
                "sortBy": listWorkRequestsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestCollection",
                    bodyModel: model.WorkRequestCollection,
                    type: "model.WorkRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new object or overwrites an existing object with the same name to the Awr Hub.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PutAwrHubObjectRequest
     * @return PutAwrHubObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/PutAwrHubObject.ts.html |here} to see how to use PutAwrHubObject API.
     */
    putAwrHubObject(putAwrHubObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#putAwrHubObject.");
            const operationName = "putAwrHubObject";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubSourceId}": putAwrHubObjectRequest.awrHubSourceId,
                "{objectName}": putAwrHubObjectRequest.objectName
            };
            const queryParams = {};
            let headerParams = {
                "if-match": putAwrHubObjectRequest.ifMatch,
                "opc-request-id": putAwrHubObjectRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, putAwrHubObjectRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubObjects/awrHubSources/{awrHubSourceId}/o/{objectName}",
                method: "PUT",
                bodyContent: putAwrHubObjectRequest.putAwrHubObjectBody,
                pathParams: pathParams,
                headerParams: headerParams,
                backupBinaryBody: retrier.backUpBinaryBody,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink, true);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-content-md5"),
                            key: "opcContentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("version-id"),
                            key: "versionId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Queries an OPSI data object with the inputs provided and sends the result set back. Either analysisTimeInterval
     * or timeIntervalStart and timeIntervalEnd parameters need to be passed as well.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param QueryOpsiDataObjectDataRequest
     * @return QueryOpsiDataObjectDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/QueryOpsiDataObjectData.ts.html |here} to see how to use QueryOpsiDataObjectData API.
     */
    queryOpsiDataObjectData(queryOpsiDataObjectDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#queryOpsiDataObjectData.");
            const operationName = "queryOpsiDataObjectData";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": queryOpsiDataObjectDataRequest.compartmentId,
                "limit": queryOpsiDataObjectDataRequest.limit,
                "page": queryOpsiDataObjectDataRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": queryOpsiDataObjectDataRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, queryOpsiDataObjectDataRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/opsiDataObjects/actions/queryData",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(queryOpsiDataObjectDataRequest.queryOpsiDataObjectDataDetails, "QueryOpsiDataObjectDataDetails", model.QueryOpsiDataObjectDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "queryDataObjectResultSetRowsCollection",
                    bodyModel: model.QueryDataObjectResultSetRowsCollection,
                    type: "model.QueryDataObjectResultSetRowsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Queries Warehouse data objects (e.g: views, tables) with the inputs provided and sends the result set back.
     * Any data to which an OperationsInsightsWarehouseUser with a permission to the corresponding Warehouse can be queried.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param QueryWarehouseDataObjectDataRequest
     * @return QueryWarehouseDataObjectDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/QueryWarehouseDataObjectData.ts.html |here} to see how to use QueryWarehouseDataObjectData API.
     */
    queryWarehouseDataObjectData(queryWarehouseDataObjectDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#queryWarehouseDataObjectData.");
            const operationName = "queryWarehouseDataObjectData";
            const apiReferenceLink = "";
            const pathParams = {
                "{warehouseType}": queryWarehouseDataObjectDataRequest.warehouseType,
                "{warehouseId}": queryWarehouseDataObjectDataRequest.warehouseId
            };
            const queryParams = {
                "limit": queryWarehouseDataObjectDataRequest.limit,
                "page": queryWarehouseDataObjectDataRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": queryWarehouseDataObjectDataRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, queryWarehouseDataObjectDataRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/{warehouseType}/{warehouseId}/actions/queryData",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(queryWarehouseDataObjectDataRequest.queryWarehouseDataObjectDataDetails, "QueryWarehouseDataObjectDataDetails", model.QueryWarehouseDataObjectDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "queryDataObjectResultSetRowsCollection",
                    bodyModel: model.QueryDataObjectResultSetRowsCollection,
                    type: "model.QueryDataObjectResultSetRowsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Rotate the ADW wallet for Operations Insights Warehouse using which the Hub data is exposed.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RotateOperationsInsightsWarehouseWalletRequest
     * @return RotateOperationsInsightsWarehouseWalletResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/RotateOperationsInsightsWarehouseWallet.ts.html |here} to see how to use RotateOperationsInsightsWarehouseWallet API.
     */
    rotateOperationsInsightsWarehouseWallet(rotateOperationsInsightsWarehouseWalletRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#rotateOperationsInsightsWarehouseWallet.");
            const operationName = "rotateOperationsInsightsWarehouseWallet";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsWarehouseId}": rotateOperationsInsightsWarehouseWalletRequest.operationsInsightsWarehouseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": rotateOperationsInsightsWarehouseWalletRequest.opcRequestId,
                "if-match": rotateOperationsInsightsWarehouseWalletRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, rotateOperationsInsightsWarehouseWalletRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouses/{operationsInsightsWarehouseId}/actions/rotateWarehouseWallet",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes ADDM findings for the specified databases.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAddmDbFindingsRequest
     * @return SummarizeAddmDbFindingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAddmDbFindings.ts.html |here} to see how to use SummarizeAddmDbFindings API.
     */
    summarizeAddmDbFindings(summarizeAddmDbFindingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAddmDbFindings.");
            const operationName = "summarizeAddmDbFindings";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeAddmDbFindingsRequest.compartmentId,
                "databaseId": summarizeAddmDbFindingsRequest.databaseId,
                "id": summarizeAddmDbFindingsRequest.id,
                "instanceNumber": summarizeAddmDbFindingsRequest.instanceNumber,
                "timeIntervalStart": summarizeAddmDbFindingsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeAddmDbFindingsRequest.timeIntervalEnd,
                "categoryName": summarizeAddmDbFindingsRequest.categoryName,
                "limit": summarizeAddmDbFindingsRequest.limit,
                "page": summarizeAddmDbFindingsRequest.page,
                "sortOrder": summarizeAddmDbFindingsRequest.sortOrder,
                "sortBy": summarizeAddmDbFindingsRequest.sortBy,
                "definedTagEquals": summarizeAddmDbFindingsRequest.definedTagEquals,
                "freeformTagEquals": summarizeAddmDbFindingsRequest.freeformTagEquals,
                "definedTagExists": summarizeAddmDbFindingsRequest.definedTagExists,
                "freeformTagExists": summarizeAddmDbFindingsRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeAddmDbFindingsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAddmDbFindingsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAddmDbFindingsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbFindings",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbFindingAggregationCollection",
                    bodyModel: model.AddmDbFindingAggregationCollection,
                    type: "model.AddmDbFindingAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the AWR database parameter change history for the specified parameter. There will
     * be one element for each time that parameter changed during the specified time period.
     * This API is limited to only one parameter per request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAddmDbParameterChangesRequest
     * @return SummarizeAddmDbParameterChangesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAddmDbParameterChanges.ts.html |here} to see how to use SummarizeAddmDbParameterChanges API.
     */
    summarizeAddmDbParameterChanges(summarizeAddmDbParameterChangesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAddmDbParameterChanges.");
            const operationName = "summarizeAddmDbParameterChanges";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeAddmDbParameterChangesRequest.compartmentId,
                "databaseId": summarizeAddmDbParameterChangesRequest.databaseId,
                "id": summarizeAddmDbParameterChangesRequest.id,
                "instanceNumber": summarizeAddmDbParameterChangesRequest.instanceNumber,
                "timeIntervalStart": summarizeAddmDbParameterChangesRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeAddmDbParameterChangesRequest.timeIntervalEnd,
                "name": summarizeAddmDbParameterChangesRequest.name,
                "valueContains": summarizeAddmDbParameterChangesRequest.valueContains,
                "limit": summarizeAddmDbParameterChangesRequest.limit,
                "page": summarizeAddmDbParameterChangesRequest.page,
                "sortOrder": summarizeAddmDbParameterChangesRequest.sortOrder,
                "sortBy": summarizeAddmDbParameterChangesRequest.sortBy,
                "definedTagEquals": summarizeAddmDbParameterChangesRequest.definedTagEquals,
                "freeformTagEquals": summarizeAddmDbParameterChangesRequest.freeformTagEquals,
                "definedTagExists": summarizeAddmDbParameterChangesRequest.definedTagExists,
                "freeformTagExists": summarizeAddmDbParameterChangesRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeAddmDbParameterChangesRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAddmDbParameterChangesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAddmDbParameterChangesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbParameterChanges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbParameterChangeAggregationCollection",
                    bodyModel: model.AddmDbParameterChangeAggregationCollection,
                    type: "model.AddmDbParameterChangeAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes database parameter history information for the specified databases. Return a list of parameters
     * with information on whether the parameter values were changed or not within the specified
     * time period. The response does not include the individual parameter changes within the time
     * period.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAddmDbParametersRequest
     * @return SummarizeAddmDbParametersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAddmDbParameters.ts.html |here} to see how to use SummarizeAddmDbParameters API.
     */
    summarizeAddmDbParameters(summarizeAddmDbParametersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAddmDbParameters.");
            const operationName = "summarizeAddmDbParameters";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeAddmDbParametersRequest.compartmentId,
                "databaseId": summarizeAddmDbParametersRequest.databaseId,
                "id": summarizeAddmDbParametersRequest.id,
                "instanceNumber": summarizeAddmDbParametersRequest.instanceNumber,
                "timeIntervalStart": summarizeAddmDbParametersRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeAddmDbParametersRequest.timeIntervalEnd,
                "categoryName": summarizeAddmDbParametersRequest.categoryName,
                "nameOrValueContains": summarizeAddmDbParametersRequest.nameOrValueContains,
                "isChanged": summarizeAddmDbParametersRequest.isChanged,
                "isDefault": summarizeAddmDbParametersRequest.isDefault,
                "hasRecommendations": summarizeAddmDbParametersRequest.hasRecommendations,
                "limit": summarizeAddmDbParametersRequest.limit,
                "page": summarizeAddmDbParametersRequest.page,
                "sortOrder": summarizeAddmDbParametersRequest.sortOrder,
                "sortBy": summarizeAddmDbParametersRequest.sortBy,
                "definedTagEquals": summarizeAddmDbParametersRequest.definedTagEquals,
                "freeformTagEquals": summarizeAddmDbParametersRequest.freeformTagEquals,
                "definedTagExists": summarizeAddmDbParametersRequest.definedTagExists,
                "freeformTagExists": summarizeAddmDbParametersRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeAddmDbParametersRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAddmDbParametersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAddmDbParametersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbParameters",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbParameterAggregationCollection",
                    bodyModel: model.AddmDbParameterAggregationCollection,
                    type: "model.AddmDbParameterAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes ADDM recommendations for the specified databases.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAddmDbRecommendationsRequest
     * @return SummarizeAddmDbRecommendationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAddmDbRecommendations.ts.html |here} to see how to use SummarizeAddmDbRecommendations API.
     */
    summarizeAddmDbRecommendations(summarizeAddmDbRecommendationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAddmDbRecommendations.");
            const operationName = "summarizeAddmDbRecommendations";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeAddmDbRecommendationsRequest.compartmentId,
                "databaseId": summarizeAddmDbRecommendationsRequest.databaseId,
                "id": summarizeAddmDbRecommendationsRequest.id,
                "instanceNumber": summarizeAddmDbRecommendationsRequest.instanceNumber,
                "timeIntervalStart": summarizeAddmDbRecommendationsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeAddmDbRecommendationsRequest.timeIntervalEnd,
                "categoryName": summarizeAddmDbRecommendationsRequest.categoryName,
                "findingIdentifier": summarizeAddmDbRecommendationsRequest.findingIdentifier,
                "sqlIdentifier": summarizeAddmDbRecommendationsRequest.sqlIdentifier,
                "ownerOrNameContains": summarizeAddmDbRecommendationsRequest.ownerOrNameContains,
                "nameContains": summarizeAddmDbRecommendationsRequest.nameContains,
                "name": summarizeAddmDbRecommendationsRequest.name,
                "limit": summarizeAddmDbRecommendationsRequest.limit,
                "page": summarizeAddmDbRecommendationsRequest.page,
                "sortOrder": summarizeAddmDbRecommendationsRequest.sortOrder,
                "sortBy": summarizeAddmDbRecommendationsRequest.sortBy,
                "definedTagEquals": summarizeAddmDbRecommendationsRequest.definedTagEquals,
                "freeformTagEquals": summarizeAddmDbRecommendationsRequest.freeformTagEquals,
                "definedTagExists": summarizeAddmDbRecommendationsRequest.definedTagExists,
                "freeformTagExists": summarizeAddmDbRecommendationsRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeAddmDbRecommendationsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAddmDbRecommendationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAddmDbRecommendationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbRecommendations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbRecommendationAggregationCollection",
                    bodyModel: model.AddmDbRecommendationAggregationCollection,
                    type: "model.AddmDbRecommendationAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes Schema objects for the specified databases for the specified objectIdentifiers
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAddmDbSchemaObjectsRequest
     * @return SummarizeAddmDbSchemaObjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAddmDbSchemaObjects.ts.html |here} to see how to use SummarizeAddmDbSchemaObjects API.
     */
    summarizeAddmDbSchemaObjects(summarizeAddmDbSchemaObjectsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAddmDbSchemaObjects.");
            const operationName = "summarizeAddmDbSchemaObjects";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeAddmDbSchemaObjectsRequest.compartmentId,
                "databaseId": summarizeAddmDbSchemaObjectsRequest.databaseId,
                "id": summarizeAddmDbSchemaObjectsRequest.id,
                "objectIdentifier": summarizeAddmDbSchemaObjectsRequest.objectIdentifier,
                "timeIntervalStart": summarizeAddmDbSchemaObjectsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeAddmDbSchemaObjectsRequest.timeIntervalEnd,
                "limit": summarizeAddmDbSchemaObjectsRequest.limit,
                "page": summarizeAddmDbSchemaObjectsRequest.page,
                "definedTagEquals": summarizeAddmDbSchemaObjectsRequest.definedTagEquals,
                "freeformTagEquals": summarizeAddmDbSchemaObjectsRequest.freeformTagEquals,
                "definedTagExists": summarizeAddmDbSchemaObjectsRequest.definedTagExists,
                "freeformTagExists": summarizeAddmDbSchemaObjectsRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeAddmDbSchemaObjectsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAddmDbSchemaObjectsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAddmDbSchemaObjectsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbSchemaObjects",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbSchemaObjectCollection",
                    bodyModel: model.AddmDbSchemaObjectCollection,
                    type: "model.AddmDbSchemaObjectCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes SQL Statements for the specified databases for the specified sqlIdentifiers
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAddmDbSqlStatementsRequest
     * @return SummarizeAddmDbSqlStatementsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAddmDbSqlStatements.ts.html |here} to see how to use SummarizeAddmDbSqlStatements API.
     */
    summarizeAddmDbSqlStatements(summarizeAddmDbSqlStatementsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAddmDbSqlStatements.");
            const operationName = "summarizeAddmDbSqlStatements";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeAddmDbSqlStatementsRequest.compartmentId,
                "databaseId": summarizeAddmDbSqlStatementsRequest.databaseId,
                "id": summarizeAddmDbSqlStatementsRequest.id,
                "sqlIdentifier": summarizeAddmDbSqlStatementsRequest.sqlIdentifier,
                "timeIntervalStart": summarizeAddmDbSqlStatementsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeAddmDbSqlStatementsRequest.timeIntervalEnd,
                "limit": summarizeAddmDbSqlStatementsRequest.limit,
                "page": summarizeAddmDbSqlStatementsRequest.page,
                "definedTagEquals": summarizeAddmDbSqlStatementsRequest.definedTagEquals,
                "freeformTagEquals": summarizeAddmDbSqlStatementsRequest.freeformTagEquals,
                "definedTagExists": summarizeAddmDbSqlStatementsRequest.definedTagExists,
                "freeformTagExists": summarizeAddmDbSqlStatementsRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeAddmDbSqlStatementsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAddmDbSqlStatementsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAddmDbSqlStatementsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/addmDbSqlStatements",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addmDbSqlStatementCollection",
                    bodyModel: model.AddmDbSqlStatementCollection,
                    type: "model.AddmDbSqlStatementCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the AWR CPU resource limits and metrics for the specified database in AWR.
     * Based on the time range provided as part of query param, the metrics points will be returned in the response as below.
     * - if time range is <=7 days then the metrics points will be for every MINUTES
     * - if time range is <=2 hours then the metrics points will be for every 10 SECONDS
     * - if time range is >7 days then the metrics points will be for every HOUR.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAwrDatabaseCpuUsagesRequest
     * @return SummarizeAwrDatabaseCpuUsagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAwrDatabaseCpuUsages.ts.html |here} to see how to use SummarizeAwrDatabaseCpuUsages API.
     */
    summarizeAwrDatabaseCpuUsages(summarizeAwrDatabaseCpuUsagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAwrDatabaseCpuUsages.");
            const operationName = "summarizeAwrDatabaseCpuUsages";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": summarizeAwrDatabaseCpuUsagesRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": summarizeAwrDatabaseCpuUsagesRequest.awrSourceDatabaseIdentifier,
                "instanceNumber": summarizeAwrDatabaseCpuUsagesRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": summarizeAwrDatabaseCpuUsagesRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": summarizeAwrDatabaseCpuUsagesRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDatabaseCpuUsagesRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDatabaseCpuUsagesRequest.timeLessThanOrEqualTo,
                "sessionType": summarizeAwrDatabaseCpuUsagesRequest.sessionType,
                "page": summarizeAwrDatabaseCpuUsagesRequest.page,
                "limit": summarizeAwrDatabaseCpuUsagesRequest.limit,
                "sortBy": summarizeAwrDatabaseCpuUsagesRequest.sortBy,
                "sortOrder": summarizeAwrDatabaseCpuUsagesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDatabaseCpuUsagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDatabaseCpuUsagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseCpuUsages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseCpuUsageCollection",
                    bodyModel: model.AwrDatabaseCpuUsageCollection,
                    type: "model.AwrDatabaseCpuUsageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the metric samples for the specified database in the AWR. The metric samples are summarized based on the Time dimension for each metric.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAwrDatabaseMetricsRequest
     * @return SummarizeAwrDatabaseMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAwrDatabaseMetrics.ts.html |here} to see how to use SummarizeAwrDatabaseMetrics API.
     */
    summarizeAwrDatabaseMetrics(summarizeAwrDatabaseMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAwrDatabaseMetrics.");
            const operationName = "summarizeAwrDatabaseMetrics";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": summarizeAwrDatabaseMetricsRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": summarizeAwrDatabaseMetricsRequest.awrSourceDatabaseIdentifier,
                "instanceNumber": summarizeAwrDatabaseMetricsRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": summarizeAwrDatabaseMetricsRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": summarizeAwrDatabaseMetricsRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDatabaseMetricsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDatabaseMetricsRequest.timeLessThanOrEqualTo,
                "name": summarizeAwrDatabaseMetricsRequest.name,
                "page": summarizeAwrDatabaseMetricsRequest.page,
                "limit": summarizeAwrDatabaseMetricsRequest.limit,
                "sortBy": summarizeAwrDatabaseMetricsRequest.sortBy,
                "sortOrder": summarizeAwrDatabaseMetricsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDatabaseMetricsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDatabaseMetricsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseMetricCollection",
                    bodyModel: model.AwrDatabaseMetricCollection,
                    type: "model.AwrDatabaseMetricCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the database parameter change history for one database parameter of the specified database in AWR. One change history record contains
     * the previous value, the changed value, and the corresponding time range. If the database parameter value was changed multiple times within the time range, then multiple change history records are created for the same parameter.
     * Note that this API only returns information on change history details for one database parameter.
     * To get a list of all the database parameters whose values were changed during a specified time range, use the following API endpoint:
     * /awrHubs/{awrHubId}/awrDbParameters?awrSourceDatabaseIdentifier={awrSourceDbId}
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAwrDatabaseParameterChangesRequest
     * @return SummarizeAwrDatabaseParameterChangesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAwrDatabaseParameterChanges.ts.html |here} to see how to use SummarizeAwrDatabaseParameterChanges API.
     */
    summarizeAwrDatabaseParameterChanges(summarizeAwrDatabaseParameterChangesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAwrDatabaseParameterChanges.");
            const operationName = "summarizeAwrDatabaseParameterChanges";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": summarizeAwrDatabaseParameterChangesRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": summarizeAwrDatabaseParameterChangesRequest.awrSourceDatabaseIdentifier,
                "instanceNumber": summarizeAwrDatabaseParameterChangesRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": summarizeAwrDatabaseParameterChangesRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": summarizeAwrDatabaseParameterChangesRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDatabaseParameterChangesRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDatabaseParameterChangesRequest.timeLessThanOrEqualTo,
                "name": summarizeAwrDatabaseParameterChangesRequest.name,
                "page": summarizeAwrDatabaseParameterChangesRequest.page,
                "limit": summarizeAwrDatabaseParameterChangesRequest.limit,
                "sortBy": summarizeAwrDatabaseParameterChangesRequest.sortBy,
                "sortOrder": summarizeAwrDatabaseParameterChangesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDatabaseParameterChangesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDatabaseParameterChangesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseParameterChanges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseParameterChangeCollection",
                    bodyModel: model.AwrDatabaseParameterChangeCollection,
                    type: "model.AwrDatabaseParameterChangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Summarizes the database parameter history for the specified database in AWR. This includes the list of database
  * parameters, with information on whether the parameter values were modified within the query time range. Note that
  * each database parameter is only listed once. Depending on the optional query parameters, the returned summary gets all the database parameters, which include:
  * <p>
  Queryparam (valueChanged =\"Y\") - Each parameter whose value was changed during the time range, \"isChanged : true\" in response for the DB params.
  * Queryparam (valueChanged =\"N\") - Each parameter whose value was unchanged during the time range, \"isChanged : false\" in response for the DB params.
  * Queryparam (valueChanged =\"Y\"  and valueModified = \"SYSTEM_MOD\") - Each parameter whose value was changed at the system level during the time range, \"isChanged : true\" & \"valueModified : SYSTEM_MOD\" in response for the DB params.
  * Queryparam (valueChanged =\"N\" and  valueDefault = \"FALSE\") - Each parameter whose value was unchanged during the time range, however, the value is not the default value, \"isChanged : true\" & \"isDefault : false\" in response for the DB params.
  * <p>
  Note that this API does not return information on the number of times each database parameter has been changed within the time range. To get the database parameter value change history for a specific parameter, use the following API endpoint:
  * /awrHubs/{awrHubId}/awrDbParameterChanges?awrSourceDatabaseIdentifier={awrSourceDbId}
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param SummarizeAwrDatabaseParametersRequest
       * @return SummarizeAwrDatabaseParametersResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAwrDatabaseParameters.ts.html |here} to see how to use SummarizeAwrDatabaseParameters API.
       */
    summarizeAwrDatabaseParameters(summarizeAwrDatabaseParametersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAwrDatabaseParameters.");
            const operationName = "summarizeAwrDatabaseParameters";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": summarizeAwrDatabaseParametersRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": summarizeAwrDatabaseParametersRequest.awrSourceDatabaseIdentifier,
                "instanceNumber": summarizeAwrDatabaseParametersRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": summarizeAwrDatabaseParametersRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": summarizeAwrDatabaseParametersRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDatabaseParametersRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDatabaseParametersRequest.timeLessThanOrEqualTo,
                "name": summarizeAwrDatabaseParametersRequest.name,
                "nameContains": summarizeAwrDatabaseParametersRequest.nameContains,
                "valueChanged": summarizeAwrDatabaseParametersRequest.valueChanged,
                "valueDefault": summarizeAwrDatabaseParametersRequest.valueDefault,
                "valueModified": summarizeAwrDatabaseParametersRequest.valueModified,
                "page": summarizeAwrDatabaseParametersRequest.page,
                "limit": summarizeAwrDatabaseParametersRequest.limit,
                "sortBy": summarizeAwrDatabaseParametersRequest.sortBy,
                "sortOrder": summarizeAwrDatabaseParametersRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDatabaseParametersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDatabaseParametersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseParameters",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseParameterCollection",
                    bodyModel: model.AwrDatabaseParameterCollection,
                    type: "model.AwrDatabaseParameterCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the AWR snapshot ranges that contain continuous snapshots, for the specified AWRHub.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAwrDatabaseSnapshotRangesRequest
     * @return SummarizeAwrDatabaseSnapshotRangesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAwrDatabaseSnapshotRanges.ts.html |here} to see how to use SummarizeAwrDatabaseSnapshotRanges API.
     */
    summarizeAwrDatabaseSnapshotRanges(summarizeAwrDatabaseSnapshotRangesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAwrDatabaseSnapshotRanges.");
            const operationName = "summarizeAwrDatabaseSnapshotRanges";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": summarizeAwrDatabaseSnapshotRangesRequest.awrHubId
            };
            const queryParams = {
                "name": summarizeAwrDatabaseSnapshotRangesRequest.name,
                "timeGreaterThanOrEqualTo": summarizeAwrDatabaseSnapshotRangesRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDatabaseSnapshotRangesRequest.timeLessThanOrEqualTo,
                "page": summarizeAwrDatabaseSnapshotRangesRequest.page,
                "limit": summarizeAwrDatabaseSnapshotRangesRequest.limit,
                "sortBy": summarizeAwrDatabaseSnapshotRangesRequest.sortBy,
                "sortOrder": summarizeAwrDatabaseSnapshotRangesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDatabaseSnapshotRangesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDatabaseSnapshotRangesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseSnapshotRanges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseSnapshotRangeCollection",
                    bodyModel: model.AwrDatabaseSnapshotRangeCollection,
                    type: "model.AwrDatabaseSnapshotRangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the AWR SYSSTAT sample data for the specified database in AWR. The statistical data is summarized based on the Time dimension for each statistic.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAwrDatabaseSysstatsRequest
     * @return SummarizeAwrDatabaseSysstatsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAwrDatabaseSysstats.ts.html |here} to see how to use SummarizeAwrDatabaseSysstats API.
     */
    summarizeAwrDatabaseSysstats(summarizeAwrDatabaseSysstatsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAwrDatabaseSysstats.");
            const operationName = "summarizeAwrDatabaseSysstats";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": summarizeAwrDatabaseSysstatsRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": summarizeAwrDatabaseSysstatsRequest.awrSourceDatabaseIdentifier,
                "instanceNumber": summarizeAwrDatabaseSysstatsRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": summarizeAwrDatabaseSysstatsRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": summarizeAwrDatabaseSysstatsRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDatabaseSysstatsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDatabaseSysstatsRequest.timeLessThanOrEqualTo,
                "name": summarizeAwrDatabaseSysstatsRequest.name,
                "page": summarizeAwrDatabaseSysstatsRequest.page,
                "limit": summarizeAwrDatabaseSysstatsRequest.limit,
                "sortBy": summarizeAwrDatabaseSysstatsRequest.sortBy,
                "sortOrder": summarizeAwrDatabaseSysstatsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDatabaseSysstatsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDatabaseSysstatsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseSysstats",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseSysstatCollection",
                    bodyModel: model.AwrDatabaseSysstatCollection,
                    type: "model.AwrDatabaseSysstatCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the AWR top wait events.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAwrDatabaseTopWaitEventsRequest
     * @return SummarizeAwrDatabaseTopWaitEventsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAwrDatabaseTopWaitEvents.ts.html |here} to see how to use SummarizeAwrDatabaseTopWaitEvents API.
     */
    summarizeAwrDatabaseTopWaitEvents(summarizeAwrDatabaseTopWaitEventsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAwrDatabaseTopWaitEvents.");
            const operationName = "summarizeAwrDatabaseTopWaitEvents";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": summarizeAwrDatabaseTopWaitEventsRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": summarizeAwrDatabaseTopWaitEventsRequest.awrSourceDatabaseIdentifier,
                "instanceNumber": summarizeAwrDatabaseTopWaitEventsRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": summarizeAwrDatabaseTopWaitEventsRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": summarizeAwrDatabaseTopWaitEventsRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDatabaseTopWaitEventsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDatabaseTopWaitEventsRequest.timeLessThanOrEqualTo,
                "sessionType": summarizeAwrDatabaseTopWaitEventsRequest.sessionType,
                "topN": summarizeAwrDatabaseTopWaitEventsRequest.topN,
                "sortBy": summarizeAwrDatabaseTopWaitEventsRequest.sortBy,
                "sortOrder": summarizeAwrDatabaseTopWaitEventsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDatabaseTopWaitEventsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDatabaseTopWaitEventsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseTopWaitEvents",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseTopWaitEventCollection",
                    bodyModel: model.AwrDatabaseTopWaitEventCollection,
                    type: "model.AwrDatabaseTopWaitEventCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes AWR wait event data into value buckets and frequency, for the specified database in the AWR.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAwrDatabaseWaitEventBucketsRequest
     * @return SummarizeAwrDatabaseWaitEventBucketsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAwrDatabaseWaitEventBuckets.ts.html |here} to see how to use SummarizeAwrDatabaseWaitEventBuckets API.
     */
    summarizeAwrDatabaseWaitEventBuckets(summarizeAwrDatabaseWaitEventBucketsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAwrDatabaseWaitEventBuckets.");
            const operationName = "summarizeAwrDatabaseWaitEventBuckets";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": summarizeAwrDatabaseWaitEventBucketsRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": summarizeAwrDatabaseWaitEventBucketsRequest.awrSourceDatabaseIdentifier,
                "instanceNumber": summarizeAwrDatabaseWaitEventBucketsRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": summarizeAwrDatabaseWaitEventBucketsRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": summarizeAwrDatabaseWaitEventBucketsRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDatabaseWaitEventBucketsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDatabaseWaitEventBucketsRequest.timeLessThanOrEqualTo,
                "name": summarizeAwrDatabaseWaitEventBucketsRequest.name,
                "numBucket": summarizeAwrDatabaseWaitEventBucketsRequest.numBucket,
                "minValue": summarizeAwrDatabaseWaitEventBucketsRequest.minValue,
                "maxValue": summarizeAwrDatabaseWaitEventBucketsRequest.maxValue,
                "page": summarizeAwrDatabaseWaitEventBucketsRequest.page,
                "limit": summarizeAwrDatabaseWaitEventBucketsRequest.limit,
                "sortBy": summarizeAwrDatabaseWaitEventBucketsRequest.sortBy,
                "sortOrder": summarizeAwrDatabaseWaitEventBucketsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDatabaseWaitEventBucketsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDatabaseWaitEventBucketsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseWaitEventBuckets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseWaitEventBucketCollection",
                    bodyModel: model.AwrDatabaseWaitEventBucketCollection,
                    type: "model.AwrDatabaseWaitEventBucketCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Summarizes the AWR wait event sample data for the specified database in the AWR. The event data is summarized based on the Time dimension for each event.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAwrDatabaseWaitEventsRequest
     * @return SummarizeAwrDatabaseWaitEventsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAwrDatabaseWaitEvents.ts.html |here} to see how to use SummarizeAwrDatabaseWaitEvents API.
     */
    summarizeAwrDatabaseWaitEvents(summarizeAwrDatabaseWaitEventsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAwrDatabaseWaitEvents.");
            const operationName = "summarizeAwrDatabaseWaitEvents";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": summarizeAwrDatabaseWaitEventsRequest.awrHubId
            };
            const queryParams = {
                "awrSourceDatabaseIdentifier": summarizeAwrDatabaseWaitEventsRequest.awrSourceDatabaseIdentifier,
                "instanceNumber": summarizeAwrDatabaseWaitEventsRequest.instanceNumber,
                "beginSnapshotIdentifierGreaterThanOrEqualTo": summarizeAwrDatabaseWaitEventsRequest.beginSnapshotIdentifierGreaterThanOrEqualTo,
                "endSnapshotIdentifierLessThanOrEqualTo": summarizeAwrDatabaseWaitEventsRequest.endSnapshotIdentifierLessThanOrEqualTo,
                "timeGreaterThanOrEqualTo": summarizeAwrDatabaseWaitEventsRequest.timeGreaterThanOrEqualTo,
                "timeLessThanOrEqualTo": summarizeAwrDatabaseWaitEventsRequest.timeLessThanOrEqualTo,
                "name": summarizeAwrDatabaseWaitEventsRequest.name,
                "sessionType": summarizeAwrDatabaseWaitEventsRequest.sessionType,
                "page": summarizeAwrDatabaseWaitEventsRequest.page,
                "limit": summarizeAwrDatabaseWaitEventsRequest.limit,
                "sortBy": summarizeAwrDatabaseWaitEventsRequest.sortBy,
                "sortOrder": summarizeAwrDatabaseWaitEventsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrDatabaseWaitEventsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrDatabaseWaitEventsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrDatabaseWaitEvents",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "awrDatabaseWaitEventCollection",
                    bodyModel: model.AwrDatabaseWaitEventCollection,
                    type: "model.AwrDatabaseWaitEventCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of summary of AWR Sources.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeAwrSourcesSummariesRequest
     * @return SummarizeAwrSourcesSummariesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeAwrSourcesSummaries.ts.html |here} to see how to use SummarizeAwrSourcesSummaries API.
     */
    summarizeAwrSourcesSummaries(summarizeAwrSourcesSummariesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeAwrSourcesSummaries.");
            const operationName = "summarizeAwrSourcesSummaries";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": summarizeAwrSourcesSummariesRequest.awrHubId
            };
            const queryParams = {
                "compartmentId": summarizeAwrSourcesSummariesRequest.compartmentId,
                "name": summarizeAwrSourcesSummariesRequest.name,
                "limit": summarizeAwrSourcesSummariesRequest.limit,
                "page": summarizeAwrSourcesSummariesRequest.page,
                "sortBy": summarizeAwrSourcesSummariesRequest.sortBy,
                "sortOrder": summarizeAwrSourcesSummariesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeAwrSourcesSummariesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeAwrSourcesSummariesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}/awrSourcesSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeAwrSourcesSummariesCollection",
                    bodyModel: model.SummarizeAwrSourcesSummariesCollection,
                    type: "model.SummarizeAwrSourcesSummariesCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the applicable configuration items based on the query parameters specified. Configuration items for an opsiConfigType with respect to a compartmentId can be fetched.
     * Values specified in configItemField param will determine what fields for each configuration items have to be returned.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeConfigurationItemsRequest
     * @return SummarizeConfigurationItemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeConfigurationItems.ts.html |here} to see how to use SummarizeConfigurationItems API.
     */
    summarizeConfigurationItems(summarizeConfigurationItemsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeConfigurationItems.");
            const operationName = "summarizeConfigurationItems";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeConfigurationItemsRequest.compartmentId,
                "opsiConfigType": summarizeConfigurationItemsRequest.opsiConfigType,
                "limit": summarizeConfigurationItemsRequest.limit,
                "page": summarizeConfigurationItemsRequest.page,
                "configItemsApplicableContext": summarizeConfigurationItemsRequest.configItemsApplicableContext,
                "configItemField": summarizeConfigurationItemsRequest.configItemField,
                "name": summarizeConfigurationItemsRequest.name
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeConfigurationItemsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeConfigurationItemsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/opsiConfigurations/configurationItems",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "configurationItemsCollection",
                    bodyModel: model.ConfigurationItemsCollection,
                    type: "model.ConfigurationItemsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with time series data (endTimestamp, capacity, baseCapacity) for the time period specified.
     * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
     * If compartmentIdInSubtree is specified, aggregates resources in a compartment and in all sub-compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeDatabaseInsightResourceCapacityTrendRequest
     * @return SummarizeDatabaseInsightResourceCapacityTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceCapacityTrend.ts.html |here} to see how to use SummarizeDatabaseInsightResourceCapacityTrend API.
     */
    summarizeDatabaseInsightResourceCapacityTrend(summarizeDatabaseInsightResourceCapacityTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceCapacityTrend.");
            const operationName = "summarizeDatabaseInsightResourceCapacityTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceCapacityTrendRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceCapacityTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceCapacityTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceCapacityTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceCapacityTrendRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceCapacityTrendRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceCapacityTrendRequest.databaseId,
                "id": summarizeDatabaseInsightResourceCapacityTrendRequest.id,
                "exadataInsightId": summarizeDatabaseInsightResourceCapacityTrendRequest.exadataInsightId,
                "cdbName": summarizeDatabaseInsightResourceCapacityTrendRequest.cdbName,
                "utilizationLevel": summarizeDatabaseInsightResourceCapacityTrendRequest.utilizationLevel,
                "page": summarizeDatabaseInsightResourceCapacityTrendRequest.page,
                "sortOrder": summarizeDatabaseInsightResourceCapacityTrendRequest.sortOrder,
                "sortBy": summarizeDatabaseInsightResourceCapacityTrendRequest.sortBy,
                "tablespaceName": summarizeDatabaseInsightResourceCapacityTrendRequest.tablespaceName,
                "hostName": summarizeDatabaseInsightResourceCapacityTrendRequest.hostName,
                "isDatabaseInstanceLevelMetrics": summarizeDatabaseInsightResourceCapacityTrendRequest.isDatabaseInstanceLevelMetrics,
                "definedTagEquals": summarizeDatabaseInsightResourceCapacityTrendRequest.definedTagEquals,
                "freeformTagEquals": summarizeDatabaseInsightResourceCapacityTrendRequest.freeformTagEquals,
                "definedTagExists": summarizeDatabaseInsightResourceCapacityTrendRequest.definedTagExists,
                "freeformTagExists": summarizeDatabaseInsightResourceCapacityTrendRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeDatabaseInsightResourceCapacityTrendRequest.compartmentIdInSubtree,
                "vmclusterName": summarizeDatabaseInsightResourceCapacityTrendRequest.vmclusterName,
                "highUtilizationThreshold": summarizeDatabaseInsightResourceCapacityTrendRequest.highUtilizationThreshold,
                "lowUtilizationThreshold": summarizeDatabaseInsightResourceCapacityTrendRequest.lowUtilizationThreshold
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceCapacityTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeDatabaseInsightResourceCapacityTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceCapacityTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceCapacityTrendAggregationCollection",
                    bodyModel: model.SummarizeDatabaseInsightResourceCapacityTrendAggregationCollection,
                    type: "model.SummarizeDatabaseInsightResourceCapacityTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get Forecast predictions for CPU and Storage resources since a time in the past.
     * If compartmentIdInSubtree is specified, aggregates resources in a compartment and in all sub-compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeDatabaseInsightResourceForecastTrendRequest
     * @return SummarizeDatabaseInsightResourceForecastTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceForecastTrend.ts.html |here} to see how to use SummarizeDatabaseInsightResourceForecastTrend API.
     */
    summarizeDatabaseInsightResourceForecastTrend(summarizeDatabaseInsightResourceForecastTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceForecastTrend.");
            const operationName = "summarizeDatabaseInsightResourceForecastTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceForecastTrendRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceForecastTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceForecastTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceForecastTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceForecastTrendRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceForecastTrendRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceForecastTrendRequest.databaseId,
                "id": summarizeDatabaseInsightResourceForecastTrendRequest.id,
                "exadataInsightId": summarizeDatabaseInsightResourceForecastTrendRequest.exadataInsightId,
                "cdbName": summarizeDatabaseInsightResourceForecastTrendRequest.cdbName,
                "statistic": summarizeDatabaseInsightResourceForecastTrendRequest.statistic,
                "forecastDays": summarizeDatabaseInsightResourceForecastTrendRequest.forecastDays,
                "forecastModel": summarizeDatabaseInsightResourceForecastTrendRequest.forecastModel,
                "utilizationLevel": summarizeDatabaseInsightResourceForecastTrendRequest.utilizationLevel,
                "confidence": summarizeDatabaseInsightResourceForecastTrendRequest.confidence,
                "page": summarizeDatabaseInsightResourceForecastTrendRequest.page,
                "hostName": summarizeDatabaseInsightResourceForecastTrendRequest.hostName,
                "tablespaceName": summarizeDatabaseInsightResourceForecastTrendRequest.tablespaceName,
                "isDatabaseInstanceLevelMetrics": summarizeDatabaseInsightResourceForecastTrendRequest.isDatabaseInstanceLevelMetrics,
                "definedTagEquals": summarizeDatabaseInsightResourceForecastTrendRequest.definedTagEquals,
                "freeformTagEquals": summarizeDatabaseInsightResourceForecastTrendRequest.freeformTagEquals,
                "definedTagExists": summarizeDatabaseInsightResourceForecastTrendRequest.definedTagExists,
                "freeformTagExists": summarizeDatabaseInsightResourceForecastTrendRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeDatabaseInsightResourceForecastTrendRequest.compartmentIdInSubtree,
                "vmclusterName": summarizeDatabaseInsightResourceForecastTrendRequest.vmclusterName,
                "highUtilizationThreshold": summarizeDatabaseInsightResourceForecastTrendRequest.highUtilizationThreshold,
                "lowUtilizationThreshold": summarizeDatabaseInsightResourceForecastTrendRequest.lowUtilizationThreshold
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceForecastTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeDatabaseInsightResourceForecastTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceForecastTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceForecastTrendAggregation",
                    bodyModel: model.SummarizeDatabaseInsightResourceForecastTrendAggregation,
                    type: "model.SummarizeDatabaseInsightResourceForecastTrendAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the Resource statistics (usage,capacity, usage change percent, utilization percent, base capacity, isAutoScalingEnabled)
     * for each database filtered by utilization level in a compartment and in all sub-compartments if specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeDatabaseInsightResourceStatisticsRequest
     * @return SummarizeDatabaseInsightResourceStatisticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceStatistics.ts.html |here} to see how to use SummarizeDatabaseInsightResourceStatistics API.
     */
    summarizeDatabaseInsightResourceStatistics(summarizeDatabaseInsightResourceStatisticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceStatistics.");
            const operationName = "summarizeDatabaseInsightResourceStatistics";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceStatisticsRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceStatisticsRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceStatisticsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceStatisticsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceStatisticsRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceStatisticsRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceStatisticsRequest.databaseId,
                "id": summarizeDatabaseInsightResourceStatisticsRequest.id,
                "exadataInsightId": summarizeDatabaseInsightResourceStatisticsRequest.exadataInsightId,
                "cdbName": summarizeDatabaseInsightResourceStatisticsRequest.cdbName,
                "percentile": summarizeDatabaseInsightResourceStatisticsRequest.percentile,
                "insightBy": summarizeDatabaseInsightResourceStatisticsRequest.insightBy,
                "forecastDays": summarizeDatabaseInsightResourceStatisticsRequest.forecastDays,
                "limit": summarizeDatabaseInsightResourceStatisticsRequest.limit,
                "page": summarizeDatabaseInsightResourceStatisticsRequest.page,
                "sortOrder": summarizeDatabaseInsightResourceStatisticsRequest.sortOrder,
                "sortBy": summarizeDatabaseInsightResourceStatisticsRequest.sortBy,
                "hostName": summarizeDatabaseInsightResourceStatisticsRequest.hostName,
                "isDatabaseInstanceLevelMetrics": summarizeDatabaseInsightResourceStatisticsRequest.isDatabaseInstanceLevelMetrics,
                "definedTagEquals": summarizeDatabaseInsightResourceStatisticsRequest.definedTagEquals,
                "freeformTagEquals": summarizeDatabaseInsightResourceStatisticsRequest.freeformTagEquals,
                "definedTagExists": summarizeDatabaseInsightResourceStatisticsRequest.definedTagExists,
                "freeformTagExists": summarizeDatabaseInsightResourceStatisticsRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeDatabaseInsightResourceStatisticsRequest.compartmentIdInSubtree,
                "vmclusterName": summarizeDatabaseInsightResourceStatisticsRequest.vmclusterName,
                "highUtilizationThreshold": summarizeDatabaseInsightResourceStatisticsRequest.highUtilizationThreshold,
                "lowUtilizationThreshold": summarizeDatabaseInsightResourceStatisticsRequest.lowUtilizationThreshold
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceStatisticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeDatabaseInsightResourceStatisticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceStatistics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceStatisticsAggregationCollection",
                    bodyModel: model.SummarizeDatabaseInsightResourceStatisticsAggregationCollection,
                    type: "model.SummarizeDatabaseInsightResourceStatisticsAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * A cumulative distribution function is used to rank the usage data points per database within the specified time period.
     * For each database, the minimum data point with a ranking > the percentile value is included in the summation.
     * Linear regression functions are used to calculate the usage change percentage.
     * If compartmentIdInSubtree is specified, aggregates resources in a compartment and in all sub-compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeDatabaseInsightResourceUsageRequest
     * @return SummarizeDatabaseInsightResourceUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceUsage.ts.html |here} to see how to use SummarizeDatabaseInsightResourceUsage API.
     */
    summarizeDatabaseInsightResourceUsage(summarizeDatabaseInsightResourceUsageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceUsage.");
            const operationName = "summarizeDatabaseInsightResourceUsage";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceUsageRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceUsageRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceUsageRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceUsageRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceUsageRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceUsageRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceUsageRequest.databaseId,
                "id": summarizeDatabaseInsightResourceUsageRequest.id,
                "exadataInsightId": summarizeDatabaseInsightResourceUsageRequest.exadataInsightId,
                "hostName": summarizeDatabaseInsightResourceUsageRequest.hostName,
                "isDatabaseInstanceLevelMetrics": summarizeDatabaseInsightResourceUsageRequest.isDatabaseInstanceLevelMetrics,
                "page": summarizeDatabaseInsightResourceUsageRequest.page,
                "percentile": summarizeDatabaseInsightResourceUsageRequest.percentile,
                "definedTagEquals": summarizeDatabaseInsightResourceUsageRequest.definedTagEquals,
                "freeformTagEquals": summarizeDatabaseInsightResourceUsageRequest.freeformTagEquals,
                "definedTagExists": summarizeDatabaseInsightResourceUsageRequest.definedTagExists,
                "freeformTagExists": summarizeDatabaseInsightResourceUsageRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeDatabaseInsightResourceUsageRequest.compartmentIdInSubtree,
                "vmclusterName": summarizeDatabaseInsightResourceUsageRequest.vmclusterName,
                "cdbName": summarizeDatabaseInsightResourceUsageRequest.cdbName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceUsageRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeDatabaseInsightResourceUsageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceUsageSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceUsageAggregation",
                    bodyModel: model.SummarizeDatabaseInsightResourceUsageAggregation,
                    type: "model.SummarizeDatabaseInsightResourceUsageAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with time series data (endTimestamp, usage, capacity) for the time period specified.
     * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
     * If compartmentIdInSubtree is specified, aggregates resources in a compartment and in all sub-compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeDatabaseInsightResourceUsageTrendRequest
     * @return SummarizeDatabaseInsightResourceUsageTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceUsageTrend.ts.html |here} to see how to use SummarizeDatabaseInsightResourceUsageTrend API.
     */
    summarizeDatabaseInsightResourceUsageTrend(summarizeDatabaseInsightResourceUsageTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceUsageTrend.");
            const operationName = "summarizeDatabaseInsightResourceUsageTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceUsageTrendRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceUsageTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceUsageTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceUsageTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceUsageTrendRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceUsageTrendRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceUsageTrendRequest.databaseId,
                "id": summarizeDatabaseInsightResourceUsageTrendRequest.id,
                "exadataInsightId": summarizeDatabaseInsightResourceUsageTrendRequest.exadataInsightId,
                "page": summarizeDatabaseInsightResourceUsageTrendRequest.page,
                "sortOrder": summarizeDatabaseInsightResourceUsageTrendRequest.sortOrder,
                "sortBy": summarizeDatabaseInsightResourceUsageTrendRequest.sortBy,
                "hostName": summarizeDatabaseInsightResourceUsageTrendRequest.hostName,
                "isDatabaseInstanceLevelMetrics": summarizeDatabaseInsightResourceUsageTrendRequest.isDatabaseInstanceLevelMetrics,
                "definedTagEquals": summarizeDatabaseInsightResourceUsageTrendRequest.definedTagEquals,
                "freeformTagEquals": summarizeDatabaseInsightResourceUsageTrendRequest.freeformTagEquals,
                "definedTagExists": summarizeDatabaseInsightResourceUsageTrendRequest.definedTagExists,
                "freeformTagExists": summarizeDatabaseInsightResourceUsageTrendRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeDatabaseInsightResourceUsageTrendRequest.compartmentIdInSubtree,
                "vmclusterName": summarizeDatabaseInsightResourceUsageTrendRequest.vmclusterName,
                "cdbName": summarizeDatabaseInsightResourceUsageTrendRequest.cdbName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceUsageTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeDatabaseInsightResourceUsageTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceUsageTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceUsageTrendAggregationCollection",
                    bodyModel: model.SummarizeDatabaseInsightResourceUsageTrendAggregationCollection,
                    type: "model.SummarizeDatabaseInsightResourceUsageTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets resources with current utilization (high and low) and projected utilization (high and low) for a resource type over specified time period.
     * If compartmentIdInSubtree is specified, aggregates resources in a compartment and in all sub-compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeDatabaseInsightResourceUtilizationInsightRequest
     * @return SummarizeDatabaseInsightResourceUtilizationInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightResourceUtilizationInsight.ts.html |here} to see how to use SummarizeDatabaseInsightResourceUtilizationInsight API.
     */
    summarizeDatabaseInsightResourceUtilizationInsight(summarizeDatabaseInsightResourceUtilizationInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceUtilizationInsight.");
            const operationName = "summarizeDatabaseInsightResourceUtilizationInsight";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceUtilizationInsightRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceUtilizationInsightRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceUtilizationInsightRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceUtilizationInsightRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceUtilizationInsightRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceUtilizationInsightRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceUtilizationInsightRequest.databaseId,
                "id": summarizeDatabaseInsightResourceUtilizationInsightRequest.id,
                "exadataInsightId": summarizeDatabaseInsightResourceUtilizationInsightRequest.exadataInsightId,
                "forecastDays": summarizeDatabaseInsightResourceUtilizationInsightRequest.forecastDays,
                "hostName": summarizeDatabaseInsightResourceUtilizationInsightRequest.hostName,
                "isDatabaseInstanceLevelMetrics": summarizeDatabaseInsightResourceUtilizationInsightRequest.isDatabaseInstanceLevelMetrics,
                "page": summarizeDatabaseInsightResourceUtilizationInsightRequest.page,
                "definedTagEquals": summarizeDatabaseInsightResourceUtilizationInsightRequest.definedTagEquals,
                "freeformTagEquals": summarizeDatabaseInsightResourceUtilizationInsightRequest.freeformTagEquals,
                "definedTagExists": summarizeDatabaseInsightResourceUtilizationInsightRequest.definedTagExists,
                "freeformTagExists": summarizeDatabaseInsightResourceUtilizationInsightRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeDatabaseInsightResourceUtilizationInsightRequest.compartmentIdInSubtree,
                "vmclusterName": summarizeDatabaseInsightResourceUtilizationInsightRequest.vmclusterName,
                "cdbName": summarizeDatabaseInsightResourceUtilizationInsightRequest.cdbName,
                "highUtilizationThreshold": summarizeDatabaseInsightResourceUtilizationInsightRequest.highUtilizationThreshold,
                "lowUtilizationThreshold": summarizeDatabaseInsightResourceUtilizationInsightRequest.lowUtilizationThreshold
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceUtilizationInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeDatabaseInsightResourceUtilizationInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceUtilizationInsight",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceUtilizationInsightAggregation",
                    bodyModel: model.SummarizeDatabaseInsightResourceUtilizationInsightAggregation,
                    type: "model.SummarizeDatabaseInsightResourceUtilizationInsightAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with usage time series data (endTimestamp, usage, capacity) with breakdown by tablespaceName for the time period specified.
     * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
     * Either databaseId or id must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeDatabaseInsightTablespaceUsageTrendRequest
     * @return SummarizeDatabaseInsightTablespaceUsageTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeDatabaseInsightTablespaceUsageTrend.ts.html |here} to see how to use SummarizeDatabaseInsightTablespaceUsageTrend API.
     */
    summarizeDatabaseInsightTablespaceUsageTrend(summarizeDatabaseInsightTablespaceUsageTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightTablespaceUsageTrend.");
            const operationName = "summarizeDatabaseInsightTablespaceUsageTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightTablespaceUsageTrendRequest.compartmentId,
                "analysisTimeInterval": summarizeDatabaseInsightTablespaceUsageTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightTablespaceUsageTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightTablespaceUsageTrendRequest.timeIntervalEnd,
                "databaseId": summarizeDatabaseInsightTablespaceUsageTrendRequest.databaseId,
                "id": summarizeDatabaseInsightTablespaceUsageTrendRequest.id,
                "page": summarizeDatabaseInsightTablespaceUsageTrendRequest.page,
                "limit": summarizeDatabaseInsightTablespaceUsageTrendRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightTablespaceUsageTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeDatabaseInsightTablespaceUsageTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/tablespaceUsageTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightTablespaceUsageTrendAggregationCollection",
                    bodyModel: model.SummarizeDatabaseInsightTablespaceUsageTrendAggregationCollection,
                    type: "model.SummarizeDatabaseInsightTablespaceUsageTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with time series data (endTimestamp, capacity) for the time period specified for an exadata system for a resource metric.
     * Additionally resources can be filtered using databaseInsightId, hostInsightId or storageServerName query parameters.
     * Top five resources are returned if total exceeds the limit specified.
     * Valid values for ResourceType DATABASE are CPU,MEMORY,IO and STORAGE. Database name is returned in name field. DatabaseInsightId, cdbName and hostName query parameter applies to ResourceType DATABASE.
     * Valid values for ResourceType HOST are CPU and MEMORY. HostName is returned in name field. HostInsightId and hostName query parameter applies to ResourceType HOST.
     * Valid values for ResourceType STORAGE_SERVER are STORAGE, IOPS and THROUGHPUT. Storage server name is returned in name field for resourceMetric IOPS and THROUGHPUT
     * and asmName is returned in name field for resourceMetric STORAGE. StorageServerName query parameter applies to ResourceType STORAGE_SERVER.
     * Valid values for ResourceType DISKGROUP is STORAGE. Comma delimited (asmName,diskgroupName) is returned in name field.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExadataInsightResourceCapacityTrendRequest
     * @return SummarizeExadataInsightResourceCapacityTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeExadataInsightResourceCapacityTrend.ts.html |here} to see how to use SummarizeExadataInsightResourceCapacityTrend API.
     */
    summarizeExadataInsightResourceCapacityTrend(summarizeExadataInsightResourceCapacityTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeExadataInsightResourceCapacityTrend.");
            const operationName = "summarizeExadataInsightResourceCapacityTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeExadataInsightResourceCapacityTrendRequest.compartmentId,
                "resourceType": summarizeExadataInsightResourceCapacityTrendRequest.resourceType,
                "resourceMetric": summarizeExadataInsightResourceCapacityTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeExadataInsightResourceCapacityTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeExadataInsightResourceCapacityTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeExadataInsightResourceCapacityTrendRequest.timeIntervalEnd,
                "exadataInsightId": summarizeExadataInsightResourceCapacityTrendRequest.exadataInsightId,
                "databaseInsightId": summarizeExadataInsightResourceCapacityTrendRequest.databaseInsightId,
                "hostInsightId": summarizeExadataInsightResourceCapacityTrendRequest.hostInsightId,
                "storageServerName": summarizeExadataInsightResourceCapacityTrendRequest.storageServerName,
                "exadataType": summarizeExadataInsightResourceCapacityTrendRequest.exadataType,
                "cdbName": summarizeExadataInsightResourceCapacityTrendRequest.cdbName,
                "hostName": summarizeExadataInsightResourceCapacityTrendRequest.hostName,
                "page": summarizeExadataInsightResourceCapacityTrendRequest.page,
                "limit": summarizeExadataInsightResourceCapacityTrendRequest.limit,
                "sortOrder": summarizeExadataInsightResourceCapacityTrendRequest.sortOrder,
                "sortBy": summarizeExadataInsightResourceCapacityTrendRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExadataInsightResourceCapacityTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExadataInsightResourceCapacityTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/resourceCapacityTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeExadataInsightResourceCapacityTrendCollection",
                    bodyModel: model.SummarizeExadataInsightResourceCapacityTrendCollection,
                    type: "model.SummarizeExadataInsightResourceCapacityTrendCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with time series data (endTimestamp, capacity) for the time period specified for an exadata system or fleet aggregation for a resource metric.
     * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
     * Valid values for ResourceType DATABASE are CPU,MEMORY,IO and STORAGE.
     * Valid values for ResourceType HOST are CPU and MEMORY.
     * Valid values for ResourceType STORAGE_SERVER are STORAGE, IOPS and THROUGHPUT.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExadataInsightResourceCapacityTrendAggregatedRequest
     * @return SummarizeExadataInsightResourceCapacityTrendAggregatedResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeExadataInsightResourceCapacityTrendAggregated.ts.html |here} to see how to use SummarizeExadataInsightResourceCapacityTrendAggregated API.
     */
    summarizeExadataInsightResourceCapacityTrendAggregated(summarizeExadataInsightResourceCapacityTrendAggregatedRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeExadataInsightResourceCapacityTrendAggregated.");
            const operationName = "summarizeExadataInsightResourceCapacityTrendAggregated";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.compartmentId,
                "resourceType": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.resourceType,
                "resourceMetric": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.resourceMetric,
                "analysisTimeInterval": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.timeIntervalEnd,
                "exadataInsightId": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.exadataInsightId,
                "exadataType": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.exadataType,
                "cdbName": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.cdbName,
                "hostName": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.hostName,
                "page": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.page,
                "sortOrder": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.sortOrder,
                "sortBy": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.sortBy,
                "definedTagEquals": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.definedTagEquals,
                "freeformTagEquals": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.freeformTagEquals,
                "definedTagExists": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.definedTagExists,
                "freeformTagExists": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExadataInsightResourceCapacityTrendAggregatedRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExadataInsightResourceCapacityTrendAggregatedRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/resourceCapacityTrendAggregated",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeExadataInsightResourceCapacityTrendAggregation",
                    bodyModel: model.SummarizeExadataInsightResourceCapacityTrendAggregation,
                    type: "model.SummarizeExadataInsightResourceCapacityTrendAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get historical usage and forecast predictions for an exadata system with breakdown by databases, hosts or storage servers.
     * Additionally resources can be filtered using databaseInsightId, hostInsightId or storageServerName query parameters.
     * Top five resources are returned if total exceeds the limit specified.
     * Valid values for ResourceType DATABASE are CPU,MEMORY,IO and STORAGE. Database name is returned in name field. DatabaseInsightId , cdbName and hostName query parameter applies to ResourceType DATABASE.
     * Valid values for ResourceType HOST are CPU and MEMORY. HostName s returned in name field. HostInsightId and hostName query parameter applies to ResourceType HOST.
     * Valid values for ResourceType STORAGE_SERVER are STORAGE, IOPS and THROUGHPUT. Storage server name is returned in name field for resourceMetric IOPS and THROUGHPUT
     * and asmName is returned in name field for resourceMetric STORAGE. StorageServerName query parameter applies to ResourceType STORAGE_SERVER.
     * Valid value for ResourceType DISKGROUP is STORAGE. Comma delimited (asmName,diskgroupName) is returned in name field.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExadataInsightResourceForecastTrendRequest
     * @return SummarizeExadataInsightResourceForecastTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeExadataInsightResourceForecastTrend.ts.html |here} to see how to use SummarizeExadataInsightResourceForecastTrend API.
     */
    summarizeExadataInsightResourceForecastTrend(summarizeExadataInsightResourceForecastTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeExadataInsightResourceForecastTrend.");
            const operationName = "summarizeExadataInsightResourceForecastTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "resourceType": summarizeExadataInsightResourceForecastTrendRequest.resourceType,
                "resourceMetric": summarizeExadataInsightResourceForecastTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeExadataInsightResourceForecastTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeExadataInsightResourceForecastTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeExadataInsightResourceForecastTrendRequest.timeIntervalEnd,
                "exadataInsightId": summarizeExadataInsightResourceForecastTrendRequest.exadataInsightId,
                "databaseInsightId": summarizeExadataInsightResourceForecastTrendRequest.databaseInsightId,
                "hostInsightId": summarizeExadataInsightResourceForecastTrendRequest.hostInsightId,
                "storageServerName": summarizeExadataInsightResourceForecastTrendRequest.storageServerName,
                "exadataType": summarizeExadataInsightResourceForecastTrendRequest.exadataType,
                "statistic": summarizeExadataInsightResourceForecastTrendRequest.statistic,
                "forecastStartDay": summarizeExadataInsightResourceForecastTrendRequest.forecastStartDay,
                "forecastDays": summarizeExadataInsightResourceForecastTrendRequest.forecastDays,
                "forecastModel": summarizeExadataInsightResourceForecastTrendRequest.forecastModel,
                "cdbName": summarizeExadataInsightResourceForecastTrendRequest.cdbName,
                "hostName": summarizeExadataInsightResourceForecastTrendRequest.hostName,
                "limit": summarizeExadataInsightResourceForecastTrendRequest.limit,
                "confidence": summarizeExadataInsightResourceForecastTrendRequest.confidence,
                "sortOrder": summarizeExadataInsightResourceForecastTrendRequest.sortOrder,
                "sortBy": summarizeExadataInsightResourceForecastTrendRequest.sortBy,
                "page": summarizeExadataInsightResourceForecastTrendRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExadataInsightResourceForecastTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExadataInsightResourceForecastTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/resourceForecastTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeExadataInsightResourceForecastTrendCollection",
                    bodyModel: model.SummarizeExadataInsightResourceForecastTrendCollection,
                    type: "model.SummarizeExadataInsightResourceForecastTrendCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get aggregated historical usage and forecast predictions for resources. Either compartmentId or exadataInsightsId query parameter must be specified.
     * Valid values for ResourceType DATABASE are CPU,MEMORY,IO and STORAGE.
     * Valid values for ResourceType HOST are CPU and MEMORY.
     * Valid values for ResourceType STORAGE_SERVER are STORAGE, IOPS and THROUGHPUT.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExadataInsightResourceForecastTrendAggregatedRequest
     * @return SummarizeExadataInsightResourceForecastTrendAggregatedResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeExadataInsightResourceForecastTrendAggregated.ts.html |here} to see how to use SummarizeExadataInsightResourceForecastTrendAggregated API.
     */
    summarizeExadataInsightResourceForecastTrendAggregated(summarizeExadataInsightResourceForecastTrendAggregatedRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeExadataInsightResourceForecastTrendAggregated.");
            const operationName = "summarizeExadataInsightResourceForecastTrendAggregated";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeExadataInsightResourceForecastTrendAggregatedRequest.compartmentId,
                "resourceType": summarizeExadataInsightResourceForecastTrendAggregatedRequest.resourceType,
                "resourceMetric": summarizeExadataInsightResourceForecastTrendAggregatedRequest.resourceMetric,
                "analysisTimeInterval": summarizeExadataInsightResourceForecastTrendAggregatedRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeExadataInsightResourceForecastTrendAggregatedRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeExadataInsightResourceForecastTrendAggregatedRequest.timeIntervalEnd,
                "exadataInsightId": summarizeExadataInsightResourceForecastTrendAggregatedRequest.exadataInsightId,
                "exadataType": summarizeExadataInsightResourceForecastTrendAggregatedRequest.exadataType,
                "statistic": summarizeExadataInsightResourceForecastTrendAggregatedRequest.statistic,
                "forecastStartDay": summarizeExadataInsightResourceForecastTrendAggregatedRequest.forecastStartDay,
                "forecastDays": summarizeExadataInsightResourceForecastTrendAggregatedRequest.forecastDays,
                "forecastModel": summarizeExadataInsightResourceForecastTrendAggregatedRequest.forecastModel,
                "cdbName": summarizeExadataInsightResourceForecastTrendAggregatedRequest.cdbName,
                "hostName": summarizeExadataInsightResourceForecastTrendAggregatedRequest.hostName,
                "confidence": summarizeExadataInsightResourceForecastTrendAggregatedRequest.confidence,
                "page": summarizeExadataInsightResourceForecastTrendAggregatedRequest.page,
                "definedTagEquals": summarizeExadataInsightResourceForecastTrendAggregatedRequest.definedTagEquals,
                "freeformTagEquals": summarizeExadataInsightResourceForecastTrendAggregatedRequest.freeformTagEquals,
                "definedTagExists": summarizeExadataInsightResourceForecastTrendAggregatedRequest.definedTagExists,
                "freeformTagExists": summarizeExadataInsightResourceForecastTrendAggregatedRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeExadataInsightResourceForecastTrendAggregatedRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExadataInsightResourceForecastTrendAggregatedRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExadataInsightResourceForecastTrendAggregatedRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/resourceForecastTrendAggregated",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeExadataInsightResourceForecastTrendAggregation",
                    bodyModel: model.SummarizeExadataInsightResourceForecastTrendAggregation,
                    type: "model.SummarizeExadataInsightResourceForecastTrendAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the Resource statistics (usage, capacity, usage change percent, utilization percent) for each resource based on resourceMetric filtered by utilization level.
     * Valid values for ResourceType DATABASE are CPU,MEMORY,IO and STORAGE.
     * Valid values for ResourceType HOST are CPU and MEMORY.
     * Valid values for ResourceType STORAGE_SERVER are STORAGE, IOPS, THROUGHPUT.
     * Valid value for ResourceType DISKGROUP is STORAGE.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExadataInsightResourceStatisticsRequest
     * @return SummarizeExadataInsightResourceStatisticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeExadataInsightResourceStatistics.ts.html |here} to see how to use SummarizeExadataInsightResourceStatistics API.
     */
    summarizeExadataInsightResourceStatistics(summarizeExadataInsightResourceStatisticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeExadataInsightResourceStatistics.");
            const operationName = "summarizeExadataInsightResourceStatistics";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "exadataInsightId": summarizeExadataInsightResourceStatisticsRequest.exadataInsightId,
                "resourceType": summarizeExadataInsightResourceStatisticsRequest.resourceType,
                "resourceMetric": summarizeExadataInsightResourceStatisticsRequest.resourceMetric,
                "analysisTimeInterval": summarizeExadataInsightResourceStatisticsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeExadataInsightResourceStatisticsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeExadataInsightResourceStatisticsRequest.timeIntervalEnd,
                "exadataType": summarizeExadataInsightResourceStatisticsRequest.exadataType,
                "cdbName": summarizeExadataInsightResourceStatisticsRequest.cdbName,
                "hostName": summarizeExadataInsightResourceStatisticsRequest.hostName,
                "percentile": summarizeExadataInsightResourceStatisticsRequest.percentile,
                "sortOrder": summarizeExadataInsightResourceStatisticsRequest.sortOrder,
                "sortBy": summarizeExadataInsightResourceStatisticsRequest.sortBy,
                "limit": summarizeExadataInsightResourceStatisticsRequest.limit,
                "page": summarizeExadataInsightResourceStatisticsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExadataInsightResourceStatisticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExadataInsightResourceStatisticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/resourceStatistics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeExadataInsightResourceStatisticsAggregationCollection",
                    bodyModel: model.SummarizeExadataInsightResourceStatisticsAggregationCollection,
                    type: "model.SummarizeExadataInsightResourceStatisticsAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * A cumulative distribution function is used to rank the usage data points per resource within the specified time period.
     * For each resource, the minimum data point with a ranking > the percentile value is included in the summation.
     * Linear regression functions are used to calculate the usage change percentage.
     * Valid values for ResourceType DATABASE are CPU,MEMORY,IO and STORAGE.
     * Valid values for ResourceType HOST are CPU and MEMORY.
     * Valid values for ResourceType STORAGE_SERVER are STORAGE, IOPS and THROUGHPUT.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExadataInsightResourceUsageRequest
     * @return SummarizeExadataInsightResourceUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeExadataInsightResourceUsage.ts.html |here} to see how to use SummarizeExadataInsightResourceUsage API.
     */
    summarizeExadataInsightResourceUsage(summarizeExadataInsightResourceUsageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeExadataInsightResourceUsage.");
            const operationName = "summarizeExadataInsightResourceUsage";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeExadataInsightResourceUsageRequest.compartmentId,
                "resourceType": summarizeExadataInsightResourceUsageRequest.resourceType,
                "resourceMetric": summarizeExadataInsightResourceUsageRequest.resourceMetric,
                "analysisTimeInterval": summarizeExadataInsightResourceUsageRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeExadataInsightResourceUsageRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeExadataInsightResourceUsageRequest.timeIntervalEnd,
                "exadataInsightId": summarizeExadataInsightResourceUsageRequest.exadataInsightId,
                "exadataType": summarizeExadataInsightResourceUsageRequest.exadataType,
                "cdbName": summarizeExadataInsightResourceUsageRequest.cdbName,
                "hostName": summarizeExadataInsightResourceUsageRequest.hostName,
                "sortOrder": summarizeExadataInsightResourceUsageRequest.sortOrder,
                "sortBy": summarizeExadataInsightResourceUsageRequest.sortBy,
                "page": summarizeExadataInsightResourceUsageRequest.page,
                "limit": summarizeExadataInsightResourceUsageRequest.limit,
                "percentile": summarizeExadataInsightResourceUsageRequest.percentile,
                "definedTagEquals": summarizeExadataInsightResourceUsageRequest.definedTagEquals,
                "freeformTagEquals": summarizeExadataInsightResourceUsageRequest.freeformTagEquals,
                "definedTagExists": summarizeExadataInsightResourceUsageRequest.definedTagExists,
                "freeformTagExists": summarizeExadataInsightResourceUsageRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeExadataInsightResourceUsageRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExadataInsightResourceUsageRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExadataInsightResourceUsageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/resourceUsageSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeExadataInsightResourceUsageCollection",
                    bodyModel: model.SummarizeExadataInsightResourceUsageCollection,
                    type: "model.SummarizeExadataInsightResourceUsageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * A cumulative distribution function is used to rank the usage data points per database within the specified time period.
     * For each database, the minimum data point with a ranking > the percentile value is included in the summation.
     * Linear regression functions are used to calculate the usage change percentage.
     * Valid values for ResourceType DATABASE are CPU,MEMORY,IO and STORAGE.
     * Valid values for ResourceType HOST are CPU and MEMORY.
     * Valid values for ResourceType STORAGE_SERVER are STORAGE, IOPS and THROUGHPUT.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExadataInsightResourceUsageAggregatedRequest
     * @return SummarizeExadataInsightResourceUsageAggregatedResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeExadataInsightResourceUsageAggregated.ts.html |here} to see how to use SummarizeExadataInsightResourceUsageAggregated API.
     */
    summarizeExadataInsightResourceUsageAggregated(summarizeExadataInsightResourceUsageAggregatedRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeExadataInsightResourceUsageAggregated.");
            const operationName = "summarizeExadataInsightResourceUsageAggregated";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeExadataInsightResourceUsageAggregatedRequest.compartmentId,
                "resourceType": summarizeExadataInsightResourceUsageAggregatedRequest.resourceType,
                "resourceMetric": summarizeExadataInsightResourceUsageAggregatedRequest.resourceMetric,
                "analysisTimeInterval": summarizeExadataInsightResourceUsageAggregatedRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeExadataInsightResourceUsageAggregatedRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeExadataInsightResourceUsageAggregatedRequest.timeIntervalEnd,
                "exadataInsightId": summarizeExadataInsightResourceUsageAggregatedRequest.exadataInsightId,
                "exadataType": summarizeExadataInsightResourceUsageAggregatedRequest.exadataType,
                "cdbName": summarizeExadataInsightResourceUsageAggregatedRequest.cdbName,
                "hostName": summarizeExadataInsightResourceUsageAggregatedRequest.hostName,
                "page": summarizeExadataInsightResourceUsageAggregatedRequest.page,
                "percentile": summarizeExadataInsightResourceUsageAggregatedRequest.percentile,
                "definedTagEquals": summarizeExadataInsightResourceUsageAggregatedRequest.definedTagEquals,
                "freeformTagEquals": summarizeExadataInsightResourceUsageAggregatedRequest.freeformTagEquals,
                "definedTagExists": summarizeExadataInsightResourceUsageAggregatedRequest.definedTagExists,
                "freeformTagExists": summarizeExadataInsightResourceUsageAggregatedRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeExadataInsightResourceUsageAggregatedRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExadataInsightResourceUsageAggregatedRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExadataInsightResourceUsageAggregatedRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/resourceUsageSummaryAggregated",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeExadataInsightResourceUsageAggregation",
                    bodyModel: model.SummarizeExadataInsightResourceUsageAggregation,
                    type: "model.SummarizeExadataInsightResourceUsageAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets current utilization, projected utilization and days to reach projectedUtilization for an exadata system over specified time period. Valid values for ResourceType DATABASE are CPU,MEMORY,IO and STORAGE. Valid values for ResourceType HOST are CPU and MEMORY. Valid values for ResourceType STORAGE_SERVER are STORAGE, IOPS and THROUGHPUT.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExadataInsightResourceUtilizationInsightRequest
     * @return SummarizeExadataInsightResourceUtilizationInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeExadataInsightResourceUtilizationInsight.ts.html |here} to see how to use SummarizeExadataInsightResourceUtilizationInsight API.
     */
    summarizeExadataInsightResourceUtilizationInsight(summarizeExadataInsightResourceUtilizationInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeExadataInsightResourceUtilizationInsight.");
            const operationName = "summarizeExadataInsightResourceUtilizationInsight";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeExadataInsightResourceUtilizationInsightRequest.compartmentId,
                "resourceType": summarizeExadataInsightResourceUtilizationInsightRequest.resourceType,
                "resourceMetric": summarizeExadataInsightResourceUtilizationInsightRequest.resourceMetric,
                "analysisTimeInterval": summarizeExadataInsightResourceUtilizationInsightRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeExadataInsightResourceUtilizationInsightRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeExadataInsightResourceUtilizationInsightRequest.timeIntervalEnd,
                "exadataInsightId": summarizeExadataInsightResourceUtilizationInsightRequest.exadataInsightId,
                "exadataType": summarizeExadataInsightResourceUtilizationInsightRequest.exadataType,
                "forecastStartDay": summarizeExadataInsightResourceUtilizationInsightRequest.forecastStartDay,
                "forecastDays": summarizeExadataInsightResourceUtilizationInsightRequest.forecastDays,
                "cdbName": summarizeExadataInsightResourceUtilizationInsightRequest.cdbName,
                "hostName": summarizeExadataInsightResourceUtilizationInsightRequest.hostName,
                "limit": summarizeExadataInsightResourceUtilizationInsightRequest.limit,
                "page": summarizeExadataInsightResourceUtilizationInsightRequest.page,
                "definedTagEquals": summarizeExadataInsightResourceUtilizationInsightRequest.definedTagEquals,
                "freeformTagEquals": summarizeExadataInsightResourceUtilizationInsightRequest.freeformTagEquals,
                "definedTagExists": summarizeExadataInsightResourceUtilizationInsightRequest.definedTagExists,
                "freeformTagExists": summarizeExadataInsightResourceUtilizationInsightRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeExadataInsightResourceUtilizationInsightRequest.compartmentIdInSubtree,
                "highUtilizationThreshold": summarizeExadataInsightResourceUtilizationInsightRequest.highUtilizationThreshold,
                "lowUtilizationThreshold": summarizeExadataInsightResourceUtilizationInsightRequest.lowUtilizationThreshold
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExadataInsightResourceUtilizationInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExadataInsightResourceUtilizationInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/resourceUtilizationInsight",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeExadataInsightResourceUtilizationInsightAggregation",
                    bodyModel: model.SummarizeExadataInsightResourceUtilizationInsightAggregation,
                    type: "model.SummarizeExadataInsightResourceUtilizationInsightAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the software and hardware inventory of the Exadata System.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeExadataMembersRequest
     * @return SummarizeExadataMembersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeExadataMembers.ts.html |here} to see how to use SummarizeExadataMembers API.
     */
    summarizeExadataMembers(summarizeExadataMembersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeExadataMembers.");
            const operationName = "summarizeExadataMembers";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "exadataInsightId": summarizeExadataMembersRequest.exadataInsightId,
                "exadataType": summarizeExadataMembersRequest.exadataType,
                "sortOrder": summarizeExadataMembersRequest.sortOrder,
                "sortBy": summarizeExadataMembersRequest.sortBy,
                "limit": summarizeExadataMembersRequest.limit,
                "page": summarizeExadataMembersRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeExadataMembersRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeExadataMembersRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/exadataMembers",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "exadataMemberCollection",
                    bodyModel: model.ExadataMemberCollection,
                    type: "model.ExadataMemberCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with disk(s) statistics for a host.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightDiskStatisticsRequest
     * @return SummarizeHostInsightDiskStatisticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightDiskStatistics.ts.html |here} to see how to use SummarizeHostInsightDiskStatistics API.
     */
    summarizeHostInsightDiskStatistics(summarizeHostInsightDiskStatisticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightDiskStatistics.");
            const operationName = "summarizeHostInsightDiskStatistics";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightDiskStatisticsRequest.compartmentId,
                "id": summarizeHostInsightDiskStatisticsRequest.id,
                "analysisTimeInterval": summarizeHostInsightDiskStatisticsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightDiskStatisticsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightDiskStatisticsRequest.timeIntervalEnd,
                "hostId": summarizeHostInsightDiskStatisticsRequest.hostId,
                "statistic": summarizeHostInsightDiskStatisticsRequest.statistic,
                "status": summarizeHostInsightDiskStatisticsRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightDiskStatisticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightDiskStatisticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/diskStatistics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightsDiskStatisticsCollection",
                    bodyModel: model.SummarizeHostInsightsDiskStatisticsCollection,
                    type: "model.SummarizeHostInsightsDiskStatisticsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with some recommendations if apply for a host.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightHostRecommendationRequest
     * @return SummarizeHostInsightHostRecommendationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightHostRecommendation.ts.html |here} to see how to use SummarizeHostInsightHostRecommendation API.
     */
    summarizeHostInsightHostRecommendation(summarizeHostInsightHostRecommendationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightHostRecommendation.");
            const operationName = "summarizeHostInsightHostRecommendation";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightHostRecommendationRequest.compartmentId,
                "id": summarizeHostInsightHostRecommendationRequest.id,
                "resourceMetric": summarizeHostInsightHostRecommendationRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightHostRecommendationRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightHostRecommendationRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightHostRecommendationRequest.timeIntervalEnd,
                "hostId": summarizeHostInsightHostRecommendationRequest.hostId,
                "limit": summarizeHostInsightHostRecommendationRequest.limit,
                "statistic": summarizeHostInsightHostRecommendationRequest.statistic
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightHostRecommendationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightHostRecommendationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/hostRecommendation",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightHostRecommendationAggregation",
                    bodyModel: model.SummarizeHostInsightHostRecommendationAggregation,
                    type: "model.SummarizeHostInsightHostRecommendationAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with usage time series data with breakdown by IO interface for the time period specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightIoUsageTrendRequest
     * @return SummarizeHostInsightIoUsageTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightIoUsageTrend.ts.html |here} to see how to use SummarizeHostInsightIoUsageTrend API.
     */
    summarizeHostInsightIoUsageTrend(summarizeHostInsightIoUsageTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightIoUsageTrend.");
            const operationName = "summarizeHostInsightIoUsageTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightIoUsageTrendRequest.compartmentId,
                "id": summarizeHostInsightIoUsageTrendRequest.id,
                "analysisTimeInterval": summarizeHostInsightIoUsageTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightIoUsageTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightIoUsageTrendRequest.timeIntervalEnd,
                "hostId": summarizeHostInsightIoUsageTrendRequest.hostId,
                "page": summarizeHostInsightIoUsageTrendRequest.page,
                "limit": summarizeHostInsightIoUsageTrendRequest.limit,
                "statistic": summarizeHostInsightIoUsageTrendRequest.statistic,
                "status": summarizeHostInsightIoUsageTrendRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightIoUsageTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightIoUsageTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/ioUsageTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightIoUsageTrendAggregationCollection",
                    bodyModel: model.SummarizeHostInsightIoUsageTrendAggregationCollection,
                    type: "model.SummarizeHostInsightIoUsageTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with usage time series data with breakdown by network interface for the time period specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightNetworkUsageTrendRequest
     * @return SummarizeHostInsightNetworkUsageTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightNetworkUsageTrend.ts.html |here} to see how to use SummarizeHostInsightNetworkUsageTrend API.
     */
    summarizeHostInsightNetworkUsageTrend(summarizeHostInsightNetworkUsageTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightNetworkUsageTrend.");
            const operationName = "summarizeHostInsightNetworkUsageTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightNetworkUsageTrendRequest.compartmentId,
                "id": summarizeHostInsightNetworkUsageTrendRequest.id,
                "analysisTimeInterval": summarizeHostInsightNetworkUsageTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightNetworkUsageTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightNetworkUsageTrendRequest.timeIntervalEnd,
                "hostId": summarizeHostInsightNetworkUsageTrendRequest.hostId,
                "page": summarizeHostInsightNetworkUsageTrendRequest.page,
                "limit": summarizeHostInsightNetworkUsageTrendRequest.limit,
                "statistic": summarizeHostInsightNetworkUsageTrendRequest.statistic,
                "status": summarizeHostInsightNetworkUsageTrendRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightNetworkUsageTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightNetworkUsageTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/networkUsageTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightNetworkUsageTrendAggregationCollection",
                    bodyModel: model.SummarizeHostInsightNetworkUsageTrendAggregationCollection,
                    type: "model.SummarizeHostInsightNetworkUsageTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with time series data (endTimestamp, capacity) for the time period specified.
     * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
     * If compartmentIdInSubtree is specified, aggregates resources in a compartment and in all sub-compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightResourceCapacityTrendRequest
     * @return SummarizeHostInsightResourceCapacityTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightResourceCapacityTrend.ts.html |here} to see how to use SummarizeHostInsightResourceCapacityTrend API.
     */
    summarizeHostInsightResourceCapacityTrend(summarizeHostInsightResourceCapacityTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceCapacityTrend.");
            const operationName = "summarizeHostInsightResourceCapacityTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceCapacityTrendRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceCapacityTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceCapacityTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceCapacityTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceCapacityTrendRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceCapacityTrendRequest.platformType,
                "id": summarizeHostInsightResourceCapacityTrendRequest.id,
                "exadataInsightId": summarizeHostInsightResourceCapacityTrendRequest.exadataInsightId,
                "utilizationLevel": summarizeHostInsightResourceCapacityTrendRequest.utilizationLevel,
                "page": summarizeHostInsightResourceCapacityTrendRequest.page,
                "sortOrder": summarizeHostInsightResourceCapacityTrendRequest.sortOrder,
                "sortBy": summarizeHostInsightResourceCapacityTrendRequest.sortBy,
                "definedTagEquals": summarizeHostInsightResourceCapacityTrendRequest.definedTagEquals,
                "freeformTagEquals": summarizeHostInsightResourceCapacityTrendRequest.freeformTagEquals,
                "definedTagExists": summarizeHostInsightResourceCapacityTrendRequest.definedTagExists,
                "freeformTagExists": summarizeHostInsightResourceCapacityTrendRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeHostInsightResourceCapacityTrendRequest.compartmentIdInSubtree,
                "hostType": summarizeHostInsightResourceCapacityTrendRequest.hostType,
                "hostId": summarizeHostInsightResourceCapacityTrendRequest.hostId,
                "vmclusterName": summarizeHostInsightResourceCapacityTrendRequest.vmclusterName,
                "highUtilizationThreshold": summarizeHostInsightResourceCapacityTrendRequest.highUtilizationThreshold,
                "lowUtilizationThreshold": summarizeHostInsightResourceCapacityTrendRequest.lowUtilizationThreshold,
                "status": summarizeHostInsightResourceCapacityTrendRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceCapacityTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightResourceCapacityTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceCapacityTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceCapacityTrendAggregationCollection",
                    bodyModel: model.SummarizeHostInsightResourceCapacityTrendAggregationCollection,
                    type: "model.SummarizeHostInsightResourceCapacityTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get Forecast predictions for CPU or memory resources since a time in the past.
     * If compartmentIdInSubtree is specified, aggregates resources in a compartment and in all sub-compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightResourceForecastTrendRequest
     * @return SummarizeHostInsightResourceForecastTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightResourceForecastTrend.ts.html |here} to see how to use SummarizeHostInsightResourceForecastTrend API.
     */
    summarizeHostInsightResourceForecastTrend(summarizeHostInsightResourceForecastTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceForecastTrend.");
            const operationName = "summarizeHostInsightResourceForecastTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceForecastTrendRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceForecastTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceForecastTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceForecastTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceForecastTrendRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceForecastTrendRequest.platformType,
                "id": summarizeHostInsightResourceForecastTrendRequest.id,
                "exadataInsightId": summarizeHostInsightResourceForecastTrendRequest.exadataInsightId,
                "statistic": summarizeHostInsightResourceForecastTrendRequest.statistic,
                "forecastDays": summarizeHostInsightResourceForecastTrendRequest.forecastDays,
                "forecastModel": summarizeHostInsightResourceForecastTrendRequest.forecastModel,
                "utilizationLevel": summarizeHostInsightResourceForecastTrendRequest.utilizationLevel,
                "confidence": summarizeHostInsightResourceForecastTrendRequest.confidence,
                "page": summarizeHostInsightResourceForecastTrendRequest.page,
                "definedTagEquals": summarizeHostInsightResourceForecastTrendRequest.definedTagEquals,
                "freeformTagEquals": summarizeHostInsightResourceForecastTrendRequest.freeformTagEquals,
                "definedTagExists": summarizeHostInsightResourceForecastTrendRequest.definedTagExists,
                "freeformTagExists": summarizeHostInsightResourceForecastTrendRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeHostInsightResourceForecastTrendRequest.compartmentIdInSubtree,
                "hostType": summarizeHostInsightResourceForecastTrendRequest.hostType,
                "hostId": summarizeHostInsightResourceForecastTrendRequest.hostId,
                "vmclusterName": summarizeHostInsightResourceForecastTrendRequest.vmclusterName,
                "highUtilizationThreshold": summarizeHostInsightResourceForecastTrendRequest.highUtilizationThreshold,
                "lowUtilizationThreshold": summarizeHostInsightResourceForecastTrendRequest.lowUtilizationThreshold,
                "mountPoint": summarizeHostInsightResourceForecastTrendRequest.mountPoint,
                "interfaceName": summarizeHostInsightResourceForecastTrendRequest.interfaceName,
                "gpuId": summarizeHostInsightResourceForecastTrendRequest.gpuId,
                "status": summarizeHostInsightResourceForecastTrendRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceForecastTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightResourceForecastTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceForecastTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceForecastTrendAggregation",
                    bodyModel: model.SummarizeHostInsightResourceForecastTrendAggregation,
                    type: "model.SummarizeHostInsightResourceForecastTrendAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the resource statistics (usage, capacity, usage change percent, utilization percent, load) for each host filtered
     * by utilization level in a compartment and in all sub-compartments if specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightResourceStatisticsRequest
     * @return SummarizeHostInsightResourceStatisticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightResourceStatistics.ts.html |here} to see how to use SummarizeHostInsightResourceStatistics API.
     */
    summarizeHostInsightResourceStatistics(summarizeHostInsightResourceStatisticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceStatistics.");
            const operationName = "summarizeHostInsightResourceStatistics";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceStatisticsRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceStatisticsRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceStatisticsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceStatisticsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceStatisticsRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceStatisticsRequest.platformType,
                "id": summarizeHostInsightResourceStatisticsRequest.id,
                "exadataInsightId": summarizeHostInsightResourceStatisticsRequest.exadataInsightId,
                "percentile": summarizeHostInsightResourceStatisticsRequest.percentile,
                "insightBy": summarizeHostInsightResourceStatisticsRequest.insightBy,
                "forecastDays": summarizeHostInsightResourceStatisticsRequest.forecastDays,
                "limit": summarizeHostInsightResourceStatisticsRequest.limit,
                "page": summarizeHostInsightResourceStatisticsRequest.page,
                "sortOrder": summarizeHostInsightResourceStatisticsRequest.sortOrder,
                "sortBy": summarizeHostInsightResourceStatisticsRequest.sortBy,
                "definedTagEquals": summarizeHostInsightResourceStatisticsRequest.definedTagEquals,
                "freeformTagEquals": summarizeHostInsightResourceStatisticsRequest.freeformTagEquals,
                "definedTagExists": summarizeHostInsightResourceStatisticsRequest.definedTagExists,
                "freeformTagExists": summarizeHostInsightResourceStatisticsRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeHostInsightResourceStatisticsRequest.compartmentIdInSubtree,
                "hostType": summarizeHostInsightResourceStatisticsRequest.hostType,
                "hostId": summarizeHostInsightResourceStatisticsRequest.hostId,
                "vmclusterName": summarizeHostInsightResourceStatisticsRequest.vmclusterName,
                "highUtilizationThreshold": summarizeHostInsightResourceStatisticsRequest.highUtilizationThreshold,
                "lowUtilizationThreshold": summarizeHostInsightResourceStatisticsRequest.lowUtilizationThreshold,
                "status": summarizeHostInsightResourceStatisticsRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceStatisticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightResourceStatisticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceStatistics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceStatisticsAggregationCollection",
                    bodyModel: model.SummarizeHostInsightResourceStatisticsAggregationCollection,
                    type: "model.SummarizeHostInsightResourceStatisticsAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * A cumulative distribution function is used to rank the usage data points per host within the specified time period.
     * For each host, the minimum data point with a ranking > the percentile value is included in the summation.
     * Linear regression functions are used to calculate the usage change percentage.
     * If compartmentIdInSubtree is specified, aggregates resources in a compartment and in all sub-compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightResourceUsageRequest
     * @return SummarizeHostInsightResourceUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightResourceUsage.ts.html |here} to see how to use SummarizeHostInsightResourceUsage API.
     */
    summarizeHostInsightResourceUsage(summarizeHostInsightResourceUsageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceUsage.");
            const operationName = "summarizeHostInsightResourceUsage";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceUsageRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceUsageRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceUsageRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceUsageRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceUsageRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceUsageRequest.platformType,
                "id": summarizeHostInsightResourceUsageRequest.id,
                "exadataInsightId": summarizeHostInsightResourceUsageRequest.exadataInsightId,
                "page": summarizeHostInsightResourceUsageRequest.page,
                "percentile": summarizeHostInsightResourceUsageRequest.percentile,
                "definedTagEquals": summarizeHostInsightResourceUsageRequest.definedTagEquals,
                "freeformTagEquals": summarizeHostInsightResourceUsageRequest.freeformTagEquals,
                "definedTagExists": summarizeHostInsightResourceUsageRequest.definedTagExists,
                "freeformTagExists": summarizeHostInsightResourceUsageRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeHostInsightResourceUsageRequest.compartmentIdInSubtree,
                "hostType": summarizeHostInsightResourceUsageRequest.hostType,
                "hostId": summarizeHostInsightResourceUsageRequest.hostId,
                "vmclusterName": summarizeHostInsightResourceUsageRequest.vmclusterName,
                "status": summarizeHostInsightResourceUsageRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceUsageRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightResourceUsageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceUsageSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceUsageAggregation",
                    bodyModel: model.SummarizeHostInsightResourceUsageAggregation,
                    type: "model.SummarizeHostInsightResourceUsageAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with time series data (endTimestamp, usage, capacity) for the time period specified.
     * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
     * If compartmentIdInSubtree is specified, aggregates resources in a compartment and in all sub-compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightResourceUsageTrendRequest
     * @return SummarizeHostInsightResourceUsageTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightResourceUsageTrend.ts.html |here} to see how to use SummarizeHostInsightResourceUsageTrend API.
     */
    summarizeHostInsightResourceUsageTrend(summarizeHostInsightResourceUsageTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceUsageTrend.");
            const operationName = "summarizeHostInsightResourceUsageTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceUsageTrendRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceUsageTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceUsageTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceUsageTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceUsageTrendRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceUsageTrendRequest.platformType,
                "id": summarizeHostInsightResourceUsageTrendRequest.id,
                "exadataInsightId": summarizeHostInsightResourceUsageTrendRequest.exadataInsightId,
                "page": summarizeHostInsightResourceUsageTrendRequest.page,
                "sortOrder": summarizeHostInsightResourceUsageTrendRequest.sortOrder,
                "sortBy": summarizeHostInsightResourceUsageTrendRequest.sortBy,
                "definedTagEquals": summarizeHostInsightResourceUsageTrendRequest.definedTagEquals,
                "freeformTagEquals": summarizeHostInsightResourceUsageTrendRequest.freeformTagEquals,
                "definedTagExists": summarizeHostInsightResourceUsageTrendRequest.definedTagExists,
                "freeformTagExists": summarizeHostInsightResourceUsageTrendRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeHostInsightResourceUsageTrendRequest.compartmentIdInSubtree,
                "hostType": summarizeHostInsightResourceUsageTrendRequest.hostType,
                "hostId": summarizeHostInsightResourceUsageTrendRequest.hostId,
                "vmclusterName": summarizeHostInsightResourceUsageTrendRequest.vmclusterName,
                "status": summarizeHostInsightResourceUsageTrendRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceUsageTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightResourceUsageTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceUsageTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceUsageTrendAggregationCollection",
                    bodyModel: model.SummarizeHostInsightResourceUsageTrendAggregationCollection,
                    type: "model.SummarizeHostInsightResourceUsageTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets resources with current utilization (high and low) and projected utilization (high and low) for a resource type over specified time period.
     * If compartmentIdInSubtree is specified, aggregates resources in a compartment and in all sub-compartments.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightResourceUtilizationInsightRequest
     * @return SummarizeHostInsightResourceUtilizationInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightResourceUtilizationInsight.ts.html |here} to see how to use SummarizeHostInsightResourceUtilizationInsight API.
     */
    summarizeHostInsightResourceUtilizationInsight(summarizeHostInsightResourceUtilizationInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceUtilizationInsight.");
            const operationName = "summarizeHostInsightResourceUtilizationInsight";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceUtilizationInsightRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceUtilizationInsightRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceUtilizationInsightRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceUtilizationInsightRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceUtilizationInsightRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceUtilizationInsightRequest.platformType,
                "id": summarizeHostInsightResourceUtilizationInsightRequest.id,
                "exadataInsightId": summarizeHostInsightResourceUtilizationInsightRequest.exadataInsightId,
                "forecastDays": summarizeHostInsightResourceUtilizationInsightRequest.forecastDays,
                "page": summarizeHostInsightResourceUtilizationInsightRequest.page,
                "definedTagEquals": summarizeHostInsightResourceUtilizationInsightRequest.definedTagEquals,
                "freeformTagEquals": summarizeHostInsightResourceUtilizationInsightRequest.freeformTagEquals,
                "definedTagExists": summarizeHostInsightResourceUtilizationInsightRequest.definedTagExists,
                "freeformTagExists": summarizeHostInsightResourceUtilizationInsightRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeHostInsightResourceUtilizationInsightRequest.compartmentIdInSubtree,
                "hostType": summarizeHostInsightResourceUtilizationInsightRequest.hostType,
                "hostId": summarizeHostInsightResourceUtilizationInsightRequest.hostId,
                "vmclusterName": summarizeHostInsightResourceUtilizationInsightRequest.vmclusterName,
                "highUtilizationThreshold": summarizeHostInsightResourceUtilizationInsightRequest.highUtilizationThreshold,
                "lowUtilizationThreshold": summarizeHostInsightResourceUtilizationInsightRequest.lowUtilizationThreshold,
                "status": summarizeHostInsightResourceUtilizationInsightRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceUtilizationInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightResourceUtilizationInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceUtilizationInsight",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceUtilizationInsightAggregation",
                    bodyModel: model.SummarizeHostInsightResourceUtilizationInsightAggregation,
                    type: "model.SummarizeHostInsightResourceUtilizationInsightAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with usage time series data with breakdown by filesystem for the time period specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightStorageUsageTrendRequest
     * @return SummarizeHostInsightStorageUsageTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightStorageUsageTrend.ts.html |here} to see how to use SummarizeHostInsightStorageUsageTrend API.
     */
    summarizeHostInsightStorageUsageTrend(summarizeHostInsightStorageUsageTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightStorageUsageTrend.");
            const operationName = "summarizeHostInsightStorageUsageTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightStorageUsageTrendRequest.compartmentId,
                "id": summarizeHostInsightStorageUsageTrendRequest.id,
                "analysisTimeInterval": summarizeHostInsightStorageUsageTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightStorageUsageTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightStorageUsageTrendRequest.timeIntervalEnd,
                "hostId": summarizeHostInsightStorageUsageTrendRequest.hostId,
                "page": summarizeHostInsightStorageUsageTrendRequest.page,
                "limit": summarizeHostInsightStorageUsageTrendRequest.limit,
                "statistic": summarizeHostInsightStorageUsageTrendRequest.statistic,
                "status": summarizeHostInsightStorageUsageTrendRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightStorageUsageTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightStorageUsageTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/storageUsageTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightStorageUsageTrendAggregationCollection",
                    bodyModel: model.SummarizeHostInsightStorageUsageTrendAggregationCollection,
                    type: "model.SummarizeHostInsightStorageUsageTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with aggregated data (timestamp, usageData) for top processes on a specific date.
     * Data is aggregated for the time specified and processes are sorted descendent by the process metric specified (CPU, MEMORY, VIRTUAL_MEMORY).
     * hostInsightId, processMetric must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightTopProcessesUsageRequest
     * @return SummarizeHostInsightTopProcessesUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightTopProcessesUsage.ts.html |here} to see how to use SummarizeHostInsightTopProcessesUsage API.
     */
    summarizeHostInsightTopProcessesUsage(summarizeHostInsightTopProcessesUsageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightTopProcessesUsage.");
            const operationName = "summarizeHostInsightTopProcessesUsage";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightTopProcessesUsageRequest.compartmentId,
                "id": summarizeHostInsightTopProcessesUsageRequest.id,
                "resourceMetric": summarizeHostInsightTopProcessesUsageRequest.resourceMetric,
                "timeIntervalStart": summarizeHostInsightTopProcessesUsageRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightTopProcessesUsageRequest.timeIntervalEnd,
                "page": summarizeHostInsightTopProcessesUsageRequest.page,
                "limit": summarizeHostInsightTopProcessesUsageRequest.limit,
                "analysisTimeInterval": summarizeHostInsightTopProcessesUsageRequest.analysisTimeInterval,
                "hostType": summarizeHostInsightTopProcessesUsageRequest.hostType,
                "hostId": summarizeHostInsightTopProcessesUsageRequest.hostId,
                "timestamp": summarizeHostInsightTopProcessesUsageRequest.timestamp,
                "statistic": summarizeHostInsightTopProcessesUsageRequest.statistic,
                "status": summarizeHostInsightTopProcessesUsageRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightTopProcessesUsageRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightTopProcessesUsageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/topProcessesUsage",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightsTopProcessesUsageCollection",
                    bodyModel: model.SummarizeHostInsightsTopProcessesUsageCollection,
                    type: "model.SummarizeHostInsightsTopProcessesUsageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with aggregated time series data (timeIntervalstart, timeIntervalEnd, commandArgs, usageData) for top processes.
     * Data is aggregated for the time period specified and proceses are sorted descendent by the proces metric specified (CPU, MEMORY, VIRTUAL_MEMORY).
     * HostInsight Id and Process metric must be specified
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeHostInsightTopProcessesUsageTrendRequest
     * @return SummarizeHostInsightTopProcessesUsageTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeHostInsightTopProcessesUsageTrend.ts.html |here} to see how to use SummarizeHostInsightTopProcessesUsageTrend API.
     */
    summarizeHostInsightTopProcessesUsageTrend(summarizeHostInsightTopProcessesUsageTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightTopProcessesUsageTrend.");
            const operationName = "summarizeHostInsightTopProcessesUsageTrend";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightTopProcessesUsageTrendRequest.compartmentId,
                "id": summarizeHostInsightTopProcessesUsageTrendRequest.id,
                "resourceMetric": summarizeHostInsightTopProcessesUsageTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightTopProcessesUsageTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightTopProcessesUsageTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightTopProcessesUsageTrendRequest.timeIntervalEnd,
                "page": summarizeHostInsightTopProcessesUsageTrendRequest.page,
                "limit": summarizeHostInsightTopProcessesUsageTrendRequest.limit,
                "hostType": summarizeHostInsightTopProcessesUsageTrendRequest.hostType,
                "hostId": summarizeHostInsightTopProcessesUsageTrendRequest.hostId,
                "processHash": summarizeHostInsightTopProcessesUsageTrendRequest.processHash,
                "statistic": summarizeHostInsightTopProcessesUsageTrendRequest.statistic,
                "status": summarizeHostInsightTopProcessesUsageTrendRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightTopProcessesUsageTrendRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeHostInsightTopProcessesUsageTrendRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/topProcessesUsageTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightsTopProcessesUsageTrendCollection",
                    bodyModel: model.SummarizeHostInsightsTopProcessesUsageTrendCollection,
                    type: "model.SummarizeHostInsightsTopProcessesUsageTrendCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details of resources used by an Operations Insights Warehouse.
     * There is only expected to be 1 warehouse per tenant. The warehouse is expected to be in the root compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeOperationsInsightsWarehouseResourceUsageRequest
     * @return SummarizeOperationsInsightsWarehouseResourceUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeOperationsInsightsWarehouseResourceUsage.ts.html |here} to see how to use SummarizeOperationsInsightsWarehouseResourceUsage API.
     */
    summarizeOperationsInsightsWarehouseResourceUsage(summarizeOperationsInsightsWarehouseResourceUsageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeOperationsInsightsWarehouseResourceUsage.");
            const operationName = "summarizeOperationsInsightsWarehouseResourceUsage";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsWarehouseId}": summarizeOperationsInsightsWarehouseResourceUsageRequest.operationsInsightsWarehouseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeOperationsInsightsWarehouseResourceUsageRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeOperationsInsightsWarehouseResourceUsageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouses/{operationsInsightsWarehouseId}/resourceUsageSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeOperationsInsightsWarehouseResourceUsageAggregation",
                    bodyModel: model.SummarizeOperationsInsightsWarehouseResourceUsageAggregation,
                    type: "model.SummarizeOperationsInsightsWarehouseResourceUsageAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the performance insights for SQLs taking greater than X% database time for a given
     * time period across the given databases or database types in a compartment and in all sub-compartments if specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeSqlInsightsRequest
     * @return SummarizeSqlInsightsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlInsights.ts.html |here} to see how to use SummarizeSqlInsights API.
     */
    summarizeSqlInsights(summarizeSqlInsightsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlInsights.");
            const operationName = "summarizeSqlInsights";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlInsightsRequest.compartmentId,
                "databaseType": summarizeSqlInsightsRequest.databaseType,
                "databaseId": summarizeSqlInsightsRequest.databaseId,
                "id": summarizeSqlInsightsRequest.id,
                "exadataInsightId": summarizeSqlInsightsRequest.exadataInsightId,
                "cdbName": summarizeSqlInsightsRequest.cdbName,
                "hostName": summarizeSqlInsightsRequest.hostName,
                "databaseTimePctGreaterThan": summarizeSqlInsightsRequest.databaseTimePctGreaterThan,
                "analysisTimeInterval": summarizeSqlInsightsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlInsightsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlInsightsRequest.timeIntervalEnd,
                "page": summarizeSqlInsightsRequest.page,
                "definedTagEquals": summarizeSqlInsightsRequest.definedTagEquals,
                "freeformTagEquals": summarizeSqlInsightsRequest.freeformTagEquals,
                "definedTagExists": summarizeSqlInsightsRequest.definedTagExists,
                "freeformTagExists": summarizeSqlInsightsRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeSqlInsightsRequest.compartmentIdInSubtree,
                "vmclusterName": summarizeSqlInsightsRequest.vmclusterName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlInsightsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeSqlInsightsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlInsights",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlInsightAggregationCollection",
                    bodyModel: model.SqlInsightAggregationCollection,
                    type: "model.SqlInsightAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the performance insights on the execution plans for a given SQL for a given time period.
     * Either databaseId or id must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeSqlPlanInsightsRequest
     * @return SummarizeSqlPlanInsightsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlPlanInsights.ts.html |here} to see how to use SummarizeSqlPlanInsights API.
     */
    summarizeSqlPlanInsights(summarizeSqlPlanInsightsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlPlanInsights.");
            const operationName = "summarizeSqlPlanInsights";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlPlanInsightsRequest.compartmentId,
                "databaseId": summarizeSqlPlanInsightsRequest.databaseId,
                "id": summarizeSqlPlanInsightsRequest.id,
                "sqlIdentifier": summarizeSqlPlanInsightsRequest.sqlIdentifier,
                "analysisTimeInterval": summarizeSqlPlanInsightsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlPlanInsightsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlPlanInsightsRequest.timeIntervalEnd,
                "page": summarizeSqlPlanInsightsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlPlanInsightsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeSqlPlanInsightsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlPlanInsights",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlPlanInsightAggregationCollection",
                    bodyModel: model.SqlPlanInsightAggregationCollection,
                    type: "model.SqlPlanInsightAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to summarize the response time distribution of query executions for a given SQL for a given time period.
     * Either databaseId or id must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeSqlResponseTimeDistributionsRequest
     * @return SummarizeSqlResponseTimeDistributionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlResponseTimeDistributions.ts.html |here} to see how to use SummarizeSqlResponseTimeDistributions API.
     */
    summarizeSqlResponseTimeDistributions(summarizeSqlResponseTimeDistributionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlResponseTimeDistributions.");
            const operationName = "summarizeSqlResponseTimeDistributions";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlResponseTimeDistributionsRequest.compartmentId,
                "databaseId": summarizeSqlResponseTimeDistributionsRequest.databaseId,
                "id": summarizeSqlResponseTimeDistributionsRequest.id,
                "sqlIdentifier": summarizeSqlResponseTimeDistributionsRequest.sqlIdentifier,
                "analysisTimeInterval": summarizeSqlResponseTimeDistributionsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlResponseTimeDistributionsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlResponseTimeDistributionsRequest.timeIntervalEnd,
                "page": summarizeSqlResponseTimeDistributionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlResponseTimeDistributionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeSqlResponseTimeDistributionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlResponseTimeDistributions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlResponseTimeDistributionAggregationCollection",
                    bodyModel: model.SqlResponseTimeDistributionAggregationCollection,
                    type: "model.SqlResponseTimeDistributionAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the performance statistics for SQLs taking greater than X% database time for a given
     * time period across the given databases or database types in a compartment and in all sub-compartments if specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeSqlStatisticsRequest
     * @return SummarizeSqlStatisticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlStatistics.ts.html |here} to see how to use SummarizeSqlStatistics API.
     */
    summarizeSqlStatistics(summarizeSqlStatisticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlStatistics.");
            const operationName = "summarizeSqlStatistics";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlStatisticsRequest.compartmentId,
                "databaseType": summarizeSqlStatisticsRequest.databaseType,
                "databaseId": summarizeSqlStatisticsRequest.databaseId,
                "id": summarizeSqlStatisticsRequest.id,
                "exadataInsightId": summarizeSqlStatisticsRequest.exadataInsightId,
                "cdbName": summarizeSqlStatisticsRequest.cdbName,
                "hostName": summarizeSqlStatisticsRequest.hostName,
                "databaseTimePctGreaterThan": summarizeSqlStatisticsRequest.databaseTimePctGreaterThan,
                "sqlIdentifier": summarizeSqlStatisticsRequest.sqlIdentifier,
                "analysisTimeInterval": summarizeSqlStatisticsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlStatisticsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlStatisticsRequest.timeIntervalEnd,
                "limit": summarizeSqlStatisticsRequest.limit,
                "page": summarizeSqlStatisticsRequest.page,
                "sortOrder": summarizeSqlStatisticsRequest.sortOrder,
                "sortBy": summarizeSqlStatisticsRequest.sortBy,
                "category": summarizeSqlStatisticsRequest.category,
                "definedTagEquals": summarizeSqlStatisticsRequest.definedTagEquals,
                "freeformTagEquals": summarizeSqlStatisticsRequest.freeformTagEquals,
                "definedTagExists": summarizeSqlStatisticsRequest.definedTagExists,
                "freeformTagExists": summarizeSqlStatisticsRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeSqlStatisticsRequest.compartmentIdInSubtree,
                "vmclusterName": summarizeSqlStatisticsRequest.vmclusterName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlStatisticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeSqlStatisticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlStatistics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlStatisticAggregationCollection",
                    bodyModel: model.SqlStatisticAggregationCollection,
                    type: "model.SqlStatisticAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the performance statistics time series for a given SQL across given databases for a
     * given time period in a compartment and in all sub-compartments if specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeSqlStatisticsTimeSeriesRequest
     * @return SummarizeSqlStatisticsTimeSeriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlStatisticsTimeSeries.ts.html |here} to see how to use SummarizeSqlStatisticsTimeSeries API.
     */
    summarizeSqlStatisticsTimeSeries(summarizeSqlStatisticsTimeSeriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlStatisticsTimeSeries.");
            const operationName = "summarizeSqlStatisticsTimeSeries";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlStatisticsTimeSeriesRequest.compartmentId,
                "databaseId": summarizeSqlStatisticsTimeSeriesRequest.databaseId,
                "id": summarizeSqlStatisticsTimeSeriesRequest.id,
                "exadataInsightId": summarizeSqlStatisticsTimeSeriesRequest.exadataInsightId,
                "cdbName": summarizeSqlStatisticsTimeSeriesRequest.cdbName,
                "hostName": summarizeSqlStatisticsTimeSeriesRequest.hostName,
                "sqlIdentifier": summarizeSqlStatisticsTimeSeriesRequest.sqlIdentifier,
                "analysisTimeInterval": summarizeSqlStatisticsTimeSeriesRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlStatisticsTimeSeriesRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlStatisticsTimeSeriesRequest.timeIntervalEnd,
                "page": summarizeSqlStatisticsTimeSeriesRequest.page,
                "definedTagEquals": summarizeSqlStatisticsTimeSeriesRequest.definedTagEquals,
                "freeformTagEquals": summarizeSqlStatisticsTimeSeriesRequest.freeformTagEquals,
                "definedTagExists": summarizeSqlStatisticsTimeSeriesRequest.definedTagExists,
                "freeformTagExists": summarizeSqlStatisticsTimeSeriesRequest.freeformTagExists,
                "compartmentIdInSubtree": summarizeSqlStatisticsTimeSeriesRequest.compartmentIdInSubtree,
                "vmclusterName": summarizeSqlStatisticsTimeSeriesRequest.vmclusterName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlStatisticsTimeSeriesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeSqlStatisticsTimeSeriesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlStatisticsTimeSeries",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlStatisticsTimeSeriesAggregationCollection",
                    bodyModel: model.SqlStatisticsTimeSeriesAggregationCollection,
                    type: "model.SqlStatisticsTimeSeriesAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the performance statistics time series for a given SQL by execution plans for a given time period.
     * Either databaseId or id must be specified.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeSqlStatisticsTimeSeriesByPlanRequest
     * @return SummarizeSqlStatisticsTimeSeriesByPlanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/SummarizeSqlStatisticsTimeSeriesByPlan.ts.html |here} to see how to use SummarizeSqlStatisticsTimeSeriesByPlan API.
     */
    summarizeSqlStatisticsTimeSeriesByPlan(summarizeSqlStatisticsTimeSeriesByPlanRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlStatisticsTimeSeriesByPlan.");
            const operationName = "summarizeSqlStatisticsTimeSeriesByPlan";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlStatisticsTimeSeriesByPlanRequest.compartmentId,
                "databaseId": summarizeSqlStatisticsTimeSeriesByPlanRequest.databaseId,
                "id": summarizeSqlStatisticsTimeSeriesByPlanRequest.id,
                "sqlIdentifier": summarizeSqlStatisticsTimeSeriesByPlanRequest.sqlIdentifier,
                "analysisTimeInterval": summarizeSqlStatisticsTimeSeriesByPlanRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlStatisticsTimeSeriesByPlanRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlStatisticsTimeSeriesByPlanRequest.timeIntervalEnd,
                "page": summarizeSqlStatisticsTimeSeriesByPlanRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlStatisticsTimeSeriesByPlanRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeSqlStatisticsTimeSeriesByPlanRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlStatisticsTimeSeriesByPlan",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlStatisticsTimeSeriesByPlanAggregationCollection",
                    bodyModel: model.SqlStatisticsTimeSeriesByPlanAggregationCollection,
                    type: "model.SqlStatisticsTimeSeriesByPlanAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Test the connection details of a Cloud MACS-managed database.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param TestMacsManagedCloudDatabaseInsightConnectionRequest
     * @return TestMacsManagedCloudDatabaseInsightConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/TestMacsManagedCloudDatabaseInsightConnection.ts.html |here} to see how to use TestMacsManagedCloudDatabaseInsightConnection API.
     */
    testMacsManagedCloudDatabaseInsightConnection(testMacsManagedCloudDatabaseInsightConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#testMacsManagedCloudDatabaseInsightConnection.");
            const operationName = "testMacsManagedCloudDatabaseInsightConnection";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "databaseId": testMacsManagedCloudDatabaseInsightConnectionRequest.databaseId,
                "id": testMacsManagedCloudDatabaseInsightConnectionRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": testMacsManagedCloudDatabaseInsightConnectionRequest.opcRequestId,
                "opc-retry-token": testMacsManagedCloudDatabaseInsightConnectionRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, testMacsManagedCloudDatabaseInsightConnectionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/testMacsManagedCloudDatabaseInsightConnectionDetails",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(testMacsManagedCloudDatabaseInsightConnectionRequest.testMacsManagedCloudDatabaseInsightConnectionDetails, "TestMacsManagedCloudDatabaseInsightConnectionDetails", model.TestMacsManagedCloudDatabaseInsightConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the configuration of a hub .
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAwrHubRequest
     * @return UpdateAwrHubResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/UpdateAwrHub.ts.html |here} to see how to use UpdateAwrHub API.
     */
    updateAwrHub(updateAwrHubRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateAwrHub.");
            const operationName = "updateAwrHub";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubId}": updateAwrHubRequest.awrHubId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAwrHubRequest.ifMatch,
                "opc-request-id": updateAwrHubRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAwrHubRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubs/{awrHubId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAwrHubRequest.updateAwrHubDetails, "UpdateAwrHubDetails", model.UpdateAwrHubDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update Awr Hub Source object.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAwrHubSourceRequest
     * @return UpdateAwrHubSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/UpdateAwrHubSource.ts.html |here} to see how to use UpdateAwrHubSource API.
     */
    updateAwrHubSource(updateAwrHubSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateAwrHubSource.");
            const operationName = "updateAwrHubSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{awrHubSourceId}": updateAwrHubSourceRequest.awrHubSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAwrHubSourceRequest.ifMatch,
                "opc-request-id": updateAwrHubSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAwrHubSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/awrHubSources/{awrHubSourceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAwrHubSourceRequest.updateAwrHubSourceDetails, "UpdateAwrHubSourceDetails", model.UpdateAwrHubSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates configuration of a database insight.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateDatabaseInsightRequest
     * @return UpdateDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/UpdateDatabaseInsight.ts.html |here} to see how to use UpdateDatabaseInsight API.
     */
    updateDatabaseInsight(updateDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateDatabaseInsight.");
            const operationName = "updateDatabaseInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{databaseInsightId}": updateDatabaseInsightRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDatabaseInsightRequest.ifMatch,
                "opc-request-id": updateDatabaseInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDatabaseInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDatabaseInsightRequest.updateDatabaseInsightDetails, "UpdateDatabaseInsightDetails", model.UpdateDatabaseInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates configuration of an Operations Insights Enterprise Manager bridge.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateEnterpriseManagerBridgeRequest
     * @return UpdateEnterpriseManagerBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/UpdateEnterpriseManagerBridge.ts.html |here} to see how to use UpdateEnterpriseManagerBridge API.
     */
    updateEnterpriseManagerBridge(updateEnterpriseManagerBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateEnterpriseManagerBridge.");
            const operationName = "updateEnterpriseManagerBridge";
            const apiReferenceLink = "";
            const pathParams = {
                "{enterpriseManagerBridgeId}": updateEnterpriseManagerBridgeRequest.enterpriseManagerBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateEnterpriseManagerBridgeRequest.ifMatch,
                "opc-request-id": updateEnterpriseManagerBridgeRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateEnterpriseManagerBridgeRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges/{enterpriseManagerBridgeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateEnterpriseManagerBridgeRequest.updateEnterpriseManagerBridgeDetails, "UpdateEnterpriseManagerBridgeDetails", model.UpdateEnterpriseManagerBridgeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates configuration of an Exadata insight.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateExadataInsightRequest
     * @return UpdateExadataInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/UpdateExadataInsight.ts.html |here} to see how to use UpdateExadataInsight API.
     */
    updateExadataInsight(updateExadataInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateExadataInsight.");
            const operationName = "updateExadataInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{exadataInsightId}": updateExadataInsightRequest.exadataInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateExadataInsightRequest.ifMatch,
                "opc-request-id": updateExadataInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateExadataInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exadataInsights/{exadataInsightId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExadataInsightRequest.updateExadataInsightDetails, "UpdateExadataInsightDetails", model.UpdateExadataInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates configuration of a host insight.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateHostInsightRequest
     * @return UpdateHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/UpdateHostInsight.ts.html |here} to see how to use UpdateHostInsight API.
     */
    updateHostInsight(updateHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateHostInsight.");
            const operationName = "updateHostInsight";
            const apiReferenceLink = "";
            const pathParams = {
                "{hostInsightId}": updateHostInsightRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateHostInsightRequest.ifMatch,
                "opc-request-id": updateHostInsightRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateHostInsightRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateHostInsightRequest.updateHostInsightDetails, "UpdateHostInsightDetails", model.UpdateHostInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the  configuration of a news report.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateNewsReportRequest
     * @return UpdateNewsReportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/UpdateNewsReport.ts.html |here} to see how to use UpdateNewsReport API.
     */
    updateNewsReport(updateNewsReportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateNewsReport.");
            const operationName = "updateNewsReport";
            const apiReferenceLink = "";
            const pathParams = {
                "{newsReportId}": updateNewsReportRequest.newsReportId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateNewsReportRequest.ifMatch,
                "opc-request-id": updateNewsReportRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateNewsReportRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/newsReports/{newsReportId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateNewsReportRequest.updateNewsReportDetails, "UpdateNewsReportDetails", model.UpdateNewsReportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more attributes of the specified private endpoint.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOperationsInsightsPrivateEndpointRequest
     * @return UpdateOperationsInsightsPrivateEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/UpdateOperationsInsightsPrivateEndpoint.ts.html |here} to see how to use UpdateOperationsInsightsPrivateEndpoint API.
     */
    updateOperationsInsightsPrivateEndpoint(updateOperationsInsightsPrivateEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateOperationsInsightsPrivateEndpoint.");
            const operationName = "updateOperationsInsightsPrivateEndpoint";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsPrivateEndpointId}": updateOperationsInsightsPrivateEndpointRequest.operationsInsightsPrivateEndpointId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOperationsInsightsPrivateEndpointRequest.ifMatch,
                "opc-request-id": updateOperationsInsightsPrivateEndpointRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOperationsInsightsPrivateEndpointRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsPrivateEndpoints/{operationsInsightsPrivateEndpointId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOperationsInsightsPrivateEndpointRequest.updateOperationsInsightsPrivateEndpointDetails, "UpdateOperationsInsightsPrivateEndpointDetails", model.UpdateOperationsInsightsPrivateEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the configuration of an Ops Insights Warehouse.
     * There is only expected to be 1 warehouse per tenant. The warehouse is expected to be in the root compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOperationsInsightsWarehouseRequest
     * @return UpdateOperationsInsightsWarehouseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/UpdateOperationsInsightsWarehouse.ts.html |here} to see how to use UpdateOperationsInsightsWarehouse API.
     */
    updateOperationsInsightsWarehouse(updateOperationsInsightsWarehouseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateOperationsInsightsWarehouse.");
            const operationName = "updateOperationsInsightsWarehouse";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsWarehouseId}": updateOperationsInsightsWarehouseRequest.operationsInsightsWarehouseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOperationsInsightsWarehouseRequest.ifMatch,
                "opc-request-id": updateOperationsInsightsWarehouseRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOperationsInsightsWarehouseRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouses/{operationsInsightsWarehouseId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOperationsInsightsWarehouseRequest.updateOperationsInsightsWarehouseDetails, "UpdateOperationsInsightsWarehouseDetails", model.UpdateOperationsInsightsWarehouseDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the configuration of an Operations Insights Warehouse User.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOperationsInsightsWarehouseUserRequest
     * @return UpdateOperationsInsightsWarehouseUserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/UpdateOperationsInsightsWarehouseUser.ts.html |here} to see how to use UpdateOperationsInsightsWarehouseUser API.
     */
    updateOperationsInsightsWarehouseUser(updateOperationsInsightsWarehouseUserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateOperationsInsightsWarehouseUser.");
            const operationName = "updateOperationsInsightsWarehouseUser";
            const apiReferenceLink = "";
            const pathParams = {
                "{operationsInsightsWarehouseUserId}": updateOperationsInsightsWarehouseUserRequest.operationsInsightsWarehouseUserId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOperationsInsightsWarehouseUserRequest.ifMatch,
                "opc-request-id": updateOperationsInsightsWarehouseUserRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOperationsInsightsWarehouseUserRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/operationsInsightsWarehouseUsers/{operationsInsightsWarehouseUserId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOperationsInsightsWarehouseUserRequest.updateOperationsInsightsWarehouseUserDetails, "UpdateOperationsInsightsWarehouseUserDetails", model.UpdateOperationsInsightsWarehouseUserDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates an OPSI configuration resource with the given ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOpsiConfigurationRequest
     * @return UpdateOpsiConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/opsi/UpdateOpsiConfiguration.ts.html |here} to see how to use UpdateOpsiConfiguration API.
     */
    updateOpsiConfiguration(updateOpsiConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateOpsiConfiguration.");
            const operationName = "updateOpsiConfiguration";
            const apiReferenceLink = "";
            const pathParams = {
                "{opsiConfigurationId}": updateOpsiConfigurationRequest.opsiConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOpsiConfigurationRequest.ifMatch,
                "opc-request-id": updateOpsiConfigurationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOpsiConfigurationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/opsiConfigurations/{opsiConfigurationId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOpsiConfigurationRequest.updateOpsiConfigurationDetails, "UpdateOpsiConfigurationDetails", model.UpdateOpsiConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.OperationsInsightsClient = OperationsInsightsClient;
OperationsInsightsClient.serviceEndpointTemplate = "https://operationsinsights.{region}.oci.{secondLevelDomain}";
OperationsInsightsClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map