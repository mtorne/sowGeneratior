/**
 * File Storage API
 * Use the File Storage service API to manage file systems, mount targets, and snapshots.
For more information, see [Overview of File Storage](https://docs.oracle.com/iaas/Content/File/Concepts/filestorageoverview.htm).

 * OpenAPI spec version: 20171215
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { FileStorageWaiter } from "./filestorage-waiter";
declare const Breaker: any;
export declare enum FileStorageApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class FileStorageClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": FileStorageWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new FileStorageWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): FileStorageWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): FileStorageWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Adds a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddExportLockRequest
     * @return AddExportLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/AddExportLock.ts.html |here} to see how to use AddExportLock API.
     */
    addExportLock(addExportLockRequest: requests.AddExportLockRequest): Promise<responses.AddExportLockResponse>;
    /**
     * Adds a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddFileSystemLockRequest
     * @return AddFileSystemLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/AddFileSystemLock.ts.html |here} to see how to use AddFileSystemLock API.
     */
    addFileSystemLock(addFileSystemLockRequest: requests.AddFileSystemLockRequest): Promise<responses.AddFileSystemLockResponse>;
    /**
     * Adds a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddFilesystemSnapshotPolicyLockRequest
     * @return AddFilesystemSnapshotPolicyLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/AddFilesystemSnapshotPolicyLock.ts.html |here} to see how to use AddFilesystemSnapshotPolicyLock API.
     */
    addFilesystemSnapshotPolicyLock(addFilesystemSnapshotPolicyLockRequest: requests.AddFilesystemSnapshotPolicyLockRequest): Promise<responses.AddFilesystemSnapshotPolicyLockResponse>;
    /**
     * Adds a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddMountTargetLockRequest
     * @return AddMountTargetLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/AddMountTargetLock.ts.html |here} to see how to use AddMountTargetLock API.
     */
    addMountTargetLock(addMountTargetLockRequest: requests.AddMountTargetLockRequest): Promise<responses.AddMountTargetLockResponse>;
    /**
     * Adds a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddOutboundConnectorLockRequest
     * @return AddOutboundConnectorLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/AddOutboundConnectorLock.ts.html |here} to see how to use AddOutboundConnectorLock API.
     */
    addOutboundConnectorLock(addOutboundConnectorLockRequest: requests.AddOutboundConnectorLockRequest): Promise<responses.AddOutboundConnectorLockResponse>;
    /**
     * Adds a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddReplicationLockRequest
     * @return AddReplicationLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/AddReplicationLock.ts.html |here} to see how to use AddReplicationLock API.
     */
    addReplicationLock(addReplicationLockRequest: requests.AddReplicationLockRequest): Promise<responses.AddReplicationLockResponse>;
    /**
     * Adds a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param AddSnapshotLockRequest
     * @return AddSnapshotLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/AddSnapshotLock.ts.html |here} to see how to use AddSnapshotLock API.
     */
    addSnapshotLock(addSnapshotLockRequest: requests.AddSnapshotLockRequest): Promise<responses.AddSnapshotLockResponse>;
    /**
     * Cancel scheduled downgrade shape request for mount target.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelDowngradeShapeMountTargetRequest
     * @return CancelDowngradeShapeMountTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CancelDowngradeShapeMountTarget.ts.html |here} to see how to use CancelDowngradeShapeMountTarget API.
     */
    cancelDowngradeShapeMountTarget(cancelDowngradeShapeMountTargetRequest: requests.CancelDowngradeShapeMountTargetRequest): Promise<responses.CancelDowngradeShapeMountTargetResponse>;
    /**
     * Moves a file system and its associated snapshots into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes)
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeFileSystemCompartmentRequest
     * @return ChangeFileSystemCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ChangeFileSystemCompartment.ts.html |here} to see how to use ChangeFileSystemCompartment API.
     */
    changeFileSystemCompartment(changeFileSystemCompartmentRequest: requests.ChangeFileSystemCompartmentRequest): Promise<responses.ChangeFileSystemCompartmentResponse>;
    /**
     * Moves a file system snapshot policy into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeFilesystemSnapshotPolicyCompartmentRequest
     * @return ChangeFilesystemSnapshotPolicyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ChangeFilesystemSnapshotPolicyCompartment.ts.html |here} to see how to use ChangeFilesystemSnapshotPolicyCompartment API.
     */
    changeFilesystemSnapshotPolicyCompartment(changeFilesystemSnapshotPolicyCompartmentRequest: requests.ChangeFilesystemSnapshotPolicyCompartmentRequest): Promise<responses.ChangeFilesystemSnapshotPolicyCompartmentResponse>;
    /**
     * Moves a mount target and its associated export set or share set into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes)
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeMountTargetCompartmentRequest
     * @return ChangeMountTargetCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ChangeMountTargetCompartment.ts.html |here} to see how to use ChangeMountTargetCompartment API.
     */
    changeMountTargetCompartment(changeMountTargetCompartmentRequest: requests.ChangeMountTargetCompartmentRequest): Promise<responses.ChangeMountTargetCompartmentResponse>;
    /**
     * Moves an outbound connector into a different compartment within the same tenancy.
     * For information about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes)
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeOutboundConnectorCompartmentRequest
     * @return ChangeOutboundConnectorCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ChangeOutboundConnectorCompartment.ts.html |here} to see how to use ChangeOutboundConnectorCompartment API.
     */
    changeOutboundConnectorCompartment(changeOutboundConnectorCompartmentRequest: requests.ChangeOutboundConnectorCompartmentRequest): Promise<responses.ChangeOutboundConnectorCompartmentResponse>;
    /**
     * Moves a replication and its replication target into a different compartment within the same tenancy.
     * For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeReplicationCompartmentRequest
     * @return ChangeReplicationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ChangeReplicationCompartment.ts.html |here} to see how to use ChangeReplicationCompartment API.
     */
    changeReplicationCompartment(changeReplicationCompartmentRequest: requests.ChangeReplicationCompartmentRequest): Promise<responses.ChangeReplicationCompartmentResponse>;
    /**
     * Creates a new export in the specified export set, path, and
     * file system.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateExportRequest
     * @return CreateExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateExport.ts.html |here} to see how to use CreateExport API.
     */
    createExport(createExportRequest: requests.CreateExportRequest): Promise<responses.CreateExportResponse>;
    /**
       * Creates a new file system in the specified compartment and
  * availability domain. Instances can mount file systems in
  * another availability domain, but doing so might increase
  * latency when compared to mounting instances in the same
  * availability domain.
  * <p>
  After you create a file system, you can associate it with a mount
  * target. Instances can then mount the file system by connecting to the
  * mount target's IP address. You can associate a file system with
  * more than one mount target at a time.
  * <p>
  For information about access control and compartments, see
  * [Overview of the IAM Service](https://docs.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * <p>
  For information about Network Security Groups access control, see
  * [Network Security Groups](https://docs.oracle.com/iaas/Content/Network/Concepts/networksecuritygroups.htm).
  * <p>
  For information about availability domains, see [Regions and
  * Availability Domains](https://docs.oracle.com/iaas/Content/General/Concepts/regions.htm).
  * To get a list of availability domains, use the
  * `ListAvailabilityDomains` operation in the Identity and Access
  * Management Service API.
  * <p>
  All Oracle Cloud Infrastructure resources, including
  * file systems, get an Oracle-assigned, unique ID called an Oracle
  * Cloud Identifier ([OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm)).
  * When you create a resource, you can find its OCID in the response.
  * You can also retrieve a resource's OCID by using a List API operation on that resource
  * type or by viewing the resource in the Console.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateFileSystemRequest
       * @return CreateFileSystemResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateFileSystem.ts.html |here} to see how to use CreateFileSystem API.
       */
    createFileSystem(createFileSystemRequest: requests.CreateFileSystemRequest): Promise<responses.CreateFileSystemResponse>;
    /**
       * Creates a new file system snapshot policy in the specified compartment and
  * availability domain.
  * <p>
  After you create a file system snapshot policy, you can associate it with
  * file systems.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateFilesystemSnapshotPolicyRequest
       * @return CreateFilesystemSnapshotPolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateFilesystemSnapshotPolicy.ts.html |here} to see how to use CreateFilesystemSnapshotPolicy API.
       */
    createFilesystemSnapshotPolicy(createFilesystemSnapshotPolicyRequest: requests.CreateFilesystemSnapshotPolicyRequest): Promise<responses.CreateFilesystemSnapshotPolicyResponse>;
    /**
       * Creates a new mount target in the specified compartment and
  * subnet. You can associate a file system with a mount
  * target only when they exist in the same availability domain. Instances
  * can connect to mount targets in another availablity domain, but
  * you might see higher latency than with instances in the same
  * availability domain as the mount target.
  * <p>
  Mount targets have one or more private IP addresses that you can
  * provide as the host portion of remote target parameters in
  * client mount commands. These private IP addresses are listed
  * in the privateIpIds property of the mount target and are highly available. Mount
  * targets also consume additional IP addresses in their subnet.
  * Do not use /30 or smaller subnets for mount target creation because they
  * do not have sufficient available IP addresses.
  * Allow at least three IP addresses for each mount target.
  * <p>
  For information about access control and compartments, see
  * [Overview of the IAM
  * Service](https://docs.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * <p>
  For information about availability domains, see [Regions and
  * Availability Domains](https://docs.oracle.com/iaas/Content/General/Concepts/regions.htm).
  * To get a list of availability domains, use the
  * `ListAvailabilityDomains` operation in the Identity and Access
  * Management Service API.
  * <p>
  All Oracle Cloud Infrastructure Services resources, including
  * mount targets, get an Oracle-assigned, unique ID called an
  * Oracle Cloud Identifier ([OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm)).
  * When you create a resource, you can find its OCID in the response.
  * You can also retrieve a resource's OCID by using a List API operation on that resource
  * type, or by viewing the resource in the Console.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateMountTargetRequest
       * @return CreateMountTargetResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateMountTarget.ts.html |here} to see how to use CreateMountTarget API.
       */
    createMountTarget(createMountTargetRequest: requests.CreateMountTargetRequest): Promise<responses.CreateMountTargetResponse>;
    /**
       * Creates a new outbound connector in the specified compartment.
  * You can associate an outbound connector with a mount target only when
  * they exist in the same availability domain.
  * <p>
  For information about access control and compartments, see
  * [Overview of the IAM
  * Service](https://docs.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * <p>
  For information about availability domains, see [Regions and
  * Availability Domains](https://docs.oracle.com/iaas/Content/General/Concepts/regions.htm).
  * To get a list of availability domains, use the
  * `ListAvailabilityDomains` operation in the Identity and Access
  * Management Service API.
  * <p>
  All Oracle Cloud Infrastructure Services resources, including
  * outbound connectors, get an Oracle-assigned, unique ID called an
  * Oracle Cloud Identifier ([OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm)).
  * When you create a resource, you can find its OCID in the response.
  * You can also retrieve a resource's OCID by using a List API operation on that resource
  * type, or by viewing the resource in the Console.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateOutboundConnectorRequest
       * @return CreateOutboundConnectorResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateOutboundConnector.ts.html |here} to see how to use CreateOutboundConnector API.
       */
    createOutboundConnector(createOutboundConnectorRequest: requests.CreateOutboundConnectorRequest): Promise<responses.CreateOutboundConnectorResponse>;
    /**
     * Create a file system, user, or group quota rule given the `fileSystemId`, `principalId`, `principalType` and
     * `isHardQuota` parameters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateQuotaRuleRequest
     * @return CreateQuotaRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateQuotaRule.ts.html |here} to see how to use CreateQuotaRule API.
     */
    createQuotaRule(createQuotaRuleRequest: requests.CreateQuotaRuleRequest): Promise<responses.CreateQuotaRuleResponse>;
    /**
       * Creates a new replication in the specified compartment.
  * Replications are the primary resource that governs the policy of cross-region replication between source
  * and target file systems. Replications are associated with a secondary resource called a {@link ReplicationTarget}
  * located in another availability domain.
  * The associated replication target resource is automatically created along with the replication resource.
  * The replication retrieves the delta of data between two snapshots of a source file system
  * and sends it to the associated `ReplicationTarget`, which retrieves the delta and applies it to the target
  * file system.
  * Only unexported file systems can be used as target file systems.
  * For more information, see [Using Replication](https://docs.oracle.com/iaas/Content/File/Tasks/FSreplication.htm).
  * <p>
  For information about access control and compartments, see
  * [Overview of the IAM
  * Service](https://docs.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * <p>
  For information about availability domains, see [Regions and
  * Availability Domains](https://docs.oracle.com/iaas/Content/General/Concepts/regions.htm).
  * To get a list of availability domains, use the
  * `ListAvailabilityDomains` operation in the Identity and Access
  * Management Service API.
  * <p>
  All Oracle Cloud Infrastructure Services resources, including
  * replications, get an Oracle-assigned, unique ID called an
  * Oracle Cloud Identifier ([OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm)).
  * When you create a resource, you can find its OCID in the response.
  * You can also retrieve a resource's OCID by using a List API operation on that resource
  * type, or by viewing the resource in the Console.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param CreateReplicationRequest
       * @return CreateReplicationResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateReplication.ts.html |here} to see how to use CreateReplication API.
       */
    createReplication(createReplicationRequest: requests.CreateReplicationRequest): Promise<responses.CreateReplicationResponse>;
    /**
     * Creates a new snapshot of the specified file system. You
     * can access the snapshot at `.snapshot/<name>`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateSnapshotRequest
     * @return CreateSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/CreateSnapshot.ts.html |here} to see how to use CreateSnapshot API.
     */
    createSnapshot(createSnapshotRequest: requests.CreateSnapshotRequest): Promise<responses.CreateSnapshotResponse>;
    /**
     * Deletes the specified export.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteExportRequest
     * @return DeleteExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteExport.ts.html |here} to see how to use DeleteExport API.
     */
    deleteExport(deleteExportRequest: requests.DeleteExportRequest): Promise<responses.DeleteExportResponse>;
    /**
     * Deletes the specified file system. Before you delete the file system,
     * verify that no remaining export resources still reference it. Deleting a
     * file system also deletes all of its snapshots.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteFileSystemRequest
     * @return DeleteFileSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteFileSystem.ts.html |here} to see how to use DeleteFileSystem API.
     */
    deleteFileSystem(deleteFileSystemRequest: requests.DeleteFileSystemRequest): Promise<responses.DeleteFileSystemResponse>;
    /**
     * Deletes the specified file system snapshot policy.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteFilesystemSnapshotPolicyRequest
     * @return DeleteFilesystemSnapshotPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteFilesystemSnapshotPolicy.ts.html |here} to see how to use DeleteFilesystemSnapshotPolicy API.
     */
    deleteFilesystemSnapshotPolicy(deleteFilesystemSnapshotPolicyRequest: requests.DeleteFilesystemSnapshotPolicyRequest): Promise<responses.DeleteFilesystemSnapshotPolicyResponse>;
    /**
     * Deletes the specified mount target. This operation also deletes the
     * mount target's VNICs.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteMountTargetRequest
     * @return DeleteMountTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteMountTarget.ts.html |here} to see how to use DeleteMountTarget API.
     */
    deleteMountTarget(deleteMountTargetRequest: requests.DeleteMountTargetRequest): Promise<responses.DeleteMountTargetResponse>;
    /**
     * Deletes the specified outbound connector.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteOutboundConnectorRequest
     * @return DeleteOutboundConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteOutboundConnector.ts.html |here} to see how to use DeleteOutboundConnector API.
     */
    deleteOutboundConnector(deleteOutboundConnectorRequest: requests.DeleteOutboundConnectorRequest): Promise<responses.DeleteOutboundConnectorResponse>;
    /**
     * Remove a file system, user, or group quota rule given the `fileSystemId` and `quotaRuleId` parameters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteQuotaRuleRequest
     * @return DeleteQuotaRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteQuotaRule.ts.html |here} to see how to use DeleteQuotaRule API.
     */
    deleteQuotaRule(deleteQuotaRuleRequest: requests.DeleteQuotaRuleRequest): Promise<responses.DeleteQuotaRuleResponse>;
    /**
     * Deletes the specified replication and the the associated replication target.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteReplicationRequest
     * @return DeleteReplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteReplication.ts.html |here} to see how to use DeleteReplication API.
     */
    deleteReplication(deleteReplicationRequest: requests.DeleteReplicationRequest): Promise<responses.DeleteReplicationResponse>;
    /**
     * Deletes the specified replication target.
     * This operation causes the immediate release of the target file system if there are currently no delta application operations.
     * If there is any current delta being applied the delete operation is blocked until the current
     * delta has been completely applied.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteReplicationTargetRequest
     * @return DeleteReplicationTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteReplicationTarget.ts.html |here} to see how to use DeleteReplicationTarget API.
     */
    deleteReplicationTarget(deleteReplicationTargetRequest: requests.DeleteReplicationTargetRequest): Promise<responses.DeleteReplicationTargetResponse>;
    /**
     * Deletes the specified snapshot.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteSnapshotRequest
     * @return DeleteSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DeleteSnapshot.ts.html |here} to see how to use DeleteSnapshot API.
     */
    deleteSnapshot(deleteSnapshotRequest: requests.DeleteSnapshotRequest): Promise<responses.DeleteSnapshotResponse>;
    /**
     * Detaches the file system from its parent file system
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DetachCloneRequest
     * @return DetachCloneResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/DetachClone.ts.html |here} to see how to use DetachClone API.
     */
    detachClone(detachCloneRequest: requests.DetachCloneRequest): Promise<responses.DetachCloneResponse>;
    /**
     * Provides estimates for replication created using specific file system.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param EstimateReplicationRequest
     * @return EstimateReplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/EstimateReplication.ts.html |here} to see how to use EstimateReplication API.
     */
    estimateReplication(estimateReplicationRequest: requests.EstimateReplicationRequest): Promise<responses.EstimateReplicationResponse>;
    /**
     * Gets the specified export's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetExportRequest
     * @return GetExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetExport.ts.html |here} to see how to use GetExport API.
     */
    getExport(getExportRequest: requests.GetExportRequest): Promise<responses.GetExportResponse>;
    /**
     * Gets the specified export set's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetExportSetRequest
     * @return GetExportSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetExportSet.ts.html |here} to see how to use GetExportSet API.
     */
    getExportSet(getExportSetRequest: requests.GetExportSetRequest): Promise<responses.GetExportSetResponse>;
    /**
     * Gets the specified file system's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetFileSystemRequest
     * @return GetFileSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetFileSystem.ts.html |here} to see how to use GetFileSystem API.
     */
    getFileSystem(getFileSystemRequest: requests.GetFileSystemRequest): Promise<responses.GetFileSystemResponse>;
    /**
     * Gets the specified file system snapshot policy's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetFilesystemSnapshotPolicyRequest
     * @return GetFilesystemSnapshotPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetFilesystemSnapshotPolicy.ts.html |here} to see how to use GetFilesystemSnapshotPolicy API.
     */
    getFilesystemSnapshotPolicy(getFilesystemSnapshotPolicyRequest: requests.GetFilesystemSnapshotPolicyRequest): Promise<responses.GetFilesystemSnapshotPolicyResponse>;
    /**
     * Gets the specified mount target's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetMountTargetRequest
     * @return GetMountTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetMountTarget.ts.html |here} to see how to use GetMountTarget API.
     */
    getMountTarget(getMountTargetRequest: requests.GetMountTargetRequest): Promise<responses.GetMountTargetResponse>;
    /**
     * Gets the specified outbound connector's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetOutboundConnectorRequest
     * @return GetOutboundConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetOutboundConnector.ts.html |here} to see how to use GetOutboundConnector API.
     */
    getOutboundConnector(getOutboundConnectorRequest: requests.GetOutboundConnectorRequest): Promise<responses.GetOutboundConnectorResponse>;
    /**
     * Get a file system, user, or group quota rule given the `fileSystemId` and `quotaRuleId` parameters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetQuotaRuleRequest
     * @return GetQuotaRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetQuotaRule.ts.html |here} to see how to use GetQuotaRule API.
     */
    getQuotaRule(getQuotaRuleRequest: requests.GetQuotaRuleRequest): Promise<responses.GetQuotaRuleResponse>;
    /**
     * Gets the specified replication's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetReplicationRequest
     * @return GetReplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetReplication.ts.html |here} to see how to use GetReplication API.
     */
    getReplication(getReplicationRequest: requests.GetReplicationRequest): Promise<responses.GetReplicationResponse>;
    /**
     * Gets the specified replication target's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetReplicationTargetRequest
     * @return GetReplicationTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetReplicationTarget.ts.html |here} to see how to use GetReplicationTarget API.
     */
    getReplicationTarget(getReplicationTargetRequest: requests.GetReplicationTargetRequest): Promise<responses.GetReplicationTargetResponse>;
    /**
     * Gets the specified snapshot's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSnapshotRequest
     * @return GetSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/GetSnapshot.ts.html |here} to see how to use GetSnapshot API.
     */
    getSnapshot(getSnapshotRequest: requests.GetSnapshotRequest): Promise<responses.GetSnapshotResponse>;
    /**
     * Lists the export set resources in the specified compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListExportSetsRequest
     * @return ListExportSetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListExportSets.ts.html |here} to see how to use ListExportSets API.
     */
    listExportSets(listExportSetsRequest: requests.ListExportSetsRequest): Promise<responses.ListExportSetsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listExportSetsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ExportSetSummary objects
     * contained in responses from the listExportSets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllExportSets(request: requests.ListExportSetsRequest): AsyncIterableIterator<model.ExportSetSummary>;
    /**
     * NOTE: This function is deprecated in favor of listExportSetsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listExportSets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllExportSetsResponses(request: requests.ListExportSetsRequest): AsyncIterableIterator<responses.ListExportSetsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ExportSetSummary objects
     * contained in responses from the listExportSets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listExportSetsRecordIterator(request: requests.ListExportSetsRequest): AsyncIterableIterator<model.ExportSetSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listExportSets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listExportSetsResponseIterator(request: requests.ListExportSetsRequest): AsyncIterableIterator<responses.ListExportSetsResponse>;
    /**
     * Lists export resources by compartment, file system, or export
     * set. You must specify an export set ID, a file system ID, and
     * / or a compartment ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListExportsRequest
     * @return ListExportsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListExports.ts.html |here} to see how to use ListExports API.
     */
    listExports(listExportsRequest: requests.ListExportsRequest): Promise<responses.ListExportsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listExportsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ExportSummary objects
     * contained in responses from the listExports operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllExports(request: requests.ListExportsRequest): AsyncIterableIterator<model.ExportSummary>;
    /**
     * NOTE: This function is deprecated in favor of listExportsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listExports operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllExportsResponses(request: requests.ListExportsRequest): AsyncIterableIterator<responses.ListExportsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ExportSummary objects
     * contained in responses from the listExports operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listExportsRecordIterator(request: requests.ListExportsRequest): AsyncIterableIterator<model.ExportSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listExports operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listExportsResponseIterator(request: requests.ListExportsRequest): AsyncIterableIterator<responses.ListExportsResponse>;
    /**
     * Lists the file system resources in the specified compartment, or by the specified compartment and
     * file system snapshot policy.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListFileSystemsRequest
     * @return ListFileSystemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListFileSystems.ts.html |here} to see how to use ListFileSystems API.
     */
    listFileSystems(listFileSystemsRequest: requests.ListFileSystemsRequest): Promise<responses.ListFileSystemsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listFileSystemsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.FileSystemSummary objects
     * contained in responses from the listFileSystems operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFileSystems(request: requests.ListFileSystemsRequest): AsyncIterableIterator<model.FileSystemSummary>;
    /**
     * NOTE: This function is deprecated in favor of listFileSystemsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listFileSystems operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFileSystemsResponses(request: requests.ListFileSystemsRequest): AsyncIterableIterator<responses.ListFileSystemsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.FileSystemSummary objects
     * contained in responses from the listFileSystems operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listFileSystemsRecordIterator(request: requests.ListFileSystemsRequest): AsyncIterableIterator<model.FileSystemSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listFileSystems operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listFileSystemsResponseIterator(request: requests.ListFileSystemsRequest): AsyncIterableIterator<responses.ListFileSystemsResponse>;
    /**
     * Lists file system snapshot policies in the specified compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListFilesystemSnapshotPoliciesRequest
     * @return ListFilesystemSnapshotPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListFilesystemSnapshotPolicies.ts.html |here} to see how to use ListFilesystemSnapshotPolicies API.
     */
    listFilesystemSnapshotPolicies(listFilesystemSnapshotPoliciesRequest: requests.ListFilesystemSnapshotPoliciesRequest): Promise<responses.ListFilesystemSnapshotPoliciesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listFilesystemSnapshotPoliciesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.FilesystemSnapshotPolicySummary objects
     * contained in responses from the listFilesystemSnapshotPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFilesystemSnapshotPolicies(request: requests.ListFilesystemSnapshotPoliciesRequest): AsyncIterableIterator<model.FilesystemSnapshotPolicySummary>;
    /**
     * NOTE: This function is deprecated in favor of listFilesystemSnapshotPoliciesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listFilesystemSnapshotPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFilesystemSnapshotPoliciesResponses(request: requests.ListFilesystemSnapshotPoliciesRequest): AsyncIterableIterator<responses.ListFilesystemSnapshotPoliciesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.FilesystemSnapshotPolicySummary objects
     * contained in responses from the listFilesystemSnapshotPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listFilesystemSnapshotPoliciesRecordIterator(request: requests.ListFilesystemSnapshotPoliciesRequest): AsyncIterableIterator<model.FilesystemSnapshotPolicySummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listFilesystemSnapshotPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listFilesystemSnapshotPoliciesResponseIterator(request: requests.ListFilesystemSnapshotPoliciesRequest): AsyncIterableIterator<responses.ListFilesystemSnapshotPoliciesResponse>;
    /**
     * Lists the mount target resources in the specified compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMountTargetsRequest
     * @return ListMountTargetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListMountTargets.ts.html |here} to see how to use ListMountTargets API.
     */
    listMountTargets(listMountTargetsRequest: requests.ListMountTargetsRequest): Promise<responses.ListMountTargetsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listMountTargetsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.MountTargetSummary objects
     * contained in responses from the listMountTargets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMountTargets(request: requests.ListMountTargetsRequest): AsyncIterableIterator<model.MountTargetSummary>;
    /**
     * NOTE: This function is deprecated in favor of listMountTargetsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listMountTargets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMountTargetsResponses(request: requests.ListMountTargetsRequest): AsyncIterableIterator<responses.ListMountTargetsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.MountTargetSummary objects
     * contained in responses from the listMountTargets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMountTargetsRecordIterator(request: requests.ListMountTargetsRequest): AsyncIterableIterator<model.MountTargetSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMountTargets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listMountTargetsResponseIterator(request: requests.ListMountTargetsRequest): AsyncIterableIterator<responses.ListMountTargetsResponse>;
    /**
     * Lists the outbound connector resources in the specified compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListOutboundConnectorsRequest
     * @return ListOutboundConnectorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListOutboundConnectors.ts.html |here} to see how to use ListOutboundConnectors API.
     */
    listOutboundConnectors(listOutboundConnectorsRequest: requests.ListOutboundConnectorsRequest): Promise<responses.ListOutboundConnectorsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listOutboundConnectorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.OutboundConnectorSummary objects
     * contained in responses from the listOutboundConnectors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOutboundConnectors(request: requests.ListOutboundConnectorsRequest): AsyncIterableIterator<model.OutboundConnectorSummary>;
    /**
     * NOTE: This function is deprecated in favor of listOutboundConnectorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listOutboundConnectors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOutboundConnectorsResponses(request: requests.ListOutboundConnectorsRequest): AsyncIterableIterator<responses.ListOutboundConnectorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.OutboundConnectorSummary objects
     * contained in responses from the listOutboundConnectors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOutboundConnectorsRecordIterator(request: requests.ListOutboundConnectorsRequest): AsyncIterableIterator<model.OutboundConnectorSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listOutboundConnectors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listOutboundConnectorsResponseIterator(request: requests.ListOutboundConnectorsRequest): AsyncIterableIterator<responses.ListOutboundConnectorsResponse>;
    /**
     * List user or group usages and their quota rules by certain principal type.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListQuotaRulesRequest
     * @return ListQuotaRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListQuotaRules.ts.html |here} to see how to use ListQuotaRules API.
     */
    listQuotaRules(listQuotaRulesRequest: requests.ListQuotaRulesRequest): Promise<responses.ListQuotaRulesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listQuotaRulesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.QuotaRuleSummary objects
     * contained in responses from the listQuotaRules operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllQuotaRules(request: requests.ListQuotaRulesRequest): AsyncIterableIterator<model.QuotaRuleSummary>;
    /**
     * NOTE: This function is deprecated in favor of listQuotaRulesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listQuotaRules operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllQuotaRulesResponses(request: requests.ListQuotaRulesRequest): AsyncIterableIterator<responses.ListQuotaRulesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.QuotaRuleSummary objects
     * contained in responses from the listQuotaRules operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listQuotaRulesRecordIterator(request: requests.ListQuotaRulesRequest): AsyncIterableIterator<model.QuotaRuleSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listQuotaRules operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listQuotaRulesResponseIterator(request: requests.ListQuotaRulesRequest): AsyncIterableIterator<responses.ListQuotaRulesResponse>;
    /**
     * Lists the replication target resources in the specified compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListReplicationTargetsRequest
     * @return ListReplicationTargetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListReplicationTargets.ts.html |here} to see how to use ListReplicationTargets API.
     */
    listReplicationTargets(listReplicationTargetsRequest: requests.ListReplicationTargetsRequest): Promise<responses.ListReplicationTargetsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listReplicationTargetsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ReplicationTargetSummary objects
     * contained in responses from the listReplicationTargets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplicationTargets(request: requests.ListReplicationTargetsRequest): AsyncIterableIterator<model.ReplicationTargetSummary>;
    /**
     * NOTE: This function is deprecated in favor of listReplicationTargetsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listReplicationTargets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplicationTargetsResponses(request: requests.ListReplicationTargetsRequest): AsyncIterableIterator<responses.ListReplicationTargetsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ReplicationTargetSummary objects
     * contained in responses from the listReplicationTargets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listReplicationTargetsRecordIterator(request: requests.ListReplicationTargetsRequest): AsyncIterableIterator<model.ReplicationTargetSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listReplicationTargets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listReplicationTargetsResponseIterator(request: requests.ListReplicationTargetsRequest): AsyncIterableIterator<responses.ListReplicationTargetsResponse>;
    /**
     * Lists the replication resources in the specified compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListReplicationsRequest
     * @return ListReplicationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListReplications.ts.html |here} to see how to use ListReplications API.
     */
    listReplications(listReplicationsRequest: requests.ListReplicationsRequest): Promise<responses.ListReplicationsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listReplicationsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ReplicationSummary objects
     * contained in responses from the listReplications operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplications(request: requests.ListReplicationsRequest): AsyncIterableIterator<model.ReplicationSummary>;
    /**
     * NOTE: This function is deprecated in favor of listReplicationsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listReplications operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplicationsResponses(request: requests.ListReplicationsRequest): AsyncIterableIterator<responses.ListReplicationsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ReplicationSummary objects
     * contained in responses from the listReplications operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listReplicationsRecordIterator(request: requests.ListReplicationsRequest): AsyncIterableIterator<model.ReplicationSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listReplications operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listReplicationsResponseIterator(request: requests.ListReplicationsRequest): AsyncIterableIterator<responses.ListReplicationsResponse>;
    /**
       * Lists snapshots of the specified file system, or by file system snapshot policy and compartment,
  * or by file system snapshot policy and file system.
  * <p>
  If file system ID is not specified, a file system snapshot policy ID and compartment ID must be specified.
  * <p>
  Users can only sort by time created when listing snapshots by file system snapshot policy ID and compartment ID
  * (sort by name is NOT supported for listing snapshots by policy and compartment).
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ListSnapshotsRequest
       * @return ListSnapshotsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ListSnapshots.ts.html |here} to see how to use ListSnapshots API.
       */
    listSnapshots(listSnapshotsRequest: requests.ListSnapshotsRequest): Promise<responses.ListSnapshotsResponse>;
    /**
     * NOTE: This function is deprecated in favor of listSnapshotsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.SnapshotSummary objects
     * contained in responses from the listSnapshots operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSnapshots(request: requests.ListSnapshotsRequest): AsyncIterableIterator<model.SnapshotSummary>;
    /**
     * NOTE: This function is deprecated in favor of listSnapshotsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listSnapshots operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSnapshotsResponses(request: requests.ListSnapshotsRequest): AsyncIterableIterator<responses.ListSnapshotsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SnapshotSummary objects
     * contained in responses from the listSnapshots operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSnapshotsRecordIterator(request: requests.ListSnapshotsRequest): AsyncIterableIterator<model.SnapshotSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSnapshots operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listSnapshotsResponseIterator(request: requests.ListSnapshotsRequest): AsyncIterableIterator<responses.ListSnapshotsResponse>;
    /**
       * This operation pauses the scheduled snapshot creation and snapshot deletion of the policy and updates the lifecycle state of the file system
  * snapshot policy from ACTIVE to INACTIVE. When a file system snapshot policy is paused, file systems that are associated with the
  * policy will not have scheduled snapshots created or deleted.
  * <p>
  If the policy is already paused, or in the INACTIVE state, you cannot pause it again. You can't pause a policy
  * that is in a DELETING, DELETED, FAILED, CREATING or INACTIVE state; attempts to pause a policy in these states result in a 409 conflict error.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param PauseFilesystemSnapshotPolicyRequest
       * @return PauseFilesystemSnapshotPolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/PauseFilesystemSnapshotPolicy.ts.html |here} to see how to use PauseFilesystemSnapshotPolicy API.
       */
    pauseFilesystemSnapshotPolicy(pauseFilesystemSnapshotPolicyRequest: requests.PauseFilesystemSnapshotPolicyRequest): Promise<responses.PauseFilesystemSnapshotPolicyResponse>;
    /**
     * Removes a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveExportLockRequest
     * @return RemoveExportLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/RemoveExportLock.ts.html |here} to see how to use RemoveExportLock API.
     */
    removeExportLock(removeExportLockRequest: requests.RemoveExportLockRequest): Promise<responses.RemoveExportLockResponse>;
    /**
     * Removes a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveFileSystemLockRequest
     * @return RemoveFileSystemLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/RemoveFileSystemLock.ts.html |here} to see how to use RemoveFileSystemLock API.
     */
    removeFileSystemLock(removeFileSystemLockRequest: requests.RemoveFileSystemLockRequest): Promise<responses.RemoveFileSystemLockResponse>;
    /**
     * Removes a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveFilesystemSnapshotPolicyLockRequest
     * @return RemoveFilesystemSnapshotPolicyLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/RemoveFilesystemSnapshotPolicyLock.ts.html |here} to see how to use RemoveFilesystemSnapshotPolicyLock API.
     */
    removeFilesystemSnapshotPolicyLock(removeFilesystemSnapshotPolicyLockRequest: requests.RemoveFilesystemSnapshotPolicyLockRequest): Promise<responses.RemoveFilesystemSnapshotPolicyLockResponse>;
    /**
     * Removes a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveMountTargetLockRequest
     * @return RemoveMountTargetLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/RemoveMountTargetLock.ts.html |here} to see how to use RemoveMountTargetLock API.
     */
    removeMountTargetLock(removeMountTargetLockRequest: requests.RemoveMountTargetLockRequest): Promise<responses.RemoveMountTargetLockResponse>;
    /**
     * Removes a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveOutboundConnectorLockRequest
     * @return RemoveOutboundConnectorLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/RemoveOutboundConnectorLock.ts.html |here} to see how to use RemoveOutboundConnectorLock API.
     */
    removeOutboundConnectorLock(removeOutboundConnectorLockRequest: requests.RemoveOutboundConnectorLockRequest): Promise<responses.RemoveOutboundConnectorLockResponse>;
    /**
     * Removes a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveReplicationLockRequest
     * @return RemoveReplicationLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/RemoveReplicationLock.ts.html |here} to see how to use RemoveReplicationLock API.
     */
    removeReplicationLock(removeReplicationLockRequest: requests.RemoveReplicationLockRequest): Promise<responses.RemoveReplicationLockResponse>;
    /**
     * Removes a lock to a resource.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveSnapshotLockRequest
     * @return RemoveSnapshotLockResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/RemoveSnapshotLock.ts.html |here} to see how to use RemoveSnapshotLock API.
     */
    removeSnapshotLock(removeSnapshotLockRequest: requests.RemoveSnapshotLockRequest): Promise<responses.RemoveSnapshotLockResponse>;
    /**
     * Schedule a downgrade shape of the mount target.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ScheduleDowngradeShapeMountTargetRequest
     * @return ScheduleDowngradeShapeMountTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ScheduleDowngradeShapeMountTarget.ts.html |here} to see how to use ScheduleDowngradeShapeMountTarget API.
     */
    scheduleDowngradeShapeMountTarget(scheduleDowngradeShapeMountTargetRequest: requests.ScheduleDowngradeShapeMountTargetRequest): Promise<responses.ScheduleDowngradeShapeMountTargetResponse>;
    /**
     * Enable or disable quota enforcement for the file system.
     * If `areQuotaRulesEnabled` = `true`, then the quota enforcement will be enabled.
     * If `areQuotaRulesEnabled` = `false`, then the quota enforcement will be disabled.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ToggleQuotaRulesRequest
     * @return ToggleQuotaRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ToggleQuotaRules.ts.html |here} to see how to use ToggleQuotaRules API.
     */
    toggleQuotaRules(toggleQuotaRulesRequest: requests.ToggleQuotaRulesRequest): Promise<responses.ToggleQuotaRulesResponse>;
    /**
       * This operation unpauses a paused file system snapshot policy and updates the lifecycle state of the file system snapshot policy from
  * INACTIVE to ACTIVE. By default, file system snapshot policies are in the ACTIVE state. When a file system snapshot policy is not paused, or in the ACTIVE state, file systems that are associated with the
  * policy will have snapshots created and deleted according to the schedules defined in the policy.
  * <p>
  If the policy is already in the ACTIVE state, you cannot unpause it. You can't unpause a policy that is in a DELETING, DELETED, FAILED, CREATING, or ACTIVE state; attempts to unpause a policy in these states result in a 409 conflict error.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param UnpauseFilesystemSnapshotPolicyRequest
       * @return UnpauseFilesystemSnapshotPolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UnpauseFilesystemSnapshotPolicy.ts.html |here} to see how to use UnpauseFilesystemSnapshotPolicy API.
       */
    unpauseFilesystemSnapshotPolicy(unpauseFilesystemSnapshotPolicyRequest: requests.UnpauseFilesystemSnapshotPolicyRequest): Promise<responses.UnpauseFilesystemSnapshotPolicyResponse>;
    /**
     * Updates the specified export's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateExportRequest
     * @return UpdateExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateExport.ts.html |here} to see how to use UpdateExport API.
     */
    updateExport(updateExportRequest: requests.UpdateExportRequest): Promise<responses.UpdateExportResponse>;
    /**
     * Updates the specified export set's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateExportSetRequest
     * @return UpdateExportSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateExportSet.ts.html |here} to see how to use UpdateExportSet API.
     */
    updateExportSet(updateExportSetRequest: requests.UpdateExportSetRequest): Promise<responses.UpdateExportSetResponse>;
    /**
     * Updates the specified file system's information.
     * You can use this operation to rename a file system.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateFileSystemRequest
     * @return UpdateFileSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateFileSystem.ts.html |here} to see how to use UpdateFileSystem API.
     */
    updateFileSystem(updateFileSystemRequest: requests.UpdateFileSystemRequest): Promise<responses.UpdateFileSystemResponse>;
    /**
     * Updates the specified file system snapshot policy's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateFilesystemSnapshotPolicyRequest
     * @return UpdateFilesystemSnapshotPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateFilesystemSnapshotPolicy.ts.html |here} to see how to use UpdateFilesystemSnapshotPolicy API.
     */
    updateFilesystemSnapshotPolicy(updateFilesystemSnapshotPolicyRequest: requests.UpdateFilesystemSnapshotPolicyRequest): Promise<responses.UpdateFilesystemSnapshotPolicyResponse>;
    /**
     * Updates the specified mount target's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateMountTargetRequest
     * @return UpdateMountTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateMountTarget.ts.html |here} to see how to use UpdateMountTarget API.
     */
    updateMountTarget(updateMountTargetRequest: requests.UpdateMountTargetRequest): Promise<responses.UpdateMountTargetResponse>;
    /**
     * Updates the specified outbound connector's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateOutboundConnectorRequest
     * @return UpdateOutboundConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateOutboundConnector.ts.html |here} to see how to use UpdateOutboundConnector API.
     */
    updateOutboundConnector(updateOutboundConnectorRequest: requests.UpdateOutboundConnectorRequest): Promise<responses.UpdateOutboundConnectorResponse>;
    /**
     * Edit a file system, user, or group quota rule given the `fileSystemId` and `quotaRuleId` parameters.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateQuotaRuleRequest
     * @return UpdateQuotaRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateQuotaRule.ts.html |here} to see how to use UpdateQuotaRule API.
     */
    updateQuotaRule(updateQuotaRuleRequest: requests.UpdateQuotaRuleRequest): Promise<responses.UpdateQuotaRuleResponse>;
    /**
     * Updates the information for the specified replication and its associated replication target.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateReplicationRequest
     * @return UpdateReplicationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateReplication.ts.html |here} to see how to use UpdateReplication API.
     */
    updateReplication(updateReplicationRequest: requests.UpdateReplicationRequest): Promise<responses.UpdateReplicationResponse>;
    /**
     * Updates the specified snapshot's information.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateSnapshotRequest
     * @return UpdateSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpdateSnapshot.ts.html |here} to see how to use UpdateSnapshot API.
     */
    updateSnapshot(updateSnapshotRequest: requests.UpdateSnapshotRequest): Promise<responses.UpdateSnapshotResponse>;
    /**
     * Upgrade shape request for mount target.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpgradeShapeMountTargetRequest
     * @return UpgradeShapeMountTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/UpgradeShapeMountTarget.ts.html |here} to see how to use UpgradeShapeMountTarget API.
     */
    upgradeShapeMountTarget(upgradeShapeMountTargetRequest: requests.UpgradeShapeMountTargetRequest): Promise<responses.UpgradeShapeMountTargetResponse>;
    /**
     * Validates keytab contents for the secret details passed on the request or validte keytab contents associated with
     * the mount target passed in the request. The keytabs are deserialized, the contents are validated for compatibility
     * and the principal, key version number and encryption type of each entry is provided as part of the response.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ValidateKeyTabsRequest
     * @return ValidateKeyTabsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/filestorage/ValidateKeyTabs.ts.html |here} to see how to use ValidateKeyTabs API.
     */
    validateKeyTabs(validateKeyTabsRequest: requests.ValidateKeyTabsRequest): Promise<responses.ValidateKeyTabsResponse>;
}
export {};
