"use strict";
/**
 * File Storage API
 * Use the File Storage service API to manage file systems, mount targets, and snapshots.
For more information, see [Overview of File Storage](https://docs.oracle.com/iaas/Content/File/Concepts/filestorageoverview.htm).

 * OpenAPI spec version: 20171215
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplicationTarget = void 0;
var ReplicationTarget;
(function (ReplicationTarget) {
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Creating"] = "CREATING";
        LifecycleState["Active"] = "ACTIVE";
        LifecycleState["Deleting"] = "DELETING";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = ReplicationTarget.LifecycleState || (ReplicationTarget.LifecycleState = {}));
    let DeltaStatus;
    (function (DeltaStatus) {
        DeltaStatus["Idle"] = "IDLE";
        DeltaStatus["Capturing"] = "CAPTURING";
        DeltaStatus["Applying"] = "APPLYING";
        DeltaStatus["ServiceError"] = "SERVICE_ERROR";
        DeltaStatus["UserError"] = "USER_ERROR";
        DeltaStatus["Failed"] = "FAILED";
        DeltaStatus["Transferring"] = "TRANSFERRING";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        DeltaStatus["UnknownValue"] = "UNKNOWN_VALUE";
    })(DeltaStatus = ReplicationTarget.DeltaStatus || (ReplicationTarget.DeltaStatus = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    ReplicationTarget.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    ReplicationTarget.getDeserializedJsonObj = getDeserializedJsonObj;
})(ReplicationTarget = exports.ReplicationTarget || (exports.ReplicationTarget = {}));
//# sourceMappingURL=replication-target.js.map