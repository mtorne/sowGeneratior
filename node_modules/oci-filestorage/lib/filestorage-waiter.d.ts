/**
 * File Storage API
 * Use the File Storage service API to manage file systems, mount targets, and snapshots.
For more information, see [Overview of File Storage](https://docs.oracle.com/iaas/Content/File/Concepts/filestorageoverview.htm).

 * OpenAPI spec version: 20171215
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { FileStorageClient } from "./client";
export declare class FileStorageWaiter {
    private client;
    private readonly config?;
    constructor(client: FileStorageClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forExport till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExportResponse | null (null in case of 404 response)
     */
    forExport(request: serviceRequests.GetExportRequest, ...targetStates: models.Export.LifecycleState[]): Promise<serviceResponses.GetExportResponse | null>;
    /**
     * Waits forExportSet till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExportSetResponse | null (null in case of 404 response)
     */
    forExportSet(request: serviceRequests.GetExportSetRequest, ...targetStates: models.ExportSet.LifecycleState[]): Promise<serviceResponses.GetExportSetResponse | null>;
    /**
     * Waits forFileSystem till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFileSystemResponse | null (null in case of 404 response)
     */
    forFileSystem(request: serviceRequests.GetFileSystemRequest, ...targetStates: models.FileSystem.LifecycleState[]): Promise<serviceResponses.GetFileSystemResponse | null>;
    /**
     * Waits forFilesystemSnapshotPolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFilesystemSnapshotPolicyResponse | null (null in case of 404 response)
     */
    forFilesystemSnapshotPolicy(request: serviceRequests.GetFilesystemSnapshotPolicyRequest, ...targetStates: models.FilesystemSnapshotPolicy.LifecycleState[]): Promise<serviceResponses.GetFilesystemSnapshotPolicyResponse | null>;
    /**
     * Waits forMountTarget till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMountTargetResponse | null (null in case of 404 response)
     */
    forMountTarget(request: serviceRequests.GetMountTargetRequest, ...targetStates: models.MountTarget.LifecycleState[]): Promise<serviceResponses.GetMountTargetResponse | null>;
    /**
     * Waits forOutboundConnector till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOutboundConnectorResponse | null (null in case of 404 response)
     */
    forOutboundConnector(request: serviceRequests.GetOutboundConnectorRequest, ...targetStates: models.OutboundConnector.LifecycleState[]): Promise<serviceResponses.GetOutboundConnectorResponse | null>;
    /**
     * Waits forReplication till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetReplicationResponse | null (null in case of 404 response)
     */
    forReplication(request: serviceRequests.GetReplicationRequest, ...targetStates: models.Replication.LifecycleState[]): Promise<serviceResponses.GetReplicationResponse | null>;
    /**
     * Waits forReplicationTarget till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetReplicationTargetResponse | null (null in case of 404 response)
     */
    forReplicationTarget(request: serviceRequests.GetReplicationTargetRequest, ...targetStates: models.ReplicationTarget.LifecycleState[]): Promise<serviceResponses.GetReplicationTargetResponse | null>;
    /**
     * Waits forSnapshot till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSnapshotResponse | null (null in case of 404 response)
     */
    forSnapshot(request: serviceRequests.GetSnapshotRequest, ...targetStates: models.Snapshot.LifecycleState[]): Promise<serviceResponses.GetSnapshotResponse | null>;
}
