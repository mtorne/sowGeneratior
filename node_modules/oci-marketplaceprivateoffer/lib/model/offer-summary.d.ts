/**
 * MarketplacePrivateOffer API
 * Use the Marketplace Publisher API to manage the publishing of applications in Oracle Cloud Infrastructure Marketplace.
 * OpenAPI spec version: 20220901
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Summary of the Offers.
 */
export interface OfferSummary {
    /**
     * Unique identifier that is immutable on creation
     */
    "id": string;
    /**
     * Offer Identifier, can be renamed
     */
    "displayName": string;
    /**
     * Ocid of the buyer tenancy.
     */
    "buyerCompartmentId": string;
    /**
     * Ocid of the seller tenancy.
     */
    "sellerCompartmentId": string;
    /**
     * The time the the Offer was created. An RFC3339 formatted datetime string
     */
    "timeCreated": Date;
    /**
     * The time the Offer was updated. An RFC3339 formatted datetime string
     */
    "timeUpdated"?: Date;
    /**
     * The time the Offer must be accepted by the Buyer before the Offer becomes invalid. An RFC3339 formatted datetime string
     */
    "timeAcceptBy"?: Date;
    /**
     * The time the Offer was accepted by the Buyer of the Offer. An RFC3339 formatted datetime string
     */
    "timeAccepted"?: Date;
    /**
     * The time the Offer will become active after it has been accepted by the Buyer. An RFC3339 formatted datetime string
     */
    "timeStartDate"?: Date;
    /**
     * The time the accepted Offer will end. An RFC3339 formatted datetime string
     */
    "timeOfferEnd"?: Date;
    /**
     * The current state of the Offer.
     */
    "lifecycleState": string;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    "lifecycleDetails"?: string;
    /**
     * The human readable representation of where the offer is at in it's contract lifecycle.
     */
    "offerStatus"?: string;
    "buyerInformation"?: model.BuyerInformation;
    "sellerInformation"?: model.SellerInformation;
    "pricing"?: model.Pricing;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags": {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags": {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace OfferSummary {
    function getJsonObj(obj: OfferSummary): object;
    function getDeserializedJsonObj(obj: OfferSummary): object;
}
