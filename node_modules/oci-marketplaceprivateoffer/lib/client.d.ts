/**
 * MarketplacePrivateOffer API
 * Use the Marketplace Publisher API to manage the publishing of applications in Oracle Cloud Infrastructure Marketplace.
 * OpenAPI spec version: 20220901
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { AttachmentWaiter } from "./attachment-waiter";
import { OfferWaiter } from "./offer-waiter";
declare const Breaker: any;
export declare enum AttachmentApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class AttachmentClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": AttachmentWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new AttachmentWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): AttachmentWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): AttachmentWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Creates a new Attachment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateAttachmentRequest
     * @return CreateAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplaceprivateoffer/CreateAttachment.ts.html |here} to see how to use CreateAttachment API.
     */
    createAttachment(createAttachmentRequest: requests.CreateAttachmentRequest): Promise<responses.CreateAttachmentResponse>;
    /**
     * Deletes a Attachment resource by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteAttachmentRequest
     * @return DeleteAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplaceprivateoffer/DeleteAttachment.ts.html |here} to see how to use DeleteAttachment API.
     */
    deleteAttachment(deleteAttachmentRequest: requests.DeleteAttachmentRequest): Promise<responses.DeleteAttachmentResponse>;
    /**
     * Gets a Attachment by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAttachmentRequest
     * @return GetAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplaceprivateoffer/GetAttachment.ts.html |here} to see how to use GetAttachment API.
     */
    getAttachment(getAttachmentRequest: requests.GetAttachmentRequest): Promise<responses.GetAttachmentResponse>;
    /**
     * Gets a Attachment content by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetAttachmentContentRequest
     * @return GetAttachmentContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplaceprivateoffer/GetAttachmentContent.ts.html |here} to see how to use GetAttachmentContent API.
     */
    getAttachmentContent(getAttachmentContentRequest: requests.GetAttachmentContentRequest): Promise<responses.GetAttachmentContentResponse>;
    /**
     * Returns a list of Attachments. Requires either the BuyerCompartmentId or the SellerCompartmentId params. If neither or both are provided, then the API will return a 400.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListAttachmentsRequest
     * @return ListAttachmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplaceprivateoffer/ListAttachments.ts.html |here} to see how to use ListAttachments API.
     */
    listAttachments(listAttachmentsRequest: requests.ListAttachmentsRequest): Promise<responses.ListAttachmentsResponse>;
}
export declare enum OfferApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class OfferClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": OfferWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new OfferWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): OfferWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): OfferWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Creates a new Offer.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOfferRequest
     * @return CreateOfferResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplaceprivateoffer/CreateOffer.ts.html |here} to see how to use CreateOffer API.
     */
    createOffer(createOfferRequest: requests.CreateOfferRequest): Promise<responses.CreateOfferResponse>;
    /**
     * Deletes an Offer resource by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOfferRequest
     * @return DeleteOfferResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplaceprivateoffer/DeleteOffer.ts.html |here} to see how to use DeleteOffer API.
     */
    deleteOffer(deleteOfferRequest: requests.DeleteOfferRequest): Promise<responses.DeleteOfferResponse>;
    /**
     * Gets an Offer by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOfferRequest
     * @return GetOfferResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplaceprivateoffer/GetOffer.ts.html |here} to see how to use GetOffer API.
     */
    getOffer(getOfferRequest: requests.GetOfferRequest): Promise<responses.GetOfferResponse>;
    /**
     * Gets an Offer internal details by identifier
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOfferInternalDetailRequest
     * @return GetOfferInternalDetailResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplaceprivateoffer/GetOfferInternalDetail.ts.html |here} to see how to use GetOfferInternalDetail API.
     */
    getOfferInternalDetail(getOfferInternalDetailRequest: requests.GetOfferInternalDetailRequest): Promise<responses.GetOfferInternalDetailResponse>;
    /**
     * Returns a list of Offers. Requires either the BuyerCompartmentId or the SellerCompartmentId params. If neither or both are provided, then the API will return a 400.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOffersRequest
     * @return ListOffersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplaceprivateoffer/ListOffers.ts.html |here} to see how to use ListOffers API.
     */
    listOffers(listOffersRequest: requests.ListOffersRequest): Promise<responses.ListOffersResponse>;
    /**
     * Updates the Offer
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOfferRequest
     * @return UpdateOfferResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/marketplaceprivateoffer/UpdateOffer.ts.html |here} to see how to use UpdateOffer API.
     */
    updateOffer(updateOfferRequest: requests.UpdateOfferRequest): Promise<responses.UpdateOfferResponse>;
}
export {};
