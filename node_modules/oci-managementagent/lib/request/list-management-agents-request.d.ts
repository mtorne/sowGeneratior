/**
 *
 *
 * OpenAPI spec version: 20200202
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
import common = require("oci-common");
/**
 * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/ListManagementAgents.ts.html |here} to see how to use ListManagementAgentsRequest.
 */
export interface ListManagementAgentsRequest extends common.BaseRequest {
    /**
     * The OCID of the compartment to which a request will be scoped.
     */
    "compartmentId": string;
    /**
     * Filter to return only Management Agents having the particular Plugin installed. A special pluginName of 'None' can be provided and this will return only Management Agents having no plugin installed.
     */
    "pluginName"?: Array<string>;
    /**
     * Filter to return only Management Agents having the particular agent version.
     */
    "version"?: Array<string>;
    /**
     * Filter to return only Management Agents having the particular display name.
     */
    "displayName"?: string;
    /**
     * Filter to return only Management Agents in the particular lifecycle state.
     */
    "lifecycleState"?: model.LifecycleStates;
    /**
     * Filter to return only Management Agents in the particular availability status.
     */
    "availabilityStatus"?: model.AvailabilityStatus;
    /**
     * Filter to return only Management Agents having the particular agent host id.
     */
    "hostId"?: string;
    /**
     * Filter to return only results having the particular platform type.
     */
    "platformType"?: Array<model.PlatformTypes>;
    /**
     * true, if the agent image is manually downloaded and installed. false, if the agent is deployed as a plugin in Oracle Cloud Agent.
     */
    "isCustomerDeployed"?: boolean;
    /**
     * A filter to return either agents or gateway types depending upon install type selected by user. By default both install type will be returned.
     */
    "installType"?: model.InstallTypes;
    /**
     * Filter to return only results having the particular gatewayId.
     */
    "gatewayId"?: Array<string>;
    /**
     * The maximum number of items to return.
     */
    "limit"?: number;
    /**
     * The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
     */
    "page"?: string;
    /**
     * The sort order to use, either 'asc' or 'desc'.
     */
    "sortOrder"?: ListManagementAgentsRequest.SortOrder;
    /**
     * The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending. If no value is specified timeCreated is default.
     *
     */
    "sortBy"?: ListManagementAgentsRequest.SortBy;
    /**
     * The client request ID for tracing.
     */
    "opcRequestId"?: string;
    /**
     * if set to true then it fetches resources for all compartments where user has access to else only on the compartment specified.
     */
    "compartmentIdInSubtree"?: boolean;
    /**
     * When the value is \"ACCESSIBLE\", insufficient permissions for a compartment will filter out resources in that compartment without rejecting the request.
     *
     */
    "accessLevel"?: string;
    /**
     * The type of the dataSource.
     */
    "dataSourceType"?: model.DataSourceTypes;
    /**
     * Unique name of the dataSource.
     */
    "dataSourceName"?: Array<string>;
}
export declare namespace ListManagementAgentsRequest {
    enum SortOrder {
        Asc = "ASC",
        Desc = "DESC"
    }
    enum SortBy {
        TimeCreated = "timeCreated",
        DisplayName = "displayName",
        Host = "host",
        AvailabilityStatus = "availabilityStatus",
        PlatformType = "platformType",
        PluginDisplayNames = "pluginDisplayNames",
        Version = "version"
    }
}
