"use strict";
/**
 * Management Agent API
 * Use the Management Agent API to manage your infrastructure's management agents, including their plugins and install keys.
For more information, see [Management Agent](https://docs.oracle.com/iaas/management-agents/index.html).

 * OpenAPI spec version: 20200202
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagementAgentClient = exports.ManagementAgentApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const managementagent_waiter_1 = require("./managementagent-waiter");
const oci_common_2 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var ManagementAgentApiKeys;
(function (ManagementAgentApiKeys) {
})(ManagementAgentApiKeys = exports.ManagementAgentApiKeys || (exports.ManagementAgentApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class ManagementAgentClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "ManagementAgent";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_2.developerToolConfiguration.isServiceEnabled("managementagent")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("managementagent");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20200202";
        if (this.logger)
            this.logger.info(`ManagementAgentClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ManagementAgentClient.serviceEndpointTemplate, this._region, ManagementAgentClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ManagementAgentClient.serviceEndpointTemplate, this._regionId, ManagementAgentClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ManagementAgentClient.serviceEndpointTemplate, region, ManagementAgentClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ManagementAgentClient.serviceEndpointTemplate, regionId, ManagementAgentClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new ManagementAgentWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new managementagent_waiter_1.ManagementAgentWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Datasource creation request to given Management Agent.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateDataSourceRequest
     * @return CreateDataSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/CreateDataSource.ts.html |here} to see how to use CreateDataSource API.
     */
    createDataSource(createDataSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#createDataSource.");
            const operationName = "createDataSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/CreateDataSource";
            const pathParams = {
                "{managementAgentId}": createDataSourceRequest.managementAgentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDataSourceRequest.opcRetryToken,
                "opc-request-id": createDataSourceRequest.opcRequestId,
                "if-match": createDataSourceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createDataSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/{managementAgentId}/dataSources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDataSourceRequest.createDataSourceDetails, "CreateDataSourceDetails", model.CreateDataSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * User creates a new install key as part of this API.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateManagementAgentInstallKeyRequest
     * @return CreateManagementAgentInstallKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/CreateManagementAgentInstallKey.ts.html |here} to see how to use CreateManagementAgentInstallKey API.
     */
    createManagementAgentInstallKey(createManagementAgentInstallKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#createManagementAgentInstallKey.");
            const operationName = "createManagementAgentInstallKey";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgentInstallKey/CreateManagementAgentInstallKey";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createManagementAgentInstallKeyRequest.opcRetryToken,
                "opc-request-id": createManagementAgentInstallKeyRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createManagementAgentInstallKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgentInstallKeys",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createManagementAgentInstallKeyRequest.createManagementAgentInstallKeyDetails, "CreateManagementAgentInstallKeyDetails", model.CreateManagementAgentInstallKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managementAgentInstallKey",
                    bodyModel: model.ManagementAgentInstallKey,
                    type: "model.ManagementAgentInstallKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Datasource delete request to given Management Agent.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteDataSourceRequest
     * @return DeleteDataSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/DeleteDataSource.ts.html |here} to see how to use DeleteDataSource API.
     */
    deleteDataSource(deleteDataSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#deleteDataSource.");
            const operationName = "deleteDataSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/DeleteDataSource";
            const pathParams = {
                "{managementAgentId}": deleteDataSourceRequest.managementAgentId,
                "{dataSourceKey}": deleteDataSourceRequest.dataSourceKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDataSourceRequest.ifMatch,
                "opc-request-id": deleteDataSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteDataSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/{managementAgentId}/dataSources/{dataSourceKey}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a Management Agent resource by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteManagementAgentRequest
     * @return DeleteManagementAgentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/DeleteManagementAgent.ts.html |here} to see how to use DeleteManagementAgent API.
     */
    deleteManagementAgent(deleteManagementAgentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#deleteManagementAgent.");
            const operationName = "deleteManagementAgent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/DeleteManagementAgent";
            const pathParams = {
                "{managementAgentId}": deleteManagementAgentRequest.managementAgentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteManagementAgentRequest.ifMatch,
                "opc-request-id": deleteManagementAgentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteManagementAgentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/{managementAgentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a Management Agent install Key resource by identifier
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteManagementAgentInstallKeyRequest
     * @return DeleteManagementAgentInstallKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/DeleteManagementAgentInstallKey.ts.html |here} to see how to use DeleteManagementAgentInstallKey API.
     */
    deleteManagementAgentInstallKey(deleteManagementAgentInstallKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#deleteManagementAgentInstallKey.");
            const operationName = "deleteManagementAgentInstallKey";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgentInstallKey/DeleteManagementAgentInstallKey";
            const pathParams = {
                "{managementAgentInstallKeyId}": deleteManagementAgentInstallKeyRequest.managementAgentInstallKeyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteManagementAgentInstallKeyRequest.ifMatch,
                "opc-request-id": deleteManagementAgentInstallKeyRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteManagementAgentInstallKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgentInstallKeys/{managementAgentInstallKeyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Cancel the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteWorkRequestRequest
     * @return DeleteWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/DeleteWorkRequest.ts.html |here} to see how to use DeleteWorkRequest API.
     */
    deleteWorkRequest(deleteWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#deleteWorkRequest.");
            const operationName = "deleteWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/WorkRequest/DeleteWorkRequest";
            const pathParams = {
                "{workRequestId}": deleteWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteWorkRequestRequest.opcRequestId,
                "if-match": deleteWorkRequestRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deploys Plugins to a given list of agentIds.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeployPluginsRequest
     * @return DeployPluginsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/DeployPlugins.ts.html |here} to see how to use DeployPlugins API.
     */
    deployPlugins(deployPluginsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#deployPlugins.");
            const operationName = "deployPlugins";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/DeployPlugins";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": deployPluginsRequest.opcRetryToken,
                "opc-request-id": deployPluginsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deployPluginsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/actions/deployPlugins",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(deployPluginsRequest.deployPluginsDetails, "DeployPluginsDetails", model.DeployPluginsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the AutoUpgradable configuration for all agents in a tenancy.
     * The supplied compartmentId must be a tenancy root.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetAutoUpgradableConfigRequest
     * @return GetAutoUpgradableConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/GetAutoUpgradableConfig.ts.html |here} to see how to use GetAutoUpgradableConfig API.
     */
    getAutoUpgradableConfig(getAutoUpgradableConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#getAutoUpgradableConfig.");
            const operationName = "getAutoUpgradableConfig";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/GetAutoUpgradableConfig";
            const pathParams = {};
            const queryParams = {
                "compartmentId": getAutoUpgradableConfigRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAutoUpgradableConfigRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAutoUpgradableConfigRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/actions/getAutoUpgradableConfig",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "autoUpgradableConfig",
                    bodyModel: model.AutoUpgradableConfig,
                    type: "model.AutoUpgradableConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get Datasource details for given Id and given Management Agent.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetDataSourceRequest
     * @return GetDataSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/GetDataSource.ts.html |here} to see how to use GetDataSource API.
     */
    getDataSource(getDataSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#getDataSource.");
            const operationName = "getDataSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/GetDataSource";
            const pathParams = {
                "{managementAgentId}": getDataSourceRequest.managementAgentId,
                "{dataSourceKey}": getDataSourceRequest.dataSourceKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": getDataSourceRequest.opcRetryToken,
                "opc-request-id": getDataSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getDataSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/{managementAgentId}/dataSources/{dataSourceKey}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataSource",
                    bodyModel: model.DataSource,
                    type: "model.DataSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets complete details of the inventory of a given agent id
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagementAgentRequest
     * @return GetManagementAgentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/GetManagementAgent.ts.html |here} to see how to use GetManagementAgent API.
     */
    getManagementAgent(getManagementAgentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#getManagementAgent.");
            const operationName = "getManagementAgent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/GetManagementAgent";
            const pathParams = {
                "{managementAgentId}": getManagementAgentRequest.managementAgentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagementAgentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagementAgentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/{managementAgentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managementAgent",
                    bodyModel: model.ManagementAgent,
                    type: "model.ManagementAgent",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets complete details of the Agent install Key for a given key id
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagementAgentInstallKeyRequest
     * @return GetManagementAgentInstallKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/GetManagementAgentInstallKey.ts.html |here} to see how to use GetManagementAgentInstallKey API.
     */
    getManagementAgentInstallKey(getManagementAgentInstallKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#getManagementAgentInstallKey.");
            const operationName = "getManagementAgentInstallKey";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgentInstallKey/GetManagementAgentInstallKey";
            const pathParams = {
                "{managementAgentInstallKeyId}": getManagementAgentInstallKeyRequest.managementAgentInstallKeyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagementAgentInstallKeyRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagementAgentInstallKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgentInstallKeys/{managementAgentInstallKeyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managementAgentInstallKey",
                    bodyModel: model.ManagementAgentInstallKey,
                    type: "model.ManagementAgentInstallKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a file with Management Agent install Key in it
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetManagementAgentInstallKeyContentRequest
     * @return GetManagementAgentInstallKeyContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/GetManagementAgentInstallKeyContent.ts.html |here} to see how to use GetManagementAgentInstallKeyContent API.
     */
    getManagementAgentInstallKeyContent(getManagementAgentInstallKeyContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#getManagementAgentInstallKeyContent.");
            const operationName = "getManagementAgentInstallKeyContent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgentInstallKey/GetManagementAgentInstallKeyContent";
            const pathParams = {
                "{managementAgentInstallKeyId}": getManagementAgentInstallKeyContentRequest.managementAgentInstallKeyId
            };
            const queryParams = {
                "pluginName": getManagementAgentInstallKeyContentRequest.pluginName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagementAgentInstallKeyContentRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagementAgentInstallKeyContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgentInstallKeys/{managementAgentInstallKeyId}/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-type"),
                            key: "contentType",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the work request with the given ID.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/WorkRequest/GetWorkRequest";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the availability history records of Management Agent
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAvailabilityHistoriesRequest
     * @return ListAvailabilityHistoriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/ListAvailabilityHistories.ts.html |here} to see how to use ListAvailabilityHistories API.
     */
    listAvailabilityHistories(listAvailabilityHistoriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#listAvailabilityHistories.");
            const operationName = "listAvailabilityHistories";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/ListAvailabilityHistories";
            const pathParams = {
                "{managementAgentId}": listAvailabilityHistoriesRequest.managementAgentId
            };
            const queryParams = {
                "timeAvailabilityStatusEndedGreaterThan": listAvailabilityHistoriesRequest.timeAvailabilityStatusEndedGreaterThan,
                "timeAvailabilityStatusStartedLessThan": listAvailabilityHistoriesRequest.timeAvailabilityStatusStartedLessThan,
                "limit": listAvailabilityHistoriesRequest.limit,
                "page": listAvailabilityHistoriesRequest.page,
                "sortOrder": listAvailabilityHistoriesRequest.sortOrder,
                "sortBy": listAvailabilityHistoriesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAvailabilityHistoriesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAvailabilityHistoriesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/{managementAgentId}/availabilityHistories",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.AvailabilityHistorySummary,
                    type: "Array<model.AvailabilityHistorySummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listAvailabilityHistoriesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.AvailabilityHistorySummary objects
     * contained in responses from the listAvailabilityHistories operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailabilityHistories(request) {
        return oci_common_1.paginateRecords(request, req => this.listAvailabilityHistories(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listAvailabilityHistoriesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listAvailabilityHistories operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAvailabilityHistoriesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAvailabilityHistories(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.AvailabilityHistorySummary objects
     * contained in responses from the listAvailabilityHistories operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailabilityHistoriesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listAvailabilityHistories(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAvailabilityHistories operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAvailabilityHistoriesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listAvailabilityHistories(req));
    }
    /**
     * A list of Management Agent Data Sources for the given Management Agent Id.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDataSourcesRequest
     * @return ListDataSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/ListDataSources.ts.html |here} to see how to use ListDataSources API.
     */
    listDataSources(listDataSourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#listDataSources.");
            const operationName = "listDataSources";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/ListDataSources";
            const pathParams = {
                "{managementAgentId}": listDataSourcesRequest.managementAgentId
            };
            const queryParams = {
                "page": listDataSourcesRequest.page,
                "limit": listDataSourcesRequest.limit,
                "sortOrder": listDataSourcesRequest.sortOrder,
                "sortBy": listDataSourcesRequest.sortBy,
                "name": listDataSourcesRequest.name
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDataSourcesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listDataSourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/{managementAgentId}/dataSources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.DataSourceSummary,
                    type: "Array<model.DataSourceSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listDataSourcesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.DataSourceSummary objects
     * contained in responses from the listDataSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDataSources(request) {
        return oci_common_1.paginateRecords(request, req => this.listDataSources(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listDataSourcesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listDataSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDataSourcesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDataSources(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.DataSourceSummary objects
     * contained in responses from the listDataSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDataSourcesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listDataSources(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDataSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listDataSourcesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listDataSources(req));
    }
    /**
     * Get supported agent image information
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagementAgentImagesRequest
     * @return ListManagementAgentImagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/ListManagementAgentImages.ts.html |here} to see how to use ListManagementAgentImages API.
     */
    listManagementAgentImages(listManagementAgentImagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#listManagementAgentImages.");
            const operationName = "listManagementAgentImages";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgentImage/ListManagementAgentImages";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagementAgentImagesRequest.compartmentId,
                "limit": listManagementAgentImagesRequest.limit,
                "page": listManagementAgentImagesRequest.page,
                "sortOrder": listManagementAgentImagesRequest.sortOrder,
                "sortBy": listManagementAgentImagesRequest.sortBy,
                "name": listManagementAgentImagesRequest.name,
                "lifecycleState": listManagementAgentImagesRequest.lifecycleState,
                "installType": listManagementAgentImagesRequest.installType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": listManagementAgentImagesRequest.opcRetryToken,
                "opc-request-id": listManagementAgentImagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagementAgentImagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgentImages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ManagementAgentImageSummary,
                    type: "Array<model.ManagementAgentImageSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listManagementAgentImagesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ManagementAgentImageSummary objects
     * contained in responses from the listManagementAgentImages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagementAgentImages(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagementAgentImages(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listManagementAgentImagesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listManagementAgentImages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagementAgentImagesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagementAgentImages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ManagementAgentImageSummary objects
     * contained in responses from the listManagementAgentImages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagementAgentImagesRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagementAgentImages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listManagementAgentImages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagementAgentImagesResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagementAgentImages(req));
    }
    /**
     * Returns a list of Management Agent installed Keys.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagementAgentInstallKeysRequest
     * @return ListManagementAgentInstallKeysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/ListManagementAgentInstallKeys.ts.html |here} to see how to use ListManagementAgentInstallKeys API.
     */
    listManagementAgentInstallKeys(listManagementAgentInstallKeysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#listManagementAgentInstallKeys.");
            const operationName = "listManagementAgentInstallKeys";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgentInstallKey/ListManagementAgentInstallKeys";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagementAgentInstallKeysRequest.compartmentId,
                "compartmentIdInSubtree": listManagementAgentInstallKeysRequest.compartmentIdInSubtree,
                "accessLevel": listManagementAgentInstallKeysRequest.accessLevel,
                "lifecycleState": listManagementAgentInstallKeysRequest.lifecycleState,
                "displayName": listManagementAgentInstallKeysRequest.displayName,
                "page": listManagementAgentInstallKeysRequest.page,
                "sortOrder": listManagementAgentInstallKeysRequest.sortOrder,
                "sortBy": listManagementAgentInstallKeysRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagementAgentInstallKeysRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagementAgentInstallKeysRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgentInstallKeys",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ManagementAgentInstallKeySummary,
                    type: "Array<model.ManagementAgentInstallKeySummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listManagementAgentInstallKeysRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ManagementAgentInstallKeySummary objects
     * contained in responses from the listManagementAgentInstallKeys operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagementAgentInstallKeys(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagementAgentInstallKeys(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listManagementAgentInstallKeysResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listManagementAgentInstallKeys operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagementAgentInstallKeysResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagementAgentInstallKeys(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ManagementAgentInstallKeySummary objects
     * contained in responses from the listManagementAgentInstallKeys operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagementAgentInstallKeysRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagementAgentInstallKeys(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listManagementAgentInstallKeys operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagementAgentInstallKeysResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagementAgentInstallKeys(req));
    }
    /**
     * Returns a list of managementAgentPlugins.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagementAgentPluginsRequest
     * @return ListManagementAgentPluginsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/ListManagementAgentPlugins.ts.html |here} to see how to use ListManagementAgentPlugins API.
     */
    listManagementAgentPlugins(listManagementAgentPluginsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#listManagementAgentPlugins.");
            const operationName = "listManagementAgentPlugins";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgentPlugin/ListManagementAgentPlugins";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagementAgentPluginsRequest.compartmentId,
                "displayName": listManagementAgentPluginsRequest.displayName,
                "limit": listManagementAgentPluginsRequest.limit,
                "page": listManagementAgentPluginsRequest.page,
                "sortOrder": listManagementAgentPluginsRequest.sortOrder,
                "sortBy": listManagementAgentPluginsRequest.sortBy,
                "lifecycleState": listManagementAgentPluginsRequest.lifecycleState,
                "platformType": listManagementAgentPluginsRequest.platformType,
                "agentId": listManagementAgentPluginsRequest.agentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagementAgentPluginsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagementAgentPluginsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgentPlugins",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ManagementAgentPluginSummary,
                    type: "Array<model.ManagementAgentPluginSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listManagementAgentPluginsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ManagementAgentPluginSummary objects
     * contained in responses from the listManagementAgentPlugins operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagementAgentPlugins(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagementAgentPlugins(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listManagementAgentPluginsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listManagementAgentPlugins operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagementAgentPluginsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagementAgentPlugins(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ManagementAgentPluginSummary objects
     * contained in responses from the listManagementAgentPlugins operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagementAgentPluginsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagementAgentPlugins(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listManagementAgentPlugins operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagementAgentPluginsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagementAgentPlugins(req));
    }
    /**
     * Returns a list of Management Agents.
     * If no explicit page size limit is specified, it will default to 1000 when compartmentIdInSubtree is true and 5000 otherwise.
     * The response is limited to maximum 1000 records when compartmentIdInSubtree is true.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListManagementAgentsRequest
     * @return ListManagementAgentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/ListManagementAgents.ts.html |here} to see how to use ListManagementAgents API.
     */
    listManagementAgents(listManagementAgentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#listManagementAgents.");
            const operationName = "listManagementAgents";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/ListManagementAgents";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagementAgentsRequest.compartmentId,
                "pluginName": listManagementAgentsRequest.pluginName,
                "version": listManagementAgentsRequest.version,
                "displayName": listManagementAgentsRequest.displayName,
                "lifecycleState": listManagementAgentsRequest.lifecycleState,
                "availabilityStatus": listManagementAgentsRequest.availabilityStatus,
                "hostId": listManagementAgentsRequest.hostId,
                "platformType": listManagementAgentsRequest.platformType,
                "isCustomerDeployed": listManagementAgentsRequest.isCustomerDeployed,
                "installType": listManagementAgentsRequest.installType,
                "gatewayId": listManagementAgentsRequest.gatewayId,
                "limit": listManagementAgentsRequest.limit,
                "page": listManagementAgentsRequest.page,
                "sortOrder": listManagementAgentsRequest.sortOrder,
                "sortBy": listManagementAgentsRequest.sortBy,
                "compartmentIdInSubtree": listManagementAgentsRequest.compartmentIdInSubtree,
                "accessLevel": listManagementAgentsRequest.accessLevel,
                "dataSourceType": listManagementAgentsRequest.dataSourceType,
                "dataSourceName": listManagementAgentsRequest.dataSourceName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagementAgentsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagementAgentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.ManagementAgentSummary,
                    type: "Array<model.ManagementAgentSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listManagementAgentsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ManagementAgentSummary objects
     * contained in responses from the listManagementAgents operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagementAgents(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagementAgents(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listManagementAgentsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listManagementAgents operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllManagementAgentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagementAgents(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.ManagementAgentSummary objects
     * contained in responses from the listManagementAgents operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagementAgentsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listManagementAgents(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listManagementAgents operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listManagementAgentsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listManagementAgents(req));
    }
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/WorkRequestError/ListWorkRequestErrors";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit,
                "sortOrder": listWorkRequestErrorsRequest.sortOrder,
                "sortBy": listWorkRequestErrorsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestError,
                    type: "Array<model.WorkRequestError>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestErrorsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/WorkRequestLogEntry/ListWorkRequestLogs";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit,
                "sortOrder": listWorkRequestLogsRequest.sortOrder,
                "sortBy": listWorkRequestLogsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestLogEntry,
                    type: "Array<model.WorkRequestLogEntry>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestLogsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Lists the work requests in a compartment.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/WorkRequest/ListWorkRequests";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "agentId": listWorkRequestsRequest.agentId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit,
                "status": listWorkRequestsRequest.status,
                "type": listWorkRequestsRequest.type,
                "timeCreatedGreaterThanOrEqualTo": listWorkRequestsRequest.timeCreatedGreaterThanOrEqualTo,
                "sortOrder": listWorkRequestsRequest.sortOrder,
                "sortBy": listWorkRequestsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: model.WorkRequestSummary,
                    type: "Array<model.WorkRequestSummary>",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsRecordIterator(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listWorkRequestsResponseIterator(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Sets the AutoUpgradable configuration for all agents in a tenancy.
     * The supplied compartmentId must be a tenancy root.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SetAutoUpgradableConfigRequest
     * @return SetAutoUpgradableConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/SetAutoUpgradableConfig.ts.html |here} to see how to use SetAutoUpgradableConfig API.
     */
    setAutoUpgradableConfig(setAutoUpgradableConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#setAutoUpgradableConfig.");
            const operationName = "setAutoUpgradableConfig";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/SetAutoUpgradableConfig";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": setAutoUpgradableConfigRequest.opcRetryToken,
                "opc-request-id": setAutoUpgradableConfigRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, setAutoUpgradableConfigRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/actions/setAutoUpgradableConfig",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(setAutoUpgradableConfigRequest.setAutoUpgradableConfigDetails, "SetAutoUpgradableConfigDetails", model.SetAutoUpgradableConfigDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "autoUpgradableConfig",
                    bodyModel: model.AutoUpgradableConfig,
                    type: "model.AutoUpgradableConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets count of the inventory of agents for a given compartment id, group by, and isPluginDeployed parameters.
     * Supported groupBy parameters: availabilityStatus, platformType, version
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeManagementAgentCountsRequest
     * @return SummarizeManagementAgentCountsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/SummarizeManagementAgentCounts.ts.html |here} to see how to use SummarizeManagementAgentCounts API.
     */
    summarizeManagementAgentCounts(summarizeManagementAgentCountsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#summarizeManagementAgentCounts.");
            const operationName = "summarizeManagementAgentCounts";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/SummarizeManagementAgentCounts";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeManagementAgentCountsRequest.compartmentId,
                "groupBy": summarizeManagementAgentCountsRequest.groupBy,
                "hasPlugins": summarizeManagementAgentCountsRequest.hasPlugins,
                "installType": summarizeManagementAgentCountsRequest.installType,
                "compartmentIdInSubtree": summarizeManagementAgentCountsRequest.compartmentIdInSubtree,
                "page": summarizeManagementAgentCountsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeManagementAgentCountsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeManagementAgentCountsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgentCounts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managementAgentAggregationCollection",
                    bodyModel: model.ManagementAgentAggregationCollection,
                    type: "model.ManagementAgentAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets count of the inventory of management agent plugins for a given compartment id and group by parameter.
     * Supported groupBy parameter: pluginName
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeManagementAgentPluginCountsRequest
     * @return SummarizeManagementAgentPluginCountsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/SummarizeManagementAgentPluginCounts.ts.html |here} to see how to use SummarizeManagementAgentPluginCounts API.
     */
    summarizeManagementAgentPluginCounts(summarizeManagementAgentPluginCountsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#summarizeManagementAgentPluginCounts.");
            const operationName = "summarizeManagementAgentPluginCounts";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/SummarizeManagementAgentPluginCounts";
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeManagementAgentPluginCountsRequest.compartmentId,
                "groupBy": summarizeManagementAgentPluginCountsRequest.groupBy,
                "compartmentIdInSubtree": summarizeManagementAgentPluginCountsRequest.compartmentIdInSubtree,
                "page": summarizeManagementAgentPluginCountsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeManagementAgentPluginCountsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeManagementAgentPluginCountsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgentPluginCounts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managementAgentPluginAggregationCollection",
                    bodyModel: model.ManagementAgentPluginAggregationCollection,
                    type: "model.ManagementAgentPluginAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Datasource update request to given Management Agent.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateDataSourceRequest
     * @return UpdateDataSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/UpdateDataSource.ts.html |here} to see how to use UpdateDataSource API.
     */
    updateDataSource(updateDataSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#updateDataSource.");
            const operationName = "updateDataSource";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/UpdateDataSource";
            const pathParams = {
                "{managementAgentId}": updateDataSourceRequest.managementAgentId,
                "{dataSourceKey}": updateDataSourceRequest.dataSourceKey
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": updateDataSourceRequest.opcRetryToken,
                "opc-request-id": updateDataSourceRequest.opcRequestId,
                "if-match": updateDataSourceRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateDataSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/{managementAgentId}/dataSources/{dataSourceKey}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDataSourceRequest.updateDataSourceDetails, "UpdateDataSourceDetails", model.UpdateDataSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * API to update the console managed properties of the Management Agent.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateManagementAgentRequest
     * @return UpdateManagementAgentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/UpdateManagementAgent.ts.html |here} to see how to use UpdateManagementAgent API.
     */
    updateManagementAgent(updateManagementAgentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#updateManagementAgent.");
            const operationName = "updateManagementAgent";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgent/UpdateManagementAgent";
            const pathParams = {
                "{managementAgentId}": updateManagementAgentRequest.managementAgentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": updateManagementAgentRequest.opcRetryToken,
                "opc-request-id": updateManagementAgentRequest.opcRequestId,
                "if-match": updateManagementAgentRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateManagementAgentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgents/{managementAgentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateManagementAgentRequest.updateManagementAgentDetails, "UpdateManagementAgentDetails", model.UpdateManagementAgentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managementAgent",
                    bodyModel: model.ManagementAgent,
                    type: "model.ManagementAgent",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * API to update the modifiable properties of the Management Agent install key.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateManagementAgentInstallKeyRequest
     * @return UpdateManagementAgentInstallKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/managementagent/UpdateManagementAgentInstallKey.ts.html |here} to see how to use UpdateManagementAgentInstallKey API.
     */
    updateManagementAgentInstallKey(updateManagementAgentInstallKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementAgentClient#updateManagementAgentInstallKey.");
            const operationName = "updateManagementAgentInstallKey";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/management-agent/20200202/ManagementAgentInstallKey/UpdateManagementAgentInstallKey";
            const pathParams = {
                "{managementAgentInstallKeyId}": updateManagementAgentInstallKeyRequest.managementAgentInstallKeyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": updateManagementAgentInstallKeyRequest.opcRetryToken,
                "opc-request-id": updateManagementAgentInstallKeyRequest.opcRequestId,
                "if-match": updateManagementAgentInstallKeyRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateManagementAgentInstallKeyRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementAgentInstallKeys/{managementAgentInstallKeyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateManagementAgentInstallKeyRequest.updateManagementAgentInstallKeyDetails, "UpdateManagementAgentInstallKeyDetails", model.UpdateManagementAgentInstallKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managementAgentInstallKey",
                    bodyModel: model.ManagementAgentInstallKey,
                    type: "model.ManagementAgentInstallKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ManagementAgentClient = ManagementAgentClient;
ManagementAgentClient.serviceEndpointTemplate = "https://management-agent.{region}.oci.{secondLevelDomain}";
ManagementAgentClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map