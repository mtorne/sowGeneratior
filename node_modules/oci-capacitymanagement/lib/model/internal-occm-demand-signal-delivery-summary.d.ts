/**
 * OCI Control Center Capacity Management API
 * OCI Control Center (OCC) Capacity Management enables you to manage capacity requests in realms where OCI Control Center Capacity Management is available. For more information, see [OCI Control Center](https://docs.oracle.com/iaas/Content/control-center/home.htm).
 * OpenAPI spec version: 20231107
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * An internal summary model containing information about the demand signal delivery resources.
 *
 */
export interface InternalOccmDemandSignalDeliverySummary {
    /**
     * The OCID of this demand signal delivery resource.
     *
     */
    "id": string;
    /**
     * The OCID of the tenancy from which the demand signal delivery resource is created.
     *
     */
    "compartmentId": string;
    /**
     * The OCID of the corresponding customer group to which this demand signal delivery resource belongs to.
     *
     */
    "occCustomerGroupId": string;
    /**
     * The OCID of the demand signal under which this delivery will be grouped.
     *
     */
    "demandSignalId": string;
    /**
     * The OCID of the demand signal item corresponding to which this delivery is made.
     *
     */
    "demandSignalItemId": string;
    /**
     * The quantity of the resource that OCI will supply to the customer.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "acceptedQuantity": number;
    /**
     * The current lifecycle state of the resource.
     *
     */
    "lifecycleState": string;
    /**
      * The enum values corresponding to the various states associated with the delivery resource.
  * <p>
  SUBMITTED -> The state where operators have started working and thinking on the quantity that OCI can delivery for the corresponding demand signal item.
  * IN_REVIEW -> The operators are waiting on approvals from different teams/folks in this state.
  * ACCEPTED -> OCI has accepted your resource request and will deliver the quantity as specified by acceptance quantity of this resource.
  * DECLINED -> OCI has declined you resource request.
  * DELIVERED -> OCI has delivered the accepted quantity to the customers.
  * <p>
  NOTE: The resource becomes visible to customers in ACCEPTED, DECLINED or DELIVERED state.
  *
      */
    "lifecycleDetails": string;
    /**
     * This field could be used by OCI to communicate the reason for declining the request.
     *
     */
    "justification"?: string;
    /**
     * The date on which the OCI delivered the resource to the customers.
     *
     */
    "timeDelivered"?: Date;
    /**
     * This field acts as a notes section for operators.
     *
     */
    "notes"?: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace InternalOccmDemandSignalDeliverySummary {
    function getJsonObj(obj: InternalOccmDemandSignalDeliverySummary): object;
    function getDeserializedJsonObj(obj: InternalOccmDemandSignalDeliverySummary): object;
}
