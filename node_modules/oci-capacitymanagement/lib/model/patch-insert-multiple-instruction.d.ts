/**
 * OCI Control Center Capacity Management API
 * OCI Control Center (OCC) Capacity Management enables you to manage capacity requests in realms where OCI Control Center Capacity Management is available. For more information, see [OCI Control Center](https://docs.oracle.com/iaas/Content/control-center/home.htm).
 * OpenAPI spec version: 20231107
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * An operation that inserts multiple consecutive values into an array, shifting array items as necessary and handling NOT_FOUND exceptions by creating the implied containing structure.
 *
 */
export interface PatchInsertMultipleInstruction extends model.PatchInstruction {
    /**
     * A list of consecutive values to be inserted into the target.
     */
    "values": Array<any>;
    /**
     * A selection to be evaluated against the array for identifying a particular reference item within it, with the same format and semantics as {@code selection}.
     */
    "selectedItem"?: string;
    /**
     * Where to insert the values, relative to the first item matched by {@code selectedItem}.
     * If {@code selectedItem} is unspecified, then \"BEFORE\" specifies insertion at the first position in an array and \"AFTER\" specifies insertion at the last position.
     * If {@code selectedItem} is specified but results in an empty selection, then both values specify insertion at the last position.
     *
     */
    "position"?: PatchInsertMultipleInstruction.Position;
    "operation": string;
}
export declare namespace PatchInsertMultipleInstruction {
    enum Position {
        Before = "BEFORE",
        After = "AFTER"
    }
    function getJsonObj(obj: PatchInsertMultipleInstruction, isParentJsonObj?: boolean): object;
    const operation = "INSERT_MULTIPLE";
    function getDeserializedJsonObj(obj: PatchInsertMultipleInstruction, isParentJsonObj?: boolean): object;
}
