"use strict";
/**
 * OCI Control Center Capacity Management API
 * OCI Control Center (OCC) Capacity Management enables you to manage capacity requests in realms where OCI Control Center Capacity Management is available. For more information, see [OCI Control Center](https://docs.oracle.com/iaas/Content/control-center/home.htm).
 * OpenAPI spec version: 20231107
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalDemandSignalClient = exports.InternalDemandSignalApiKeys = exports.DemandSignalClient = exports.DemandSignalApiKeys = exports.CapacityManagementClient = exports.CapacityManagementApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const capacitymanagement_waiter_1 = require("./capacitymanagement-waiter");
const demandsignal_waiter_1 = require("./demandsignal-waiter");
const internaldemandsignal_waiter_1 = require("./internaldemandsignal-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var CapacityManagementApiKeys;
(function (CapacityManagementApiKeys) {
})(CapacityManagementApiKeys = exports.CapacityManagementApiKeys || (exports.CapacityManagementApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class CapacityManagementClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "CapacityManagement";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("capacitymanagement")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("capacitymanagement");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20231107";
        if (this.logger)
            this.logger.info(`CapacityManagementClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(CapacityManagementClient.serviceEndpointTemplate, this._region, CapacityManagementClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(CapacityManagementClient.serviceEndpointTemplate, this._regionId, CapacityManagementClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(CapacityManagementClient.serviceEndpointTemplate, region, CapacityManagementClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(CapacityManagementClient.serviceEndpointTemplate, regionId, CapacityManagementClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new CapacityManagementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new capacitymanagement_waiter_1.CapacityManagementWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Create availability catalog
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOccAvailabilityCatalogRequest
     * @return CreateOccAvailabilityCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/CreateOccAvailabilityCatalog.ts.html |here} to see how to use CreateOccAvailabilityCatalog API.
     */
    createOccAvailabilityCatalog(createOccAvailabilityCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#createOccAvailabilityCatalog.");
            const operationName = "createOccAvailabilityCatalog";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOccAvailabilityCatalogRequest.opcRetryToken,
                "opc-request-id": createOccAvailabilityCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOccAvailabilityCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOccAvailabilityCatalogRequest.createOccAvailabilityCatalogDetails, "CreateOccAvailabilityCatalogDetails", model.CreateOccAvailabilityCatalogDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCatalog",
                    bodyModel: model.OccAvailabilityCatalog,
                    type: "model.OccAvailabilityCatalog",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create Capacity Request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOccCapacityRequestRequest
     * @return CreateOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/CreateOccCapacityRequest.ts.html |here} to see how to use CreateOccCapacityRequest API.
     */
    createOccCapacityRequest(createOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#createOccCapacityRequest.");
            const operationName = "createOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOccCapacityRequestRequest.opcRetryToken,
                "opc-request-id": createOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOccCapacityRequestRequest.createOccCapacityRequestDetails, "CreateOccCapacityRequestDetails", model.CreateOccCapacityRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequest",
                    bodyModel: model.OccCapacityRequest,
                    type: "model.OccCapacityRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create customer.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOccCustomerRequest
     * @return CreateOccCustomerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/CreateOccCustomer.ts.html |here} to see how to use CreateOccCustomer API.
     */
    createOccCustomer(createOccCustomerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#createOccCustomer.");
            const operationName = "createOccCustomer";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCustomerGroupId}": createOccCustomerRequest.occCustomerGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOccCustomerRequest.opcRetryToken,
                "opc-request-id": createOccCustomerRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOccCustomerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCustomerGroups/{occCustomerGroupId}/occCustomers",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOccCustomerRequest.createOccCustomerDetails, "CreateOccCustomerDetails", model.CreateOccCustomerDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCustomer",
                    bodyModel: model.OccCustomer,
                    type: "model.OccCustomer",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create customer group.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOccCustomerGroupRequest
     * @return CreateOccCustomerGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/CreateOccCustomerGroup.ts.html |here} to see how to use CreateOccCustomerGroup API.
     */
    createOccCustomerGroup(createOccCustomerGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#createOccCustomerGroup.");
            const operationName = "createOccCustomerGroup";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOccCustomerGroupRequest.opcRetryToken,
                "opc-request-id": createOccCustomerGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOccCustomerGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCustomerGroups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOccCustomerGroupRequest.createOccCustomerGroupDetails, "CreateOccCustomerGroupDetails", model.CreateOccCustomerGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCustomerGroup",
                    bodyModel: model.OccCustomerGroup,
                    type: "model.OccCustomerGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the availability catalog resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOccAvailabilityCatalogRequest
     * @return DeleteOccAvailabilityCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/DeleteOccAvailabilityCatalog.ts.html |here} to see how to use DeleteOccAvailabilityCatalog API.
     */
    deleteOccAvailabilityCatalog(deleteOccAvailabilityCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#deleteOccAvailabilityCatalog.");
            const operationName = "deleteOccAvailabilityCatalog";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": deleteOccAvailabilityCatalogRequest.occAvailabilityCatalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOccAvailabilityCatalogRequest.ifMatch,
                "opc-request-id": deleteOccAvailabilityCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOccAvailabilityCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the capacity request resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOccCapacityRequestRequest
     * @return DeleteOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/DeleteOccCapacityRequest.ts.html |here} to see how to use DeleteOccCapacityRequest API.
     */
    deleteOccCapacityRequest(deleteOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#deleteOccCapacityRequest.");
            const operationName = "deleteOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCapacityRequestId}": deleteOccCapacityRequestRequest.occCapacityRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOccCapacityRequestRequest.ifMatch,
                "opc-request-id": deleteOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests/{occCapacityRequestId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the customer resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOccCustomerRequest
     * @return DeleteOccCustomerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/DeleteOccCustomer.ts.html |here} to see how to use DeleteOccCustomer API.
     */
    deleteOccCustomer(deleteOccCustomerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#deleteOccCustomer.");
            const operationName = "deleteOccCustomer";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCustomerGroupId}": deleteOccCustomerRequest.occCustomerGroupId,
                "{occCustomerId}": deleteOccCustomerRequest.occCustomerId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOccCustomerRequest.ifMatch,
                "opc-request-id": deleteOccCustomerRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOccCustomerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCustomerGroups/{occCustomerGroupId}/occCustomers/{occCustomerId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the customer group resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOccCustomerGroupRequest
     * @return DeleteOccCustomerGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/DeleteOccCustomerGroup.ts.html |here} to see how to use DeleteOccCustomerGroup API.
     */
    deleteOccCustomerGroup(deleteOccCustomerGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#deleteOccCustomerGroup.");
            const operationName = "deleteOccCustomerGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCustomerGroupId}": deleteOccCustomerGroupRequest.occCustomerGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOccCustomerGroupRequest.ifMatch,
                "opc-request-id": deleteOccCustomerGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOccCustomerGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCustomerGroups/{occCustomerGroupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get details about availability catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOccAvailabilityCatalogRequest
     * @return GetOccAvailabilityCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetOccAvailabilityCatalog.ts.html |here} to see how to use GetOccAvailabilityCatalog API.
     */
    getOccAvailabilityCatalog(getOccAvailabilityCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#getOccAvailabilityCatalog.");
            const operationName = "getOccAvailabilityCatalog";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": getOccAvailabilityCatalogRequest.occAvailabilityCatalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOccAvailabilityCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOccAvailabilityCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCatalog",
                    bodyModel: model.OccAvailabilityCatalog,
                    type: "model.OccAvailabilityCatalog",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the binary contents of the availability catalog. Can be saved as a csv file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOccAvailabilityCatalogContentRequest
     * @return GetOccAvailabilityCatalogContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetOccAvailabilityCatalogContent.ts.html |here} to see how to use GetOccAvailabilityCatalogContent API.
     */
    getOccAvailabilityCatalogContent(getOccAvailabilityCatalogContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#getOccAvailabilityCatalogContent.");
            const operationName = "getOccAvailabilityCatalogContent";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": getOccAvailabilityCatalogContentRequest.occAvailabilityCatalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": getOccAvailabilityCatalogContentRequest.opcRetryToken,
                "opc-request-id": getOccAvailabilityCatalogContentRequest.opcRequestId,
                "if-match": getOccAvailabilityCatalogContentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOccAvailabilityCatalogContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get details about the capacity request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOccCapacityRequestRequest
     * @return GetOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetOccCapacityRequest.ts.html |here} to see how to use GetOccCapacityRequest API.
     */
    getOccCapacityRequest(getOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#getOccCapacityRequest.");
            const operationName = "getOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCapacityRequestId}": getOccCapacityRequestRequest.occCapacityRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests/{occCapacityRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequest",
                    bodyModel: model.OccCapacityRequest,
                    type: "model.OccCapacityRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified customer group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOccCustomerGroupRequest
     * @return GetOccCustomerGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetOccCustomerGroup.ts.html |here} to see how to use GetOccCustomerGroup API.
     */
    getOccCustomerGroup(getOccCustomerGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#getOccCustomerGroup.");
            const operationName = "getOccCustomerGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCustomerGroupId}": getOccCustomerGroupRequest.occCustomerGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOccCustomerGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOccCustomerGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCustomerGroups/{occCustomerGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCustomerGroup",
                    bodyModel: model.OccCustomerGroup,
                    type: "model.OccCustomerGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists an overview of all resources in that namespace in a given time interval.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListInternalNamespaceOccOverviewsRequest
     * @return ListInternalNamespaceOccOverviewsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListInternalNamespaceOccOverviews.ts.html |here} to see how to use ListInternalNamespaceOccOverviews API.
     */
    listInternalNamespaceOccOverviews(listInternalNamespaceOccOverviewsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listInternalNamespaceOccOverviews.");
            const operationName = "listInternalNamespaceOccOverviews";
            const apiReferenceLink = "";
            const pathParams = {
                "{namespace}": listInternalNamespaceOccOverviewsRequest.namespace
            };
            const queryParams = {
                "compartmentId": listInternalNamespaceOccOverviewsRequest.compartmentId,
                "occCustomerGroupId": listInternalNamespaceOccOverviewsRequest.occCustomerGroupId,
                "workloadType": listInternalNamespaceOccOverviewsRequest.workloadType,
                "from": listInternalNamespaceOccOverviewsRequest.from,
                "to": listInternalNamespaceOccOverviewsRequest.to,
                "limit": listInternalNamespaceOccOverviewsRequest.limit,
                "page": listInternalNamespaceOccOverviewsRequest.page,
                "sortOrder": listInternalNamespaceOccOverviewsRequest.sortOrder,
                "sortBy": listInternalNamespaceOccOverviewsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInternalNamespaceOccOverviewsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listInternalNamespaceOccOverviewsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/namespace/{namespace}/occOverview",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occOverviewCollection",
                    bodyModel: model.OccOverviewCollection,
                    type: "model.OccOverviewCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * List details about a given occHandoverResourceBlock.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListInternalOccHandoverResourceBlockDetailsRequest
     * @return ListInternalOccHandoverResourceBlockDetailsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListInternalOccHandoverResourceBlockDetails.ts.html |here} to see how to use ListInternalOccHandoverResourceBlockDetails API.
     */
    listInternalOccHandoverResourceBlockDetails(listInternalOccHandoverResourceBlockDetailsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listInternalOccHandoverResourceBlockDetails.");
            const operationName = "listInternalOccHandoverResourceBlockDetails";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "occHandoverResourceBlockId": listInternalOccHandoverResourceBlockDetailsRequest.occHandoverResourceBlockId,
                "hostId": listInternalOccHandoverResourceBlockDetailsRequest.hostId,
                "limit": listInternalOccHandoverResourceBlockDetailsRequest.limit,
                "page": listInternalOccHandoverResourceBlockDetailsRequest.page,
                "sortOrder": listInternalOccHandoverResourceBlockDetailsRequest.sortOrder,
                "sortBy": listInternalOccHandoverResourceBlockDetailsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInternalOccHandoverResourceBlockDetailsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listInternalOccHandoverResourceBlockDetailsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occHandoverResourceBlockDetails",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occHandoverResourceBlockDetailCollection",
                    bodyModel: model.OccHandoverResourceBlockDetailCollection,
                    type: "model.OccHandoverResourceBlockDetailCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * List Occ Handover Resource blocks.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListInternalOccHandoverResourceBlocksRequest
     * @return ListInternalOccHandoverResourceBlocksResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListInternalOccHandoverResourceBlocks.ts.html |here} to see how to use ListInternalOccHandoverResourceBlocks API.
     */
    listInternalOccHandoverResourceBlocks(listInternalOccHandoverResourceBlocksRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listInternalOccHandoverResourceBlocks.");
            const operationName = "listInternalOccHandoverResourceBlocks";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "namespace": listInternalOccHandoverResourceBlocksRequest.namespace,
                "compartmentId": listInternalOccHandoverResourceBlocksRequest.compartmentId,
                "occCustomerGroupId": listInternalOccHandoverResourceBlocksRequest.occCustomerGroupId,
                "handoverResourceName": listInternalOccHandoverResourceBlocksRequest.handoverResourceName,
                "handoverDateGreaterThanOrEqualTo": listInternalOccHandoverResourceBlocksRequest.handoverDateGreaterThanOrEqualTo,
                "handoverDateLessThanOrEqualTo": listInternalOccHandoverResourceBlocksRequest.handoverDateLessThanOrEqualTo,
                "occHandoverResourceBlockId": listInternalOccHandoverResourceBlocksRequest.occHandoverResourceBlockId,
                "limit": listInternalOccHandoverResourceBlocksRequest.limit,
                "page": listInternalOccHandoverResourceBlocksRequest.page,
                "sortOrder": listInternalOccHandoverResourceBlocksRequest.sortOrder,
                "sortBy": listInternalOccHandoverResourceBlocksRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInternalOccHandoverResourceBlocksRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listInternalOccHandoverResourceBlocksRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occHandoverResourceBlocks",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occHandoverResourceBlockCollection",
                    bodyModel: model.OccHandoverResourceBlockCollection,
                    type: "model.OccHandoverResourceBlockCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists availabilities for a particular availability catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccAvailabilitiesRequest
     * @return ListOccAvailabilitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccAvailabilities.ts.html |here} to see how to use ListOccAvailabilities API.
     */
    listOccAvailabilities(listOccAvailabilitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccAvailabilities.");
            const operationName = "listOccAvailabilities";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": listOccAvailabilitiesRequest.occAvailabilityCatalogId
            };
            const queryParams = {
                "dateExpectedCapacityHandover": listOccAvailabilitiesRequest.dateExpectedCapacityHandover,
                "resourceName": listOccAvailabilitiesRequest.resourceName,
                "resourceType": listOccAvailabilitiesRequest.resourceType,
                "workloadType": listOccAvailabilitiesRequest.workloadType,
                "limit": listOccAvailabilitiesRequest.limit,
                "page": listOccAvailabilitiesRequest.page,
                "sortOrder": listOccAvailabilitiesRequest.sortOrder,
                "sortBy": listOccAvailabilitiesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccAvailabilitiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccAvailabilitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}/occAvailabilities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCollection",
                    bodyModel: model.OccAvailabilityCollection,
                    type: "model.OccAvailabilityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all availability catalogs.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccAvailabilityCatalogsRequest
     * @return ListOccAvailabilityCatalogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccAvailabilityCatalogs.ts.html |here} to see how to use ListOccAvailabilityCatalogs API.
     */
    listOccAvailabilityCatalogs(listOccAvailabilityCatalogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccAvailabilityCatalogs.");
            const operationName = "listOccAvailabilityCatalogs";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccAvailabilityCatalogsRequest.compartmentId,
                "namespace": listOccAvailabilityCatalogsRequest.namespace,
                "id": listOccAvailabilityCatalogsRequest.id,
                "displayName": listOccAvailabilityCatalogsRequest.displayName,
                "catalogState": listOccAvailabilityCatalogsRequest.catalogState,
                "limit": listOccAvailabilityCatalogsRequest.limit,
                "page": listOccAvailabilityCatalogsRequest.page,
                "sortOrder": listOccAvailabilityCatalogsRequest.sortOrder,
                "sortBy": listOccAvailabilityCatalogsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccAvailabilityCatalogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccAvailabilityCatalogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCatalogCollection",
                    bodyModel: model.OccAvailabilityCatalogCollection,
                    type: "model.OccAvailabilityCatalogCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * An internal api to list availability catalogs.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccAvailabilityCatalogsInternalRequest
     * @return ListOccAvailabilityCatalogsInternalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccAvailabilityCatalogsInternal.ts.html |here} to see how to use ListOccAvailabilityCatalogsInternal API.
     */
    listOccAvailabilityCatalogsInternal(listOccAvailabilityCatalogsInternalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccAvailabilityCatalogsInternal.");
            const operationName = "listOccAvailabilityCatalogsInternal";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccAvailabilityCatalogsInternalRequest.compartmentId,
                "namespace": listOccAvailabilityCatalogsInternalRequest.namespace,
                "id": listOccAvailabilityCatalogsInternalRequest.id,
                "displayName": listOccAvailabilityCatalogsInternalRequest.displayName,
                "catalogState": listOccAvailabilityCatalogsInternalRequest.catalogState,
                "occCustomerGroupId": listOccAvailabilityCatalogsInternalRequest.occCustomerGroupId,
                "limit": listOccAvailabilityCatalogsInternalRequest.limit,
                "page": listOccAvailabilityCatalogsInternalRequest.page,
                "sortOrder": listOccAvailabilityCatalogsInternalRequest.sortOrder,
                "sortBy": listOccAvailabilityCatalogsInternalRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccAvailabilityCatalogsInternalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccAvailabilityCatalogsInternalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occAvailabilityCatalogs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCatalogCollection",
                    bodyModel: model.OccAvailabilityCatalogCollection,
                    type: "model.OccAvailabilityCatalogCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all capacity requests.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccCapacityRequestsRequest
     * @return ListOccCapacityRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccCapacityRequests.ts.html |here} to see how to use ListOccCapacityRequests API.
     */
    listOccCapacityRequests(listOccCapacityRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccCapacityRequests.");
            const operationName = "listOccCapacityRequests";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccCapacityRequestsRequest.compartmentId,
                "occAvailabilityCatalogId": listOccCapacityRequestsRequest.occAvailabilityCatalogId,
                "namespace": listOccCapacityRequestsRequest.namespace,
                "requestType": listOccCapacityRequestsRequest.requestType,
                "displayName": listOccCapacityRequestsRequest.displayName,
                "id": listOccCapacityRequestsRequest.id,
                "limit": listOccCapacityRequestsRequest.limit,
                "page": listOccCapacityRequestsRequest.page,
                "sortOrder": listOccCapacityRequestsRequest.sortOrder,
                "sortBy": listOccCapacityRequestsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccCapacityRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccCapacityRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequestCollection",
                    bodyModel: model.OccCapacityRequestCollection,
                    type: "model.OccCapacityRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * An internal api to list all capacity requests.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccCapacityRequestsInternalRequest
     * @return ListOccCapacityRequestsInternalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccCapacityRequestsInternal.ts.html |here} to see how to use ListOccCapacityRequestsInternal API.
     */
    listOccCapacityRequestsInternal(listOccCapacityRequestsInternalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccCapacityRequestsInternal.");
            const operationName = "listOccCapacityRequestsInternal";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccCapacityRequestsInternalRequest.compartmentId,
                "occCustomerGroupId": listOccCapacityRequestsInternalRequest.occCustomerGroupId,
                "occAvailabilityCatalogId": listOccCapacityRequestsInternalRequest.occAvailabilityCatalogId,
                "namespace": listOccCapacityRequestsInternalRequest.namespace,
                "displayName": listOccCapacityRequestsInternalRequest.displayName,
                "requestType": listOccCapacityRequestsInternalRequest.requestType,
                "id": listOccCapacityRequestsInternalRequest.id,
                "limit": listOccCapacityRequestsInternalRequest.limit,
                "page": listOccCapacityRequestsInternalRequest.page,
                "sortOrder": listOccCapacityRequestsInternalRequest.sortOrder,
                "sortBy": listOccCapacityRequestsInternalRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccCapacityRequestsInternalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccCapacityRequestsInternalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occCapacityRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequestCollection",
                    bodyModel: model.OccCapacityRequestCollection,
                    type: "model.OccCapacityRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all the customer groups.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccCustomerGroupsRequest
     * @return ListOccCustomerGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccCustomerGroups.ts.html |here} to see how to use ListOccCustomerGroups API.
     */
    listOccCustomerGroups(listOccCustomerGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccCustomerGroups.");
            const operationName = "listOccCustomerGroups";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccCustomerGroupsRequest.compartmentId,
                "status": listOccCustomerGroupsRequest.status,
                "displayName": listOccCustomerGroupsRequest.displayName,
                "id": listOccCustomerGroupsRequest.id,
                "limit": listOccCustomerGroupsRequest.limit,
                "page": listOccCustomerGroupsRequest.page,
                "sortOrder": listOccCustomerGroupsRequest.sortOrder,
                "sortBy": listOccCustomerGroupsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccCustomerGroupsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccCustomerGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCustomerGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCustomerGroupCollection",
                    bodyModel: model.OccCustomerGroupCollection,
                    type: "model.OccCustomerGroupCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * List details about a given occHandoverResourceBlock.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccHandoverResourceBlockDetailsRequest
     * @return ListOccHandoverResourceBlockDetailsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccHandoverResourceBlockDetails.ts.html |here} to see how to use ListOccHandoverResourceBlockDetails API.
     */
    listOccHandoverResourceBlockDetails(listOccHandoverResourceBlockDetailsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccHandoverResourceBlockDetails.");
            const operationName = "listOccHandoverResourceBlockDetails";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "occHandoverResourceBlockId": listOccHandoverResourceBlockDetailsRequest.occHandoverResourceBlockId,
                "hostId": listOccHandoverResourceBlockDetailsRequest.hostId,
                "limit": listOccHandoverResourceBlockDetailsRequest.limit,
                "page": listOccHandoverResourceBlockDetailsRequest.page,
                "sortOrder": listOccHandoverResourceBlockDetailsRequest.sortOrder,
                "sortBy": listOccHandoverResourceBlockDetailsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccHandoverResourceBlockDetailsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccHandoverResourceBlockDetailsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occHandoverResourceBlockDetails",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occHandoverResourceBlockDetailCollection",
                    bodyModel: model.OccHandoverResourceBlockDetailCollection,
                    type: "model.OccHandoverResourceBlockDetailCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * List Occ Handover Resource blocks.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccHandoverResourceBlocksRequest
     * @return ListOccHandoverResourceBlocksResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccHandoverResourceBlocks.ts.html |here} to see how to use ListOccHandoverResourceBlocks API.
     */
    listOccHandoverResourceBlocks(listOccHandoverResourceBlocksRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccHandoverResourceBlocks.");
            const operationName = "listOccHandoverResourceBlocks";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "namespace": listOccHandoverResourceBlocksRequest.namespace,
                "compartmentId": listOccHandoverResourceBlocksRequest.compartmentId,
                "handoverResourceName": listOccHandoverResourceBlocksRequest.handoverResourceName,
                "handoverDateGreaterThanOrEqualTo": listOccHandoverResourceBlocksRequest.handoverDateGreaterThanOrEqualTo,
                "handoverDateLessThanOrEqualTo": listOccHandoverResourceBlocksRequest.handoverDateLessThanOrEqualTo,
                "occHandoverResourceBlockId": listOccHandoverResourceBlocksRequest.occHandoverResourceBlockId,
                "limit": listOccHandoverResourceBlocksRequest.limit,
                "page": listOccHandoverResourceBlocksRequest.page,
                "sortOrder": listOccHandoverResourceBlocksRequest.sortOrder,
                "sortBy": listOccHandoverResourceBlocksRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccHandoverResourceBlocksRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccHandoverResourceBlocksRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occHandoverResourceBlocks",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occHandoverResourceBlockCollection",
                    bodyModel: model.OccHandoverResourceBlockCollection,
                    type: "model.OccHandoverResourceBlockCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists an overview of all resources in that namespace in a given time interval.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccOverviewsRequest
     * @return ListOccOverviewsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccOverviews.ts.html |here} to see how to use ListOccOverviews API.
     */
    listOccOverviews(listOccOverviewsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccOverviews.");
            const operationName = "listOccOverviews";
            const apiReferenceLink = "";
            const pathParams = {
                "{namespace}": listOccOverviewsRequest.namespace
            };
            const queryParams = {
                "compartmentId": listOccOverviewsRequest.compartmentId,
                "from": listOccOverviewsRequest.from,
                "to": listOccOverviewsRequest.to,
                "workloadType": listOccOverviewsRequest.workloadType,
                "limit": listOccOverviewsRequest.limit,
                "page": listOccOverviewsRequest.page,
                "sortOrder": listOccOverviewsRequest.sortOrder,
                "sortBy": listOccOverviewsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccOverviewsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccOverviewsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespace/{namespace}/occOverview",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occOverviewCollection",
                    bodyModel: model.OccOverviewCollection,
                    type: "model.OccOverviewCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the OccCapacityRequest by evaluating a sequence of instructions.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchInternalOccCapacityRequestRequest
     * @return PatchInternalOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/PatchInternalOccCapacityRequest.ts.html |here} to see how to use PatchInternalOccCapacityRequest API.
     */
    patchInternalOccCapacityRequest(patchInternalOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#patchInternalOccCapacityRequest.");
            const operationName = "patchInternalOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCapacityRequestId}": patchInternalOccCapacityRequestRequest.occCapacityRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": patchInternalOccCapacityRequestRequest.ifMatch,
                "opc-request-id": patchInternalOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchInternalOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occCapacityRequests/{occCapacityRequestId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchInternalOccCapacityRequestRequest.patchOccCapacityRequestDetails, "PatchOccCapacityRequestDetails", model.PatchOccCapacityRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequest",
                    bodyModel: model.OccCapacityRequest,
                    type: "model.OccCapacityRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the OccCapacityRequest by evaluating a sequence of instructions.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchOccCapacityRequestRequest
     * @return PatchOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/PatchOccCapacityRequest.ts.html |here} to see how to use PatchOccCapacityRequest API.
     */
    patchOccCapacityRequest(patchOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#patchOccCapacityRequest.");
            const operationName = "patchOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCapacityRequestId}": patchOccCapacityRequestRequest.occCapacityRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": patchOccCapacityRequestRequest.ifMatch,
                "opc-request-id": patchOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests/{occCapacityRequestId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchOccCapacityRequestRequest.patchOccCapacityRequestDetails, "PatchOccCapacityRequestDetails", model.PatchOccCapacityRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequest",
                    bodyModel: model.OccCapacityRequest,
                    type: "model.OccCapacityRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Publishes the version of availability catalog specified by the operator. This makes that catalog version visible to customers.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PublishOccAvailabilityCatalogRequest
     * @return PublishOccAvailabilityCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/PublishOccAvailabilityCatalog.ts.html |here} to see how to use PublishOccAvailabilityCatalog API.
     */
    publishOccAvailabilityCatalog(publishOccAvailabilityCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#publishOccAvailabilityCatalog.");
            const operationName = "publishOccAvailabilityCatalog";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": publishOccAvailabilityCatalogRequest.occAvailabilityCatalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": publishOccAvailabilityCatalogRequest.opcRetryToken,
                "opc-request-id": publishOccAvailabilityCatalogRequest.opcRequestId,
                "if-match": publishOccAvailabilityCatalogRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, publishOccAvailabilityCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}/actions/publish",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The internal api to update the capacity request. This api will be used by operators for updating the capacity request to either completed, resubmitted or rejected.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateInternalOccCapacityRequestRequest
     * @return UpdateInternalOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateInternalOccCapacityRequest.ts.html |here} to see how to use UpdateInternalOccCapacityRequest API.
     */
    updateInternalOccCapacityRequest(updateInternalOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#updateInternalOccCapacityRequest.");
            const operationName = "updateInternalOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCapacityRequestId}": updateInternalOccCapacityRequestRequest.occCapacityRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateInternalOccCapacityRequestRequest.ifMatch,
                "opc-request-id": updateInternalOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateInternalOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occCapacityRequests/{occCapacityRequestId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateInternalOccCapacityRequestRequest.updateInternalOccCapacityRequestDetails, "UpdateInternalOccCapacityRequestDetails", model.UpdateInternalOccCapacityRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequest",
                    bodyModel: model.OccCapacityRequest,
                    type: "model.OccCapacityRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The request to update the availability catalog. Currently only freeform tags can be updated via this api.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOccAvailabilityCatalogRequest
     * @return UpdateOccAvailabilityCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateOccAvailabilityCatalog.ts.html |here} to see how to use UpdateOccAvailabilityCatalog API.
     */
    updateOccAvailabilityCatalog(updateOccAvailabilityCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#updateOccAvailabilityCatalog.");
            const operationName = "updateOccAvailabilityCatalog";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": updateOccAvailabilityCatalogRequest.occAvailabilityCatalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOccAvailabilityCatalogRequest.ifMatch,
                "opc-request-id": updateOccAvailabilityCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOccAvailabilityCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOccAvailabilityCatalogRequest.updateOccAvailabilityCatalogDetails, "UpdateOccAvailabilityCatalogDetails", model.UpdateOccAvailabilityCatalogDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCatalog",
                    bodyModel: model.OccAvailabilityCatalog,
                    type: "model.OccAvailabilityCatalog",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The request to update the capacity request. The user can perform actions like closing a partially completed request so that it doesn't go ahead for full completion.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOccCapacityRequestRequest
     * @return UpdateOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateOccCapacityRequest.ts.html |here} to see how to use UpdateOccCapacityRequest API.
     */
    updateOccCapacityRequest(updateOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#updateOccCapacityRequest.");
            const operationName = "updateOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCapacityRequestId}": updateOccCapacityRequestRequest.occCapacityRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOccCapacityRequestRequest.ifMatch,
                "opc-request-id": updateOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests/{occCapacityRequestId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOccCapacityRequestRequest.updateOccCapacityRequestDetails, "UpdateOccCapacityRequestDetails", model.UpdateOccCapacityRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequest",
                    bodyModel: model.OccCapacityRequest,
                    type: "model.OccCapacityRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The request to update the customer.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOccCustomerRequest
     * @return UpdateOccCustomerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateOccCustomer.ts.html |here} to see how to use UpdateOccCustomer API.
     */
    updateOccCustomer(updateOccCustomerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#updateOccCustomer.");
            const operationName = "updateOccCustomer";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCustomerGroupId}": updateOccCustomerRequest.occCustomerGroupId,
                "{occCustomerId}": updateOccCustomerRequest.occCustomerId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOccCustomerRequest.ifMatch,
                "opc-request-id": updateOccCustomerRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOccCustomerRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCustomerGroups/{occCustomerGroupId}/occCustomers/{occCustomerId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOccCustomerRequest.updateOccCustomerDetails, "UpdateOccCustomerDetails", model.UpdateOccCustomerDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCustomer",
                    bodyModel: model.OccCustomer,
                    type: "model.OccCustomer",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The request to update the customer group.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOccCustomerGroupRequest
     * @return UpdateOccCustomerGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateOccCustomerGroup.ts.html |here} to see how to use UpdateOccCustomerGroup API.
     */
    updateOccCustomerGroup(updateOccCustomerGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#updateOccCustomerGroup.");
            const operationName = "updateOccCustomerGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCustomerGroupId}": updateOccCustomerGroupRequest.occCustomerGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOccCustomerGroupRequest.ifMatch,
                "opc-request-id": updateOccCustomerGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOccCustomerGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCustomerGroups/{occCustomerGroupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOccCustomerGroupRequest.updateOccCustomerGroupDetails, "UpdateOccCustomerGroupDetails", model.UpdateOccCustomerGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCustomerGroup",
                    bodyModel: model.OccCustomerGroup,
                    type: "model.OccCustomerGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.CapacityManagementClient = CapacityManagementClient;
CapacityManagementClient.serviceEndpointTemplate = "https://control-center-cp.{region}.oci.{secondLevelDomain}";
CapacityManagementClient.endpointServiceName = "control-center-cp";
var DemandSignalApiKeys;
(function (DemandSignalApiKeys) {
})(DemandSignalApiKeys = exports.DemandSignalApiKeys || (exports.DemandSignalApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class DemandSignalClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "DemandSignal";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("capacitymanagement")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("capacitymanagement");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20231107";
        if (this.logger)
            this.logger.info(`DemandSignalClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DemandSignalClient.serviceEndpointTemplate, this._region, DemandSignalClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DemandSignalClient.serviceEndpointTemplate, this._regionId, DemandSignalClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DemandSignalClient.serviceEndpointTemplate, region, DemandSignalClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DemandSignalClient.serviceEndpointTemplate, regionId, DemandSignalClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new DemandSignalWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new demandsignal_waiter_1.DemandSignalWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * This API will help in bulk creation of demand signal items. This API is atomic i.e either all the demand signal item resources will be created or none will be created.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param BulkCreateOccmDemandSignalItemRequest
     * @return BulkCreateOccmDemandSignalItemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/BulkCreateOccmDemandSignalItem.ts.html |here} to see how to use BulkCreateOccmDemandSignalItem API.
     */
    bulkCreateOccmDemandSignalItem(bulkCreateOccmDemandSignalItemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#bulkCreateOccmDemandSignalItem.");
            const operationName = "bulkCreateOccmDemandSignalItem";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": bulkCreateOccmDemandSignalItemRequest.opcRetryToken,
                "opc-request-id": bulkCreateOccmDemandSignalItemRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, bulkCreateOccmDemandSignalItemRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignalItems/actions/bulkCreateDemandSignalItems",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(bulkCreateOccmDemandSignalItemRequest.bulkCreateOccmDemandSignalItemDetails, "BulkCreateOccmDemandSignalItemDetails", model.BulkCreateOccmDemandSignalItemDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a post API to create occm demand signal.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOccmDemandSignalRequest
     * @return CreateOccmDemandSignalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/CreateOccmDemandSignal.ts.html |here} to see how to use CreateOccmDemandSignal API.
     */
    createOccmDemandSignal(createOccmDemandSignalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#createOccmDemandSignal.");
            const operationName = "createOccmDemandSignal";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOccmDemandSignalRequest.opcRetryToken,
                "opc-request-id": createOccmDemandSignalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOccmDemandSignalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignals",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOccmDemandSignalRequest.createOccmDemandSignalDetails, "CreateOccmDemandSignalDetails", model.CreateOccmDemandSignalDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignal",
                    bodyModel: model.OccmDemandSignal,
                    type: "model.OccmDemandSignal",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API will create a demand signal item representing a resource request. This needs to be grouped under a demand signal.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOccmDemandSignalItemRequest
     * @return CreateOccmDemandSignalItemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/CreateOccmDemandSignalItem.ts.html |here} to see how to use CreateOccmDemandSignalItem API.
     */
    createOccmDemandSignalItem(createOccmDemandSignalItemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#createOccmDemandSignalItem.");
            const operationName = "createOccmDemandSignalItem";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOccmDemandSignalItemRequest.opcRetryToken,
                "opc-request-id": createOccmDemandSignalItemRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOccmDemandSignalItemRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignalItems",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOccmDemandSignalItemRequest.createOccmDemandSignalItemDetails, "CreateOccmDemandSignalItemDetails", model.CreateOccmDemandSignalItemDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignalItem",
                    bodyModel: model.OccmDemandSignalItem,
                    type: "model.OccmDemandSignalItem",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a DELETE API which deletes a demand signal with the provided demand signal ocid.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOccmDemandSignalRequest
     * @return DeleteOccmDemandSignalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/DeleteOccmDemandSignal.ts.html |here} to see how to use DeleteOccmDemandSignal API.
     */
    deleteOccmDemandSignal(deleteOccmDemandSignalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#deleteOccmDemandSignal.");
            const operationName = "deleteOccmDemandSignal";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalId}": deleteOccmDemandSignalRequest.occmDemandSignalId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOccmDemandSignalRequest.ifMatch,
                "opc-request-id": deleteOccmDemandSignalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOccmDemandSignalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignals/{occmDemandSignalId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a DELETE API which deletes a demand signal item with the provided demand signal item ocid.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOccmDemandSignalItemRequest
     * @return DeleteOccmDemandSignalItemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/DeleteOccmDemandSignalItem.ts.html |here} to see how to use DeleteOccmDemandSignalItem API.
     */
    deleteOccmDemandSignalItem(deleteOccmDemandSignalItemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#deleteOccmDemandSignalItem.");
            const operationName = "deleteOccmDemandSignalItem";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalItemId}": deleteOccmDemandSignalItemRequest.occmDemandSignalItemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOccmDemandSignalItemRequest.ifMatch,
                "opc-request-id": deleteOccmDemandSignalItemRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOccmDemandSignalItemRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignalItems/{occmDemandSignalItemId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a GET API which gets the detailed information about a specific demand signal.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOccmDemandSignalRequest
     * @return GetOccmDemandSignalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetOccmDemandSignal.ts.html |here} to see how to use GetOccmDemandSignal API.
     */
    getOccmDemandSignal(getOccmDemandSignalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#getOccmDemandSignal.");
            const operationName = "getOccmDemandSignal";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalId}": getOccmDemandSignalRequest.occmDemandSignalId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOccmDemandSignalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOccmDemandSignalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignals/{occmDemandSignalId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignal",
                    bodyModel: model.OccmDemandSignal,
                    type: "model.OccmDemandSignal",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a GET API to get the details of a demand signal item resource representing the details of the resource demanded by you.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOccmDemandSignalItemRequest
     * @return GetOccmDemandSignalItemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetOccmDemandSignalItem.ts.html |here} to see how to use GetOccmDemandSignalItem API.
     */
    getOccmDemandSignalItem(getOccmDemandSignalItemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#getOccmDemandSignalItem.");
            const operationName = "getOccmDemandSignalItem";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalItemId}": getOccmDemandSignalItemRequest.occmDemandSignalItemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOccmDemandSignalItemRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOccmDemandSignalItemRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignalItems/{occmDemandSignalItemId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignalItem",
                    bodyModel: model.OccmDemandSignalItem,
                    type: "model.OccmDemandSignalItem",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API will list all the  resources across all demand signal catalogs for a given namespace and customer group containing the caller compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccmDemandSignalCatalogResourcesRequest
     * @return ListOccmDemandSignalCatalogResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccmDemandSignalCatalogResources.ts.html |here} to see how to use ListOccmDemandSignalCatalogResources API.
     */
    listOccmDemandSignalCatalogResources(listOccmDemandSignalCatalogResourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#listOccmDemandSignalCatalogResources.");
            const operationName = "listOccmDemandSignalCatalogResources";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccmDemandSignalCatalogResourcesRequest.compartmentId,
                "name": listOccmDemandSignalCatalogResourcesRequest.name,
                "demandSignalNamespace": listOccmDemandSignalCatalogResourcesRequest.demandSignalNamespace,
                "limit": listOccmDemandSignalCatalogResourcesRequest.limit,
                "page": listOccmDemandSignalCatalogResourcesRequest.page,
                "sortOrder": listOccmDemandSignalCatalogResourcesRequest.sortOrder,
                "sortBy": listOccmDemandSignalCatalogResourcesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccmDemandSignalCatalogResourcesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccmDemandSignalCatalogResourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignalCatalogResources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignalCatalogResourceCollection",
                    bodyModel: model.OccmDemandSignalCatalogResourceCollection,
                    type: "model.OccmDemandSignalCatalogResourceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This GET call is used to list all demand signals delivery resources within the compartment passed as a query param.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccmDemandSignalDeliveriesRequest
     * @return ListOccmDemandSignalDeliveriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccmDemandSignalDeliveries.ts.html |here} to see how to use ListOccmDemandSignalDeliveries API.
     */
    listOccmDemandSignalDeliveries(listOccmDemandSignalDeliveriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#listOccmDemandSignalDeliveries.");
            const operationName = "listOccmDemandSignalDeliveries";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccmDemandSignalDeliveriesRequest.compartmentId,
                "id": listOccmDemandSignalDeliveriesRequest.id,
                "occmDemandSignalItemId": listOccmDemandSignalDeliveriesRequest.occmDemandSignalItemId,
                "limit": listOccmDemandSignalDeliveriesRequest.limit,
                "page": listOccmDemandSignalDeliveriesRequest.page,
                "sortOrder": listOccmDemandSignalDeliveriesRequest.sortOrder,
                "sortBy": listOccmDemandSignalDeliveriesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccmDemandSignalDeliveriesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccmDemandSignalDeliveriesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignalDeliveries",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignalDeliveryCollection",
                    bodyModel: model.OccmDemandSignalDeliveryCollection,
                    type: "model.OccmDemandSignalDeliveryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API will list the detailed information about the resources demanded as part of the demand signal.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccmDemandSignalItemsRequest
     * @return ListOccmDemandSignalItemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccmDemandSignalItems.ts.html |here} to see how to use ListOccmDemandSignalItems API.
     */
    listOccmDemandSignalItems(listOccmDemandSignalItemsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#listOccmDemandSignalItems.");
            const operationName = "listOccmDemandSignalItems";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccmDemandSignalItemsRequest.compartmentId,
                "occmDemandSignalId": listOccmDemandSignalItemsRequest.occmDemandSignalId,
                "resourceName": listOccmDemandSignalItemsRequest.resourceName,
                "demandSignalNamespace": listOccmDemandSignalItemsRequest.demandSignalNamespace,
                "limit": listOccmDemandSignalItemsRequest.limit,
                "page": listOccmDemandSignalItemsRequest.page,
                "sortOrder": listOccmDemandSignalItemsRequest.sortOrder,
                "sortBy": listOccmDemandSignalItemsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccmDemandSignalItemsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccmDemandSignalItemsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignalItems",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignalItemCollection",
                    bodyModel: model.OccmDemandSignalItemCollection,
                    type: "model.OccmDemandSignalItemCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This GET call is used to list all demand signals within the compartment passed as a query parameter.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccmDemandSignalsRequest
     * @return ListOccmDemandSignalsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListOccmDemandSignals.ts.html |here} to see how to use ListOccmDemandSignals API.
     */
    listOccmDemandSignals(listOccmDemandSignalsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#listOccmDemandSignals.");
            const operationName = "listOccmDemandSignals";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccmDemandSignalsRequest.compartmentId,
                "id": listOccmDemandSignalsRequest.id,
                "lifecycleDetails": listOccmDemandSignalsRequest.lifecycleDetails,
                "displayName": listOccmDemandSignalsRequest.displayName,
                "limit": listOccmDemandSignalsRequest.limit,
                "page": listOccmDemandSignalsRequest.page,
                "sortOrder": listOccmDemandSignalsRequest.sortOrder,
                "sortBy": listOccmDemandSignalsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccmDemandSignalsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccmDemandSignalsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignals",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignalCollection",
                    bodyModel: model.OccmDemandSignalCollection,
                    type: "model.OccmDemandSignalCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a PUT API which shall be used to update the metadata of the demand signal.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOccmDemandSignalRequest
     * @return UpdateOccmDemandSignalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateOccmDemandSignal.ts.html |here} to see how to use UpdateOccmDemandSignal API.
     */
    updateOccmDemandSignal(updateOccmDemandSignalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#updateOccmDemandSignal.");
            const operationName = "updateOccmDemandSignal";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalId}": updateOccmDemandSignalRequest.occmDemandSignalId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOccmDemandSignalRequest.ifMatch,
                "opc-request-id": updateOccmDemandSignalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOccmDemandSignalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignals/{occmDemandSignalId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOccmDemandSignalRequest.updateOccmDemandSignalDetails, "UpdateOccmDemandSignalDetails", model.UpdateOccmDemandSignalDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignal",
                    bodyModel: model.OccmDemandSignal,
                    type: "model.OccmDemandSignal",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a PUT API which can be used to update the demand signal item resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOccmDemandSignalItemRequest
     * @return UpdateOccmDemandSignalItemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateOccmDemandSignalItem.ts.html |here} to see how to use UpdateOccmDemandSignalItem API.
     */
    updateOccmDemandSignalItem(updateOccmDemandSignalItemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DemandSignalClient#updateOccmDemandSignalItem.");
            const operationName = "updateOccmDemandSignalItem";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalItemId}": updateOccmDemandSignalItemRequest.occmDemandSignalItemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOccmDemandSignalItemRequest.ifMatch,
                "opc-request-id": updateOccmDemandSignalItemRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOccmDemandSignalItemRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occmDemandSignalItems/{occmDemandSignalItemId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOccmDemandSignalItemRequest.updateOccmDemandSignalItemDetails, "UpdateOccmDemandSignalItemDetails", model.UpdateOccmDemandSignalItemDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignalItem",
                    bodyModel: model.OccmDemandSignalItem,
                    type: "model.OccmDemandSignalItem",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DemandSignalClient = DemandSignalClient;
DemandSignalClient.serviceEndpointTemplate = "https://control-center-cp.{region}.oci.{secondLevelDomain}";
DemandSignalClient.endpointServiceName = "control-center-cp";
var InternalDemandSignalApiKeys;
(function (InternalDemandSignalApiKeys) {
})(InternalDemandSignalApiKeys = exports.InternalDemandSignalApiKeys || (exports.InternalDemandSignalApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class InternalDemandSignalClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "InternalDemandSignal";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("capacitymanagement")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("capacitymanagement");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20231107";
        if (this.logger)
            this.logger.info(`InternalDemandSignalClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(InternalDemandSignalClient.serviceEndpointTemplate, this._region, InternalDemandSignalClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(InternalDemandSignalClient.serviceEndpointTemplate, this._regionId, InternalDemandSignalClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(InternalDemandSignalClient.serviceEndpointTemplate, region, InternalDemandSignalClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(InternalDemandSignalClient.serviceEndpointTemplate, regionId, InternalDemandSignalClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new InternalDemandSignalWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new internaldemandsignal_waiter_1.InternalDemandSignalWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * This is a post API which is used to create a demand signal delivery resource.
     * operationId: CreateInternalOccmDemandSignalDelivery
     * summary: A post call to create a demand signal delivery.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateInternalOccmDemandSignalDeliveryRequest
     * @return CreateInternalOccmDemandSignalDeliveryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/CreateInternalOccmDemandSignalDelivery.ts.html |here} to see how to use CreateInternalOccmDemandSignalDelivery API.
     */
    createInternalOccmDemandSignalDelivery(createInternalOccmDemandSignalDeliveryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#createInternalOccmDemandSignalDelivery.");
            const operationName = "createInternalOccmDemandSignalDelivery";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createInternalOccmDemandSignalDeliveryRequest.opcRetryToken,
                "opc-request-id": createInternalOccmDemandSignalDeliveryRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createInternalOccmDemandSignalDeliveryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignalDeliveries",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createInternalOccmDemandSignalDeliveryRequest.createInternalOccmDemandSignalDeliveryDetails, "CreateInternalOccmDemandSignalDeliveryDetails", model.CreateInternalOccmDemandSignalDeliveryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internalOccmDemandSignalDelivery",
                    bodyModel: model.InternalOccmDemandSignalDelivery,
                    type: "model.InternalOccmDemandSignalDelivery",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is an internal DELETE API which is used to delete a demand signal delivery resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteInternalOccmDemandSignalDeliveryRequest
     * @return DeleteInternalOccmDemandSignalDeliveryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/DeleteInternalOccmDemandSignalDelivery.ts.html |here} to see how to use DeleteInternalOccmDemandSignalDelivery API.
     */
    deleteInternalOccmDemandSignalDelivery(deleteInternalOccmDemandSignalDeliveryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#deleteInternalOccmDemandSignalDelivery.");
            const operationName = "deleteInternalOccmDemandSignalDelivery";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalDeliveryId}": deleteInternalOccmDemandSignalDeliveryRequest.occmDemandSignalDeliveryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteInternalOccmDemandSignalDeliveryRequest.opcRequestId,
                "if-match": deleteInternalOccmDemandSignalDeliveryRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteInternalOccmDemandSignalDeliveryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignalDeliveries/{occmDemandSignalDeliveryId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is an internal GET API which gets the detailed information about a specific demand signal.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetInternalOccmDemandSignalRequest
     * @return GetInternalOccmDemandSignalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetInternalOccmDemandSignal.ts.html |here} to see how to use GetInternalOccmDemandSignal API.
     */
    getInternalOccmDemandSignal(getInternalOccmDemandSignalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#getInternalOccmDemandSignal.");
            const operationName = "getInternalOccmDemandSignal";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalId}": getInternalOccmDemandSignalRequest.occmDemandSignalId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getInternalOccmDemandSignalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getInternalOccmDemandSignalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignals/{occmDemandSignalId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internalOccmDemandSignal",
                    bodyModel: model.InternalOccmDemandSignal,
                    type: "model.InternalOccmDemandSignal",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API helps in getting the details about a specific occm demand signal catalog.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetInternalOccmDemandSignalCatalogRequest
     * @return GetInternalOccmDemandSignalCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetInternalOccmDemandSignalCatalog.ts.html |here} to see how to use GetInternalOccmDemandSignalCatalog API.
     */
    getInternalOccmDemandSignalCatalog(getInternalOccmDemandSignalCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#getInternalOccmDemandSignalCatalog.");
            const operationName = "getInternalOccmDemandSignalCatalog";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalCatalogId}": getInternalOccmDemandSignalCatalogRequest.occmDemandSignalCatalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getInternalOccmDemandSignalCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getInternalOccmDemandSignalCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignalCatalog/{occmDemandSignalCatalogId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignalCatalog",
                    bodyModel: model.OccmDemandSignalCatalog,
                    type: "model.OccmDemandSignalCatalog",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is an internal GET API to get the details of a demand signal delivery resource corresponding to a demand signal item.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetInternalOccmDemandSignalDeliveryRequest
     * @return GetInternalOccmDemandSignalDeliveryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/GetInternalOccmDemandSignalDelivery.ts.html |here} to see how to use GetInternalOccmDemandSignalDelivery API.
     */
    getInternalOccmDemandSignalDelivery(getInternalOccmDemandSignalDeliveryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#getInternalOccmDemandSignalDelivery.");
            const operationName = "getInternalOccmDemandSignalDelivery";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalDeliveryId}": getInternalOccmDemandSignalDeliveryRequest.occmDemandSignalDeliveryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getInternalOccmDemandSignalDeliveryRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getInternalOccmDemandSignalDeliveryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignalDeliveries/{occmDemandSignalDeliveryId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internalOccmDemandSignalDelivery",
                    bodyModel: model.InternalOccmDemandSignalDelivery,
                    type: "model.InternalOccmDemandSignalDelivery",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API will list all the  resources across all demand signal catalogs for a given namespace and customer group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListInternalOccmDemandSignalCatalogResourcesRequest
     * @return ListInternalOccmDemandSignalCatalogResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListInternalOccmDemandSignalCatalogResources.ts.html |here} to see how to use ListInternalOccmDemandSignalCatalogResources API.
     */
    listInternalOccmDemandSignalCatalogResources(listInternalOccmDemandSignalCatalogResourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#listInternalOccmDemandSignalCatalogResources.");
            const operationName = "listInternalOccmDemandSignalCatalogResources";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInternalOccmDemandSignalCatalogResourcesRequest.compartmentId,
                "occCustomerGroupId": listInternalOccmDemandSignalCatalogResourcesRequest.occCustomerGroupId,
                "occmDemandSignalCatalogId": listInternalOccmDemandSignalCatalogResourcesRequest.occmDemandSignalCatalogId,
                "name": listInternalOccmDemandSignalCatalogResourcesRequest.name,
                "demandSignalNamespace": listInternalOccmDemandSignalCatalogResourcesRequest.demandSignalNamespace,
                "limit": listInternalOccmDemandSignalCatalogResourcesRequest.limit,
                "page": listInternalOccmDemandSignalCatalogResourcesRequest.page,
                "sortOrder": listInternalOccmDemandSignalCatalogResourcesRequest.sortOrder,
                "sortBy": listInternalOccmDemandSignalCatalogResourcesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInternalOccmDemandSignalCatalogResourcesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listInternalOccmDemandSignalCatalogResourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignalCatalogResources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internalOccmDemandSignalCatalogResourceCollection",
                    bodyModel: model.InternalOccmDemandSignalCatalogResourceCollection,
                    type: "model.InternalOccmDemandSignalCatalogResourceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API will list demand signal catalogs for a given customer group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListInternalOccmDemandSignalCatalogsRequest
     * @return ListInternalOccmDemandSignalCatalogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListInternalOccmDemandSignalCatalogs.ts.html |here} to see how to use ListInternalOccmDemandSignalCatalogs API.
     */
    listInternalOccmDemandSignalCatalogs(listInternalOccmDemandSignalCatalogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#listInternalOccmDemandSignalCatalogs.");
            const operationName = "listInternalOccmDemandSignalCatalogs";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInternalOccmDemandSignalCatalogsRequest.compartmentId,
                "occCustomerGroupId": listInternalOccmDemandSignalCatalogsRequest.occCustomerGroupId,
                "displayName": listInternalOccmDemandSignalCatalogsRequest.displayName,
                "limit": listInternalOccmDemandSignalCatalogsRequest.limit,
                "page": listInternalOccmDemandSignalCatalogsRequest.page,
                "sortOrder": listInternalOccmDemandSignalCatalogsRequest.sortOrder,
                "sortBy": listInternalOccmDemandSignalCatalogsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInternalOccmDemandSignalCatalogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listInternalOccmDemandSignalCatalogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignalCatalog",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occmDemandSignalCatalogCollection",
                    bodyModel: model.OccmDemandSignalCatalogCollection,
                    type: "model.OccmDemandSignalCatalogCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This GET call is used to list all demand signal delivery resources within the customer group passed as a query parameter.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListInternalOccmDemandSignalDeliveriesRequest
     * @return ListInternalOccmDemandSignalDeliveriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListInternalOccmDemandSignalDeliveries.ts.html |here} to see how to use ListInternalOccmDemandSignalDeliveries API.
     */
    listInternalOccmDemandSignalDeliveries(listInternalOccmDemandSignalDeliveriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#listInternalOccmDemandSignalDeliveries.");
            const operationName = "listInternalOccmDemandSignalDeliveries";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInternalOccmDemandSignalDeliveriesRequest.compartmentId,
                "occCustomerGroupId": listInternalOccmDemandSignalDeliveriesRequest.occCustomerGroupId,
                "id": listInternalOccmDemandSignalDeliveriesRequest.id,
                "occmDemandSignalItemId": listInternalOccmDemandSignalDeliveriesRequest.occmDemandSignalItemId,
                "limit": listInternalOccmDemandSignalDeliveriesRequest.limit,
                "page": listInternalOccmDemandSignalDeliveriesRequest.page,
                "sortOrder": listInternalOccmDemandSignalDeliveriesRequest.sortOrder,
                "sortBy": listInternalOccmDemandSignalDeliveriesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInternalOccmDemandSignalDeliveriesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listInternalOccmDemandSignalDeliveriesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignalDeliveries",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internalOccmDemandSignalDeliveryCollection",
                    bodyModel: model.InternalOccmDemandSignalDeliveryCollection,
                    type: "model.InternalOccmDemandSignalDeliveryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This internal API will list the detailed information about the resources demanded as part of the demand signal.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListInternalOccmDemandSignalItemsRequest
     * @return ListInternalOccmDemandSignalItemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListInternalOccmDemandSignalItems.ts.html |here} to see how to use ListInternalOccmDemandSignalItems API.
     */
    listInternalOccmDemandSignalItems(listInternalOccmDemandSignalItemsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#listInternalOccmDemandSignalItems.");
            const operationName = "listInternalOccmDemandSignalItems";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInternalOccmDemandSignalItemsRequest.compartmentId,
                "occCustomerGroupId": listInternalOccmDemandSignalItemsRequest.occCustomerGroupId,
                "occmDemandSignalId": listInternalOccmDemandSignalItemsRequest.occmDemandSignalId,
                "resourceName": listInternalOccmDemandSignalItemsRequest.resourceName,
                "demandSignalNamespace": listInternalOccmDemandSignalItemsRequest.demandSignalNamespace,
                "limit": listInternalOccmDemandSignalItemsRequest.limit,
                "page": listInternalOccmDemandSignalItemsRequest.page,
                "sortOrder": listInternalOccmDemandSignalItemsRequest.sortOrder,
                "sortBy": listInternalOccmDemandSignalItemsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInternalOccmDemandSignalItemsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listInternalOccmDemandSignalItemsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignalItems",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internalOccmDemandSignalItemCollection",
                    bodyModel: model.InternalOccmDemandSignalItemCollection,
                    type: "model.InternalOccmDemandSignalItemCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is an internal GET call is used to list all demand signals within the compartment passed as a query parameter.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListInternalOccmDemandSignalsRequest
     * @return ListInternalOccmDemandSignalsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/ListInternalOccmDemandSignals.ts.html |here} to see how to use ListInternalOccmDemandSignals API.
     */
    listInternalOccmDemandSignals(listInternalOccmDemandSignalsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#listInternalOccmDemandSignals.");
            const operationName = "listInternalOccmDemandSignals";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInternalOccmDemandSignalsRequest.compartmentId,
                "occCustomerGroupId": listInternalOccmDemandSignalsRequest.occCustomerGroupId,
                "id": listInternalOccmDemandSignalsRequest.id,
                "lifecycleDetails": listInternalOccmDemandSignalsRequest.lifecycleDetails,
                "displayName": listInternalOccmDemandSignalsRequest.displayName,
                "limit": listInternalOccmDemandSignalsRequest.limit,
                "page": listInternalOccmDemandSignalsRequest.page,
                "sortOrder": listInternalOccmDemandSignalsRequest.sortOrder,
                "sortBy": listInternalOccmDemandSignalsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInternalOccmDemandSignalsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listInternalOccmDemandSignalsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignals",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internalOccmDemandSignalCollection",
                    bodyModel: model.InternalOccmDemandSignalCollection,
                    type: "model.InternalOccmDemandSignalCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a internal PUT API which shall be used to update the metadata of the demand signal.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateInternalOccmDemandSignalRequest
     * @return UpdateInternalOccmDemandSignalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateInternalOccmDemandSignal.ts.html |here} to see how to use UpdateInternalOccmDemandSignal API.
     */
    updateInternalOccmDemandSignal(updateInternalOccmDemandSignalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#updateInternalOccmDemandSignal.");
            const operationName = "updateInternalOccmDemandSignal";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalId}": updateInternalOccmDemandSignalRequest.occmDemandSignalId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateInternalOccmDemandSignalRequest.ifMatch,
                "opc-request-id": updateInternalOccmDemandSignalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateInternalOccmDemandSignalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignals/{occmDemandSignalId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateInternalOccmDemandSignalRequest.updateInternalOccmDemandSignalDetails, "UpdateInternalOccmDemandSignalDetails", model.UpdateInternalOccmDemandSignalDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internalOccmDemandSignal",
                    bodyModel: model.InternalOccmDemandSignal,
                    type: "model.InternalOccmDemandSignal",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is an internal PUT API which is used to update the demand signal delivery resource.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateInternalOccmDemandSignalDeliveryRequest
     * @return UpdateInternalOccmDemandSignalDeliveryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/capacitymanagement/UpdateInternalOccmDemandSignalDelivery.ts.html |here} to see how to use UpdateInternalOccmDemandSignalDelivery API.
     */
    updateInternalOccmDemandSignalDelivery(updateInternalOccmDemandSignalDeliveryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation InternalDemandSignalClient#updateInternalOccmDemandSignalDelivery.");
            const operationName = "updateInternalOccmDemandSignalDelivery";
            const apiReferenceLink = "";
            const pathParams = {
                "{occmDemandSignalDeliveryId}": updateInternalOccmDemandSignalDeliveryRequest.occmDemandSignalDeliveryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateInternalOccmDemandSignalDeliveryRequest.opcRequestId,
                "if-match": updateInternalOccmDemandSignalDeliveryRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateInternalOccmDemandSignalDeliveryRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occmDemandSignalDeliveries/{occmDemandSignalDeliveryId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateInternalOccmDemandSignalDeliveryRequest.updateInternalOccmDemandSignalDeliveryDetails, "UpdateInternalOccmDemandSignalDeliveryDetails", model.UpdateInternalOccmDemandSignalDeliveryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internalOccmDemandSignalDelivery",
                    bodyModel: model.InternalOccmDemandSignalDelivery,
                    type: "model.InternalOccmDemandSignalDelivery",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.InternalDemandSignalClient = InternalDemandSignalClient;
InternalDemandSignalClient.serviceEndpointTemplate = "https://control-center-cp.{region}.oci.{secondLevelDomain}";
InternalDemandSignalClient.endpointServiceName = "control-center-cp";
//# sourceMappingURL=client.js.map