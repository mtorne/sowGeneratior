"use strict";
/**
 * OCI Managed Services for Mac API
 * Use the OCI Managed Services for Mac API to create and manage orders for dedicated, partially-managed Mac servers hosted in an OCI Data Center. For more information, see the user guide documentation for the [OCI Managed Services for Mac]()
 * OpenAPI spec version: 20250320
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MacOrder = void 0;
var MacOrder;
(function (MacOrder) {
    let Shape;
    (function (Shape) {
        Shape["M2ProMacMini32Gb1Tb"] = "M2_PRO_MAC_MINI_32GB_1TB";
        Shape["M2UltraMacStudio64Gb4Tb"] = "M2_ULTRA_MAC_STUDIO_64GB_4TB";
        Shape["M2UltraMacStudio192Gb4Tb"] = "M2_ULTRA_MAC_STUDIO_192GB_4TB";
        Shape["M4ProMacMini64Gb2Tb"] = "M4_PRO_MAC_MINI_64GB_2TB";
        Shape["M4ProMacMini64Gb4Tb"] = "M4_PRO_MAC_MINI_64GB_4TB";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Shape["UnknownValue"] = "UNKNOWN_VALUE";
    })(Shape = MacOrder.Shape || (MacOrder.Shape = {}));
    let CommitmentTerm;
    (function (CommitmentTerm) {
        CommitmentTerm["Years3"] = "YEARS_3";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        CommitmentTerm["UnknownValue"] = "UNKNOWN_VALUE";
    })(CommitmentTerm = MacOrder.CommitmentTerm || (MacOrder.CommitmentTerm = {}));
    let OrderStatus;
    (function (OrderStatus) {
        OrderStatus["Submitted"] = "SUBMITTED";
        OrderStatus["PendingDocusign"] = "PENDING_DOCUSIGN";
        OrderStatus["OrderReview"] = "ORDER_REVIEW";
        OrderStatus["CustomerReview"] = "CUSTOMER_REVIEW";
        OrderStatus["CustomerApproved"] = "CUSTOMER_APPROVED";
        OrderStatus["FundingApproved"] = "FUNDING_APPROVED";
        OrderStatus["Provisioning"] = "PROVISIONING";
        OrderStatus["CustomerAccepted"] = "CUSTOMER_ACCEPTED";
        OrderStatus["Completed"] = "COMPLETED";
        OrderStatus["Canceled"] = "CANCELED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        OrderStatus["UnknownValue"] = "UNKNOWN_VALUE";
    })(OrderStatus = MacOrder.OrderStatus || (MacOrder.OrderStatus = {}));
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Creating"] = "CREATING";
        LifecycleState["Updating"] = "UPDATING";
        LifecycleState["Active"] = "ACTIVE";
        LifecycleState["NeedsAttention"] = "NEEDS_ATTENTION";
        LifecycleState["Deleting"] = "DELETING";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = MacOrder.LifecycleState || (MacOrder.LifecycleState = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    MacOrder.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    MacOrder.getDeserializedJsonObj = getDeserializedJsonObj;
})(MacOrder = exports.MacOrder || (exports.MacOrder = {}));
//# sourceMappingURL=mac-order.js.map