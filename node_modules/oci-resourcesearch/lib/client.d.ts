/**
 * Search Service API
 * Search for resources in your cloud network.
 * OpenAPI spec version: 20180409
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
declare const Breaker: any;
export declare enum ResourceSearchApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class ResourceSearchClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Gets detailed information about a resource type by using the resource type name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetResourceTypeRequest
     * @return GetResourceTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcesearch/GetResourceType.ts.html |here} to see how to use GetResourceType API.
     */
    getResourceType(getResourceTypeRequest: requests.GetResourceTypeRequest): Promise<responses.GetResourceTypeResponse>;
    /**
     * Lists all resource types that you can search or query for.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListResourceTypesRequest
     * @return ListResourceTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcesearch/ListResourceTypes.ts.html |here} to see how to use ListResourceTypes API.
     */
    listResourceTypes(listResourceTypesRequest: requests.ListResourceTypesRequest): Promise<responses.ListResourceTypesResponse>;
    /**
     * NOTE: This function is deprecated in favor of listResourceTypesRecordIterator function.
     * Creates a new async iterator which will iterate over the models.ResourceType objects
     * contained in responses from the listResourceTypes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllResourceTypes(request: requests.ListResourceTypesRequest): AsyncIterableIterator<model.ResourceType>;
    /**
     * NOTE: This function is deprecated in favor of listResourceTypesResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listResourceTypes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllResourceTypesResponses(request: requests.ListResourceTypesRequest): AsyncIterableIterator<responses.ListResourceTypesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ResourceType objects
     * contained in responses from the listResourceTypes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listResourceTypesRecordIterator(request: requests.ListResourceTypesRequest): AsyncIterableIterator<model.ResourceType>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listResourceTypes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listResourceTypesResponseIterator(request: requests.ListResourceTypesRequest): AsyncIterableIterator<responses.ListResourceTypesResponse>;
    /**
     * Queries any and all compartments in the specified tenancy to find resources that match the specified criteria.
     * Results include resources that you have permission to view and can span different resource types.
     * You can also sort results based on a specified resource attribute.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SearchResourcesRequest
     * @return SearchResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/resourcesearch/SearchResources.ts.html |here} to see how to use SearchResources API.
     */
    searchResources(searchResourcesRequest: requests.SearchResourcesRequest): Promise<responses.SearchResourcesResponse>;
}
export {};
