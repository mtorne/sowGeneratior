"use strict";
/**
 * Threat Intelligence API
 * Use the Threat Intelligence API to search for information about known threat indicators, including suspicious IP addresses, domain names, and other digital fingerprints. Threat Intelligence is a managed database of curated threat intelligence that comes from first party Oracle security insights, open source feeds, and vendor-procured data. For more information, see the [Threat Intelligence documentation](https://docs.oracle.com/iaas/Content/threat-intel/home.htm).
 * OpenAPI spec version: 20220901
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndicatorReference = exports.ThreatTypesCollection = exports.ThreatTypeSummary = exports.ThreatType = exports.SummarizeIndicatorsDetails = exports.SortOrder = exports.LifecycleState = exports.IndicatorType = exports.IndicatorSummaryCollection = exports.IndicatorSummary = exports.IndicatorSourceSummary = exports.IndicatorRelationship = exports.IndicatorCountSummary = exports.IndicatorCountDimensions = exports.IndicatorCountCollection = exports.IndicatorAttributeSummary = exports.IndicatorAttribute = exports.Indicator = exports.GeodataDetails = exports.EntityReference = exports.DataVisibility = exports.DataAttribution = void 0;
const DataAttribution = __importStar(require("./data-attribution"));
exports.DataAttribution = DataAttribution.DataAttribution;
const DataVisibility = __importStar(require("./data-visibility"));
exports.DataVisibility = DataVisibility.DataVisibility;
const EntityReference = __importStar(require("./entity-reference"));
exports.EntityReference = EntityReference.EntityReference;
const GeodataDetails = __importStar(require("./geodata-details"));
exports.GeodataDetails = GeodataDetails.GeodataDetails;
const Indicator = __importStar(require("./indicator"));
exports.Indicator = Indicator.Indicator;
const IndicatorAttribute = __importStar(require("./indicator-attribute"));
exports.IndicatorAttribute = IndicatorAttribute.IndicatorAttribute;
const IndicatorAttributeSummary = __importStar(require("./indicator-attribute-summary"));
exports.IndicatorAttributeSummary = IndicatorAttributeSummary.IndicatorAttributeSummary;
const IndicatorCountCollection = __importStar(require("./indicator-count-collection"));
exports.IndicatorCountCollection = IndicatorCountCollection.IndicatorCountCollection;
const IndicatorCountDimensions = __importStar(require("./indicator-count-dimensions"));
exports.IndicatorCountDimensions = IndicatorCountDimensions.IndicatorCountDimensions;
const IndicatorCountSummary = __importStar(require("./indicator-count-summary"));
exports.IndicatorCountSummary = IndicatorCountSummary.IndicatorCountSummary;
const IndicatorRelationship = __importStar(require("./indicator-relationship"));
exports.IndicatorRelationship = IndicatorRelationship.IndicatorRelationship;
const IndicatorSourceSummary = __importStar(require("./indicator-source-summary"));
exports.IndicatorSourceSummary = IndicatorSourceSummary.IndicatorSourceSummary;
const IndicatorSummary = __importStar(require("./indicator-summary"));
exports.IndicatorSummary = IndicatorSummary.IndicatorSummary;
const IndicatorSummaryCollection = __importStar(require("./indicator-summary-collection"));
exports.IndicatorSummaryCollection = IndicatorSummaryCollection.IndicatorSummaryCollection;
const IndicatorType = __importStar(require("./indicator-type"));
exports.IndicatorType = IndicatorType.IndicatorType;
const LifecycleState = __importStar(require("./lifecycle-state"));
exports.LifecycleState = LifecycleState.LifecycleState;
const SortOrder = __importStar(require("./sort-order"));
exports.SortOrder = SortOrder.SortOrder;
const SummarizeIndicatorsDetails = __importStar(require("./summarize-indicators-details"));
exports.SummarizeIndicatorsDetails = SummarizeIndicatorsDetails.SummarizeIndicatorsDetails;
const ThreatType = __importStar(require("./threat-type"));
exports.ThreatType = ThreatType.ThreatType;
const ThreatTypeSummary = __importStar(require("./threat-type-summary"));
exports.ThreatTypeSummary = ThreatTypeSummary.ThreatTypeSummary;
const ThreatTypesCollection = __importStar(require("./threat-types-collection"));
exports.ThreatTypesCollection = ThreatTypesCollection.ThreatTypesCollection;
const IndicatorReference = __importStar(require("./indicator-reference"));
exports.IndicatorReference = IndicatorReference.IndicatorReference;
//# sourceMappingURL=index.js.map