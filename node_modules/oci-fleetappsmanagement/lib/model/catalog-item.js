"use strict";
/**
 * Fleet Application Management Service API
 * Fleet Application Management provides a centralized platform to help you automate resource management tasks, validate patch compliance, and enhance operational efficiency across an enterprise.

 * OpenAPI spec version: 20250228
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CatalogItem = void 0;
const model = __importStar(require("../model"));
var CatalogItem;
(function (CatalogItem) {
    let ConfigSourceType;
    (function (ConfigSourceType) {
        ConfigSourceType["ParCatalogSource"] = "PAR_CATALOG_SOURCE";
        ConfigSourceType["GitCatalogSource"] = "GIT_CATALOG_SOURCE";
        ConfigSourceType["MarketplaceCatalogSource"] = "MARKETPLACE_CATALOG_SOURCE";
        ConfigSourceType["StackTemplateCatalogSource"] = "STACK_TEMPLATE_CATALOG_SOURCE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ConfigSourceType["UnknownValue"] = "UNKNOWN_VALUE";
    })(ConfigSourceType = CatalogItem.ConfigSourceType || (CatalogItem.ConfigSourceType = {}));
    let PackageType;
    (function (PackageType) {
        PackageType["TfPackage"] = "TF_PACKAGE";
        PackageType["NonTfPackage"] = "NON_TF_PACKAGE";
        PackageType["ConfigFile"] = "CONFIG_FILE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        PackageType["UnknownValue"] = "UNKNOWN_VALUE";
    })(PackageType = CatalogItem.PackageType || (CatalogItem.PackageType = {}));
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Creating"] = "CREATING";
        LifecycleState["Updating"] = "UPDATING";
        LifecycleState["Active"] = "ACTIVE";
        LifecycleState["Deleting"] = "DELETING";
        LifecycleState["Deleted"] = "DELETED";
        LifecycleState["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = CatalogItem.LifecycleState || (CatalogItem.LifecycleState = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "catalogSourcePayload": obj.catalogSourcePayload
                ? model.CatalogSourcePayload.getJsonObj(obj.catalogSourcePayload)
                : undefined,
            "catalogResultPayload": obj.catalogResultPayload
                ? model.CatalogResultPayload.getJsonObj(obj.catalogResultPayload)
                : undefined
        });
        return jsonObj;
    }
    CatalogItem.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "catalogSourcePayload": obj.catalogSourcePayload
                ? model.CatalogSourcePayload.getDeserializedJsonObj(obj.catalogSourcePayload)
                : undefined,
            "catalogResultPayload": obj.catalogResultPayload
                ? model.CatalogResultPayload.getDeserializedJsonObj(obj.catalogResultPayload)
                : undefined
        });
        return jsonObj;
    }
    CatalogItem.getDeserializedJsonObj = getDeserializedJsonObj;
})(CatalogItem = exports.CatalogItem || (exports.CatalogItem = {}));
//# sourceMappingURL=catalog-item.js.map