/**
 * Fleet Application Management Service API
 * Fleet Application Management provides a centralized platform to help you automate resource management tasks, validate patch compliance, and enhance operational efficiency across an enterprise.

 * OpenAPI spec version: 20250228
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { FleetAppsManagementAdminClient } from "./client";
export declare class FleetAppsManagementAdminWaiter {
    private client;
    private readonly config?;
    constructor(client: FleetAppsManagementAdminClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forCompliancePolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCompliancePolicyResponse | null (null in case of 404 response)
     */
    forCompliancePolicy(request: serviceRequests.GetCompliancePolicyRequest, ...targetStates: models.CompliancePolicy.LifecycleState[]): Promise<serviceResponses.GetCompliancePolicyResponse | null>;
    /**
     * Waits forCompliancePolicyRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCompliancePolicyRuleResponse | null (null in case of 404 response)
     */
    forCompliancePolicyRule(request: serviceRequests.GetCompliancePolicyRuleRequest, ...targetStates: models.CompliancePolicyRule.LifecycleState[]): Promise<serviceResponses.GetCompliancePolicyRuleResponse | null>;
    /**
     * Waits forOnboarding till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOnboardingResponse | null (null in case of 404 response)
     */
    forOnboarding(request: serviceRequests.GetOnboardingRequest, ...targetStates: models.Onboarding.LifecycleState[]): Promise<serviceResponses.GetOnboardingResponse | null>;
    /**
     * Waits forPlatformConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPlatformConfigurationResponse | null (null in case of 404 response)
     */
    forPlatformConfiguration(request: serviceRequests.GetPlatformConfigurationRequest, ...targetStates: models.PlatformConfiguration.LifecycleState[]): Promise<serviceResponses.GetPlatformConfigurationResponse | null>;
    /**
     * Waits forProperty till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPropertyResponse | null (null in case of 404 response)
     */
    forProperty(request: serviceRequests.GetPropertyRequest, ...targetStates: models.Property.LifecycleState[]): Promise<serviceResponses.GetPropertyResponse | null>;
}
