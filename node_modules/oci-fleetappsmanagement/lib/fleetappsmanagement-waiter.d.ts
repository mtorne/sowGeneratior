/**
 * Fleet Application Management Service API
 * Fleet Application Management provides a centralized platform to help you automate resource management tasks, validate patch compliance, and enhance operational efficiency across an enterprise.

 * OpenAPI spec version: 20250228
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { FleetAppsManagementClient } from "./client";
export declare class FleetAppsManagementWaiter {
    private client;
    private readonly config?;
    constructor(client: FleetAppsManagementClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forFleet till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFleetResponse | null (null in case of 404 response)
     */
    forFleet(request: serviceRequests.GetFleetRequest, ...targetStates: models.Fleet.LifecycleState[]): Promise<serviceResponses.GetFleetResponse | null>;
    /**
     * Waits forFleetCredential till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFleetCredentialResponse | null (null in case of 404 response)
     */
    forFleetCredential(request: serviceRequests.GetFleetCredentialRequest, ...targetStates: models.FleetCredential.LifecycleState[]): Promise<serviceResponses.GetFleetCredentialResponse | null>;
    /**
     * Waits forFleetProperty till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFleetPropertyResponse | null (null in case of 404 response)
     */
    forFleetProperty(request: serviceRequests.GetFleetPropertyRequest, ...targetStates: models.FleetProperty.LifecycleState[]): Promise<serviceResponses.GetFleetPropertyResponse | null>;
    /**
     * Waits forFleetResource till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFleetResourceResponse | null (null in case of 404 response)
     */
    forFleetResource(request: serviceRequests.GetFleetResourceRequest, ...targetStates: models.FleetResource.LifecycleState[]): Promise<serviceResponses.GetFleetResourceResponse | null>;
}
