/**
 * PGSQL Control Plane API
 * Use the OCI Database with PostgreSQL API to manage resources such as database systems, database nodes, backups, and configurations.
For information, see the user guide documentation for the [service](https://docs.oracle.com/iaas/Content/postgresql/home.htm).

 * OpenAPI spec version: 20220915
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * Summary information about a database system.
 */
export interface DbSystemSummary {
    /**
     * A unique identifier for the database system. Immutable on creation.
     */
    "id": string;
    /**
     * A user-friendly display name for the database system. Avoid entering confidential information.
     */
    "displayName": string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the database system.
     */
    "compartmentId": string;
    /**
      * The date and time that the database system was created, expressed in
  * [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.
  * <p>
  Example: {@code 2016-08-25T21:10:29.600Z}
  *
      */
    "timeCreated": Date;
    /**
      * The date and time that the database system was updated, expressed in
  * [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.
  * <p>
  Example: {@code 2016-08-25T21:10:29.600Z}
  *
      */
    "timeUpdated"?: Date;
    /**
     * The current state of the database system.
     */
    "lifecycleState": string;
    /**
     * A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
     */
    "lifecycleDetails"?: string;
    /**
     * Type of the database system.
     */
    "systemType": string;
    /**
     * Count of database instances, or nodes, in the database system. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "instanceCount": number;
    /**
     * The name of the shape for the database instance node.
     * Example: {@code VM.Standard.E4.Flex}
     *
     */
    "shape"?: string;
    /**
     * The total number of OCPUs available to each database instance node. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "instanceOcpuCount": number;
    /**
     * The total amount of memory available to each database instance node, in gigabytes. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "instanceMemorySizeInGBs": number;
    /**
     * Version of database system software.
     */
    "dbVersion": string;
    /**
     * The [OCID](https://docs.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the configuration associated with the database system.
     */
    "configId"?: string;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags": {
        [key: string]: string;
    };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags": {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * System tags for this resource. Each key is predefined and scoped to a namespace.
     * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
     *
     */
    "systemTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace DbSystemSummary {
    function getJsonObj(obj: DbSystemSummary): object;
    function getDeserializedJsonObj(obj: DbSystemSummary): object;
}
