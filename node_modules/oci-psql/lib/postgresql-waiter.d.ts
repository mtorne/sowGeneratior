/**
 * PGSQL Control Plane API
 * Use the OCI Database with PostgreSQL API to manage resources such as database systems, database nodes, backups, and configurations.
For information, see the user guide documentation for the [service](https://docs.oracle.com/iaas/Content/postgresql/home.htm).

 * OpenAPI spec version: 20220915
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { PostgresqlClient } from "./client";
export declare class PostgresqlWaiter {
    private client;
    private readonly config?;
    constructor(client: PostgresqlClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBackupResponse | null (null in case of 404 response)
     */
    forBackup(request: serviceRequests.GetBackupRequest, ...targetStates: models.Backup.LifecycleState[]): Promise<serviceResponses.GetBackupResponse | null>;
    /**
     * Waits forConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConfigurationResponse | null (null in case of 404 response)
     */
    forConfiguration(request: serviceRequests.GetConfigurationRequest, ...targetStates: models.Configuration.LifecycleState[]): Promise<serviceResponses.GetConfigurationResponse | null>;
    /**
     * Waits forDbSystem till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbSystemResponse | null (null in case of 404 response)
     */
    forDbSystem(request: serviceRequests.GetDbSystemRequest, ...targetStates: models.DbSystem.LifecycleState[]): Promise<serviceResponses.GetDbSystemResponse | null>;
    /**
     * Waits forDefaultConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDefaultConfigurationResponse | null (null in case of 404 response)
     */
    forDefaultConfiguration(request: serviceRequests.GetDefaultConfigurationRequest, ...targetStates: models.DefaultConfiguration.LifecycleState[]): Promise<serviceResponses.GetDefaultConfigurationResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
