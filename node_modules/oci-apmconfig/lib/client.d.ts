/**
 * Application Performance Monitoring Configuration API
 * Use the Application Performance Monitoring Configuration API to query and set Application Performance Monitoring
configuration. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).

 * OpenAPI spec version: 20210201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
declare const Breaker: any;
export declare enum ConfigApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class ConfigClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Fast importing configuration items to a destination APM domain ID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CopyConfigurationRequest
     * @return CopyConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/CopyConfiguration.ts.html |here} to see how to use CopyConfiguration API.
     */
    copyConfiguration(copyConfigurationRequest: requests.CopyConfigurationRequest): Promise<responses.CopyConfigurationResponse>;
    /**
     * Creates a new configuration item.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateConfigRequest
     * @return CreateConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/CreateConfig.ts.html |here} to see how to use CreateConfig API.
     */
    createConfig(createConfigRequest: requests.CreateConfigRequest): Promise<responses.CreateConfigResponse>;
    /**
     * Deletes the configuration item identified by the OCID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteConfigRequest
     * @return DeleteConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/DeleteConfig.ts.html |here} to see how to use DeleteConfig API.
     */
    deleteConfig(deleteConfigRequest: requests.DeleteConfigRequest): Promise<responses.DeleteConfigResponse>;
    /**
     * Exports configurations for the whole domain by domainId.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ExportConfigurationRequest
     * @return ExportConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/ExportConfiguration.ts.html |here} to see how to use ExportConfiguration API.
     */
    exportConfiguration(exportConfigurationRequest: requests.ExportConfigurationRequest): Promise<responses.ExportConfigurationResponse>;
    /**
     * Gets the configuration item identified by the OCID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetConfigRequest
     * @return GetConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/GetConfig.ts.html |here} to see how to use GetConfig API.
     */
    getConfig(getConfigRequest: requests.GetConfigRequest): Promise<responses.GetConfigResponse>;
    /**
     * Import configurations Item(s) with its dependencies into a destination domain.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ImportConfigurationRequest
     * @return ImportConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/ImportConfiguration.ts.html |here} to see how to use ImportConfiguration API.
     */
    importConfiguration(importConfigurationRequest: requests.ImportConfigurationRequest): Promise<responses.ImportConfigurationResponse>;
    /**
     * Returns all configuration items, which can optionally be filtered by configuration type.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListConfigsRequest
     * @return ListConfigsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/ListConfigs.ts.html |here} to see how to use ListConfigs API.
     */
    listConfigs(listConfigsRequest: requests.ListConfigsRequest): Promise<responses.ListConfigsResponse>;
    /**
     * Returns all metrics associated with the specified namespace.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RetrieveNamespaceMetricsRequest
     * @return RetrieveNamespaceMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/RetrieveNamespaceMetrics.ts.html |here} to see how to use RetrieveNamespaceMetrics API.
     */
    retrieveNamespaceMetrics(retrieveNamespaceMetricsRequest: requests.RetrieveNamespaceMetricsRequest): Promise<responses.RetrieveNamespaceMetricsResponse>;
    /**
     * Returns all namespaces available in APM.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RetrieveNamespacesRequest
     * @return RetrieveNamespacesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/RetrieveNamespaces.ts.html |here} to see how to use RetrieveNamespaces API.
     */
    retrieveNamespaces(retrieveNamespacesRequest: requests.RetrieveNamespacesRequest): Promise<responses.RetrieveNamespacesResponse>;
    /**
     * Tests a data processing operation on the provided input, returning the potentially modified
     * input as output. Returns 200 on success, 422 when the input can not be processed.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param TestRequest
     * @return TestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/Test.ts.html |here} to see how to use Test API.
     */
    test(testRequest: requests.TestRequest): Promise<responses.TestResponse>;
    /**
     * Updates the details of the configuration item identified by the OCID.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateConfigRequest
     * @return UpdateConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/UpdateConfig.ts.html |here} to see how to use UpdateConfig API.
     */
    updateConfig(updateConfigRequest: requests.UpdateConfigRequest): Promise<responses.UpdateConfigResponse>;
    /**
     * Validates the Span Filter pattern (filterText) for syntactic correctness.
     * Returns 204 on success, 422 when validation fails.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ValidateSpanFilterPatternRequest
     * @return ValidateSpanFilterPatternResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmconfig/ValidateSpanFilterPattern.ts.html |here} to see how to use ValidateSpanFilterPattern API.
     */
    validateSpanFilterPattern(validateSpanFilterPatternRequest: requests.ValidateSpanFilterPatternRequest): Promise<responses.ValidateSpanFilterPatternResponse>;
}
export {};
