"use strict";
/**
 * Speech API
 * The OCI Speech Service harnesses the power of spoken language by allowing developers to easily convert file-based data containing human speech into highly accurate text transcriptions.
 * OpenAPI spec version: 20220101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranscriptionModelDetails = void 0;
const model = __importStar(require("../model"));
var TranscriptionModelDetails;
(function (TranscriptionModelDetails) {
    let Domain;
    (function (Domain) {
        Domain["Generic"] = "GENERIC";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Domain["UnknownValue"] = "UNKNOWN_VALUE";
    })(Domain = TranscriptionModelDetails.Domain || (TranscriptionModelDetails.Domain = {}));
    let LanguageCode;
    (function (LanguageCode) {
        LanguageCode["EnUs"] = "en-US";
        LanguageCode["EsEs"] = "es-ES";
        LanguageCode["PtBr"] = "pt-BR";
        LanguageCode["EnGb"] = "en-GB";
        LanguageCode["EnAu"] = "en-AU";
        LanguageCode["EnIn"] = "en-IN";
        LanguageCode["HiIn"] = "hi-IN";
        LanguageCode["FrFr"] = "fr-FR";
        LanguageCode["DeDe"] = "de-DE";
        LanguageCode["ItIt"] = "it-IT";
        LanguageCode["Af"] = "af";
        LanguageCode["Ar"] = "ar";
        LanguageCode["Az"] = "az";
        LanguageCode["Be"] = "be";
        LanguageCode["Bg"] = "bg";
        LanguageCode["Bs"] = "bs";
        LanguageCode["Ca"] = "ca";
        LanguageCode["Cs"] = "cs";
        LanguageCode["Cy"] = "cy";
        LanguageCode["Da"] = "da";
        LanguageCode["De"] = "de";
        LanguageCode["El"] = "el";
        LanguageCode["En"] = "en";
        LanguageCode["Es"] = "es";
        LanguageCode["Et"] = "et";
        LanguageCode["Fa"] = "fa";
        LanguageCode["Fi"] = "fi";
        LanguageCode["Fr"] = "fr";
        LanguageCode["Gl"] = "gl";
        LanguageCode["He"] = "he";
        LanguageCode["Hi"] = "hi";
        LanguageCode["Hr"] = "hr";
        LanguageCode["Hu"] = "hu";
        LanguageCode["Hy"] = "hy";
        LanguageCode["Id"] = "id";
        LanguageCode["Is"] = "is";
        LanguageCode["It"] = "it";
        LanguageCode["Ja"] = "ja";
        LanguageCode["Kk"] = "kk";
        LanguageCode["Kn"] = "kn";
        LanguageCode["Ko"] = "ko";
        LanguageCode["Lt"] = "lt";
        LanguageCode["Lv"] = "lv";
        LanguageCode["Mi"] = "mi";
        LanguageCode["Mk"] = "mk";
        LanguageCode["Mr"] = "mr";
        LanguageCode["Ms"] = "ms";
        LanguageCode["Ne"] = "ne";
        LanguageCode["Nl"] = "nl";
        LanguageCode["No"] = "no";
        LanguageCode["Pl"] = "pl";
        LanguageCode["Pt"] = "pt";
        LanguageCode["Ro"] = "ro";
        LanguageCode["Ru"] = "ru";
        LanguageCode["Sk"] = "sk";
        LanguageCode["Sl"] = "sl";
        LanguageCode["Sr"] = "sr";
        LanguageCode["Sv"] = "sv";
        LanguageCode["Sw"] = "sw";
        LanguageCode["Ta"] = "ta";
        LanguageCode["Th"] = "th";
        LanguageCode["Tl"] = "tl";
        LanguageCode["Tr"] = "tr";
        LanguageCode["Uk"] = "uk";
        LanguageCode["Ur"] = "ur";
        LanguageCode["Vi"] = "vi";
        LanguageCode["Zh"] = "zh";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LanguageCode["UnknownValue"] = "UNKNOWN_VALUE";
    })(LanguageCode = TranscriptionModelDetails.LanguageCode || (TranscriptionModelDetails.LanguageCode = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "transcriptionSettings": obj.transcriptionSettings
                ? model.TranscriptionSettings.getJsonObj(obj.transcriptionSettings)
                : undefined
        });
        return jsonObj;
    }
    TranscriptionModelDetails.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "transcriptionSettings": obj.transcriptionSettings
                ? model.TranscriptionSettings.getDeserializedJsonObj(obj.transcriptionSettings)
                : undefined
        });
        return jsonObj;
    }
    TranscriptionModelDetails.getDeserializedJsonObj = getDeserializedJsonObj;
})(TranscriptionModelDetails = exports.TranscriptionModelDetails || (exports.TranscriptionModelDetails = {}));
//# sourceMappingURL=transcription-model-details.js.map