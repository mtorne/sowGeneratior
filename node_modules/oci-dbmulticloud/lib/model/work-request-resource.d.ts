/**
 * Oracle Database MultiCloud Data plane Integration
 * 1. Oracle Azure Connector Resource: This is for installing Azure Arc Server in ExaCS VM Cluster.
  There are two way to install Azure Arc Server (Azure Identity) in ExaCS VMCluster.
    a. Using Bearer Access Token or
    b. By providing Authentication token

2. Oracle Azure Blob Container Resource: This is for to capture Azure Container details
   and same will be used in multiple ExaCS VMCluster to mount the Azure Container.

3. Oracle Azure Blob Mount Resource: This is for to mount Azure Container in ExaCS VMCluster
   using Oracle Azure Connector and Oracle Azure Blob Container Resource.

 * OpenAPI spec version: 20240501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * A resource created or operated on by a work request.
 */
export interface WorkRequestResource {
    /**
     * The resource type the work request affects.
     */
    "entityType": string;
    /**
     * The way in which this resource is affected by the work tracked in the work request.
     * A resource being created, updated, or deleted will remain in the IN_PROGRESS state until
     * work is complete for that resource at which point it will transition to CREATED, UPDATED,
     * or DELETED, respectively.
     *
     */
    "actionType": model.ActionType;
    /**
     * The identifier of the resource the work request affects.
     */
    "identifier": string;
    /**
     * The URI path that the user can do a GET on to access the resource metadata.
     */
    "entityUri"?: string;
    /**
     * Additional information that helps to explain the resource.
     */
    "metadata"?: {
        [key: string]: string;
    };
}
export declare namespace WorkRequestResource {
    function getJsonObj(obj: WorkRequestResource): object;
    function getDeserializedJsonObj(obj: WorkRequestResource): object;
}
