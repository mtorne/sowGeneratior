/**
 * Secure Desktops API
 * Create and manage cloud-hosted desktops which can be accessed from a web browser or installed client.

 * OpenAPI spec version: 20220618
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
 *
 */
export interface DesktopDevicePolicy {
    /**
     * The clipboard mode.
     * NONE: No access to the local clipboard is permitted.
     * TODESKTOP: The clipboard can be used to transfer data to the desktop only.
     * FROMDESKTOP: The clipboard can be used to transfer data from the desktop only.
     * FULL: The clipboard can be used to transfer data to and from the desktop.
     *
     */
    "clipboardMode": DesktopDevicePolicy.ClipboardMode;
    /**
     * The audio mode.
     * NONE: No access to the local audio devices is permitted.
     * TODESKTOP: The user may record audio on their desktop.
     * FROMDESKTOP: The user may play audio on their desktop.
     * FULL: The user may play and record audio on their desktop.
     *
     */
    "audioMode": DesktopDevicePolicy.AudioMode;
    /**
     * The client local drive access mode.
     * NONE: No access to local drives permitted.
     * READONLY: The user may read from local drives on their desktop.
     * FULL: The user may read from and write to their local drives on their desktop.
     *
     */
    "cdmMode": DesktopDevicePolicy.CdmMode;
    /**
     * Indicates whether printing is enabled.
     */
    "isPrintingEnabled": boolean;
    /**
     * Indicates whether the pointer is enabled.
     */
    "isPointerEnabled": boolean;
    /**
     * Indicates whether the keyboard is enabled.
     */
    "isKeyboardEnabled": boolean;
    /**
     * Indicates whether the display is enabled.
     */
    "isDisplayEnabled": boolean;
}
export declare namespace DesktopDevicePolicy {
    enum ClipboardMode {
        None = "NONE",
        Todesktop = "TODESKTOP",
        Fromdesktop = "FROMDESKTOP",
        Full = "FULL",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum AudioMode {
        None = "NONE",
        Todesktop = "TODESKTOP",
        Fromdesktop = "FROMDESKTOP",
        Full = "FULL",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum CdmMode {
        None = "NONE",
        Readonly = "READONLY",
        Full = "FULL",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: DesktopDevicePolicy): object;
    function getDeserializedJsonObj(obj: DesktopDevicePolicy): object;
}
