"use strict";
/**
 * Application Performance Monitoring Trace Explorer API
 * Use the Application Performance Monitoring Trace Explorer API to query traces and associated spans in Trace Explorer. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeResponse = void 0;
var AttributeResponse;
(function (AttributeResponse) {
    let AttributeType;
    (function (AttributeType) {
        AttributeType["Numeric"] = "NUMERIC";
        AttributeType["String"] = "STRING";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        AttributeType["UnknownValue"] = "UNKNOWN_VALUE";
    })(AttributeType = AttributeResponse.AttributeType || (AttributeResponse.AttributeType = {}));
    let Unit;
    (function (Unit) {
        Unit["None"] = "NONE";
        Unit["EpochTimeMs"] = "EPOCH_TIME_MS";
        Unit["Bytes"] = "BYTES";
        Unit["Count"] = "COUNT";
        Unit["DurationMs"] = "DURATION_MS";
        Unit["TraceStatus"] = "TRACE_STATUS";
        Unit["Percentage"] = "PERCENTAGE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Unit["UnknownValue"] = "UNKNOWN_VALUE";
    })(Unit = AttributeResponse.Unit || (AttributeResponse.Unit = {}));
    let OperationType;
    (function (OperationType) {
        OperationType["Activate"] = "ACTIVATE";
        OperationType["Deactivate"] = "DEACTIVATE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        OperationType["UnknownValue"] = "UNKNOWN_VALUE";
    })(OperationType = AttributeResponse.OperationType || (AttributeResponse.OperationType = {}));
    let AttributeNameSpace;
    (function (AttributeNameSpace) {
        AttributeNameSpace["Traces"] = "TRACES";
        AttributeNameSpace["Synthetic"] = "SYNTHETIC";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        AttributeNameSpace["UnknownValue"] = "UNKNOWN_VALUE";
    })(AttributeNameSpace = AttributeResponse.AttributeNameSpace || (AttributeResponse.AttributeNameSpace = {}));
    let AttributeStatus;
    (function (AttributeStatus) {
        AttributeStatus["AttributeAlreadyActive"] = "ATTRIBUTE_ALREADY_ACTIVE";
        AttributeStatus["AttributeActivated"] = "ATTRIBUTE_ACTIVATED";
        AttributeStatus["AttributeDeactivated"] = "ATTRIBUTE_DEACTIVATED";
        AttributeStatus["DeactivationNotAllowed"] = "DEACTIVATION_NOT_ALLOWED";
        AttributeStatus["AttributeDoesNotExist"] = "ATTRIBUTE_DOES_NOT_EXIST";
        AttributeStatus["AttributeAlreadyDeactivated"] = "ATTRIBUTE_ALREADY_DEACTIVATED";
        AttributeStatus["DuplicateAttribute"] = "DUPLICATE_ATTRIBUTE";
        AttributeStatus["InvalidAttribute"] = "INVALID_ATTRIBUTE";
        AttributeStatus["InvalidAttributeTypeConflict"] = "INVALID_ATTRIBUTE_TYPE_CONFLICT";
        AttributeStatus["AttributeNotProcessed"] = "ATTRIBUTE_NOT_PROCESSED";
        AttributeStatus["AttributeUpdateNotAllowed"] = "ATTRIBUTE_UPDATE_NOT_ALLOWED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        AttributeStatus["UnknownValue"] = "UNKNOWN_VALUE";
    })(AttributeStatus = AttributeResponse.AttributeStatus || (AttributeResponse.AttributeStatus = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    AttributeResponse.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    AttributeResponse.getDeserializedJsonObj = getDeserializedJsonObj;
})(AttributeResponse = exports.AttributeResponse || (exports.AttributeResponse = {}));
//# sourceMappingURL=attribute-response.js.map