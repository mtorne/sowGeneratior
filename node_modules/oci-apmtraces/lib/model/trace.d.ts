/**
 * Application Performance Monitoring Trace Explorer API
 * Use the Application Performance Monitoring Trace Explorer API to query traces and associated spans in Trace Explorer. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Definition of a trace object.
 *
 */
export interface Trace {
    /**
     * Unique identifier (traceId) for the trace that represents the span set.  Note that this field is
     * defined as traceKey in the API and it maps to the traceId in the trace data in Application Performance
     * Monitoring.
     *
     */
    "key": string;
    /**
     * Root span name associated with the trace. This is the flow start operation name.
     * Null is displayed if the root span is not yet completed.
     *
     */
    "rootSpanOperationName"?: string;
    /**
     * Start time of the earliest span in the span collection.
     *
     */
    "timeEarliestSpanStarted"?: Date;
    /**
     * End time of the span that most recently ended in the span collection.
     *
     */
    "timeLatestSpanEnded"?: Date;
    /**
     * The number of spans that have been processed by the system for the trace.  Note that there
     * could be additional spans that have not been processed or reported yet if the trace is still
     * in progress.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "spanCount"?: number;
    /**
     * The number of spans with errors that have been processed by the system for the trace.
     * Note that the number of spans with errors will be less than or equal to the total number of spans in the trace.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "errorSpanCount"?: number;
    /**
     * Service associated with the trace.
     *
     */
    "rootSpanServiceName"?: string;
    /**
     * Start time of the root span for the span collection.
     *
     */
    "timeRootSpanStarted"?: Date;
    /**
     * End time of the root span for the span collection.
     *
     */
    "timeRootSpanEnded"?: Date;
    /**
     * Time taken for the root span operation to complete in milliseconds.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "rootSpanDurationInMs"?: number;
    /**
     * Time between the start of the earliest span and the end of the most recent span in milliseconds.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "traceDurationInMs"?: number;
    /**
     * Boolean flag that indicates whether the trace has an error.
     *
     */
    "isFault"?: boolean;
    /**
     * The status of the trace.
     * The trace statuses are defined as follows:
     * complete - a root span has been recorded, but there is no information on the errors.
     * success - a complete root span is recorded there is a successful error type and error code - HTTP 200.
     * incomplete - the root span has not yet been received.
     * error - the root span returned with an error. There may or may not be an associated error code or error type.
     *
     */
    "traceStatus"?: string;
    /**
     * Error type of the trace.
     *
     */
    "traceErrorType"?: string;
    /**
     * Error code of the trace.
     *
     */
    "traceErrorCode"?: string;
    /**
     * A summary of the spans by service.
     *
     */
    "serviceSummaries"?: Array<model.TraceServiceSummary>;
    /**
     * Source of trace (traces, syn_traces).
     *
     */
    "sourceName"?: Trace.SourceName;
    "spanSummary"?: model.TraceSpanSummary;
    /**
     * An array of spans in the trace.
     *
     */
    "spans": Array<model.Span>;
}
export declare namespace Trace {
    enum SourceName {
        Traces = "TRACES",
        SynTraces = "SYN_TRACES",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: Trace): object;
    function getDeserializedJsonObj(obj: Trace): object;
}
