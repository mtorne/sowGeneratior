/**
 * Application Performance Monitoring Trace Explorer API
 * Use the Application Performance Monitoring Trace Explorer API to query traces and associated spans in Trace Explorer. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { ScheduledQueryWaiter } from "./scheduledquery-waiter";
declare const Breaker: any;
export declare enum AttributesApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class AttributesClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Activates a set of attributes for the given APM Domain.  Attribute names are not case-sensitive.  Any duplicates present in the bulk activation
     * request are deduplicated and only unique attributes are activated.  A maximum number of 700 string attributes and 100 numeric attributes
     * can be activated in an APM Domain subject to the available string and numeric slots.  Once an attribute has been activated, it may take some time
     * for it to be appear in searches as ingest might not have picked up the changes or any associated caches might not have refreshed.  The
     * bulk activation operation is atomic, and the operation succeeds only if all the attributes in the request have been processed successfully and they
     * get a success status back.  If the processing of any attribute results in a processing or validation error, then none of the attributes in the bulk
     * request are activated.  Attributes that are activated are unpinned by default if they are pinned.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param BulkActivateAttributeRequest
     * @return BulkActivateAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkActivateAttribute.ts.html |here} to see how to use BulkActivateAttribute API.
     */
    bulkActivateAttribute(bulkActivateAttributeRequest: requests.BulkActivateAttributeRequest): Promise<responses.BulkActivateAttributeResponse>;
    /**
     * Deactivates a set of attributes for the given APM Domain.  Attribute names are not case-sensitive.  Any duplicates present in the bulk deactivation
     * request are deduplicated and only unique attributes are deactivated.  A maximum number of 700 string attributes and 100 numeric attributes
     * can be deactivated in an APM Domain subject to the available string and numeric slots.  Out of box attributes (Trace and Span) cannot be
     * deactivated, and will result in a processing error.  Once an attribute has been deactivated, it may take some time for it to disappear in
     * searches as ingest might not have picked up the changes or any associated caches might not have refreshed.  The bulk deactivation
     * operation is atomic, and the operation succeeds only if all the attributes in the request have been processed successfully and they get a success
     * status back.  If the processing of any attribute results in a processing or validation error, then none of the attributes in the bulk request
     * are deactivated.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param BulkDeActivateAttributeRequest
     * @return BulkDeActivateAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkDeActivateAttribute.ts.html |here} to see how to use BulkDeActivateAttribute API.
     */
    bulkDeActivateAttribute(bulkDeActivateAttributeRequest: requests.BulkDeActivateAttributeRequest): Promise<responses.BulkDeActivateAttributeResponse>;
    /**
     * Pin a set of attributes in the APM Domain.  Attributes that are marked pinned are not autoactivated by ingest.
     * Attributes that are deactivated are pinned by default.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param BulkPinAttributeRequest
     * @return BulkPinAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkPinAttribute.ts.html |here} to see how to use BulkPinAttribute API.
     */
    bulkPinAttribute(bulkPinAttributeRequest: requests.BulkPinAttributeRequest): Promise<responses.BulkPinAttributeResponse>;
    /**
     * Unpin a set of attributes in the APM Domain.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param BulkUnpinAttributeRequest
     * @return BulkUnpinAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkUnpinAttribute.ts.html |here} to see how to use BulkUnpinAttribute API.
     */
    bulkUnpinAttribute(bulkUnpinAttributeRequest: requests.BulkUnpinAttributeRequest): Promise<responses.BulkUnpinAttributeResponse>;
    /**
     * Update a set of attribute properties in the APM Domain.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param BulkUpdateAttributeRequest
     * @return BulkUpdateAttributeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkUpdateAttribute.ts.html |here} to see how to use BulkUpdateAttribute API.
     */
    bulkUpdateAttribute(bulkUpdateAttributeRequest: requests.BulkUpdateAttributeRequest): Promise<responses.BulkUpdateAttributeResponse>;
    /**
     * Add or edit notes to a set of attributes in the APM Domain.  Notes can be added to either an active or an inactive attribute.  The
     * notes will be preserved even if the attribute changes state (when an active attribute is deactivated or when an inactive attribute
     * is activated).
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param BulkUpdateAttributeNotesRequest
     * @return BulkUpdateAttributeNotesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/BulkUpdateAttributeNotes.ts.html |here} to see how to use BulkUpdateAttributeNotes API.
     */
    bulkUpdateAttributeNotes(bulkUpdateAttributeNotesRequest: requests.BulkUpdateAttributeNotesRequest): Promise<responses.BulkUpdateAttributeNotesResponse>;
    /**
     * Get autoactivation status for a private data key or public data key in the APM Domain.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetStatusAutoActivateRequest
     * @return GetStatusAutoActivateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetStatusAutoActivate.ts.html |here} to see how to use GetStatusAutoActivate API.
     */
    getStatusAutoActivate(getStatusAutoActivateRequest: requests.GetStatusAutoActivateRequest): Promise<responses.GetStatusAutoActivateResponse>;
    /**
     * Turn on or off autoactivate for private data key or public data key traffic a given APM Domain.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PutToggleAutoActivateRequest
     * @return PutToggleAutoActivateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/PutToggleAutoActivate.ts.html |here} to see how to use PutToggleAutoActivate API.
     */
    putToggleAutoActivate(putToggleAutoActivateRequest: requests.PutToggleAutoActivateRequest): Promise<responses.PutToggleAutoActivateResponse>;
}
export declare enum QueryApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class QueryClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Returns a list of predefined Quick Pick queries intended to assist the user
     * to choose a query to run.  There is no sorting applied on the results.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListQuickPicksRequest
     * @return ListQuickPicksResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/ListQuickPicks.ts.html |here} to see how to use ListQuickPicks API.
     */
    listQuickPicks(listQuickPicksRequest: requests.ListQuickPicksRequest): Promise<responses.ListQuickPicksResponse>;
    /**
     * NOTE: This function is deprecated in favor of listQuickPicksRecordIterator function.
     * Creates a new async iterator which will iterate over the models.QuickPickSummary objects
     * contained in responses from the listQuickPicks operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllQuickPicks(request: requests.ListQuickPicksRequest): AsyncIterableIterator<model.QuickPickSummary>;
    /**
     * NOTE: This function is deprecated in favor of listQuickPicksResponseIterator function.
     * Creates a new async iterator which will iterate over the responses received from the listQuickPicks operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllQuickPicksResponses(request: requests.ListQuickPicksRequest): AsyncIterableIterator<responses.ListQuickPicksResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.QuickPickSummary objects
     * contained in responses from the listQuickPicks operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listQuickPicksRecordIterator(request: requests.ListQuickPicksRequest): AsyncIterableIterator<model.QuickPickSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listQuickPicks operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listQuickPicksResponseIterator(request: requests.ListQuickPicksRequest): AsyncIterableIterator<responses.ListQuickPicksResponse>;
    /**
     * Retrieves the results (selected attributes and aggregations) of a query constructed according to the Application Performance Monitoring Defined Query Syntax.
     * Query results are filtered by the filter criteria specified in the where clause.
     * Further query results are grouped by the attributes specified in the group by clause.  Finally,
     * ordering (asc/desc) is done by the specified attributes in the order by clause.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param QueryRequest
     * @return QueryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/Query.ts.html |here} to see how to use Query API.
     */
    query(queryRequest: requests.QueryRequest): Promise<responses.QueryResponse>;
}
export declare enum ScheduledQueryApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class ScheduledQueryClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": ScheduledQueryWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new ScheduledQueryWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): ScheduledQueryWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): ScheduledQueryWaiter;
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Create a scheduled query in the APM Domain.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateScheduledQueryRequest
     * @return CreateScheduledQueryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/CreateScheduledQuery.ts.html |here} to see how to use CreateScheduledQuery API.
     */
    createScheduledQuery(createScheduledQueryRequest: requests.CreateScheduledQueryRequest): Promise<responses.CreateScheduledQueryResponse>;
    /**
     * Delete a scheduled query in the APM Domain.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteScheduledQueryRequest
     * @return DeleteScheduledQueryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/DeleteScheduledQuery.ts.html |here} to see how to use DeleteScheduledQuery API.
     */
    deleteScheduledQuery(deleteScheduledQueryRequest: requests.DeleteScheduledQueryRequest): Promise<responses.DeleteScheduledQueryResponse>;
    /**
     * Retrieve a scheduled query in the APM Domain.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetScheduledQueryRequest
     * @return GetScheduledQueryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetScheduledQuery.ts.html |here} to see how to use GetScheduledQuery API.
     */
    getScheduledQuery(getScheduledQueryRequest: requests.GetScheduledQueryRequest): Promise<responses.GetScheduledQueryResponse>;
    /**
     * Returns a list of all scheduled queries in the APM Domain.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListScheduledQueriesRequest
     * @return ListScheduledQueriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/ListScheduledQueries.ts.html |here} to see how to use ListScheduledQueries API.
     */
    listScheduledQueries(listScheduledQueriesRequest: requests.ListScheduledQueriesRequest): Promise<responses.ListScheduledQueriesResponse>;
    /**
     * Update a scheduled query in the APM Domain.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateScheduledQueryRequest
     * @return UpdateScheduledQueryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/UpdateScheduledQuery.ts.html |here} to see how to use UpdateScheduledQuery API.
     */
    updateScheduledQuery(updateScheduledQueryRequest: requests.UpdateScheduledQueryRequest): Promise<responses.UpdateScheduledQueryResponse>;
}
export declare enum TraceApiKeys {
}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export declare class TraceClient {
    protected static serviceEndpointTemplate: string;
    protected static endpointServiceName: string;
    protected "_realmSpecificEndpointTemplateEnabled": boolean | undefined;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: typeof Breaker | null;
    protected _httpOptions: any;
    protected _bodyDuplexMode: any;
    targetService: string;
    protected _regionId: string;
    protected "_region": common.Region;
    protected _lastSetRegionOrRegionId: string;
    protected _httpClient: common.HttpClient;
    protected _authProvider: common.AuthenticationDetailsProvider | undefined;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled: boolean);
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker(): void;
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider(): void;
    /**
     * Close the client once it is no longer needed
     */
    close(): void;
    /**
     * Gets the aggregated snapshot identified by trace ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetAggregatedSnapshotRequest
     * @return GetAggregatedSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetAggregatedSnapshot.ts.html |here} to see how to use GetAggregatedSnapshot API.
     */
    getAggregatedSnapshot(getAggregatedSnapshotRequest: requests.GetAggregatedSnapshotRequest): Promise<responses.GetAggregatedSnapshotResponse>;
    /**
     * Retrieve a log in the APM Domain.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetLogRequest
     * @return GetLogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetLog.ts.html |here} to see how to use GetLog API.
     */
    getLog(getLogRequest: requests.GetLogRequest): Promise<responses.GetLogResponse>;
    /**
     * Gets the span details identified by spanId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetSpanRequest
     * @return GetSpanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetSpan.ts.html |here} to see how to use GetSpan API.
     */
    getSpan(getSpanRequest: requests.GetSpanRequest): Promise<responses.GetSpanResponse>;
    /**
     * Gets the trace details identified by traceId.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetTraceRequest
     * @return GetTraceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetTrace.ts.html |here} to see how to use GetTrace API.
     */
    getTrace(getTraceRequest: requests.GetTraceRequest): Promise<responses.GetTraceResponse>;
    /**
     * Gets the trace snapshots data identified by trace ID.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetTraceSnapshotRequest
     * @return GetTraceSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/apmtraces/GetTraceSnapshot.ts.html |here} to see how to use GetTraceSnapshot API.
     */
    getTraceSnapshot(getTraceSnapshotRequest: requests.GetTraceSnapshotRequest): Promise<responses.GetTraceSnapshotResponse>;
}
export {};
