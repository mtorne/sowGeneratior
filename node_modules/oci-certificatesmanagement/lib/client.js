"use strict";
/**
 * Certificates Service Management API
 * API for managing certificates.
 * OpenAPI spec version: 20210224
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificatesManagementClient = exports.CertificatesManagementApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const certificatesmanagement_waiter_1 = require("./certificatesmanagement-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var CertificatesManagementApiKeys;
(function (CertificatesManagementApiKeys) {
})(CertificatesManagementApiKeys = exports.CertificatesManagementApiKeys || (exports.CertificatesManagementApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class CertificatesManagementClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "CertificatesManagement";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        this._authProvider = params.authenticationDetailsProvider;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("certificatesmanagement")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("certificatesmanagement");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20210224";
        if (this.logger)
            this.logger.info(`CertificatesManagementClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(CertificatesManagementClient.serviceEndpointTemplate, this._region, CertificatesManagementClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(CertificatesManagementClient.serviceEndpointTemplate, this._regionId, CertificatesManagementClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(CertificatesManagementClient.serviceEndpointTemplate, region, CertificatesManagementClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(CertificatesManagementClient.serviceEndpointTemplate, regionId, CertificatesManagementClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new CertificatesManagementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new certificatesmanagement_waiter_1.CertificatesManagementWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Close the provider if possible which in turn shuts down any associated circuit breaker
     */
    closeProvider() {
        if (this._authProvider) {
            if (this._authProvider instanceof common.AbstractRequestingAuthenticationDetailsProvider)
                (this._authProvider).closeProvider();
        }
    }
    /**
     * Close the client once it is no longer needed
     */
    close() {
        this.shutdownCircuitBreaker();
        this.closeProvider();
    }
    /**
     * Cancels the scheduled deletion of the specified certificate authority (CA).
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelCertificateAuthorityDeletionRequest
     * @return CancelCertificateAuthorityDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/CancelCertificateAuthorityDeletion.ts.html |here} to see how to use CancelCertificateAuthorityDeletion API.
     */
    cancelCertificateAuthorityDeletion(cancelCertificateAuthorityDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#cancelCertificateAuthorityDeletion.");
            const operationName = "cancelCertificateAuthorityDeletion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthority/CancelCertificateAuthorityDeletion";
            const pathParams = {
                "{certificateAuthorityId}": cancelCertificateAuthorityDeletionRequest.certificateAuthorityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": cancelCertificateAuthorityDeletionRequest.opcRequestId,
                "if-match": cancelCertificateAuthorityDeletionRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelCertificateAuthorityDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities/{certificateAuthorityId}/actions/cancelDeletion",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Cancels the scheduled deletion of the specified certificate authority (CA) version. Canceling
     * a scheduled deletion restores the CA version's lifecycle state to what
     * it was before its scheduled deletion.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelCertificateAuthorityVersionDeletionRequest
     * @return CancelCertificateAuthorityVersionDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/CancelCertificateAuthorityVersionDeletion.ts.html |here} to see how to use CancelCertificateAuthorityVersionDeletion API.
     */
    cancelCertificateAuthorityVersionDeletion(cancelCertificateAuthorityVersionDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#cancelCertificateAuthorityVersionDeletion.");
            const operationName = "cancelCertificateAuthorityVersionDeletion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthorityVersion/CancelCertificateAuthorityVersionDeletion";
            const pathParams = {
                "{certificateAuthorityId}": cancelCertificateAuthorityVersionDeletionRequest.certificateAuthorityId,
                "{certificateAuthorityVersionNumber}": cancelCertificateAuthorityVersionDeletionRequest.certificateAuthorityVersionNumber
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": cancelCertificateAuthorityVersionDeletionRequest.opcRequestId,
                "if-match": cancelCertificateAuthorityVersionDeletionRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelCertificateAuthorityVersionDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities/{certificateAuthorityId}/version/{certificateAuthorityVersionNumber}/actions/cancelDeletion",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Cancels the pending deletion of the specified certificate. Canceling
     * a scheduled deletion restores the certificate's lifecycle state to what
     * it was before you scheduled the certificate for deletion.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelCertificateDeletionRequest
     * @return CancelCertificateDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/CancelCertificateDeletion.ts.html |here} to see how to use CancelCertificateDeletion API.
     */
    cancelCertificateDeletion(cancelCertificateDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#cancelCertificateDeletion.");
            const operationName = "cancelCertificateDeletion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/Certificate/CancelCertificateDeletion";
            const pathParams = {
                "{certificateId}": cancelCertificateDeletionRequest.certificateId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": cancelCertificateDeletionRequest.opcRequestId,
                "if-match": cancelCertificateDeletionRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelCertificateDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates/{certificateId}/actions/cancelDeletion",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Cancels the scheduled deletion of the specified certificate version.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CancelCertificateVersionDeletionRequest
     * @return CancelCertificateVersionDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/CancelCertificateVersionDeletion.ts.html |here} to see how to use CancelCertificateVersionDeletion API.
     */
    cancelCertificateVersionDeletion(cancelCertificateVersionDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#cancelCertificateVersionDeletion.");
            const operationName = "cancelCertificateVersionDeletion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateVersion/CancelCertificateVersionDeletion";
            const pathParams = {
                "{certificateId}": cancelCertificateVersionDeletionRequest.certificateId,
                "{certificateVersionNumber}": cancelCertificateVersionDeletionRequest.certificateVersionNumber
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": cancelCertificateVersionDeletionRequest.opcRequestId,
                "if-match": cancelCertificateVersionDeletionRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, cancelCertificateVersionDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates/{certificateId}/version/{certificateVersionNumber}/actions/cancelDeletion",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves a CA bundle to a different compartment in the same tenancy. For information about
  * moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When provided, if-match is checked against the ETag values of the secret.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ChangeCaBundleCompartmentRequest
       * @return ChangeCaBundleCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ChangeCaBundleCompartment.ts.html |here} to see how to use ChangeCaBundleCompartment API.
       */
    changeCaBundleCompartment(changeCaBundleCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#changeCaBundleCompartment.");
            const operationName = "changeCaBundleCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CaBundle/ChangeCaBundleCompartment";
            const pathParams = {
                "{caBundleId}": changeCaBundleCompartmentRequest.caBundleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeCaBundleCompartmentRequest.ifMatch,
                "opc-request-id": changeCaBundleCompartmentRequest.opcRequestId,
                "opc-retry-token": changeCaBundleCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeCaBundleCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/caBundles/{caBundleId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeCaBundleCompartmentRequest.changeCaBundleCompartmentDetails, "ChangeCaBundleCompartmentDetails", model.ChangeCaBundleCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves a certificate authority (CA) to a different compartment within the same tenancy. For information about
  * moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When provided, If-Match is checked against the ETag values of the source.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ChangeCertificateAuthorityCompartmentRequest
       * @return ChangeCertificateAuthorityCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ChangeCertificateAuthorityCompartment.ts.html |here} to see how to use ChangeCertificateAuthorityCompartment API.
       */
    changeCertificateAuthorityCompartment(changeCertificateAuthorityCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#changeCertificateAuthorityCompartment.");
            const operationName = "changeCertificateAuthorityCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthority/ChangeCertificateAuthorityCompartment";
            const pathParams = {
                "{certificateAuthorityId}": changeCertificateAuthorityCompartmentRequest.certificateAuthorityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeCertificateAuthorityCompartmentRequest.ifMatch,
                "opc-request-id": changeCertificateAuthorityCompartmentRequest.opcRequestId,
                "opc-retry-token": changeCertificateAuthorityCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeCertificateAuthorityCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities/{certificateAuthorityId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeCertificateAuthorityCompartmentRequest.changeCertificateAuthorityCompartmentDetails, "ChangeCertificateAuthorityCompartmentDetails", model.ChangeCertificateAuthorityCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves a certificate to a different compartment within the same tenancy. For information about
  * moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When provided, if-match is checked against the ETag values of the secret.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ChangeCertificateCompartmentRequest
       * @return ChangeCertificateCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ChangeCertificateCompartment.ts.html |here} to see how to use ChangeCertificateCompartment API.
       */
    changeCertificateCompartment(changeCertificateCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#changeCertificateCompartment.");
            const operationName = "changeCertificateCompartment";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/Certificate/ChangeCertificateCompartment";
            const pathParams = {
                "{certificateId}": changeCertificateCompartmentRequest.certificateId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeCertificateCompartmentRequest.ifMatch,
                "opc-request-id": changeCertificateCompartmentRequest.opcRequestId,
                "opc-retry-token": changeCertificateCompartmentRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeCertificateCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates/{certificateId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeCertificateCompartmentRequest.changeCertificateCompartmentDetails, "ChangeCertificateCompartmentDetails", model.ChangeCertificateCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new CA bundle according to the details of the request.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateCaBundleRequest
     * @return CreateCaBundleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/CreateCaBundle.ts.html |here} to see how to use CreateCaBundle API.
     */
    createCaBundle(createCaBundleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#createCaBundle.");
            const operationName = "createCaBundle";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CaBundle/CreateCaBundle";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createCaBundleRequest.opcRequestId,
                "opc-retry-token": createCaBundleRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createCaBundleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/caBundles",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCaBundleRequest.createCaBundleDetails, "CreateCaBundleDetails", model.CreateCaBundleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "caBundle",
                    bodyModel: model.CaBundle,
                    type: "model.CaBundle",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new certificate according to the details of the request.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateCertificateRequest
     * @return CreateCertificateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/CreateCertificate.ts.html |here} to see how to use CreateCertificate API.
     */
    createCertificate(createCertificateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#createCertificate.");
            const operationName = "createCertificate";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/Certificate/CreateCertificate";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createCertificateRequest.opcRequestId,
                "opc-retry-token": createCertificateRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createCertificateRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCertificateRequest.createCertificateDetails, "CreateCertificateDetails", model.CreateCertificateDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificate",
                    bodyModel: model.Certificate,
                    type: "model.Certificate",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new certificate authority (CA) according to the details of the request.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateCertificateAuthorityRequest
     * @return CreateCertificateAuthorityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/CreateCertificateAuthority.ts.html |here} to see how to use CreateCertificateAuthority API.
     */
    createCertificateAuthority(createCertificateAuthorityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#createCertificateAuthority.");
            const operationName = "createCertificateAuthority";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthority/CreateCertificateAuthority";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createCertificateAuthorityRequest.opcRequestId,
                "opc-retry-token": createCertificateAuthorityRequest.opcRetryToken
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createCertificateAuthorityRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCertificateAuthorityRequest.createCertificateAuthorityDetails, "CreateCertificateAuthorityDetails", model.CreateCertificateAuthorityDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificateAuthority",
                    bodyModel: model.CertificateAuthority,
                    type: "model.CertificateAuthority",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified CA bundle.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteCaBundleRequest
     * @return DeleteCaBundleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/DeleteCaBundle.ts.html |here} to see how to use DeleteCaBundle API.
     */
    deleteCaBundle(deleteCaBundleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#deleteCaBundle.");
            const operationName = "deleteCaBundle";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CaBundle/DeleteCaBundle";
            const pathParams = {
                "{caBundleId}": deleteCaBundleRequest.caBundleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteCaBundleRequest.opcRequestId,
                "if-match": deleteCaBundleRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteCaBundleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/caBundles/{caBundleId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details about the specified association.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetAssociationRequest
     * @return GetAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/GetAssociation.ts.html |here} to see how to use GetAssociation API.
     */
    getAssociation(getAssociationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#getAssociation.");
            const operationName = "getAssociation";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/Association/GetAssociation";
            const pathParams = {
                "{associationId}": getAssociationRequest.associationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAssociationRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getAssociationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/associations/{associationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "association",
                    bodyModel: model.Association,
                    type: "model.Association",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details about the specified CA bundle.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetCaBundleRequest
     * @return GetCaBundleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/GetCaBundle.ts.html |here} to see how to use GetCaBundle API.
     */
    getCaBundle(getCaBundleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#getCaBundle.");
            const operationName = "getCaBundle";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CaBundle/GetCaBundle";
            const pathParams = {
                "{caBundleId}": getCaBundleRequest.caBundleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCaBundleRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCaBundleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/caBundles/{caBundleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "caBundle",
                    bodyModel: model.CaBundle,
                    type: "model.CaBundle",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details about the specified certificate.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetCertificateRequest
     * @return GetCertificateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/GetCertificate.ts.html |here} to see how to use GetCertificate API.
     */
    getCertificate(getCertificateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#getCertificate.");
            const operationName = "getCertificate";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/Certificate/GetCertificate";
            const pathParams = {
                "{certificateId}": getCertificateRequest.certificateId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCertificateRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCertificateRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates/{certificateId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificate",
                    bodyModel: model.Certificate,
                    type: "model.Certificate",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details about the specified certificate authority (CA).
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetCertificateAuthorityRequest
     * @return GetCertificateAuthorityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/GetCertificateAuthority.ts.html |here} to see how to use GetCertificateAuthority API.
     */
    getCertificateAuthority(getCertificateAuthorityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#getCertificateAuthority.");
            const operationName = "getCertificateAuthority";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthority/GetCertificateAuthority";
            const pathParams = {
                "{certificateAuthorityId}": getCertificateAuthorityRequest.certificateAuthorityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCertificateAuthorityRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCertificateAuthorityRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities/{certificateAuthorityId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificateAuthority",
                    bodyModel: model.CertificateAuthority,
                    type: "model.CertificateAuthority",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details about the specified certificate authority (CA) version.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetCertificateAuthorityVersionRequest
     * @return GetCertificateAuthorityVersionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/GetCertificateAuthorityVersion.ts.html |here} to see how to use GetCertificateAuthorityVersion API.
     */
    getCertificateAuthorityVersion(getCertificateAuthorityVersionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#getCertificateAuthorityVersion.");
            const operationName = "getCertificateAuthorityVersion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthorityVersion/GetCertificateAuthorityVersion";
            const pathParams = {
                "{certificateAuthorityId}": getCertificateAuthorityVersionRequest.certificateAuthorityId,
                "{certificateAuthorityVersionNumber}": getCertificateAuthorityVersionRequest.certificateAuthorityVersionNumber
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCertificateAuthorityVersionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCertificateAuthorityVersionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities/{certificateAuthorityId}/version/{certificateAuthorityVersionNumber}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificateAuthorityVersion",
                    bodyModel: model.CertificateAuthorityVersion,
                    type: "model.CertificateAuthorityVersion",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details about the specified version of a certificate.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetCertificateVersionRequest
     * @return GetCertificateVersionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/GetCertificateVersion.ts.html |here} to see how to use GetCertificateVersion API.
     */
    getCertificateVersion(getCertificateVersionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#getCertificateVersion.");
            const operationName = "getCertificateVersion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateVersion/GetCertificateVersion";
            const pathParams = {
                "{certificateId}": getCertificateVersionRequest.certificateId,
                "{certificateVersionNumber}": getCertificateVersionRequest.certificateVersionNumber
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCertificateVersionRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getCertificateVersionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates/{certificateId}/version/{certificateVersionNumber}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificateVersion",
                    bodyModel: model.CertificateVersion,
                    type: "model.CertificateVersion",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all associations that match the query parameters.
     * Optionally, you can use the parameter `FilterByAssociationIdQueryParam` to limit the result set to a single item that matches the specified association.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAssociationsRequest
     * @return ListAssociationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ListAssociations.ts.html |here} to see how to use ListAssociations API.
     */
    listAssociations(listAssociationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#listAssociations.");
            const operationName = "listAssociations";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/AssociationSummary/ListAssociations";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAssociationsRequest.compartmentId,
                "certificatesResourceId": listAssociationsRequest.certificatesResourceId,
                "associatedResourceId": listAssociationsRequest.associatedResourceId,
                "associationId": listAssociationsRequest.associationId,
                "name": listAssociationsRequest.name,
                "sortBy": listAssociationsRequest.sortBy,
                "sortOrder": listAssociationsRequest.sortOrder,
                "limit": listAssociationsRequest.limit,
                "page": listAssociationsRequest.page,
                "associationType": listAssociationsRequest.associationType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAssociationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listAssociationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/associations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "associationCollection",
                    bodyModel: model.AssociationCollection,
                    type: "model.AssociationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all CA bundles that match the query parameters.
     * Optionally, you can use the parameter `FilterByCaBundleIdQueryParam` to limit the result set to a single item that matches the specified CA bundle.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListCaBundlesRequest
     * @return ListCaBundlesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ListCaBundles.ts.html |here} to see how to use ListCaBundles API.
     */
    listCaBundles(listCaBundlesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#listCaBundles.");
            const operationName = "listCaBundles";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CaBundleSummary/ListCaBundles";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCaBundlesRequest.compartmentId,
                "lifecycleState": listCaBundlesRequest.lifecycleState,
                "name": listCaBundlesRequest.name,
                "sortBy": listCaBundlesRequest.sortBy,
                "sortOrder": listCaBundlesRequest.sortOrder,
                "limit": listCaBundlesRequest.limit,
                "page": listCaBundlesRequest.page,
                "caBundleId": listCaBundlesRequest.caBundleId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCaBundlesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCaBundlesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/caBundles",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "caBundleCollection",
                    bodyModel: model.CaBundleCollection,
                    type: "model.CaBundleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all certificate authorities (CAs) in the specified compartment.
     * Optionally, you can use the parameter `FilterByCertificateAuthorityIdQueryParam` to limit the results to a single item that matches the specified CA.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListCertificateAuthoritiesRequest
     * @return ListCertificateAuthoritiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ListCertificateAuthorities.ts.html |here} to see how to use ListCertificateAuthorities API.
     */
    listCertificateAuthorities(listCertificateAuthoritiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#listCertificateAuthorities.");
            const operationName = "listCertificateAuthorities";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthoritySummary/ListCertificateAuthorities";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCertificateAuthoritiesRequest.compartmentId,
                "lifecycleState": listCertificateAuthoritiesRequest.lifecycleState,
                "name": listCertificateAuthoritiesRequest.name,
                "issuerCertificateAuthorityId": listCertificateAuthoritiesRequest.issuerCertificateAuthorityId,
                "certificateAuthorityId": listCertificateAuthoritiesRequest.certificateAuthorityId,
                "sortBy": listCertificateAuthoritiesRequest.sortBy,
                "sortOrder": listCertificateAuthoritiesRequest.sortOrder,
                "limit": listCertificateAuthoritiesRequest.limit,
                "page": listCertificateAuthoritiesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCertificateAuthoritiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCertificateAuthoritiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificateAuthorityCollection",
                    bodyModel: model.CertificateAuthorityCollection,
                    type: "model.CertificateAuthorityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all versions for the specified certificate authority (CA).
     * Optionally, you can use the parameter `FilterByVersionNumberQueryParam` to limit the results to a single item that matches the specified version number.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListCertificateAuthorityVersionsRequest
     * @return ListCertificateAuthorityVersionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ListCertificateAuthorityVersions.ts.html |here} to see how to use ListCertificateAuthorityVersions API.
     */
    listCertificateAuthorityVersions(listCertificateAuthorityVersionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#listCertificateAuthorityVersions.");
            const operationName = "listCertificateAuthorityVersions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthorityVersionSummary/ListCertificateAuthorityVersions";
            const pathParams = {
                "{certificateAuthorityId}": listCertificateAuthorityVersionsRequest.certificateAuthorityId
            };
            const queryParams = {
                "versionNumber": listCertificateAuthorityVersionsRequest.versionNumber,
                "limit": listCertificateAuthorityVersionsRequest.limit,
                "page": listCertificateAuthorityVersionsRequest.page,
                "sortBy": listCertificateAuthorityVersionsRequest.sortBy,
                "sortOrder": listCertificateAuthorityVersionsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCertificateAuthorityVersionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCertificateAuthorityVersionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities/{certificateAuthorityId}/versions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificateAuthorityVersionCollection",
                    bodyModel: model.CertificateAuthorityVersionCollection,
                    type: "model.CertificateAuthorityVersionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all certificate versions for the specified certificate.
     * Optionally, you can use the parameter `FilterByVersionNumberQueryParam` to limit the result set to a single item that matches the specified version number.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListCertificateVersionsRequest
     * @return ListCertificateVersionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ListCertificateVersions.ts.html |here} to see how to use ListCertificateVersions API.
     */
    listCertificateVersions(listCertificateVersionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#listCertificateVersions.");
            const operationName = "listCertificateVersions";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateVersionSummary/ListCertificateVersions";
            const pathParams = {
                "{certificateId}": listCertificateVersionsRequest.certificateId
            };
            const queryParams = {
                "versionNumber": listCertificateVersionsRequest.versionNumber,
                "limit": listCertificateVersionsRequest.limit,
                "page": listCertificateVersionsRequest.page,
                "sortBy": listCertificateVersionsRequest.sortBy,
                "sortOrder": listCertificateVersionsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCertificateVersionsRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCertificateVersionsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates/{certificateId}/versions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificateVersionCollection",
                    bodyModel: model.CertificateVersionCollection,
                    type: "model.CertificateVersionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all certificates that match the query parameters.
     * Optionally, you can use the parameter `FilterByCertificateIdQueryParam` to limit the result set to a single item that matches the specified certificate.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListCertificatesRequest
     * @return ListCertificatesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ListCertificates.ts.html |here} to see how to use ListCertificates API.
     */
    listCertificates(listCertificatesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#listCertificates.");
            const operationName = "listCertificates";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateSummary/ListCertificates";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCertificatesRequest.compartmentId,
                "lifecycleState": listCertificatesRequest.lifecycleState,
                "name": listCertificatesRequest.name,
                "sortBy": listCertificatesRequest.sortBy,
                "sortOrder": listCertificatesRequest.sortOrder,
                "limit": listCertificatesRequest.limit,
                "page": listCertificatesRequest.page,
                "issuerCertificateAuthorityId": listCertificatesRequest.issuerCertificateAuthorityId,
                "certificateId": listCertificatesRequest.certificateId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCertificatesRequest.opcRequestId
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listCertificatesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificateCollection",
                    bodyModel: model.CertificateCollection,
                    type: "model.CertificateCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Revokes a certificate authority (CA) version.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RevokeCertificateAuthorityVersionRequest
     * @return RevokeCertificateAuthorityVersionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/RevokeCertificateAuthorityVersion.ts.html |here} to see how to use RevokeCertificateAuthorityVersion API.
     */
    revokeCertificateAuthorityVersion(revokeCertificateAuthorityVersionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#revokeCertificateAuthorityVersion.");
            const operationName = "revokeCertificateAuthorityVersion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthorityVersion/RevokeCertificateAuthorityVersion";
            const pathParams = {
                "{certificateAuthorityId}": revokeCertificateAuthorityVersionRequest.certificateAuthorityId,
                "{certificateAuthorityVersionNumber}": revokeCertificateAuthorityVersionRequest.certificateAuthorityVersionNumber
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": revokeCertificateAuthorityVersionRequest.opcRequestId,
                "opc-retry-token": revokeCertificateAuthorityVersionRequest.opcRetryToken,
                "if-match": revokeCertificateAuthorityVersionRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, revokeCertificateAuthorityVersionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities/{certificateAuthorityId}/version/{certificateAuthorityVersionNumber}/actions/revoke",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(revokeCertificateAuthorityVersionRequest.revokeCertificateAuthorityVersionDetails, "RevokeCertificateAuthorityVersionDetails", model.RevokeCertificateAuthorityVersionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Revokes the specified certificate version.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RevokeCertificateVersionRequest
     * @return RevokeCertificateVersionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/RevokeCertificateVersion.ts.html |here} to see how to use RevokeCertificateVersion API.
     */
    revokeCertificateVersion(revokeCertificateVersionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#revokeCertificateVersion.");
            const operationName = "revokeCertificateVersion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateVersion/RevokeCertificateVersion";
            const pathParams = {
                "{certificateId}": revokeCertificateVersionRequest.certificateId,
                "{certificateVersionNumber}": revokeCertificateVersionRequest.certificateVersionNumber
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": revokeCertificateVersionRequest.opcRequestId,
                "opc-retry-token": revokeCertificateVersionRequest.opcRetryToken,
                "if-match": revokeCertificateVersionRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, revokeCertificateVersionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates/{certificateId}/version/{certificateVersionNumber}/actions/revoke",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(revokeCertificateVersionRequest.revokeCertificateVersionDetails, "RevokeCertificateVersionDetails", model.RevokeCertificateVersionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Schedules the deletion of the specified certificate authority (CA). This sets the lifecycle state of the CA to `PENDING_DELETION` and then deletes it after the specified retention period ends. If needed, you can determine the status of the deletion by using `GetCertificateAuthority`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ScheduleCertificateAuthorityDeletionRequest
     * @return ScheduleCertificateAuthorityDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ScheduleCertificateAuthorityDeletion.ts.html |here} to see how to use ScheduleCertificateAuthorityDeletion API.
     */
    scheduleCertificateAuthorityDeletion(scheduleCertificateAuthorityDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#scheduleCertificateAuthorityDeletion.");
            const operationName = "scheduleCertificateAuthorityDeletion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthority/ScheduleCertificateAuthorityDeletion";
            const pathParams = {
                "{certificateAuthorityId}": scheduleCertificateAuthorityDeletionRequest.certificateAuthorityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": scheduleCertificateAuthorityDeletionRequest.opcRequestId,
                "if-match": scheduleCertificateAuthorityDeletionRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, scheduleCertificateAuthorityDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities/{certificateAuthorityId}/actions/scheduleDeletion",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(scheduleCertificateAuthorityDeletionRequest.scheduleCertificateAuthorityDeletionDetails, "ScheduleCertificateAuthorityDeletionDetails", model.ScheduleCertificateAuthorityDeletionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Schedules the deletion of the specified certificate authority (CA) version.
     * This sets the lifecycle state of the CA version to `PENDING_DELETION`
     * and then deletes it after the specified retention period ends. If needed, you can determine the status of the deletion by using `GetCertificateAuthorityVersion`.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ScheduleCertificateAuthorityVersionDeletionRequest
     * @return ScheduleCertificateAuthorityVersionDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ScheduleCertificateAuthorityVersionDeletion.ts.html |here} to see how to use ScheduleCertificateAuthorityVersionDeletion API.
     */
    scheduleCertificateAuthorityVersionDeletion(scheduleCertificateAuthorityVersionDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#scheduleCertificateAuthorityVersionDeletion.");
            const operationName = "scheduleCertificateAuthorityVersionDeletion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthorityVersion/ScheduleCertificateAuthorityVersionDeletion";
            const pathParams = {
                "{certificateAuthorityId}": scheduleCertificateAuthorityVersionDeletionRequest.certificateAuthorityId,
                "{certificateAuthorityVersionNumber}": scheduleCertificateAuthorityVersionDeletionRequest.certificateAuthorityVersionNumber
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": scheduleCertificateAuthorityVersionDeletionRequest.opcRequestId,
                "if-match": scheduleCertificateAuthorityVersionDeletionRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, scheduleCertificateAuthorityVersionDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities/{certificateAuthorityId}/version/{certificateAuthorityVersionNumber}/actions/scheduleDeletion",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(scheduleCertificateAuthorityVersionDeletionRequest.scheduleCertificateAuthorityVersionDeletionDetails, "ScheduleCertificateAuthorityVersionDeletionDetails", model.ScheduleCertificateAuthorityVersionDeletionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Schedules the deletion of the specified certificate. This sets the lifecycle state of the certificate
     * to `PENDING_DELETION` and then deletes it after the specified retention period ends.
     * You can subsequently use `GetCertificate` to determine the current deletion status.
     *
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ScheduleCertificateDeletionRequest
     * @return ScheduleCertificateDeletionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ScheduleCertificateDeletion.ts.html |here} to see how to use ScheduleCertificateDeletion API.
     */
    scheduleCertificateDeletion(scheduleCertificateDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#scheduleCertificateDeletion.");
            const operationName = "scheduleCertificateDeletion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/Certificate/ScheduleCertificateDeletion";
            const pathParams = {
                "{certificateId}": scheduleCertificateDeletionRequest.certificateId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": scheduleCertificateDeletionRequest.opcRequestId,
                "if-match": scheduleCertificateDeletionRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, scheduleCertificateDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates/{certificateId}/actions/scheduleDeletion",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(scheduleCertificateDeletionRequest.scheduleCertificateDeletionDetails, "ScheduleCertificateDeletionDetails", model.ScheduleCertificateDeletionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Schedules the deletion of the specified certificate version. This sets the lifecycle state of the certificate version to `PENDING_DELETION` and then deletes it after the specified retention period ends. You can only
  * delete a certificate version if the certificate version rotation state is marked as `DEPRECATED`.
  * <p>
  You can subsequently use `GetCertificateVersion` to determine the current certificate version deletion status.
  *
       * This operation does not retry by default if the user has not defined a retry configuration.
       * @param ScheduleCertificateVersionDeletionRequest
       * @return ScheduleCertificateVersionDeletionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/ScheduleCertificateVersionDeletion.ts.html |here} to see how to use ScheduleCertificateVersionDeletion API.
       */
    scheduleCertificateVersionDeletion(scheduleCertificateVersionDeletionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#scheduleCertificateVersionDeletion.");
            const operationName = "scheduleCertificateVersionDeletion";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateVersion/ScheduleCertificateVersionDeletion";
            const pathParams = {
                "{certificateId}": scheduleCertificateVersionDeletionRequest.certificateId,
                "{certificateVersionNumber}": scheduleCertificateVersionDeletionRequest.certificateVersionNumber
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": scheduleCertificateVersionDeletionRequest.opcRequestId,
                "if-match": scheduleCertificateVersionDeletionRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, scheduleCertificateVersionDeletionRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates/{certificateId}/version/{certificateVersionNumber}/actions/scheduleDeletion",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(scheduleCertificateVersionDeletionRequest.scheduleCertificateVersionDeletionDetails, "ScheduleCertificateVersionDeletionDetails", model.ScheduleCertificateVersionDeletionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the properties of a CA bundle.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateCaBundleRequest
     * @return UpdateCaBundleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/UpdateCaBundle.ts.html |here} to see how to use UpdateCaBundle API.
     */
    updateCaBundle(updateCaBundleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#updateCaBundle.");
            const operationName = "updateCaBundle";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CaBundle/UpdateCaBundle";
            const pathParams = {
                "{caBundleId}": updateCaBundleRequest.caBundleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateCaBundleRequest.opcRequestId,
                "if-match": updateCaBundleRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateCaBundleRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/caBundles/{caBundleId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCaBundleRequest.updateCaBundleDetails, "UpdateCaBundleDetails", model.UpdateCaBundleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "caBundle",
                    bodyModel: model.CaBundle,
                    type: "model.CaBundle",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the properties of a certificate.
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateCertificateRequest
     * @return UpdateCertificateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/UpdateCertificate.ts.html |here} to see how to use UpdateCertificate API.
     */
    updateCertificate(updateCertificateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#updateCertificate.");
            const operationName = "updateCertificate";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/Certificate/UpdateCertificate";
            const pathParams = {
                "{certificateId}": updateCertificateRequest.certificateId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateCertificateRequest.opcRequestId,
                "if-match": updateCertificateRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateCertificateRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificates/{certificateId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCertificateRequest.updateCertificateDetails, "UpdateCertificateDetails", model.UpdateCertificateDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificate",
                    bodyModel: model.Certificate,
                    type: "model.Certificate",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the properties of the specified certificate authority (CA).
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateCertificateAuthorityRequest
     * @return UpdateCertificateAuthorityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/certificatesmanagement/UpdateCertificateAuthority.ts.html |here} to see how to use UpdateCertificateAuthority API.
     */
    updateCertificateAuthority(updateCertificateAuthorityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CertificatesManagementClient#updateCertificateAuthority.");
            const operationName = "updateCertificateAuthority";
            const apiReferenceLink = "https://docs.oracle.com/iaas/api/#/en/certificatesmgmt/20210224/CertificateAuthority/UpdateCertificateAuthority";
            const pathParams = {
                "{certificateAuthorityId}": updateCertificateAuthorityRequest.certificateAuthorityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateCertificateAuthorityRequest.opcRequestId,
                "if-match": updateCertificateAuthorityRequest.ifMatch
            };
            const specRetryConfiguration = common.NoRetryConfigurationDetails;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateCertificateAuthorityRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/certificateAuthorities/{certificateAuthorityId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCertificateAuthorityRequest.updateCertificateAuthorityDetails, "UpdateCertificateAuthorityDetails", model.UpdateCertificateAuthorityDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "certificateAuthority",
                    bodyModel: model.CertificateAuthority,
                    type: "model.CertificateAuthority",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.CertificatesManagementClient = CertificatesManagementClient;
CertificatesManagementClient.serviceEndpointTemplate = "https://certificatesmanagement.{region}.oci.{secondLevelDomain}";
CertificatesManagementClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map