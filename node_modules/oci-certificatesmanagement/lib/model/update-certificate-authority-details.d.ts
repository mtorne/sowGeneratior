/**
 * Certificates Service Management API
 * API for managing certificates.
 * OpenAPI spec version: 20210224
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The details for updating a certificate authority (CA).
 */
export interface UpdateCertificateAuthorityDetails {
    /**
     * A brief description of the CA.
     */
    "description"?: string;
    /**
     * Makes this version the current version. This property cannot be updated in combination with any other properties. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "currentVersionNumber"?: number;
    "certificateAuthorityConfig"?: model.UpdateSubordinateCaIssuedByInternalCaConfigDetails | model.UpdateRootCaByGeneratingInternallyConfigDetails;
    "certificateRevocationListDetails"?: model.CertificateRevocationListDetails;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Usage of predefined tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    /**
     * A list of rules that control how the CA is used and managed.
     */
    "certificateAuthorityRules"?: Array<model.CertificateAuthorityRule>;
}
export declare namespace UpdateCertificateAuthorityDetails {
    function getJsonObj(obj: UpdateCertificateAuthorityDetails): object;
    function getDeserializedJsonObj(obj: UpdateCertificateAuthorityDetails): object;
}
