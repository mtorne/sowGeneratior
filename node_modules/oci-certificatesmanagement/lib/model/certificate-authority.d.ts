/**
 * Certificates Service Management API
 * API for managing certificates.
 * OpenAPI spec version: 20210224
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2025, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * The metadata details of the certificate authority (CA). This object does not contain the CA contents.
 */
export interface CertificateAuthority {
    /**
     * The OCID of the CA.
     */
    "id": string;
    /**
     * The OCID of the parent CA that issued this CA. If this is the root CA, then this value is null.
     *
     */
    "issuerCertificateAuthorityId"?: string;
    /**
     * A user-friendly name for the CA. Names are unique within a compartment. Avoid entering confidential information. Valid characters include uppercase or lowercase letters, numbers, hyphens, underscores, and periods.
     */
    "name": string;
    /**
     * A brief description of the CA.
     */
    "description"?: string;
    /**
     * A property indicating when the CA was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
     * Example: {@code 2019-04-03T21:10:29.600Z}
     *
     */
    "timeCreated": Date;
    /**
     * An optional property indicating when to delete the CA version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
     * Example: {@code 2019-04-03T21:10:29.600Z}
     *
     */
    "timeOfDeletion"?: Date;
    /**
     * The OCID of the Oracle Cloud Infrastructure Vault key used to encrypt the CA.
     */
    "kmsKeyId"?: string;
    /**
     * The current lifecycle state of the certificate authority.
     */
    "lifecycleState": model.CertificateAuthorityLifecycleState;
    /**
     * Additional information about the current CA lifecycle state.
     */
    "lifecycleDetails"?: string;
    /**
     * The OCID of the compartment under which the CA is created.
     */
    "compartmentId": string;
    /**
     * An optional list of rules that control how the CA is used and managed.
     */
    "certificateAuthorityRules"?: Array<model.CertificateAuthorityRule>;
    "currentVersion"?: model.CertificateAuthorityVersionSummary;
    "certificateRevocationListDetails"?: model.CertificateRevocationListDetails;
    /**
     * The origin of the CA.
     */
    "configType": model.CertificateAuthorityConfigType;
    "subject"?: model.CertificateSubject;
    /**
     * The algorithm used to sign public key certificates that the CA issues.
     */
    "signingAlgorithm"?: model.SignatureAlgorithm;
    /**
     * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
     * Example: {@code {\"bar-key\": \"value\"}}
     *
     */
    "freeformTags"?: {
        [key: string]: string;
    };
    /**
     * Usage of predefined tag keys. These predefined keys are scoped to namespaces.
     * Example: {@code {\"foo-namespace\": {\"bar-key\": \"value\"}}}
     *
     */
    "definedTags"?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
export declare namespace CertificateAuthority {
    function getJsonObj(obj: CertificateAuthority): object;
    function getDeserializedJsonObj(obj: CertificateAuthority): object;
}
